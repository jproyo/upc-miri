strict digraph deps {
"_" [style=solid];
"_ANCHOR_PREFIX_" [style=solid];
"_MINIMUM_INDENTATION_FOR_BLOCKQUOTES_IN_MM_" [style=solid];
"_MINIMUM_INDENTATION_FOR_BLOCKQUOTES_IN_PERCENT_" [style=solid];
"__eq" [style=solid];
"__index" [style=solid];
"__le" [style=solid];
"__len" [style=solid];
"__lt" [style=solid];
"__pairs" [style=solid];
"__tostring" [style=solid];
"a" [style=solid];
"abbrevKey" [style=solid];
"absNumElemToAbsNum" [style=solid];
"accent" [style=solid];
"accents" [style=solid];
"activeTodoMarkers" [style=solid];
"activeTodoSequences" [style=solid];
"addAttachment" [style=solid];
"addAttrDiv" [style=solid];
"addAttrs" [style=solid];
"addAuthorAndDate" [style=solid];
"addBlock" [style=solid];
"addContextToException" [style=solid];
"addField" [style=solid];
"addFunction" [style=solid];
"addHash" [style=solid];
"addIdentifiers" [style=solid];
"addImageCaption" [style=solid];
"addLang" [style=solid];
"addLinkFormatter" [style=solid];
"addList" [style=solid];
"addLogMessage" [style=solid];
"addMarkdownAttribute" [style=solid];
"addMathInfo" [style=solid];
"addMeta" [style=solid];
"addMetaField" [style=solid];
"addMetadataFromElement" [style=solid];
"addMetadataFromXML" [style=solid];
"addNewRole" [style=solid];
"addNote" [style=solid];
"addParaStyle" [style=solid];
"addPrefix" [style=solid];
"addQed" [style=solid];
"addRoleToLink" [style=solid];
"addSpaceAfterPeriod" [style=solid];
"addSpeakerNotesToMetaSlide" [style=solid];
"addStyle" [style=solid];
"addSuffix" [style=solid];
"addTableCaption" [style=solid];
"addTableStyle" [style=solid];
"addTextStyle" [style=solid];
"addTextStyleAttr" [style=solid];
"addTitle" [style=solid];
"addToFileTree" [style=solid];
"addToNotesTable" [style=solid];
"addToStart" [style=solid];
"addUnderscores" [style=solid];
"addValue" [style=solid];
"addVariablesToContext" [style=solid];
"adjustImagePath" [style=solid];
"adjustMetadata" [style=solid];
"adjustNumbers" [style=solid];
"adjustSpans" [style=solid];
"admonitionTags" [style=solid];
"afterEmphasisPreChar" [style=solid];
"alertIndent" [style=solid];
"alignAttrib" [style=solid];
"alignCenterName" [style=solid];
"alignLeftName" [style=solid];
"alignRightName" [style=solid];
"alignToConTeXt" [style=solid];
"alignType" [style=solid];
"alignedBlock" [style=solid];
"alignmentAttrib" [style=solid];
"alignmentToString" [style=solid];
"alignmentToText" [style=solid];
"allowPara" [style=solid];
"allowsMathEnvironments" [style=solid];
"alltt" [style=solid];
"alterStr" [style=solid];
"alternative" [style=solid];
"alwaysInheritedPatterns" [style=solid];
"amp" [style=solid];
"amuseHeadingUntil" [style=solid];
"amuseNoteBlockUntil" [style=solid];
"anchor" [style=solid];
"anchorDef" [style=solid];
"and2" [style=solid];
"and3" [style=solid];
"and4" [style=solid];
"and5" [style=solid];
"and6" [style=solid];
"angleLink" [style=solid];
"annotateBodySection" [style=solid];
"annotateHeaderSection" [style=solid];
"annotateMML" [style=solid];
"annotateRowSection" [style=solid];
"annotateTable" [style=solid];
"annotateTableBody" [style=solid];
"annotateTableFoot" [style=solid];
"annotateTableHead" [style=solid];
"anonymousKey" [style=solid];
"anyChar\'" [style=solid];
"anyControlSeq" [style=solid];
"anyLine" [style=solid];
"anyLineNewline" [style=solid];
"anyList" [style=solid];
"anyListAtDepth" [style=solid];
"anyListItem" [style=solid];
"anyListStart" [style=solid];
"anyListUntil" [style=solid];
"anyOrderedListMarker" [style=solid];
"anySymbol" [style=solid];
"anyTok" [style=solid];
"anyWereDigitLike" [style=solid];
"apostrophe" [style=solid];
"apply" [style=solid];
"applyCustomLinkFormat" [style=solid];
"applyDefaults" [style=solid];
"applyFilters" [style=solid];
"applyMacros" [style=solid];
"applyToLayout" [style=solid];
"applyToParagraph" [style=solid];
"applyToShape" [style=solid];
"applyToSlide" [style=solid];
"applyTokStyToRunProps" [style=solid];
"applyTransforms" [style=solid];
"archiveToComments" [style=solid];
"archiveToDocument" [style=solid];
"archiveToDocx" [style=solid];
"archiveToDocxWithWarnings" [style=solid];
"archiveToEPUB" [style=solid];
"archiveToNotes" [style=solid];
"archiveToNumbering" [style=solid];
"archiveToNumbering\'" [style=solid];
"archiveToOdt" [style=solid];
"archiveToRelationships" [style=solid];
"archiveToStyles" [style=solid];
"archiveToStyles\'" [style=solid];
"archivedHeadlineToBlocks" [style=solid];
"archivedTreeSetting" [style=solid];
"argspecArg" [style=solid];
"argspecPattern" [style=solid];
"asHtml" [style=solid];
"asList" [style=solid];
"asMarkdown" [style=solid];
"asciiMap" [style=solid];
"askF" [style=solid];
"asksF" [style=solid];
"asterisks" [style=solid];
"atStart" [style=solid];
"attr" [style=solid];
"attrFromBlockAttributes" [style=solid];
"attrHtml" [style=solid];
"attrToMap" [style=solid];
"attrToNSPair" [style=solid];
"attrToPair" [style=solid];
"attrValue" [style=solid];
"attribute" [style=solid];
"attributeList" [style=solid];
"attributes" [style=solid];
"attrsToHtml" [style=solid];
"attrsToMarkdown" [style=solid];
"atxChar" [style=solid];
"atxClosing" [style=solid];
"atxHeader" [style=solid];
"author" [style=solid];
"authorToDocbook" [style=solid];
"authorline" [style=solid];
"authors" [style=solid];
"authorsLine" [style=solid];
"autoEmail" [style=solid];
"autoLink" [style=solid];
"autoNumAttrs" [style=solid];
"autoURI" [style=solid];
"avoidBadWrapsInList" [style=solid];
"babelLangToBCP47" [style=solid];
"babelResultsBlock" [style=solid];
"backSlashLineBreaks" [style=solid];
"backslash" [style=solid];
"backslashEscapes" [style=solid];
"balancedTitle" [style=solid];
"bareIP" [style=solid];
"bareURL" [style=solid];
"bareloc" [style=solid];
"baseListId" [style=solid];
"baseWriterName" [style=solid];
"basicDLStart" [style=solid];
"bcp47LangToIETF" [style=solid];
"beginOrEndCommand" [style=solid];
"begin_" [style=solid];
"beginsWithName" [style=solid];
"beginsWithOrderedListMarker" [style=solid];
"berkeleyBareTag" [style=solid];
"berkeleyBareTag\'" [style=solid];
"berkeleyCitationList" [style=solid];
"berkeleyCite" [style=solid];
"berkeleyParensTag" [style=solid];
"berkeleyTextualCite" [style=solid];
"between" [style=solid];
"bgroup" [style=solid];
"bib" [style=solid];
"bibComment" [style=solid];
"bibEntries" [style=solid];
"bibItem" [style=solid];
"bibPreamble" [style=solid];
"bibSkip" [style=solid];
"bibString" [style=solid];
"biblatexLocalizations" [style=solid];
"biblatexStringMap" [style=solid];
"biblioTag" [style=solid];
"birdCodeBlock" [style=solid];
"birdTrackLine" [style=solid];
"blacklistedCharStyles" [style=solid];
"blankLineBlockLine" [style=solid];
"blankline" [style=solid];
"blanklines" [style=solid];
"blanklines\'" [style=solid];
"block" [style=solid];
"blockAttributes" [style=solid];
"blockCode" [style=solid];
"blockCommand" [style=solid];
"blockCommands" [style=solid];
"blockDelimiter" [style=solid];
"blockDocBookTags" [style=solid];
"blockElementNames" [style=solid];
"blockElements" [style=solid];
"blockFile" [style=solid];
"blockHtml" [style=solid];
"blockHtmlTags" [style=solid];
"blockList" [style=solid];
"blockListToAsciiDoc" [style=solid];
"blockListToConTeXt" [style=solid];
"blockListToCustom" [style=solid];
"blockListToDokuWiki" [style=solid];
"blockListToHaddock" [style=solid];
"blockListToHtml" [style=solid];
"blockListToJira" [style=solid];
"blockListToLaTeX" [style=solid];
"blockListToMan" [style=solid];
"blockListToMarkdown" [style=solid];
"blockListToMediaWiki" [style=solid];
"blockListToMs" [style=solid];
"blockListToMuse" [style=solid];
"blockListToNote" [style=solid];
"blockListToOrg" [style=solid];
"blockListToRST" [style=solid];
"blockListToRST\'" [style=solid];
"blockListToTexinfo" [style=solid];
"blockListToTextile" [style=solid];
"blockListToXWiki" [style=solid];
"blockListToZimWiki" [style=solid];
"blockML" [style=solid];
"blockMarkupArea" [style=solid];
"blockMarkupLine" [style=solid];
"blockOption" [style=solid];
"blockParsers" [style=solid];
"blockPhp" [style=solid];
"blockQuote" [style=solid];
"blockQuoteName" [style=solid];
"blockQuoteSize" [style=solid];
"blockTag" [style=solid];
"blockTags" [style=solid];
"blockToAsciiDoc" [style=solid];
"blockToConTeXt" [style=solid];
"blockToCustom" [style=solid];
"blockToDocbook" [style=solid];
"blockToDokuWiki" [style=solid];
"blockToHaddock" [style=solid];
"blockToHtml" [style=solid];
"blockToICML" [style=solid];
"blockToInlines" [style=solid];
"blockToJATS" [style=solid];
"blockToLaTeX" [style=solid];
"blockToMan" [style=solid];
"blockToMarkdown" [style=solid];
"blockToMarkdown\'" [style=solid];
"blockToMediaWiki" [style=solid];
"blockToMs" [style=solid];
"blockToMuse" [style=solid];
"blockToMuseWithNotes" [style=solid];
"blockToOPML" [style=solid];
"blockToOpenDocument" [style=solid];
"blockToOpenXML" [style=solid];
"blockToOpenXML\'" [style=solid];
"blockToOrg" [style=solid];
"blockToOutput" [style=solid];
"blockToParagraphs" [style=solid];
"blockToRST" [style=solid];
"blockToRTF" [style=solid];
"blockToShape" [style=solid];
"blockToSpeakerNotes" [style=solid];
"blockToTEI" [style=solid];
"blockToTexinfo" [style=solid];
"blockToTextile" [style=solid];
"blockToXWiki" [style=solid];
"blockToXWikiList" [style=solid];
"blockToXml" [style=solid];
"blockToZimWiki" [style=solid];
"blockquote" [style=solid];
"blocks" [style=solid];
"blocksInTags" [style=solid];
"blocksThenInline" [style=solid];
"blocksToBullets" [style=solid];
"blocksToDefinitions" [style=solid];
"blocksToDefinitions\'" [style=solid];
"blocksToDocbook" [style=solid];
"blocksToICML" [style=solid];
"blocksToInlines" [style=solid];
"blocksToInlinesWarn" [style=solid];
"blocksToInlinesWithSep" [style=solid];
"blocksToInlines\'" [style=solid];
"blocksToJATS" [style=solid];
"blocksToOpenDocument" [style=solid];
"blocksToOpenXML" [style=solid];
"blocksToPresentationSlides" [style=solid];
"blocksToRTF" [style=solid];
"blocksToShapes" [style=solid];
"blocksToSlide" [style=solid];
"blocksToSlide\'" [style=solid];
"blocksToTEI" [style=solid];
"bodyPartToBlocks" [style=solid];
"bodyPartsToMeta" [style=solid];
"bodyPartsToMeta\'" [style=solid];
"bodyRowCells" [style=solid];
"bodyRows" [style=solid];
"bodyRowsToHtml" [style=solid];
"bodyRowsToJats" [style=solid];
"bodyToOutput" [style=solid];
"bold" [style=solid];
"boldCode" [style=solid];
"bookTrans" [style=solid];
"booktitle" [style=solid];
"booleanSetting" [style=solid];
"bordered" [style=solid];
"boxed" [style=solid];
"br" [style=solid];
"braced" [style=solid];
"bracedOrToken" [style=solid];
"bracedUrl" [style=solid];
"braced\'" [style=solid];
"bracketed" [style=solid];
"bracketedNum" [style=solid];
"bracketedSpan" [style=solid];
"bracketedToks" [style=solid];
"breakChars" [style=solid];
"breakSentence" [style=solid];
"breakToSpace" [style=solid];
"buildBasedOnList" [style=solid];
"buildSpTree" [style=solid];
"buildSpan" [style=solid];
"bulletItem" [style=solid];
"bulletList" [style=solid];
"bulletListAtDepth" [style=solid];
"bulletListItemAtDepth" [style=solid];
"bulletListItemToAsciiDoc" [style=solid];
"bulletListItemToHaddock" [style=solid];
"bulletListItemToMan" [style=solid];
"bulletListItemToMarkdown" [style=solid];
"bulletListItemToMs" [style=solid];
"bulletListItemToOrg" [style=solid];
"bulletListItemToRST" [style=solid];
"bulletListItemsUntil" [style=solid];
"bulletListMarkers" [style=solid];
"bulletListName" [style=solid];
"bulletListStart" [style=solid];
"bulletListStyle" [style=solid];
"bulletListToOpenDocument" [style=solid];
"bulletListUntil" [style=solid];
"bulletMarker" [style=solid];
"bytesToOdt" [style=solid];
"cMap" [style=solid];
"cMapM" [style=solid];
"calculateAlignments" [style=solid];
"callWithTraceback" [style=solid];
"camelCaseStrToHyphenated" [style=solid];
"camelCaseToHyphenated" [style=solid];
"canonicalizeUrl" [style=solid];
"capitalize" [style=solid];
"capitalizeNoteCitation" [style=solid];
"captionHeight" [style=solid];
"captionlessTable" [style=solid];
"catWithBlankLines" [style=solid];
"cellAlignment" [style=solid];
"cellAttributes" [style=solid];
"cellToBlocks" [style=solid];
"cellToHtml" [style=solid];
"cellToJats" [style=solid];
"cellToParagraphs" [style=solid];
"cellsep" [style=solid];
"centerTag" [style=solid];
"centered" [style=solid];
"changePathSeparators" [style=solid];
"charOrRef" [style=solid];
"charRef" [style=solid];
"charStyle" [style=solid];
"charStylesToDoc" [style=solid];
"characterCodeMap" [style=solid];
"characterCodes" [style=solid];
"characterReference" [style=solid];
"charsInBalanced" [style=solid];
"checkBoolean" [style=solid];
"checkDefined" [style=solid];
"checkExistence" [style=solid];
"checkOnOff" [style=solid];
"childElemToRun" [style=solid];
"choiceToMaybe" [style=solid];
"chooseMax" [style=solid];
"chooseMaxWith" [style=solid];
"chooseMostSpecificListLevelStyle" [style=solid];
"cistring" [style=solid];
"citation" [style=solid];
"citationBlock" [style=solid];
"citationLabel" [style=solid];
"citationMarker" [style=solid];
"citationName" [style=solid];
"citationsToBiblatex" [style=solid];
"citationsToNatbib" [style=solid];
"cite" [style=solid];
"citeArguments" [style=solid];
"citeArgumentsList" [style=solid];
"citeCommand" [style=solid];
"citeKey" [style=solid];
"citeList" [style=solid];
"citeName" [style=solid];
"cites" [style=solid];
"classAttr" [style=solid];
"classIdAttr" [style=solid];
"classTag" [style=solid];
"cleanLinkText" [style=solid];
"cleanupCode" [style=solid];
"cloneAttr" [style=solid];
"cloneBlock" [style=solid];
"cloneCitation" [style=solid];
"cloneInline" [style=solid];
"cloneListAttributes" [style=solid];
"cloneMeta" [style=solid];
"cloneMetaValue" [style=solid];
"clonePandoc" [style=solid];
"closeTag" [style=solid];
"closes" [style=solid];
"closing" [style=solid];
"code" [style=solid];
"code1" [style=solid];
"code2" [style=solid];
"codeAttr" [style=solid];
"codeBlock" [style=solid];
"codeBlockBody" [style=solid];
"codeBlockFenced" [style=solid];
"codeBlockHtml" [style=solid];
"codeBlockIndented" [style=solid];
"codeBlockName" [style=solid];
"codeBlockStart" [style=solid];
"codeBlockTextile" [style=solid];
"codeHeaderArgs" [style=solid];
"codeHtml" [style=solid];
"codeLanguage" [style=solid];
"codeMacro" [style=solid];
"codeName" [style=solid];
"codeStringToRTF" [style=solid];
"codeTag" [style=solid];
"codeblock" [style=solid];
"colHeadsToOpenDocument" [style=solid];
"colSpecListToHtml" [style=solid];
"colSpecListToJATS" [style=solid];
"collapseEither" [style=solid];
"collapseFilePath" [style=solid];
"collectAsList" [style=solid];
"collectLines" [style=solid];
"collectNodes" [style=solid];
"colorName" [style=solid];
"colored" [style=solid];
"coloredBlock" [style=solid];
"coloredInline" [style=solid];
"colspanAttrib" [style=solid];
"columnPropertyCell" [style=solid];
"combineBlocks" [style=solid];
"combineInlines" [style=solid];
"combineLines" [style=solid];
"combineList" [style=solid];
"combineParaElems" [style=solid];
"combineParaElems\'" [style=solid];
"combineShapes" [style=solid];
"combineSingletonInlines" [style=solid];
"combiningAccents" [style=solid];
"combiningAccentsMap" [style=solid];
"comment" [style=solid];
"commentBlock" [style=solid];
"commentLine" [style=solid];
"commentLineStart" [style=solid];
"commentTag" [style=solid];
"commonFromBcp47" [style=solid];
"commonStateFields" [style=solid];
"commonStateTypeName" [style=solid];
"compactDefinitionList" [style=solid];
"compactify" [style=solid];
"compactifyDL" [style=solid];
"compileDefaultTemplate" [style=solid];
"compileInfo" [style=solid];
"complementableListSetting" [style=solid];
"complexNatbibCitation" [style=solid];
"composition" [style=solid];
"concatMapM" [style=solid];
"concatWith" [style=solid];
"conditionalEscapeText" [style=solid];
"consolidateAdjacentRawBlocks" [style=solid];
"consolidateRawBlocks" [style=solid];
"constructBogusParStyleData" [style=solid];
"constructList" [style=solid];
"constructPara" [style=solid];
"constructorsFor" [style=solid];
"contains" [style=solid];
"containsColon" [style=solid];
"containsNotes" [style=solid];
"contentToElement" [style=solid];
"contentTypesToElement" [style=solid];
"contentTypesToEntry" [style=solid];
"context2pdf" [style=solid];
"contextToYaml" [style=solid];
"contingentInheritedPatterns" [style=solid];
"continuation" [style=solid];
"controlSeq" [style=solid];
"convertDate" [style=solid];
"convertEnDash" [style=solid];
"convertEntity" [style=solid];
"convertImage" [style=solid];
"convertImages" [style=solid];
"convertMath" [style=solid];
"convertQuotes" [style=solid];
"convertTags" [style=solid];
"convertWithOpts" [style=solid];
"convertingExtraState" [style=solid];
"copy" [style=solid];
"copyChildren" [style=solid];
"copyFileToArchive" [style=solid];
"copyrightMessage" [style=solid];
"countChar" [style=solid];
"countSubStrs" [style=solid];
"crFilter" [style=solid];
"createCaption" [style=solid];
"createStartState" [style=solid];
"cslEntryToMs" [style=solid];
"cslJsonToReferences" [style=solid];
"cssAttributes" [style=solid];
"cssURLs" [style=solid];
"csvTableDirective" [style=solid];
"curSlideHasSpeakerNotes" [style=solid];
"currentElement" [style=solid];
"currentNotesToMuse" [style=solid];
"dash" [style=solid];
"dashedLine" [style=solid];
"dataFiles" [style=solid];
"dataFiles\'" [style=solid];
"dateLine" [style=solid];
"dateToMetaValue" [style=solid];
"dateVariables" [style=solid];
"dateline" [style=solid];
"dcName" [style=solid];
"dcNode" [style=solid];
"deLink" [style=solid];
"deNote" [style=solid];
"deQuote" [style=solid];
"decEmphasisNewlinesCount" [style=solid];
"decimal" [style=solid];
"decodeArg" [style=solid];
"defField" [style=solid];
"defList" [style=solid];
"defListDefName" [style=solid];
"defListItem" [style=solid];
"defListItemToConTeXt" [style=solid];
"defListItemToLaTeX" [style=solid];
"defListItemToTexinfo" [style=solid];
"defListMarker" [style=solid];
"defListTerm" [style=solid];
"defListTermName" [style=solid];
"defMarkerE" [style=solid];
"defMarkerM" [style=solid];
"defRawBlock" [style=solid];
"defaultAbbrevs" [style=solid];
"defaultBlocksSeparator" [style=solid];
"defaultCSVOptions" [style=solid];
"defaultCommonState" [style=solid];
"defaultContentTypeToElem" [style=solid];
"defaultExportSettings" [style=solid];
"defaultFontSpec" [style=solid];
"defaultFootnotes" [style=solid];
"defaultGlobals" [style=solid];
"defaultIndent" [style=solid];
"defaultKaTeXURL" [style=solid];
"defaultLaTeXState" [style=solid];
"defaultLang" [style=solid];
"defaultListIndent" [style=solid];
"defaultMathJaxURL" [style=solid];
"defaultNameSpace" [style=solid];
"defaultNum" [style=solid];
"defaultOpts" [style=solid];
"defaultOrgParserState" [style=solid];
"defaultParagraphStyle" [style=solid];
"defaultParserState" [style=solid];
"defaultRunStyle" [style=solid];
"defaultTblLook" [style=solid];
"defaultUserDataDirs" [style=solid];
"defaultWriterEnv" [style=solid];
"defaultWriterState" [style=solid];
"defineHowTo" [style=solid];
"definitionDef" [style=solid];
"definitionDef1" [style=solid];
"definitionDef2" [style=solid];
"definitionList" [style=solid];
"definitionListEnd" [style=solid];
"definitionListItem" [style=solid];
"definitionListItemToAsciiDoc" [style=solid];
"definitionListItemToDokuWiki" [style=solid];
"definitionListItemToHaddock" [style=solid];
"definitionListItemToICML" [style=solid];
"definitionListItemToMan" [style=solid];
"definitionListItemToMarkdown" [style=solid];
"definitionListItemToMediaWiki" [style=solid];
"definitionListItemToMs" [style=solid];
"definitionListItemToOpenXML" [style=solid];
"definitionListItemToOrg" [style=solid];
"definitionListItemToRST" [style=solid];
"definitionListItemToRTF" [style=solid];
"definitionListItemToTextile" [style=solid];
"definitionListItemToZimWiki" [style=solid];
"definitionListItemsUntil" [style=solid];
"definitionListStart" [style=solid];
"definitionListUntil" [style=solid];
"definitionTerm" [style=solid];
"definitionTerm1" [style=solid];
"definitionTerm2" [style=solid];
"deflistItemToDocbook" [style=solid];
"deflistItemToJATS" [style=solid];
"deflistItemToOpenDocument" [style=solid];
"deflistItemToTEI" [style=solid];
"deflistItemsToDocbook" [style=solid];
"deflistItemsToJATS" [style=solid];
"deflistItemsToTEI" [style=solid];
"defmacro" [style=solid];
"delete" [style=solid];
"deleteMedia" [style=solid];
"deleted" [style=solid];
"demoteHeaderAndRefs" [style=solid];
"deprecatedOption" [style=solid];
"descItem" [style=solid];
"description" [style=solid];
"descriptionsUntil" [style=solid];
"desiredSizeInPoints" [style=solid];
"dfName" [style=solid];
"dimenarg" [style=solid];
"dimension" [style=solid];
"dimensionsToAttrList" [style=solid];
"directive" [style=solid];
"directiveLabel" [style=solid];
"directive\'" [style=solid];
"disableExtension" [style=solid];
"disallowedInNode" [style=solid];
"displayMath" [style=solid];
"displayMathToInline" [style=solid];
"distributeValue" [style=solid];
"divBlockType" [style=solid];
"divFenceEnd" [style=solid];
"divFenced" [style=solid];
"divHtml" [style=solid];
"divTag" [style=solid];
"divToOrg" [style=solid];
"divsToKeep" [style=solid];
"dlItemWithDT" [style=solid];
"dlItemWithoutDT" [style=solid];
"doAcronym" [style=solid];
"doAcronymPlural" [style=solid];
"doLHSverb" [style=solid];
"doMacros" [style=solid];
"doMacros\'" [style=solid];
"doOpt" [style=solid];
"doSI" [style=solid];
"doSIang" [style=solid];
"doSInum" [style=solid];
"doSInumlist" [style=solid];
"doSIrange" [style=solid];
"doSubfile" [style=solid];
"doTerm" [style=solid];
"docContainsSelectTags" [style=solid];
"docCustomPropsElement" [style=solid];
"docCustomPropsToEntry" [style=solid];
"docHToBlocks" [style=solid];
"docHToInlines" [style=solid];
"docPropsElement" [style=solid];
"docPropsToEntry" [style=solid];
"docTitle\'" [style=solid];
"docToCustom" [style=solid];
"docToJATS" [style=solid];
"docdate" [style=solid];
"documentSettings" [style=solid];
"documentToPresentation" [style=solid];
"documentTree" [style=solid];
"docxToOutput" [style=solid];
"dofileWithTraceback" [style=solid];
"doinlinecode" [style=solid];
"dolabel" [style=solid];
"dollarsMath" [style=solid];
"dolstinline" [style=solid];
"domintinline" [style=solid];
"doref" [style=solid];
"dosi" [style=solid];
"doubleHeader" [style=solid];
"doubleHeader\'" [style=solid];
"doubleQuote" [style=solid];
"doubleQuoteEnd" [style=solid];
"doubleQuoteStart" [style=solid];
"doubleQuoted" [style=solid];
"doubleQuotes" [style=solid];
"doverb" [style=solid];
"downloadOrRead" [style=solid];
"doxspace" [style=solid];
"drawerEnd" [style=solid];
"drawerLine" [style=solid];
"drawerStart" [style=solid];
"dropBrackets" [style=solid];
"dropInlineParent" [style=solid];
"dropSpacePrefix" [style=solid];
"dummyAnchors" [style=solid];
"duplicate" [style=solid];
"dynamicStyleKey" [style=solid];
"eCase" [style=solid];
"eFootnote" [style=solid];
"eNoteref" [style=solid];
"eSection" [style=solid];
"eSwitch" [style=solid];
"eTOC" [style=solid];
"eTitlePage" [style=solid];
"eastAsianLineBreakFilter" [style=solid];
"eatOneSpaceOfTab" [style=solid];
"egroup" [style=solid];
"eitherBlockOrInline" [style=solid];
"eitherToD" [style=solid];
"eitherToMaybe" [style=solid];
"el" [style=solid];
"elContent" [style=solid];
"elName" [style=solid];
"elemName" [style=solid];
"elemNameIs" [style=solid];
"elemNameMatches" [style=solid];
"elemText" [style=solid];
"elemToBody" [style=solid];
"elemToBodyPart" [style=solid];
"elemToCell" [style=solid];
"elemToCharStyle" [style=solid];
"elemToCommentStart" [style=solid];
"elemToComments" [style=solid];
"elemToEntry" [style=solid];
"elemToExtent" [style=solid];
"elemToNameSpaces" [style=solid];
"elemToNotes" [style=solid];
"elemToParIndentation" [style=solid];
"elemToParPart" [style=solid];
"elemToParStyleData" [style=solid];
"elemToParagraphStyle" [style=solid];
"elemToRow" [style=solid];
"elemToRun" [style=solid];
"elemToRunElem" [style=solid];
"elemToRunElems" [style=solid];
"elemToRunStyle" [style=solid];
"elemToRunStyleD" [style=solid];
"elemToTblGrid" [style=solid];
"elemToTblLook" [style=solid];
"elementOrList" [style=solid];
"elementToBeamer" [style=solid];
"elementToRel" [style=solid];
"elementToStr" [style=solid];
"elementsToTable" [style=solid];
"elispBoolean" [style=solid];
"ellipses" [style=solid];
"emacsHeading" [style=solid];
"emacsNoteBlock" [style=solid];
"emailAddress" [style=solid];
"emailBlockQuote" [style=solid];
"emailBlockQuoteStart" [style=solid];
"emfSize" [style=solid];
"emoji" [style=solid];
"emojiChars" [style=solid];
"emojiToInline" [style=solid];
"emojis" [style=solid];
"emph" [style=solid];
"emphChars" [style=solid];
"emphHtml" [style=solid];
"emphName" [style=solid];
"emphTag" [style=solid];
"emphasis" [style=solid];
"emphasisAllowedNewlines" [style=solid];
"emphasisBetween" [style=solid];
"emphasisEnd" [style=solid];
"emphasisForbiddenBorderChars" [style=solid];
"emphasisStart" [style=solid];
"emphasizedText" [style=solid];
"empty" [style=solid];
"emptyDate" [style=solid];
"emptyExtensions" [style=solid];
"emptyLayout" [style=solid];
"emptyName" [style=solid];
"emptyOr160" [style=solid];
"emptyParaElem" [style=solid];
"emptyParagraph" [style=solid];
"emptyPlanning" [style=solid];
"emptyShape" [style=solid];
"emptySlide" [style=solid];
"enableExtension" [style=solid];
"enclosed" [style=solid];
"enclosedByPair" [style=solid];
"enclosedByPair1" [style=solid];
"enclosedInlines" [style=solid];
"enclosedRaw" [style=solid];
"enclosure" [style=solid];
"encode" [style=solid];
"encodeLogMessages" [style=solid];
"encodePath" [style=solid];
"endNotesSlideId" [style=solid];
"endOfBlock" [style=solid];
"endOfCell" [style=solid];
"endOfParaElement" [style=solid];
"endOfParagraph" [style=solid];
"endWithPunct" [style=solid];
"end_" [style=solid];
"ender" [style=solid];
"endline" [style=solid];
"endlineBQ" [style=solid];
"endlineML" [style=solid];
"endlineP" [style=solid];
"endmacro" [style=solid];
"endsWithPlain" [style=solid];
"endsWithSpace" [style=solid];
"engines" [style=solid];
"enquote" [style=solid];
"entField" [style=solid];
"entryToXmlElem" [style=solid];
"env" [style=solid];
"environment" [style=solid];
"environments" [style=solid];
"eof\'" [style=solid];
"eofline" [style=solid];
"eol" [style=solid];
"epigraph" [style=solid];
"epsSize" [style=solid];
"epubTags" [style=solid];
"equals" [style=solid];
"equation" [style=solid];
"err" [style=solid];
"errorConversion" [style=solid];
"errorToException" [style=solid];
"escFont" [style=solid];
"escIgnore" [style=solid];
"escString" [style=solid];
"escUnknown" [style=solid];
"escape" [style=solid];
"escapeArg" [style=solid];
"escapeCharForConTeXt" [style=solid];
"escapeCharForTextile" [style=solid];
"escapeCharForXML" [style=solid];
"escapeColons" [style=solid];
"escapeCommas" [style=solid];
"escapeGlyph" [style=solid];
"escapeNls" [style=solid];
"escapeNormal" [style=solid];
"escapeSpecial" [style=solid];
"escapeSpecialChars" [style=solid];
"escapeStr" [style=solid];
"escapeString" [style=solid];
"escapeStringForXML" [style=solid];
"escapeStringUsing" [style=solid];
"escapeText" [style=solid];
"escapeTextForTextile" [style=solid];
"escapeURI" [style=solid];
"escapeUri" [style=solid];
"escapeXWikiString" [style=solid];
"escaped" [style=solid];
"escapedChar" [style=solid];
"escapedChar\'" [style=solid];
"escapedEqs" [style=solid];
"escapedInline" [style=solid];
"escapedLink" [style=solid];
"escapedNewline" [style=solid];
"escapedQuote" [style=solid];
"escapedTag" [style=solid];
"essentialEscapes" [style=solid];
"estimateInMillimeter" [style=solid];
"evalDocxContext" [style=solid];
"evalMD" [style=solid];
"evalMuse" [style=solid];
"example" [style=solid];
"exampleBlock" [style=solid];
"exampleCode" [style=solid];
"exampleLineStart" [style=solid];
"exampleNum" [style=solid];
"exampleRef" [style=solid];
"exampleTag" [style=solid];
"exceptionToError" [style=solid];
"executeIn" [style=solid];
"executeInSub" [style=solid];
"executeThere" [style=solid];
"expandDrawingId" [style=solid];
"expandFilterPath" [style=solid];
"expandString" [style=solid];
"explicitBlockStart" [style=solid];
"explicitLink" [style=solid];
"explicitOrImageLink" [style=solid];
"exportBlock" [style=solid];
"exportSetting" [style=solid];
"exportSettings" [style=solid];
"exportSnippet" [style=solid];
"exportsCode" [style=solid];
"expression" [style=solid];
"extendedStylePropertyChain" [style=solid];
"extensionEnabled" [style=solid];
"extensionFromMimeType" [style=solid];
"extensionsFromList" [style=solid];
"extentToAttr" [style=solid];
"externalFilter" [style=solid];
"externalLink" [style=solid];
"extraAttr" [style=solid];
"extract" [style=solid];
"extractCaption" [style=solid];
"extractCells" [style=solid];
"extractConTeXtMsg" [style=solid];
"extractData" [style=solid];
"extractFromState" [style=solid];
"extractIdClass" [style=solid];
"extractInline" [style=solid];
"extractMedia" [style=solid];
"extractMsg" [style=solid];
"extractSpaces" [style=solid];
"extractText" [style=solid];
"extractUnicodeChar" [style=solid];
"failEmpty" [style=solid];
"failIfInQuoteContext" [style=solid];
"failWith" [style=solid];
"fakePos" [style=solid];
"fancyverbEnv" [style=solid];
"fetch" [style=solid];
"fetchImage" [style=solid];
"fetchImages" [style=solid];
"fetchItem" [style=solid];
"fetchMediaResource" [style=solid];
"fieldArgument" [style=solid];
"fieldInfo" [style=solid];
"fieldList" [style=solid];
"fieldListItem" [style=solid];
"fieldName" [style=solid];
"figure" [style=solid];
"figureName" [style=solid];
"fileExists" [style=solid];
"filePathIsMedia" [style=solid];
"filePathToRelType" [style=solid];
"filePathToRelationships" [style=solid];
"fillMediaBag" [style=solid];
"filterChildrenName\'" [style=solid];
"filterIpynbOutput" [style=solid];
"filteredFilesFromArchive" [style=solid];
"finalBold" [style=solid];
"finalItalics" [style=solid];
"findAlign" [style=solid];
"findAnchorName" [style=solid];
"findAnchorRef" [style=solid];
"findAttr" [style=solid];
"findAttrByName" [style=solid];
"findAttrE" [style=solid];
"findAttrText" [style=solid];
"findAttrTextBy" [style=solid];
"findAttrTextByName" [style=solid];
"findAttrTextWithDefault" [style=solid];
"findAttrText\'" [style=solid];
"findAttrWithDefault" [style=solid];
"findAttr\'" [style=solid];
"findBy" [style=solid];
"findChild" [style=solid];
"findChildByName" [style=solid];
"findChild\'" [style=solid];
"findChildren" [style=solid];
"findChildrenByName" [style=solid];
"findElementE" [style=solid];
"findEntryByPathE" [style=solid];
"findID" [style=solid];
"findM" [style=solid];
"findPHType" [style=solid];
"findPitch" [style=solid];
"findStyleFamily" [style=solid];
"findSvgTag" [style=solid];
"findUsableIndex" [style=solid];
"firstColumn" [style=solid];
"firstListItemName" [style=solid];
"firstMatch" [style=solid];
"firstParaToPlain" [style=solid];
"fitToPage" [style=solid];
"fixAttrs" [style=solid];
"fixAuthors" [style=solid];
"fixBlockIRs" [style=solid];
"fixDisplayMath" [style=solid];
"fixImage" [style=solid];
"fixInlineIRs" [style=solid];
"fixInternalReferences" [style=solid];
"fixLeadingDash" [style=solid];
"fixLineBreaks" [style=solid];
"fixLineBreaks\'" [style=solid];
"fixLinks" [style=solid];
"fixListNesting" [style=solid];
"fixNotes" [style=solid];
"fixOrEscape" [style=solid];
"fixPlains" [style=solid];
"fixTableBody" [style=solid];
"fixTableHead" [style=solid];
"fixTableRow" [style=solid];
"fixTableRows" [style=solid];
"flatBlockListToMuse" [style=solid];
"flatToBullets" [style=solid];
"flatToBullets\'" [style=solid];
"flatten" [style=solid];
"foldM\'" [style=solid];
"foldS" [style=solid];
"fontChange" [style=solid];
"fontPitchReader" [style=solid];
"fontSizeAttributes" [style=solid];
"footRows" [style=solid];
"footnote" [style=solid];
"footnoteID" [style=solid];
"footnoteName" [style=solid];
"footnoteSection" [style=solid];
"footnoteToICML" [style=solid];
"forceFontSize" [style=solid];
"forceResult" [style=solid];
"forcedLinebreak" [style=solid];
"foreignlanguage" [style=solid];
"formRow" [style=solid];
"formatFromExtension" [style=solid];
"formatFromFilePath" [style=solid];
"formatFromFilePaths" [style=solid];
"formatSourceLine" [style=solid];
"formatSourceLines" [style=solid];
"formatTitle" [style=solid];
"formatToken" [style=solid];
"formattedRun" [style=solid];
"formattedString" [style=solid];
"formattedString\'" [style=solid];
"formulaStyle" [style=solid];
"formulaStyles" [style=solid];
"fromBCP47" [style=solid];
"fromBCP47\'" [style=solid];
"fromBodyRow" [style=solid];
"fromCell" [style=solid];
"fromCslJson" [style=solid];
"fromEntities" [style=solid];
"fromEntities\'" [style=solid];
"fromHeaderRow" [style=solid];
"fromInline" [style=solid];
"fromInlines" [style=solid];
"fromLeft" [style=solid];
"fromList" [style=solid];
"fromListingsLanguage" [style=solid];
"fromPandocCitations" [style=solid];
"fromState" [style=solid];
"fromString" [style=solid];
"fromStringLazy" [style=solid];
"fromStyles" [style=solid];
"fromTable" [style=solid];
"fromTableBody" [style=solid];
"fromTableFoot" [style=solid];
"fromTableHead" [style=solid];
"fromText" [style=solid];
"fromTextLazy" [style=solid];
"from_simple_table" [style=solid];
"genAnchor" [style=solid];
"generic2pdf" [style=solid];
"genericBlock" [style=solid];
"genericDrawer" [style=solid];
"genericExportSetting" [style=solid];
"genericListItemAtDepth" [style=solid];
"genericListStart" [style=solid];
"genericRow" [style=solid];
"genericSwitch" [style=solid];
"getAbstract" [style=solid];
"getAffiliations" [style=solid];
"getAllExtensions" [style=solid];
"getAttr" [style=solid];
"getAuthors" [style=solid];
"getBlocks" [style=solid];
"getCaption" [style=solid];
"getCitations" [style=solid];
"getContentShape" [style=solid];
"getContentShapeSize" [style=solid];
"getContentType" [style=solid];
"getContents" [style=solid];
"getContrib" [style=solid];
"getCreator" [style=solid];
"getCurrentElement" [style=solid];
"getCurrentListLevel" [style=solid];
"getCurrentTime" [style=solid];
"getCurrentTimeZone" [style=solid];
"getData" [style=solid];
"getDataFileName" [style=solid];
"getDataFileNames" [style=solid];
"getDataURI" [style=solid];
"getDate" [style=solid];
"getDefaultExtensions" [style=solid];
"getDefaultReferenceDocx" [style=solid];
"getDefaultReferenceODT" [style=solid];
"getDefaultReferencePptx" [style=solid];
"getDefaultTableStyle" [style=solid];
"getDefaultTemplate" [style=solid];
"getDocumentXmlPath" [style=solid];
"getEPUBMetadata" [style=solid];
"getElementStyleName" [style=solid];
"getExportSetting" [style=solid];
"getExtraState" [style=solid];
"getField" [style=solid];
"getFigure" [style=solid];
"getFileInfo" [style=solid];
"getGraphic" [style=solid];
"getHeaderAnchor" [style=solid];
"getHeaderLevel" [style=solid];
"getIdentifier" [style=solid];
"getIndent" [style=solid];
"getInlines" [style=solid];
"getInputFiles" [style=solid];
"getKey" [style=solid];
"getLang" [style=solid];
"getLayout" [style=solid];
"getLevel" [style=solid];
"getLevelN" [style=solid];
"getList" [style=solid];
"getListConstructor" [style=solid];
"getListLevelStyle" [style=solid];
"getListType" [style=solid];
"getListingsLanguage" [style=solid];
"getLiteralList" [style=solid];
"getLiteralList\'" [style=solid];
"getLog" [style=solid];
"getManifest" [style=solid];
"getMaster" [style=solid];
"getMasterShapeDimensionsById" [style=solid];
"getMediaBag" [style=solid];
"getMediaEnv" [style=solid];
"getMediaNextNewName" [style=solid];
"getMediaobject" [style=solid];
"getMetaSlide" [style=solid];
"getMimeType" [style=solid];
"getMimeTypeDef" [style=solid];
"getModificationTime" [style=solid];
"getNameList" [style=solid];
"getNextIndex" [style=solid];
"getNextNumber" [style=solid];
"getNotesMaster" [style=solid];
"getNumId" [style=solid];
"getNumIdN" [style=solid];
"getNumInfo" [style=solid];
"getOldDate" [style=solid];
"getOutputFile" [style=solid];
"getPOSIXTime" [style=solid];
"getParStyleField" [style=solid];
"getParaModifier" [style=solid];
"getParaProps" [style=solid];
"getParentStyleValue" [style=solid];
"getPeriodicalTitle" [style=solid];
"getPresentationSize" [style=solid];
"getPrettyAnchor" [style=solid];
"getPureState" [style=solid];
"getRandomUUID" [style=solid];
"getRawCommand" [style=solid];
"getRawField" [style=solid];
"getReader" [style=solid];
"getReference" [style=solid];
"getRefs" [style=solid];
"getRefsFromBib" [style=solid];
"getRels" [style=solid];
"getResourcePath" [style=solid];
"getResultingPDF" [style=solid];
"getShapeByPlaceHolderType" [style=solid];
"getShapeByPlaceHolderTypes" [style=solid];
"getShapeDimensions" [style=solid];
"getShapesByPlaceHolderType" [style=solid];
"getShortTitle" [style=solid];
"getSize" [style=solid];
"getSlideIdNum" [style=solid];
"getSlideLevel" [style=solid];
"getSlideNumberFieldId" [style=solid];
"getSpeakerNotesFilePaths" [style=solid];
"getStartLvl" [style=solid];
"getStyleByName" [style=solid];
"getStyleChildren" [style=solid];
"getStyleFamily" [style=solid];
"getStyleIdFromName" [style=solid];
"getStyleMaps" [style=solid];
"getStyleNames" [style=solid];
"getSymChar" [style=solid];
"getT2TMeta" [style=solid];
"getTag" [style=solid];
"getTarget" [style=solid];
"getTemplate" [style=solid];
"getText" [style=solid];
"getTextProps" [style=solid];
"getTitle" [style=solid];
"getTitleAndAlt" [style=solid];
"getTrackedChange" [style=solid];
"getTranslations" [style=solid];
"getTypeAndGenre" [style=solid];
"getUUID" [style=solid];
"getUniqueId" [style=solid];
"getUserDataDir" [style=solid];
"getVerbosity" [style=solid];
"getWriter" [style=solid];
"getXrefFields" [style=solid];
"getZonedTime" [style=solid];
"getsPureState" [style=solid];
"githubMarkdownExtensions" [style=solid];
"glob" [style=solid];
"gobbleAtMostSpaces" [style=solid];
"gobbleSpaces" [style=solid];
"graphicFrameToElements" [style=solid];
"graphicToElement" [style=solid];
"graphicsPath" [style=solid];
"gridDashedLines" [style=solid];
"gridPart" [style=solid];
"gridTable" [style=solid];
"gridTableFooter" [style=solid];
"gridTableHeader" [style=solid];
"gridTableRawLine" [style=solid];
"gridTableRow" [style=solid];
"gridTableSep" [style=solid];
"gridTableSplitLine" [style=solid];
"gridTableStart" [style=solid];
"gridTableWith" [style=solid];
"gridTableWith\'" [style=solid];
"grouped" [style=solid];
"groupedInlineMarkup" [style=solid];
"groupingContent" [style=solid];
"guardColumnOne" [style=solid];
"guardDisabled" [style=solid];
"guardEnabled" [style=solid];
"guardOrSmartEnabled" [style=solid];
"hGetContents" [style=solid];
"hPutStr" [style=solid];
"hPutStrLn" [style=solid];
"hPutStrLnWith" [style=solid];
"hPutStrWith" [style=solid];
"handleAndFilterSpeakerNotes" [style=solid];
"handleAndFilterSpeakerNotes\'" [style=solid];
"handleCSSUrl" [style=solid];
"handleCitationPart" [style=solid];
"handleData" [style=solid];
"handleError" [style=solid];
"handleImages" [style=solid];
"handleInlineMacro" [style=solid];
"handleInstructions" [style=solid];
"handleInstructions\'" [style=solid];
"handleListParagraphs" [style=solid];
"handleMathComment" [style=solid];
"handleNote" [style=solid];
"handleNotes" [style=solid];
"handlePDFProgramNotFound" [style=solid];
"handleSpaces" [style=solid];
"handleSpeakerNotes" [style=solid];
"handleTaskListItem" [style=solid];
"handleUnicode" [style=solid];
"handleUnrecognizedOption" [style=solid];
"hasDefMarker" [style=solid];
"hasDefMarkerM" [style=solid];
"hasLineBreaks" [style=solid];
"hasOneOf" [style=solid];
"hasStyleName" [style=solid];
"hasStylesInheritedFrom" [style=solid];
"hasTagWarning" [style=solid];
"headRows" [style=solid];
"header" [style=solid];
"headerBlock" [style=solid];
"headerLevel" [style=solid];
"headerLtEq" [style=solid];
"headerName" [style=solid];
"headerRow" [style=solid];
"headerRowsToHtml" [style=solid];
"headerRowsToJats" [style=solid];
"headerShift" [style=solid];
"headerStart" [style=solid];
"headerline" [style=solid];
"headingStart" [style=solid];
"headline" [style=solid];
"headlineContainsExcludeTags" [style=solid];
"headlineContainsSelectTags" [style=solid];
"headlineToBlocks" [style=solid];
"headlineToHeader" [style=solid];
"headlineToHeaderWithContents" [style=solid];
"headlineToHeaderWithList" [style=solid];
"hexColor" [style=solid];
"highlight" [style=solid];
"highlightCode" [style=solid];
"highlightingLangs" [style=solid];
"highlightingStyles" [style=solid];
"hline" [style=solid];
"horizontalLine" [style=solid];
"horizontalRule" [style=solid];
"hr" [style=solid];
"hrule" [style=solid];
"html2pdf" [style=solid];
"html4Attributes" [style=solid];
"html5Attributes" [style=solid];
"html5EntityMap" [style=solid];
"htmlAttrToPandoc" [style=solid];
"htmlBlock" [style=solid];
"htmlBlock\'" [style=solid];
"htmlComment" [style=solid];
"htmlElement" [style=solid];
"htmlEngines" [style=solid];
"htmlFormat" [style=solid];
"htmlInBalanced" [style=solid];
"htmlInBalanced\'" [style=solid];
"htmlSpanLikeElements" [style=solid];
"htmlTag" [style=solid];
"hyperlink" [style=solid];
"hyperlinkSwitch" [style=solid];
"hyperlinksToDoc" [style=solid];
"hypertarget" [style=solid];
"hypertargetBlock" [style=solid];
"hypertargetInline" [style=solid];
"hyphenedWords" [style=solid];
"hyphens" [style=solid];
"iconUnicode" [style=solid];
"idAndRole" [style=solid];
"idFromAttr" [style=solid];
"idName" [style=solid];
"idNumToFilePath" [style=solid];
"identifier" [style=solid];
"identifierAttr" [style=solid];
"ifFailedDo" [style=solid];
"ifToggle" [style=solid];
"ifdim" [style=solid];
"ifstrequal" [style=solid];
"ignHeaders" [style=solid];
"ignorableRow" [style=solid];
"ignore" [style=solid];
"ignoreAndWarn" [style=solid];
"ignoreSigPipe" [style=solid];
"ignoreSpacesCap" [style=solid];
"ignoredSetting" [style=solid];
"ignoringState" [style=solid];
"ilModifierAndInnards" [style=solid];
"image" [style=solid];
"imageArguments" [style=solid];
"imageAttr" [style=solid];
"imageDims" [style=solid];
"imageDimsToRST" [style=solid];
"imageICML" [style=solid];
"imageIdentifiers" [style=solid];
"imageLink" [style=solid];
"imageMimeType" [style=solid];
"imageMimes" [style=solid];
"imageOption" [style=solid];
"imageSize" [style=solid];
"imageToDocbook" [style=solid];
"imageToJira" [style=solid];
"imageToMediaWiki" [style=solid];
"imageToPandoc" [style=solid];
"imageToTEI" [style=solid];
"imageType" [style=solid];
"image_attributes" [style=solid];
"images" [style=solid];
"imgAttrsToHtml" [style=solid];
"imgCaptionName" [style=solid];
"inBlockQuote" [style=solid];
"inBookmarkTags" [style=solid];
"inBraces" [style=solid];
"inBrackets" [style=solid];
"inCmd" [style=solid];
"inDirectory" [style=solid];
"inDiv" [style=solid];
"inEm" [style=solid];
"inHeaderTags" [style=solid];
"inInch" [style=solid];
"inList" [style=solid];
"inNote" [style=solid];
"inOneParen" [style=solid];
"inParagraphTags" [style=solid];
"inParagraphTagsWithStyle" [style=solid];
"inPeriod" [style=solid];
"inPixel" [style=solid];
"inPoints" [style=solid];
"inPreformattedTags" [style=solid];
"inQuotes" [style=solid];
"inSpanTags" [style=solid];
"inTags" [style=solid];
"inTagsIndented" [style=solid];
"inTagsSimple" [style=solid];
"inTextStyle" [style=solid];
"inTightList" [style=solid];
"inTwoParens" [style=solid];
"incRowNumber" [style=solid];
"include" [style=solid];
"includeAncestorsAndSelected" [style=solid];
"includeDirective" [style=solid];
"includeRootAndSelected" [style=solid];
"increaseIndent" [style=solid];
"incrementDottedNum" [style=solid];
"indent" [style=solid];
"indentBlocks" [style=solid];
"indentFromHTML" [style=solid];
"indentIncrement" [style=solid];
"indentPrefix" [style=solid];
"indentSpaces" [style=solid];
"indentWith" [style=solid];
"indented" [style=solid];
"indentedBlock" [style=solid];
"indentedCode" [style=solid];
"indentedLine" [style=solid];
"indexCommonState" [style=solid];
"indexLazyPandoc" [style=solid];
"infix" [style=solid];
"infixr" [style=solid];
"inheritedPatterns" [style=solid];
"initLuaState" [style=solid];
"initialGlobalIds" [style=solid];
"inline" [style=solid];
"inlineBQ" [style=solid];
"inlineCode" [style=solid];
"inlineCodeBlock" [style=solid];
"inlineCommand" [style=solid];
"inlineCommand\'" [style=solid];
"inlineCommands" [style=solid];
"inlineContent" [style=solid];
"inlineElementNames" [style=solid];
"inlineEnvironment" [style=solid];
"inlineEnvironments" [style=solid];
"inlineFile" [style=solid];
"inlineGroup" [style=solid];
"inlineHtml" [style=solid];
"inlineLaTeX" [style=solid];
"inlineLaTeXCommand" [style=solid];
"inlineLanguage" [style=solid];
"inlineLanguageCommands" [style=solid];
"inlineList" [style=solid];
"inlineListForNode" [style=solid];
"inlineListStartsWithAlnum" [style=solid];
"inlineListToAsciiDoc" [style=solid];
"inlineListToConTeXt" [style=solid];
"inlineListToCustom" [style=solid];
"inlineListToDokuWiki" [style=solid];
"inlineListToHaddock" [style=solid];
"inlineListToHtml" [style=solid];
"inlineListToIdentifier" [style=solid];
"inlineListToJira" [style=solid];
"inlineListToLaTeX" [style=solid];
"inlineListToMan" [style=solid];
"inlineListToMarkdown" [style=solid];
"inlineListToMediaWiki" [style=solid];
"inlineListToMs" [style=solid];
"inlineListToMs\'" [style=solid];
"inlineListToMuse" [style=solid];
"inlineListToMuse\'" [style=solid];
"inlineListToOrg" [style=solid];
"inlineListToRST" [style=solid];
"inlineListToTexinfo" [style=solid];
"inlineListToTextile" [style=solid];
"inlineListToXWiki" [style=solid];
"inlineListToZimWiki" [style=solid];
"inlineLiteralTag" [style=solid];
"inlineLtr" [style=solid];
"inlineML" [style=solid];
"inlineMarkup" [style=solid];
"inlineMath" [style=solid];
"inlineNote" [style=solid];
"inlineNowiki" [style=solid];
"inlineParsers" [style=solid];
"inlinePhp" [style=solid];
"inlineRtl" [style=solid];
"inlineTag" [style=solid];
"inlineToAsciiDoc" [style=solid];
"inlineToConTeXt" [style=solid];
"inlineToCustom" [style=solid];
"inlineToDocbook" [style=solid];
"inlineToDokuWiki" [style=solid];
"inlineToHaddock" [style=solid];
"inlineToHtml" [style=solid];
"inlineToICML" [style=solid];
"inlineToJATS" [style=solid];
"inlineToLaTeX" [style=solid];
"inlineToMan" [style=solid];
"inlineToMarkdown" [style=solid];
"inlineToMediaWiki" [style=solid];
"inlineToMs" [style=solid];
"inlineToMuse" [style=solid];
"inlineToOpenDocument" [style=solid];
"inlineToOpenXML" [style=solid];
"inlineToOpenXML\'" [style=solid];
"inlineToOrg" [style=solid];
"inlineToParElems" [style=solid];
"inlineToRST" [style=solid];
"inlineToRTF" [style=solid];
"inlineToTEI" [style=solid];
"inlineToTexinfo" [style=solid];
"inlineToTextile" [style=solid];
"inlineToXWiki" [style=solid];
"inlineToZimWiki" [style=solid];
"inline\'" [style=solid];
"inlines" [style=solid];
"inlines1" [style=solid];
"inlinesBetween" [style=solid];
"inlinesInBalancedBrackets" [style=solid];
"inlinesInTags" [style=solid];
"inlinesL" [style=solid];
"inlinesR" [style=solid];
"inlinesToDocbook" [style=solid];
"inlinesToICML" [style=solid];
"inlinesToJATS" [style=solid];
"inlinesToOpenDocument" [style=solid];
"inlinesToOpenXML" [style=solid];
"inlinesToParElems" [style=solid];
"inlinesToRTF" [style=solid];
"inlinesToTEI" [style=solid];
"inputListing" [style=solid];
"inputMinted" [style=solid];
"insert" [style=solid];
"insertImage" [style=solid];
"insertInFileTree" [style=solid];
"insertIncluded" [style=solid];
"insertIncludedFile" [style=solid];
"insertIncludedFileF" [style=solid];
"insertIncludedFile\'" [style=solid];
"insertMath" [style=solid];
"insertMedia" [style=solid];
"insertMediaFn" [style=solid];
"insertMedia\'" [style=solid];
"insertRefs" [style=solid];
"insertResolvedCitations" [style=solid];
"insertSpace" [style=solid];
"installPandocPackageSearcher" [style=solid];
"integerSetting" [style=solid];
"internalLink" [style=solid];
"interpretedRole" [style=solid];
"intersperseBrs" [style=solid];
"interwikiToUrl" [style=solid];
"iq" [style=solid];
"isAbsolutePath" [style=solid];
"isAnchorSpan" [style=solid];
"isArchiveTag" [style=solid];
"isArgTok" [style=solid];
"isAttrModifier" [style=solid];
"isBad" [style=solid];
"isBasedOnStyle" [style=solid];
"isBibtexKeyChar" [style=solid];
"isBlank" [style=solid];
"isBlockCommand" [style=solid];
"isBlockElement" [style=solid];
"isBlockQuote" [style=solid];
"isBlockTag" [style=solid];
"isBlockTag\'" [style=solid];
"isBulletListMarker" [style=solid];
"isCapitalized" [style=solid];
"isChunkable" [style=solid];
"isCodeCharStyle" [style=solid];
"isCodeDiv" [style=solid];
"isCommentTag" [style=solid];
"isCommentTitle" [style=solid];
"isCommentTok" [style=solid];
"isCtrlSeq" [style=solid];
"isDisplayMath" [style=solid];
"isEPUBAttr" [style=solid];
"isElem" [style=solid];
"isEmptyPar" [style=solid];
"isEnabled" [style=solid];
"isExternalLink" [style=solid];
"isFontSizeCommand" [style=solid];
"isHeader" [style=solid];
"isHeaderBlock" [style=solid];
"isHorizontalRule" [style=solid];
"isHruleChar" [style=solid];
"isImage" [style=solid];
"isImageFilename" [style=solid];
"isInheritedFromStyles" [style=solid];
"isInlineCommand" [style=solid];
"isInlineTag" [style=solid];
"isInlineTag\'" [style=solid];
"isLetterOrAt" [style=solid];
"isLineBreak" [style=solid];
"isListBlock" [style=solid];
"isListItem" [style=solid];
"isListType" [style=solid];
"isLocatorPunct" [style=solid];
"isLocatorSep" [style=solid];
"isLowerHex" [style=solid];
"isMathEnvironment" [style=solid];
"isMathML" [style=solid];
"isMetaPar" [style=solid];
"isMimeType" [style=solid];
"isNewlineTok" [style=solid];
"isNonNil" [style=solid];
"isNote" [style=solid];
"isNotesBody" [style=solid];
"isNotesDiv" [style=solid];
"isNumber" [style=solid];
"isOk" [style=solid];
"isOrderedListMarker" [style=solid];
"isPara" [style=solid];
"isParaOrList" [style=solid];
"isPlainOrPara" [style=solid];
"isQuoted" [style=solid];
"isRawFormat" [style=solid];
"isRawHtml" [style=solid];
"isRefRemove" [style=solid];
"isRight" [style=solid];
"isSetWithDefault" [style=solid];
"isSet\'" [style=solid];
"isSimpleBlockQuote" [style=solid];
"isSimpleList" [style=solid];
"isSimpleListItem" [style=solid];
"isSmallCaps" [style=solid];
"isSourceAttribute" [style=solid];
"isSp" [style=solid];
"isSpace" [style=solid];
"isSpaceChar" [style=solid];
"isSpaceOrTab" [style=solid];
"isSpaceTok" [style=solid];
"isSpacey" [style=solid];
"isSpacy" [style=solid];
"isSpecial" [style=solid];
"isStyle" [style=solid];
"isStyleToTrace" [style=solid];
"isSymbolTok" [style=solid];
"isTaskListItem" [style=solid];
"isTextFormat" [style=solid];
"isTextTag" [style=solid];
"isTightList" [style=solid];
"isURI" [style=solid];
"isUnderline" [style=solid];
"isValidChar" [style=solid];
"isWidthHeightParameter" [style=solid];
"isWordTok" [style=solid];
"isYesValue" [style=solid];
"italic" [style=solid];
"italicize" [style=solid];
"italics" [style=solid];
"item" [style=solid];
"itemEndsWithTightList" [style=solid];
"itemToReference" [style=solid];
"items" [style=solid];
"iterateS" [style=solid];
"iterateSL" [style=solid];
"iterateS\'" [style=solid];
"jiraLinkToPandoc" [style=solid];
"jiraToPandoc" [style=solid];
"jiraToPandocBlocks" [style=solid];
"jiraToPandocInlines" [style=solid];
"joinLineBlocks" [style=solid];
"jsonMetaToMeta" [style=solid];
"jsonMetaToPairs" [style=solid];
"jumpBack" [style=solid];
"jumpThere" [style=solid];
"keepingTheValue" [style=solid];
"keyToMarkdown" [style=solid];
"keyToRST" [style=solid];
"keyValAttr" [style=solid];
"keyValues" [style=solid];
"keyval" [style=solid];
"keyvals" [style=solid];
"keywordHandlers" [style=solid];
"keywordLine" [style=solid];
"knownLanguages" [style=solid];
"kvPair" [style=solid];
"l" [style=solid];
"label" [style=solid];
"labelFor" [style=solid];
"langAttr" [style=solid];
"langToListingsMap" [style=solid];
"langsList" [style=solid];
"languageFor" [style=solid];
"languageNames" [style=solid];
"languages" [style=solid];
"languagesByExtension" [style=solid];
"latex" [style=solid];
"latexCodeBlock" [style=solid];
"latexEngines" [style=solid];
"latexEnvStart" [style=solid];
"latexFragment" [style=solid];
"latexNames" [style=solid];
"latex\'" [style=solid];
"lbreak" [style=solid];
"lchop" [style=solid];
"leftBiasedMergeRunStyle" [style=solid];
"legacyDateRanges" [style=solid];
"lengthToDim" [style=solid];
"letmacro" [style=solid];
"letterContents" [style=solid];
"lettrine" [style=solid];
"levelElemToLevel" [style=solid];
"lexArgs" [style=solid];
"lexComment" [style=solid];
"lexConditional" [style=solid];
"lexEmptyLine" [style=solid];
"lexGroup" [style=solid];
"lexIncludeFile" [style=solid];
"lexLine" [style=solid];
"lexMacro" [style=solid];
"lexMacroDef" [style=solid];
"lexRoff" [style=solid];
"lexStringDef" [style=solid];
"lexTable" [style=solid];
"lexTableRows" [style=solid];
"lhsCodeBlock" [style=solid];
"lhsCodeBlockBird" [style=solid];
"lhsCodeBlockBirdWith" [style=solid];
"lhsCodeBlockInverseBird" [style=solid];
"lhsCodeBlockLaTeX" [style=solid];
"li" [style=solid];
"liftA" [style=solid];
"liftA2" [style=solid];
"liftA3" [style=solid];
"liftA4" [style=solid];
"liftA5" [style=solid];
"liftA6" [style=solid];
"liftAsSuccess" [style=solid];
"liftIOError" [style=solid];
"liftPandocLua" [style=solid];
"lineBlock" [style=solid];
"lineBlockDirective" [style=solid];
"lineBlockLine" [style=solid];
"lineBlockLines" [style=solid];
"lineBreakToSpace" [style=solid];
"lineClump" [style=solid];
"lineInl" [style=solid];
"lineNumberSwitch" [style=solid];
"lineOfInlines" [style=solid];
"linePart" [style=solid];
"linePartsToInlines" [style=solid];
"linePartsToText" [style=solid];
"lineSeparator" [style=solid];
"linebreak" [style=solid];
"linesToLineBlock" [style=solid];
"linesToPara" [style=solid];
"link" [style=solid];
"linkAttributes" [style=solid];
"linkContent" [style=solid];
"linkLikeOrgRefCite" [style=solid];
"linkName" [style=solid];
"linkOrImage" [style=solid];
"linkRelElement" [style=solid];
"linkRelElements" [style=solid];
"linkTarget" [style=solid];
"linkText" [style=solid];
"linkTitle" [style=solid];
"linkToInlinesF" [style=solid];
"linkifyVariables" [style=solid];
"list" [style=solid];
"listAttribsToString" [style=solid];
"listAttribsToText" [style=solid];
"listBegin" [style=solid];
"listChunk" [style=solid];
"listContinuation" [style=solid];
"listDelimMap" [style=solid];
"listIncrement" [style=solid];
"listItem" [style=solid];
"listItemContent" [style=solid];
"listItemContentsUntil" [style=solid];
"listItemLine" [style=solid];
"listItemToConTeXt" [style=solid];
"listItemToDocbook" [style=solid];
"listItemToDokuWiki" [style=solid];
"listItemToHtml" [style=solid];
"listItemToICML" [style=solid];
"listItemToJATS" [style=solid];
"listItemToLaTeX" [style=solid];
"listItemToMediaWiki" [style=solid];
"listItemToOpenXML" [style=solid];
"listItemToRTF" [style=solid];
"listItemToTEI" [style=solid];
"listItemToTexinfo" [style=solid];
"listItemToTextile" [style=solid];
"listItemToXWiki" [style=solid];
"listItemToZimWiki" [style=solid];
"listItem\'" [style=solid];
"listItemsToDocbook" [style=solid];
"listItemsToICML" [style=solid];
"listItemsToJATS" [style=solid];
"listItemsToOpenDocument" [style=solid];
"listItemsToTEI" [style=solid];
"listLevelStyle" [style=solid];
"listLine" [style=solid];
"listLineCommon" [style=solid];
"listMarkerToId" [style=solid];
"listOfBlocksFilterName" [style=solid];
"listOfInlinesFilterName" [style=solid];
"listParagraphDivs" [style=solid];
"listParagraphStyles" [style=solid];
"listStart" [style=solid];
"listStartChar" [style=solid];
"listStyleMap" [style=solid];
"listTableDirective" [style=solid];
"listTodoMarker" [style=solid];
"listTypeMatches" [style=solid];
"listWrap" [style=solid];
"listenv" [style=solid];
"listingsLanguage" [style=solid];
"listingsToLangMap" [style=solid];
"lit" [style=solid];
"litChar" [style=solid];
"literal" [style=solid];
"literalTag" [style=solid];
"loElemToLevelOverride" [style=solid];
"loadScriptFromDataDir" [style=solid];
"loadStringAsPackage" [style=solid];
"locatorTerms" [style=solid];
"logIOError" [style=solid];
"logMessage" [style=solid];
"logMessageTypeName" [style=solid];
"logOutput" [style=solid];
"lookKey" [style=solid];
"lookupAttr" [style=solid];
"lookupAttrTextBy" [style=solid];
"lookupAttrWithDefault" [style=solid];
"lookupAttr\'" [style=solid];
"lookupDefaultStyle\'" [style=solid];
"lookupDefaultingAttr" [style=solid];
"lookupEndnote" [style=solid];
"lookupEnv" [style=solid];
"lookupFootnote" [style=solid];
"lookupHighlightStyle" [style=solid];
"lookupKey" [style=solid];
"lookupLevel" [style=solid];
"lookupListDefault" [style=solid];
"lookupListStyle" [style=solid];
"lookupListStyleByName" [style=solid];
"lookupMacro" [style=solid];
"lookupMedia" [style=solid];
"lookupMediaFn" [style=solid];
"lookupMetaBlocks" [style=solid];
"lookupMetaBool" [style=solid];
"lookupMetaInlines" [style=solid];
"lookupMetaString" [style=solid];
"lookupNSiri" [style=solid];
"lookupNSprefix" [style=solid];
"lookupPrettyAnchor" [style=solid];
"lookupRelationship" [style=solid];
"lookupResource" [style=solid];
"lookupStyle" [style=solid];
"lookupTerm" [style=solid];
"lookupYAML" [style=solid];
"looseItem" [style=solid];
"lowerAlpha" [style=solid];
"lowerAlphaName" [style=solid];
"lowerRoman" [style=solid];
"lowerRomanName" [style=solid];
"ltSign" [style=solid];
"macro" [style=solid];
"macroArg" [style=solid];
"macroAttr" [style=solid];
"macroAttrs" [style=solid];
"macroDef" [style=solid];
"macroDefinition" [style=solid];
"macroName" [style=solid];
"macroWithParameters" [style=solid];
"makeAttr" [style=solid];
"makeCanonical" [style=solid];
"makeCodeBold" [style=solid];
"makeContent" [style=solid];
"makeDataURI" [style=solid];
"makeDest" [style=solid];
"makeDestName" [style=solid];
"makeEndNotesSlideBlocks" [style=solid];
"makeExample" [style=solid];
"makeHeaderAnchor" [style=solid];
"makeHeaderAnchor\'" [style=solid];
"makeId" [style=solid];
"makeLink" [style=solid];
"makeLinkDest" [style=solid];
"makeListMarkerSpan" [style=solid];
"makeLowercase" [style=solid];
"makeMatcherC" [style=solid];
"makeMathPlainer" [style=solid];
"makeMediaEntries" [style=solid];
"makeMediaEntry" [style=solid];
"makeMenuLine" [style=solid];
"makeMeta" [style=solid];
"makeNoteEntry" [style=solid];
"makePDF" [style=solid];
"makePicElements" [style=solid];
"makeSections" [style=solid];
"makeSelfContained" [style=solid];
"makeSlideIdMap" [style=solid];
"makeSpeakerNotesMap" [style=solid];
"makeTOC" [style=solid];
"makeTOCSlide" [style=solid];
"makeTagSpan" [style=solid];
"makeTagSpan\'" [style=solid];
"makeUppercase" [style=solid];
"makeViewPropsEntry" [style=solid];
"makeWithWkhtmltopdf" [style=solid];
"manToken" [style=solid];
"many1Char" [style=solid];
"many1Till" [style=solid];
"many1TillChar" [style=solid];
"many1TillNOrLessNewlines" [style=solid];
"manyChar" [style=solid];
"manyTillChar" [style=solid];
"manyUntil" [style=solid];
"manyUntilChar" [style=solid];
"mapAlignment" [style=solid];
"mapD" [style=solid];
"mapLeft" [style=solid];
"mapNested" [style=solid];
"mark" [style=solid];
"markupChars" [style=solid];
"matchChildContent" [style=solid];
"matchChildContent\'" [style=solid];
"matchContent" [style=solid];
"matchContent\'" [style=solid];
"matchTagClose" [style=solid];
"matchTagOpen" [style=solid];
"matchingElement" [style=solid];
"math" [style=solid];
"math1CharBetween" [style=solid];
"mathAllowedNewlines" [style=solid];
"mathDisplay" [style=solid];
"mathDisplayWith" [style=solid];
"mathEnd" [style=solid];
"mathEnv" [style=solid];
"mathEnvWith" [style=solid];
"mathForbiddenBorderChars" [style=solid];
"mathInline" [style=solid];
"mathInlineWith" [style=solid];
"mathMLNamespace" [style=solid];
"mathMLToTeXMath" [style=solid];
"mathPostChars" [style=solid];
"mathStart" [style=solid];
"mathTag" [style=solid];
"mathTagLaTeX" [style=solid];
"mathTagParser" [style=solid];
"mathTextBetween" [style=solid];
"mathToJira" [style=solid];
"maxListLevel" [style=solid];
"maybeAddAnchorFrom" [style=solid];
"maybeAttrValue" [style=solid];
"maybeExplicitBlock" [style=solid];
"maybeFromAttrib" [style=solid];
"maybeInAnchorRef" [style=solid];
"maybeRight" [style=solid];
"maybeToChoice" [style=solid];
"maybeToD" [style=solid];
"maybeToEither" [style=solid];
"mbBraced" [style=solid];
"mconcatMapM" [style=solid];
"mediaCategory" [style=solid];
"mediaContentType" [style=solid];
"mediaDirectory" [style=solid];
"mediaDirectoryFn" [style=solid];
"mediaFileContentType" [style=solid];
"mediaItems" [style=solid];
"mediaItemsTypeName" [style=solid];
"mediaRelElement" [style=solid];
"mediaTypeOf" [style=solid];
"memptyLine" [style=solid];
"mergeStrings" [style=solid];
"messageVerbosity" [style=solid];
"meta" [style=solid];
"metaExport" [style=solid];
"metaExportSnippet" [style=solid];
"metaFilterName" [style=solid];
"metaFromDefList" [style=solid];
"metaKey" [style=solid];
"metaLine" [style=solid];
"metaLineStart" [style=solid];
"metaStyles" [style=solid];
"metaToContext" [style=solid];
"metaToContext\'" [style=solid];
"metaToDocProps" [style=solid];
"metaValueToBool" [style=solid];
"metaValueToDate" [style=solid];
"metaValueToDateParts" [style=solid];
"metaValueToInt" [style=solid];
"metaValueToName" [style=solid];
"metaValueToNames" [style=solid];
"metaValueToPath" [style=solid];
"metaValueToPaths" [style=solid];
"metaValueToReference" [style=solid];
"metaValueToString" [style=solid];
"metaValueToText" [style=solid];
"metaValueToVal" [style=solid];
"metadataElement" [style=solid];
"metadataFromMeta" [style=solid];
"metadataSlideId" [style=solid];
"metadataToElement" [style=solid];
"mimeTypes" [style=solid];
"mimeTypesList" [style=solid];
"minted" [style=solid];
"mintedAttr" [style=solid];
"missingCharacterWarnings" [style=solid];
"mixedList" [style=solid];
"mixedList\'" [style=solid];
"mkAbstractNum" [style=solid];
"mkAttr" [style=solid];
"mkE" [style=solid];
"mkEntry" [style=solid];
"mkFallback" [style=solid];
"mkImage" [style=solid];
"mkLink" [style=solid];
"mkLvl" [style=solid];
"mkNum" [style=solid];
"mkNumbering" [style=solid];
"mkitem" [style=solid];
"mknode" [style=solid];
"mktnode" [style=solid];
"mline" [style=solid];
"mmacro" [style=solid];
"mmacroAny" [style=solid];
"mmdHeaderIdentifier" [style=solid];
"mmdTitleBlock" [style=solid];
"modifierFromStyleDiff" [style=solid];
"modifyExtraState" [style=solid];
"modifyIdentifier" [style=solid];
"modifyListLevel" [style=solid];
"modifyMediaRef" [style=solid];
"modifyPureState" [style=solid];
"modifyState" [style=solid];
"monospaceFont" [style=solid];
"monospaced" [style=solid];
"monospacedFont" [style=solid];
"msFormatter" [style=solid];
"msatisfy" [style=solid];
"mtoken" [style=solid];
"multiParBullet" [style=solid];
"multicolumnCell" [style=solid];
"multilineRow" [style=solid];
"multilineTable" [style=solid];
"multilineTableHeader" [style=solid];
"multimarkdownExtensions" [style=solid];
"multirowCell" [style=solid];
"mungeAttrs" [style=solid];
"museAppendElement" [style=solid];
"museGridPart" [style=solid];
"museGridTable" [style=solid];
"museGridTableHeader" [style=solid];
"museGridTableRawLine" [style=solid];
"museGridTableRow" [style=solid];
"museOrderedListMarker" [style=solid];
"museToPandocTable" [style=solid];
"must_be_at_least" [style=solid];
"mvPunct" [style=solid];
"nFBTTBSB" [style=solid];
"nameToMetaValue" [style=solid];
"nameValue" [style=solid];
"nameVariables" [style=solid];
"named" [style=solid];
"namespaces" [style=solid];
"nbsp" [style=solid];
"needsEscaping" [style=solid];
"needsVariationSelector" [style=solid];
"nested" [style=solid];
"nestedInlines" [style=solid];
"nestedString" [style=solid];
"nestedText" [style=solid];
"newBlockTags" [style=solid];
"newFB" [style=solid];
"newOrderedListStyle" [style=solid];
"newParaPropToOpenXml" [style=solid];
"newStdGen" [style=solid];
"newTextPropToOpenXml" [style=solid];
"newToggle" [style=solid];
"newUniqueHash" [style=solid];
"newcommand" [style=solid];
"newenvironment" [style=solid];
"newline" [style=solid];
"newlineTok" [style=solid];
"newlinesCountWithinLimits" [style=solid];
"newtheorem" [style=solid];
"nextItem" [style=solid];
"nl" [style=solid];
"nlToSpace" [style=solid];
"noHtmlPh" [style=solid];
"noPresML" [style=solid];
"noSpaceBefore" [style=solid];
"noautolink" [style=solid];
"nocache" [style=solid];
"nodeToKey" [style=solid];
"nodename" [style=solid];
"nonBodyTextToElement" [style=solid];
"nonEndline" [style=solid];
"nonindentSpaces" [style=solid];
"nonspaceChar" [style=solid];
"nop" [style=solid];
"noparse" [style=solid];
"normalCite" [style=solid];
"normalDefinitionList" [style=solid];
"normalOrgRefCite" [style=solid];
"normalize" [style=solid];
"normalizeColWidths" [style=solid];
"normalizeDate" [style=solid];
"normalizeDate\'" [style=solid];
"normalizeDots" [style=solid];
"normalizeInlineList" [style=solid];
"normalizeInternalPath" [style=solid];
"normalizeKey" [style=solid];
"normalizeMetaValue" [style=solid];
"normalizePath" [style=solid];
"normalizeTable" [style=solid];
"normalizeToClassName" [style=solid];
"normalizeTree" [style=solid];
"notAfterForbiddenBorderChar" [style=solid];
"notAfterString" [style=solid];
"notElemText" [style=solid];
"notExternalLink" [style=solid];
"notFollowedByDivCloser" [style=solid];
"notFollowedByHtmlCloser" [style=solid];
"notFollowedBy\'" [style=solid];
"notFound" [style=solid];
"note" [style=solid];
"noteBlock" [style=solid];
"noteBlock\'" [style=solid];
"noteMarker" [style=solid];
"noteMarker\'" [style=solid];
"noteSize" [style=solid];
"noteToMan" [style=solid];
"noteToMarkdown" [style=solid];
"noteToMuse" [style=solid];
"noteToOrg" [style=solid];
"noteToRST" [style=solid];
"notebookToPandoc" [style=solid];
"notesAndRefs" [style=solid];
"notesToHaddock" [style=solid];
"notesToLaTeX" [style=solid];
"notesToMan" [style=solid];
"notesToMarkdown" [style=solid];
"notesToMuse" [style=solid];
"notesToOrg" [style=solid];
"notesToRST" [style=solid];
"notoc" [style=solid];
"nowiki" [style=solid];
"nsIDmap" [style=solid];
"nsIDs" [style=solid];
"numElemToNum" [style=solid];
"numUnit" [style=solid];
"numberedCaption" [style=solid];
"numberedFigureCaption" [style=solid];
"numberedItem" [style=solid];
"numberedTableCaption" [style=solid];
"obeylines" [style=solid];
"obfuscateChar" [style=solid];
"obfuscateLink" [style=solid];
"obfuscateString" [style=solid];
"olMarker" [style=solid];
"one" [style=solid];
"oneOfStrings" [style=solid];
"oneOfStringsCI" [style=solid];
"oneOfStrings\'" [style=solid];
"oneOfStrings\'\'" [style=solid];
"onlySimpleTableCells" [style=solid];
"openTag" [style=solid];
"openURL" [style=solid];
"opfName" [style=solid];
"opt" [style=solid];
"optToOutputSettings" [style=solid];
"optionSet" [style=solid];
"optionString" [style=solid];
"options" [style=solid];
"optionsToParserState" [style=solid];
"ordList" [style=solid];
"ordNub" [style=solid];
"orderedItemToOpenDocument" [style=solid];
"orderedList" [style=solid];
"orderedListAtDepth" [style=solid];
"orderedListItemAtDepth" [style=solid];
"orderedListItemToAsciiDoc" [style=solid];
"orderedListItemToDokuWiki" [style=solid];
"orderedListItemToHaddock" [style=solid];
"orderedListItemToMan" [style=solid];
"orderedListItemToMarkdown" [style=solid];
"orderedListItemToMs" [style=solid];
"orderedListItemToOrg" [style=solid];
"orderedListItemToRST" [style=solid];
"orderedListItemToZimWiki" [style=solid];
"orderedListItemsUntil" [style=solid];
"orderedListLevelStyle" [style=solid];
"orderedListMarker" [style=solid];
"orderedListMarkers" [style=solid];
"orderedListName" [style=solid];
"orderedListStart" [style=solid];
"orderedListStyles" [style=solid];
"orderedListToOpenDocument" [style=solid];
"orderedListUntil" [style=solid];
"orderedList\'" [style=solid];
"orderedMarkers" [style=solid];
"ordinalize" [style=solid];
"orgArgKey" [style=solid];
"orgArgWord" [style=solid];
"orgArgWordChar" [style=solid];
"orgBlock" [style=solid];
"orgLangIdentifiers" [style=solid];
"orgParamValue" [style=solid];
"orgPath" [style=solid];
"orgRefCite" [style=solid];
"orgRefCiteKey" [style=solid];
"orgRefCiteMode" [style=solid];
"orgTable" [style=solid];
"orgTagWord" [style=solid];
"orgTagWordChar" [style=solid];
"orgToPandocTable" [style=solid];
"originalLang" [style=solid];
"outputToBlock" [style=solid];
"overlaySpecification" [style=solid];
"overlayTok" [style=solid];
"overrideContentTypeToElem" [style=solid];
"pAny" [style=solid];
"pBad" [style=solid];
"pBalancedBraces" [style=solid];
"pBdo" [style=solid];
"pBlank" [style=solid];
"pBlockQuote" [style=solid];
"pBody" [style=solid];
"pBulletList" [style=solid];
"pCSSComment" [style=solid];
"pCSSImport" [style=solid];
"pCSSOther" [style=solid];
"pCSSUrl" [style=solid];
"pCSSWhite" [style=solid];
"pCSV" [style=solid];
"pCSVCell" [style=solid];
"pCSVDelim" [style=solid];
"pCSVQuotedCell" [style=solid];
"pCSVRow" [style=solid];
"pCSVUnquotedCell" [style=solid];
"pCell" [style=solid];
"pCloses" [style=solid];
"pCode" [style=solid];
"pCodeBlock" [style=solid];
"pCodeWithClass" [style=solid];
"pCol" [style=solid];
"pColgroup" [style=solid];
"pDefListItem" [style=solid];
"pDefinitionList" [style=solid];
"pDiv" [style=solid];
"pDollarsMath" [style=solid];
"pEmph" [style=solid];
"pFigure" [style=solid];
"pHead" [style=solid];
"pHeader" [style=solid];
"pHeaderRow" [style=solid];
"pHeading" [style=solid];
"pHrule" [style=solid];
"pHtml" [style=solid];
"pHtmlBlock" [style=solid];
"pIframe" [style=solid];
"pImage" [style=solid];
"pInTag" [style=solid];
"pInTagWithAttribs" [style=solid];
"pInTags" [style=solid];
"pInTags\'" [style=solid];
"pInlinesInTags" [style=solid];
"pLineBlock" [style=solid];
"pLineBreak" [style=solid];
"pLink" [style=solid];
"pList" [style=solid];
"pListItem" [style=solid];
"pLocation" [style=solid];
"pLocatorDelimited" [style=solid];
"pLocatorIntegrated" [style=solid];
"pLocatorLabelDelimited" [style=solid];
"pLocatorLabelIntegrated" [style=solid];
"pLocatorLabel\'" [style=solid];
"pLocatorPunct" [style=solid];
"pLocatorSep" [style=solid];
"pLocatorWordIntegrated" [style=solid];
"pLocatorWords" [style=solid];
"pMatchChar" [style=solid];
"pMath" [style=solid];
"pNumInfo" [style=solid];
"pOrderedList" [style=solid];
"pPageSeq" [style=solid];
"pPageUnit" [style=solid];
"pPara" [style=solid];
"pPdfSize" [style=solid];
"pPlain" [style=solid];
"pQ" [style=solid];
"pQuoted" [style=solid];
"pRawHtmlBlock" [style=solid];
"pRawHtmlInline" [style=solid];
"pRawTag" [style=solid];
"pRawTeX" [style=solid];
"pRoman" [style=solid];
"pRow" [style=solid];
"pSat" [style=solid];
"pSatisfy" [style=solid];
"pScriptMath" [style=solid];
"pSelfClosing" [style=solid];
"pSmall" [style=solid];
"pSpace" [style=solid];
"pSpan" [style=solid];
"pSpanLike" [style=solid];
"pStr" [style=solid];
"pStrikeout" [style=solid];
"pStrong" [style=solid];
"pStyleM" [style=solid];
"pSubscript" [style=solid];
"pSuperscript" [style=solid];
"pSvg" [style=solid];
"pSymbol" [style=solid];
"pTable" [style=solid];
"pTableBody" [style=solid];
"pTableFoot" [style=solid];
"pTableHead" [style=solid];
"pTagContents" [style=solid];
"pTagText" [style=solid];
"pUnderline" [style=solid];
"pUrl" [style=solid];
"pad" [style=solid];
"pagebreak" [style=solid];
"pairsCommonState" [style=solid];
"pairsToJSONMeta" [style=solid];
"pandocErrorName" [style=solid];
"pandocExtensions" [style=solid];
"pandocFilterNames" [style=solid];
"pandocLangToOrg" [style=solid];
"pandocOrgCite" [style=solid];
"pandocPackageSearcher" [style=solid];
"pandocTable" [style=solid];
"pandocTitleBlock" [style=solid];
"pandocToAsciiDoc" [style=solid];
"pandocToConTeXt" [style=solid];
"pandocToDokuWiki" [style=solid];
"pandocToEPUB" [style=solid];
"pandocToFB2" [style=solid];
"pandocToHaddock" [style=solid];
"pandocToHtml" [style=solid];
"pandocToJira" [style=solid];
"pandocToLaTeX" [style=solid];
"pandocToMan" [style=solid];
"pandocToMarkdown" [style=solid];
"pandocToMediaWiki" [style=solid];
"pandocToMs" [style=solid];
"pandocToMuse" [style=solid];
"pandocToNotebook" [style=solid];
"pandocToODT" [style=solid];
"pandocToOrg" [style=solid];
"pandocToRST" [style=solid];
"pandocToTexinfo" [style=solid];
"pandocToTextile" [style=solid];
"pandocToZimWiki" [style=solid];
"pandocVersion" [style=solid];
"parPartToInlines" [style=solid];
"parPartToInlines\'" [style=solid];
"parPartToText" [style=solid];
"parStyle" [style=solid];
"parStyleToTransform" [style=solid];
"parStylesToDoc" [style=solid];
"para" [style=solid];
"paraContentsUntil" [style=solid];
"paraElemToElements" [style=solid];
"paraListStyle" [style=solid];
"paraOrPlain" [style=solid];
"paraStyle" [style=solid];
"paraStyleFromParent" [style=solid];
"paraTableStyles" [style=solid];
"paraUntil" [style=solid];
"paragraph" [style=solid];
"paragraphName" [style=solid];
"paragraphToElement" [style=solid];
"paramToPair" [style=solid];
"parbox" [style=solid];
"parenWrapped" [style=solid];
"parenthesizedChars" [style=solid];
"parents" [style=solid];
"paropt" [style=solid];
"parseAligns" [style=solid];
"parseAlternatingFonts" [style=solid];
"parseAmuseDirective" [style=solid];
"parseAnchor" [style=solid];
"parseAnnotation" [style=solid];
"parseAnnotationChild" [style=solid];
"parseAttr" [style=solid];
"parseAttrs" [style=solid];
"parseAuthor" [style=solid];
"parseAuthorChild" [style=solid];
"parseBCP47" [style=solid];
"parseBinaryElement" [style=solid];
"parseBlock" [style=solid];
"parseBlockLines" [style=solid];
"parseBlockQuote" [style=solid];
"parseBlocks" [style=solid];
"parseBlocksTill" [style=solid];
"parseBodyChild" [style=solid];
"parseBold" [style=solid];
"parseCSSUrls" [style=solid];
"parseCSV" [style=solid];
"parseCharHtmlContentWithAttrs" [style=solid];
"parseCitation" [style=solid];
"parseCite" [style=solid];
"parseCiteChild" [style=solid];
"parseCodeBlock" [style=solid];
"parseCoverPage" [style=solid];
"parseCreole" [style=solid];
"parseDate" [style=solid];
"parseDefinitionList" [style=solid];
"parseDescriptionChild" [style=solid];
"parseDirectiveKey" [style=solid];
"parseDokuWiki" [style=solid];
"parseEmacsDirective" [style=solid];
"parseEmailLink" [style=solid];
"parseEntry" [style=solid];
"parseEpigraph" [style=solid];
"parseEpigraphChild" [style=solid];
"parseFictionBookChild" [style=solid];
"parseFieldInfo" [style=solid];
"parseFormat" [style=solid];
"parseFormatSpec" [style=solid];
"parseFromString" [style=solid];
"parseFromString\'" [style=solid];
"parseHeader" [style=solid];
"parseHtmlContent" [style=solid];
"parseHtmlContentWithAttrs" [style=solid];
"parseImageElement" [style=solid];
"parseInline" [style=solid];
"parseInlineFromText" [style=solid];
"parseInlineImageElement" [style=solid];
"parseInlines" [style=solid];
"parseItalic" [style=solid];
"parseLaTeX" [style=solid];
"parseLink" [style=solid];
"parseLinkType" [style=solid];
"parseList" [style=solid];
"parseListItem" [style=solid];
"parseListStyleType" [style=solid];
"parseListingsOptions" [style=solid];
"parseLocator" [style=solid];
"parseMailto" [style=solid];
"parseMan" [style=solid];
"parseManifest" [style=solid];
"parseMarkdown" [style=solid];
"parseMediaWiki" [style=solid];
"parseMeta" [style=solid];
"parseMetaItem" [style=solid];
"parseMetadata" [style=solid];
"parseMixed" [style=solid];
"parseMonth" [style=solid];
"parseMuse" [style=solid];
"parseNamedStyle" [style=solid];
"parseNamedStyleChild" [style=solid];
"parseNewParagraph" [style=solid];
"parseNote" [style=solid];
"parseNotesBody" [style=solid];
"parseNotesBodyChild" [style=solid];
"parseNum" [style=solid];
"parseNumPart" [style=solid];
"parseOptions" [style=solid];
"parseOrg" [style=solid];
"parsePType" [style=solid];
"parsePara" [style=solid];
"parsePoem" [style=solid];
"parsePoemChild" [style=solid];
"parseRST" [style=solid];
"parseRawLaTeX" [style=solid];
"parseRef" [style=solid];
"parseRefList" [style=solid];
"parseRootElement" [style=solid];
"parseRow" [style=solid];
"parseSection" [style=solid];
"parseSectionChild" [style=solid];
"parseSimpleCell" [style=solid];
"parseSpine" [style=solid];
"parseStanza" [style=solid];
"parseStanzaChild" [style=solid];
"parseStyleLinkType" [style=solid];
"parseStyleType" [style=solid];
"parseSubtitle" [style=solid];
"parseT2T" [style=solid];
"parseTWiki" [style=solid];
"parseTable" [style=solid];
"parseTableCell" [style=solid];
"parseTableRow" [style=solid];
"parseTextile" [style=solid];
"parseThen" [style=solid];
"parseTikiWiki" [style=solid];
"parseTitle" [style=solid];
"parseTitleContent" [style=solid];
"parseTitleInfoChild" [style=solid];
"parseTitleType" [style=solid];
"parseTypeAttr" [style=solid];
"parseURIReference\'" [style=solid];
"parseVimwiki" [style=solid];
"parseWidth" [style=solid];
"parseWidthHeight" [style=solid];
"parseXMLDocE" [style=solid];
"parseXml" [style=solid];
"pathToOverride" [style=solid];
"patternToFilePaths" [style=solid];
"patternsToFilePaths" [style=solid];
"pcallWithTraceback" [style=solid];
"pdfEngines" [style=solid];
"pdfSize" [style=solid];
"pdfWriterAndProg" [style=solid];
"peekBlock" [style=solid];
"peekCaption" [style=solid];
"peekCell" [style=solid];
"peekEither" [style=solid];
"peekInline" [style=solid];
"peekMediaItems" [style=solid];
"peekMetaValue" [style=solid];
"peekPandocError" [style=solid];
"peekSimpleTable" [style=solid];
"peekVersion" [style=solid];
"percent" [style=solid];
"ph" [style=solid];
"phpMarkdownExtraExtensions" [style=solid];
"pickStyleAttrProps" [style=solid];
"pickStylesToKVs" [style=solid];
"pictRefsToRST" [style=solid];
"pictToRST" [style=solid];
"pipeBreak" [style=solid];
"pipeFn" [style=solid];
"pipeProcess" [style=solid];
"pipeTable" [style=solid];
"pipeTableCell" [style=solid];
"pipeTableHeaderPart" [style=solid];
"pipeTableRow" [style=solid];
"pixelsToEmu" [style=solid];
"placeholder" [style=solid];
"plain" [style=solid];
"plainExtensions" [style=solid];
"plainInlineML" [style=solid];
"plainInlineML\'" [style=solid];
"plainLink" [style=solid];
"plainParaInlines" [style=solid];
"plainTitleBlock" [style=solid];
"plainToPara" [style=solid];
"plainify" [style=solid];
"planningInfo" [style=solid];
"planningToBlock" [style=solid];
"playTag" [style=solid];
"polyglossiaLangToBCP47" [style=solid];
"popElement" [style=solid];
"popInlineCharStack" [style=solid];
"popOption" [style=solid];
"popStyle" [style=solid];
"popStyle\'" [style=solid];
"possiblyEmptyLinkTarget" [style=solid];
"post_process" [style=solid];
"post_process\'" [style=solid];
"ppTopElement" [style=solid];
"preamble" [style=solid];
"prefix" [style=solid];
"prefixedId" [style=solid];
"preformatted" [style=solid];
"prepSlides" [style=solid];
"prepareIteration" [style=solid];
"prepareMatchersC" [style=solid];
"prependHash" [style=solid];
"preprocessInlineList" [style=solid];
"presHasSpeakerNotes" [style=solid];
"presML" [style=solid];
"presentationToArchive" [style=solid];
"presentationToArchiveP" [style=solid];
"presentationToContentTypes" [style=solid];
"presentationToPresEntry" [style=solid];
"presentationToPresentationElement" [style=solid];
"presentationToRels" [style=solid];
"presentationToRelsEntry" [style=solid];
"presentationToSldIdLst" [style=solid];
"prettyBlock" [style=solid];
"prettyList" [style=solid];
"primEscape" [style=solid];
"procImgurl" [style=solid];
"procLink" [style=solid];
"procLink\'" [style=solid];
"processCitations" [style=solid];
"processHBox" [style=solid];
"producingExtraState" [style=solid];
"promoteHeaders" [style=solid];
"proof" [style=solid];
"propertiesDrawer" [style=solid];
"propertiesToAttr" [style=solid];
"protectCase" [style=solid];
"protectCode" [style=solid];
"pushBlock" [style=solid];
"pushCaption" [style=solid];
"pushCell" [style=solid];
"pushCloneTable" [style=solid];
"pushElement" [style=solid];
"pushFilterFunction" [style=solid];
"pushInline" [style=solid];
"pushIterator" [style=solid];
"pushMediaItems" [style=solid];
"pushMetaValue" [style=solid];
"pushModule" [style=solid];
"pushPandocError" [style=solid];
"pushSimpleTable" [style=solid];
"pushStyle" [style=solid];
"pushStyle\'" [style=solid];
"pushToInlineCharStack" [style=solid];
"pushVersion" [style=solid];
"pushViaCall" [style=solid];
"pushViaConstructor" [style=solid];
"putConstructorsInRegistry" [style=solid];
"putPrettyAnchor" [style=solid];
"putPureState" [style=solid];
"putStr" [style=solid];
"putStrLn" [style=solid];
"putStrLnWith" [style=solid];
"putStrWith" [style=solid];
"qname" [style=solid];
"qualifyName" [style=solid];
"querySingletonsList" [style=solid];
"quote" [style=solid];
"quoteArg" [style=solid];
"quoteChar" [style=solid];
"quoteTag" [style=solid];
"quoted" [style=solid];
"quotedBlock" [style=solid];
"quotedReferenceName" [style=solid];
"quotedString" [style=solid];
"quotedTitle" [style=solid];
"quotedToJira" [style=solid];
"quoted\'" [style=solid];
"rStyleM" [style=solid];
"raw" [style=solid];
"rawAttribute" [style=solid];
"rawBlock" [style=solid];
"rawBlockContent" [style=solid];
"rawBlockLines" [style=solid];
"rawBlockOr" [style=solid];
"rawBlockToJira" [style=solid];
"rawConTeXtEnvironment" [style=solid];
"rawEnv" [style=solid];
"rawExportLine" [style=solid];
"rawField" [style=solid];
"rawFieldListItem" [style=solid];
"rawHtmlBlock" [style=solid];
"rawHtmlBlocks" [style=solid];
"rawHtmlInline" [style=solid];
"rawInlineOr" [style=solid];
"rawLaTeXBlock" [style=solid];
"rawLaTeXBlock\'" [style=solid];
"rawLaTeXInline" [style=solid];
"rawLaTeXInline\'" [style=solid];
"rawLaTeXParser" [style=solid];
"rawLine" [style=solid];
"rawLines" [style=solid];
"rawListItem" [style=solid];
"rawMathBetween" [style=solid];
"rawOrgLine" [style=solid];
"rawTableLine" [style=solid];
"rawTeXBlock" [style=solid];
"rawTitleBlockLine" [style=solid];
"rawVerbEnv" [style=solid];
"rawVerbatimBlock" [style=solid];
"rawWord" [style=solid];
"rawopt" [style=solid];
"rchop" [style=solid];
"rdfaAttributes" [style=solid];
"readAllStyles" [style=solid];
"readAnchorAttr" [style=solid];
"readAttr" [style=solid];
"readAttrWithDefault" [style=solid];
"readAttr\'" [style=solid];
"readAutomaticStyles" [style=solid];
"readBibLaTeX" [style=solid];
"readBibTeX" [style=solid];
"readBibTeX\'" [style=solid];
"readBibtexString" [style=solid];
"readBlock" [style=solid];
"readBlocks" [style=solid];
"readCSV" [style=solid];
"readCommonMark" [style=solid];
"readCreole" [style=solid];
"readCslJson" [style=solid];
"readDataFile" [style=solid];
"readDataURI" [style=solid];
"readDefaultDataFile" [style=solid];
"readDefaultStyle" [style=solid];
"readDoc" [style=solid];
"readDocBook" [style=solid];
"readDocx" [style=solid];
"readDokuWiki" [style=solid];
"readEPUB" [style=solid];
"readFB2" [style=solid];
"readFile" [style=solid];
"readFileFromDirs" [style=solid];
"readFileLazy" [style=solid];
"readFileStrict" [style=solid];
"readFile\'" [style=solid];
"readFontPitches" [style=solid];
"readHaddock" [style=solid];
"readHaddockEither" [style=solid];
"readHtml" [style=solid];
"readInline" [style=solid];
"readInlines" [style=solid];
"readIpynb" [style=solid];
"readJATS" [style=solid];
"readJSON" [style=solid];
"readJira" [style=solid];
"readLaTeX" [style=solid];
"readLineMode" [style=solid];
"readListLevelStyle" [style=solid];
"readListLevelStyles" [style=solid];
"readListStyle" [style=solid];
"readLookupable" [style=solid];
"readLookupables" [style=solid];
"readMan" [style=solid];
"readMarkdown" [style=solid];
"readMediaWiki" [style=solid];
"readMetaValue" [style=solid];
"readMuse" [style=solid];
"readNSattributes" [style=solid];
"readNative" [style=solid];
"readOPML" [style=solid];
"readOdt" [style=solid];
"readOdt\'" [style=solid];
"readOrg" [style=solid];
"readParaProperties" [style=solid];
"readPercent" [style=solid];
"readRST" [style=solid];
"readSource" [style=solid];
"readStrikeThroughMode" [style=solid];
"readStyle" [style=solid];
"readStyleByName" [style=solid];
"readStyleProperties" [style=solid];
"readStyles" [style=solid];
"readStylesAt" [style=solid];
"readTWiki" [style=solid];
"readTextProperties" [style=solid];
"readTextile" [style=solid];
"readTikiWiki" [style=solid];
"readTranslations" [style=solid];
"readTxt2Tags" [style=solid];
"readURI" [style=solid];
"readUnderlineMode" [style=solid];
"readUnicodeChar" [style=solid];
"readUtf8File" [style=solid];
"readVimwiki" [style=solid];
"readWith" [style=solid];
"readWithM" [style=solid];
"readWithMTokens" [style=solid];
"read_body" [style=solid];
"read_bookmark" [style=solid];
"read_bookmark_ref" [style=solid];
"read_bookmark_start" [style=solid];
"read_citation" [style=solid];
"read_frame" [style=solid];
"read_frame_child" [style=solid];
"read_frame_img" [style=solid];
"read_frame_mathml" [style=solid];
"read_frame_text_box" [style=solid];
"read_frame_title" [style=solid];
"read_header" [style=solid];
"read_img_with_caption" [style=solid];
"read_line_break" [style=solid];
"read_link" [style=solid];
"read_list" [style=solid];
"read_list_item" [style=solid];
"read_note" [style=solid];
"read_note_body" [style=solid];
"read_paragraph" [style=solid];
"read_plain_text" [style=solid];
"read_reference_ref" [style=solid];
"read_reference_start" [style=solid];
"read_spaces" [style=solid];
"read_span" [style=solid];
"read_table" [style=solid];
"read_table_cell" [style=solid];
"read_table_row" [style=solid];
"read_text" [style=solid];
"read_text_seq" [style=solid];
"readerState" [style=solid];
"readers" [style=solid];
"readersNames" [style=solid];
"recordAnchorId" [style=solid];
"recover" [style=solid];
"recurseOnList" [style=solid];
"refTitle" [style=solid];
"reference" [style=solid];
"referenceKey" [style=solid];
"referenceLink" [style=solid];
"referenceName" [style=solid];
"referenceNames" [style=solid];
"referenceTitle" [style=solid];
"referenceToMetaValue" [style=solid];
"referencedNote" [style=solid];
"refsToMarkdown" [style=solid];
"refsToRST" [style=solid];
"reg" [style=solid];
"regLink" [style=solid];
"registerAnchorId" [style=solid];
"registerFilterFunction" [style=solid];
"registerHeader" [style=solid];
"registerImage" [style=solid];
"registerImplicitHeader" [style=solid];
"registerLink" [style=solid];
"registerMacro" [style=solid];
"registerMedia" [style=solid];
"registerNotes" [style=solid];
"registerTodoSequence" [style=solid];
"regularKey" [style=solid];
"regularSymbol" [style=solid];
"regularText" [style=solid];
"relElemToRelationship" [style=solid];
"relToElement" [style=solid];
"relatorMap" [style=solid];
"relators" [style=solid];
"relsToElement" [style=solid];
"removeDoubleQuotes" [style=solid];
"removeEPUBAttrs" [style=solid];
"removeExplicitlyExcludedNodes" [style=solid];
"removeExtra0s" [style=solid];
"removeFinalBar" [style=solid];
"removeFinalPeriod" [style=solid];
"removeFormatting" [style=solid];
"removeHash" [style=solid];
"removeKeyValues" [style=solid];
"removeListDivs" [style=solid];
"removeListDivs\'" [style=solid];
"removeMeta" [style=solid];
"removeNote" [style=solid];
"removeOneLeadingSpace" [style=solid];
"removeOrphanAnchors" [style=solid];
"removeOrphanAnchors\'" [style=solid];
"removeOrphanAnchors\'\'" [style=solid];
"removeParaLinks" [style=solid];
"removePrefix" [style=solid];
"removeStyleNamed" [style=solid];
"renameImages" [style=solid];
"renameMeta" [style=solid];
"renderDottedNum" [style=solid];
"renderFootnotes" [style=solid];
"renderHtml\'" [style=solid];
"renderInlineList" [style=solid];
"renderLang" [style=solid];
"renderRole" [style=solid];
"renderSection" [style=solid];
"renderSections" [style=solid];
"renderTags\'" [style=solid];
"renderXml" [style=solid];
"renumId" [style=solid];
"renumIdMap" [style=solid];
"renumIds" [style=solid];
"replaceAnchor" [style=solid];
"replaceAttr" [style=solid];
"replaceExtraState" [style=solid];
"replaceImagesWithAlt" [style=solid];
"replaceNamedChildren" [style=solid];
"replaceNewlines" [style=solid];
"replaceNotes" [style=solid];
"replaceNotes\'" [style=solid];
"replaceSmallCaps" [style=solid];
"report" [style=solid];
"reportLogMessages" [style=solid];
"requireDigits" [style=solid];
"requireRomansOrDigits" [style=solid];
"requiredFiles" [style=solid];
"reservedSlideIds" [style=solid];
"resetCaption" [style=solid];
"resetEmphasisNewlines" [style=solid];
"resetField" [style=solid];
"resetFirstPara" [style=solid];
"resetIndent" [style=solid];
"resolveAlias" [style=solid];
"resolveCrossRef" [style=solid];
"resolveCrossRefs" [style=solid];
"resolveDependentRunStyle" [style=solid];
"resolveGlyph" [style=solid];
"resolveKey" [style=solid];
"resolveKey\'" [style=solid];
"resolveMacro" [style=solid];
"resolveRefs" [style=solid];
"resolveText" [style=solid];
"retokenizeComment" [style=solid];
"returnF" [style=solid];
"returnV" [style=solid];
"reverseComposition" [style=solid];
"reverseMimeTypes" [style=solid];
"rewriteLink\'" [style=solid];
"rewriteLinks" [style=solid];
"rightTag" [style=solid];
"roleAfter" [style=solid];
"roleBefore" [style=solid];
"roleMarker" [style=solid];
"roleName" [style=solid];
"romanNumeral" [style=solid];
"romanNumeralArg" [style=solid];
"romanNumeralLower" [style=solid];
"romanNumeralUpper" [style=solid];
"romanOne" [style=solid];
"rowCells" [style=solid];
"rowListToHtml" [style=solid];
"rowListToJats" [style=solid];
"rowToBlocksList" [style=solid];
"rowToContent" [style=solid];
"rowToParagraphs" [style=solid];
"rowsToTable" [style=solid];
"rowsep" [style=solid];
"rowspanAttrib" [style=solid];
"rtfCompact" [style=solid];
"rtfEmbedImage" [style=solid];
"rtfPar" [style=solid];
"rtfParSpaced" [style=solid];
"rule" [style=solid];
"ruleParser" [style=solid];
"runAll" [style=solid];
"runConverter" [style=solid];
"runConverter\'" [style=solid];
"runD" [style=solid];
"runDefaultConverter" [style=solid];
"runDokuWiki" [style=solid];
"runElemToInlines" [style=solid];
"runElemToText" [style=solid];
"runF" [style=solid];
"runFilterFile" [style=solid];
"runFilterFunction" [style=solid];
"runIO" [style=solid];
"runIOorExplode" [style=solid];
"runJSONFilter" [style=solid];
"runLua" [style=solid];
"runOnSequence" [style=solid];
"runOnValue" [style=solid];
"runP" [style=solid];
"runPandocLua" [style=solid];
"runPres" [style=solid];
"runPure" [style=solid];
"runStyleToTransform" [style=solid];
"runTeXProgram" [style=solid];
"runTectonic" [style=solid];
"runToInlines" [style=solid];
"runToText" [style=solid];
"runUniqueSlideId" [style=solid];
"safeRead" [style=solid];
"safeStrRead" [style=solid];
"satisfyTok" [style=solid];
"scaleDimension" [style=solid];
"scanForPipe" [style=solid];
"schemes" [style=solid];
"searchAttr" [style=solid];
"searchAttrIn" [style=solid];
"section" [style=solid];
"sectionFooter" [style=solid];
"sectionHeader" [style=solid];
"sectionLevelToText" [style=solid];
"sectionToListItem" [style=solid];
"sectioningContent" [style=solid];
"selfClosingBookmark" [style=solid];
"selfClosingTag" [style=solid];
"selflinkOrImage" [style=solid];
"sepBodyParts" [style=solid];
"sepBy1\'" [style=solid];
"sepPipe" [style=solid];
"separateBlocks" [style=solid];
"separateBlocks\'" [style=solid];
"separateTables" [style=solid];
"separator" [style=solid];
"setCaption" [style=solid];
"setDefaultLanguage" [style=solid];
"setEmphasisPostChar" [style=solid];
"setEmphasisPreChar" [style=solid];
"setEmptyLine" [style=solid];
"setExcludedTags" [style=solid];
"setExtraState" [style=solid];
"setField" [style=solid];
"setFirstPara" [style=solid];
"setFont" [style=solid];
"setGlobal" [style=solid];
"setGlobals" [style=solid];
"setInChapter" [style=solid];
"setInDefinitionList" [style=solid];
"setInPlain" [style=solid];
"setInlineChildren" [style=solid];
"setInputFiles" [style=solid];
"setIntraword" [style=solid];
"setMediaBag" [style=solid];
"setNoCheckCertificate" [style=solid];
"setOutputFile" [style=solid];
"setRequestHeader" [style=solid];
"setResourcePath" [style=solid];
"setSelectedTags" [style=solid];
"setToggle" [style=solid];
"setTrace" [style=solid];
"setTranslations" [style=solid];
"setUserDataDir" [style=solid];
"setVariable" [style=solid];
"setVerbosity" [style=solid];
"setextHChars" [style=solid];
"setextHeader" [style=solid];
"setextHeaderEnd" [style=solid];
"setpos" [style=solid];
"setting" [style=solid];
"sha1" [style=solid];
"shapeHasId" [style=solid];
"shapeToElement" [style=solid];
"shapeToElements" [style=solid];
"shapesToElements" [style=solid];
"shiftListLevel" [style=solid];
"shouldEscapeText" [style=solid];
"showChapter" [style=solid];
"showDateTimeISO8601" [style=solid];
"showDateTimeRFC822" [style=solid];
"showFl" [style=solid];
"showInInch" [style=solid];
"showInPixel" [style=solid];
"showLogMessage" [style=solid];
"showPos" [style=solid];
"showVerbatimCData" [style=solid];
"showVerboseInfo" [style=solid];
"siUnit" [style=solid];
"siUnitMap" [style=solid];
"signedNumber" [style=solid];
"simpTable" [style=solid];
"simpleCiteArgs" [style=solid];
"simpleDashedLines" [style=solid];
"simpleInline" [style=solid];
"simpleList" [style=solid];
"simpleReferenceName" [style=solid];
"simpleSubOrSuperText" [style=solid];
"simpleTable" [style=solid];
"simpleTableFooter" [style=solid];
"simpleTableHeader" [style=solid];
"simpleTableRawLine" [style=solid];
"simpleTableRawLineWithEmptyCell" [style=solid];
"simpleTableRow" [style=solid];
"simpleTableSep" [style=solid];
"simpleTableSplitLine" [style=solid];
"simpleTable\'" [style=solid];
"singleChar" [style=solid];
"singleElement" [style=solid];
"singleHeader" [style=solid];
"singleHeader\'" [style=solid];
"singleItemHeaderToHeader" [style=solid];
"singleParaToPlain" [style=solid];
"singleQuote" [style=solid];
"singleQuoteEnd" [style=solid];
"singleQuoteStart" [style=solid];
"singleQuoted" [style=solid];
"singleTok" [style=solid];
"singleton" [style=solid];
"sizeInPixels" [style=solid];
"sizeInPoints" [style=solid];
"skip" [style=solid];
"skipNonindentSpaces" [style=solid];
"skipSpaces" [style=solid];
"skipSpaces1" [style=solid];
"skipUnknownMacro" [style=solid];
"skipopts" [style=solid];
"slideNum" [style=solid];
"slideToElement" [style=solid];
"slideToEntry" [style=solid];
"slideToFilePath" [style=solid];
"slideToPresRel" [style=solid];
"slideToRelId" [style=solid];
"slideToSldIdElement" [style=solid];
"slideToSlideRelElement" [style=solid];
"slideToSlideRelEntry" [style=solid];
"slideToSpeakerNotesElement" [style=solid];
"slideToSpeakerNotesEntry" [style=solid];
"slideToSpeakerNotesRelElement" [style=solid];
"slideToSpeakerNotesRelEntry" [style=solid];
"smallCapsName" [style=solid];
"smart" [style=solid];
"smartPunctuation" [style=solid];
"smushBlocks" [style=solid];
"smushInlines" [style=solid];
"solidify" [style=solid];
"source" [style=solid];
"sp" [style=solid];
"space" [style=solid];
"spaceAtEnd" [style=solid];
"spaceBeforeAfter" [style=solid];
"spaceChar" [style=solid];
"spaceChars" [style=solid];
"spaceOutInlines" [style=solid];
"spaceOutInlinesL" [style=solid];
"spaceOutInlinesR" [style=solid];
"spaceParas" [style=solid];
"spaceTabChar" [style=solid];
"spaces" [style=solid];
"spaces1" [style=solid];
"spacetab" [style=solid];
"spanFoldUpList" [style=solid];
"spanHtml" [style=solid];
"spanToJira" [style=solid];
"spansToKeep" [style=solid];
"speakerNotesBody" [style=solid];
"speakerNotesSlideImage" [style=solid];
"speakerNotesSlideNumber" [style=solid];
"speakerNotesSlideRelElement" [style=solid];
"specFor" [style=solid];
"special" [style=solid];
"specialAttr" [style=solid];
"specialAttribute" [style=solid];
"specialChars" [style=solid];
"specialLine" [style=solid];
"split" [style=solid];
"splitAt\'" [style=solid];
"splitBibs" [style=solid];
"splitBlocks" [style=solid];
"splitBlocks\'" [style=solid];
"splitBy" [style=solid];
"splitByAnd" [style=solid];
"splitByIndices" [style=solid];
"splitCellHang" [style=solid];
"splitField" [style=solid];
"splitInp" [style=solid];
"splitInterwiki" [style=solid];
"splitIntoHeaderAndBody" [style=solid];
"splitKeys" [style=solid];
"splitListNesting" [style=solid];
"splitSentences" [style=solid];
"splitStrWhen" [style=solid];
"splitStringByIndices" [style=solid];
"splitTextBy" [style=solid];
"splitTextByIndices" [style=solid];
"splitWordTok" [style=solid];
"spnl" [style=solid];
"spnl\'" [style=solid];
"squashProps" [style=solid];
"stackInlines" [style=solid];
"standardEscapes" [style=solid];
"standardTrans" [style=solid];
"startEmphasisNewlinesCounting" [style=solid];
"startState" [style=solid];
"startWithPunct" [style=solid];
"startingState" [style=solid];
"startsWithMarker" [style=solid];
"startsWithSpace" [style=solid];
"stopLine" [style=solid];
"str" [style=solid];
"strContentRecursive" [style=solid];
"strToHtml" [style=solid];
"strictExtensions" [style=solid];
"strictHtmlBlock" [style=solid];
"strike" [style=solid];
"strikeout" [style=solid];
"strikeoutName" [style=solid];
"strikeoutTag" [style=solid];
"stringAnyCase" [style=solid];
"stringAnyCase\'" [style=solid];
"stringBreakers" [style=solid];
"stringEndsWithSpace" [style=solid];
"stringStartsWithSpace" [style=solid];
"stringToBool\'" [style=solid];
"stringToConTeXt" [style=solid];
"stringToInteger" [style=solid];
"stringToLaTeX" [style=solid];
"stringToRTF" [style=solid];
"stringToTexinfo" [style=solid];
"stringify" [style=solid];
"stringifyMetaValue" [style=solid];
"stringyMetaAttribute" [style=solid];
"stripEmptyParagraphs" [style=solid];
"stripFirstAndLast" [style=solid];
"stripInvalidChars" [style=solid];
"stripLeadingTrailingSpace" [style=solid];
"stripLocatorBraces" [style=solid];
"stripMarkdownAttribute" [style=solid];
"stripNamespace" [style=solid];
"stripPrefix" [style=solid];
"stripPrefixes" [style=solid];
"stripTrailingNewline" [style=solid];
"stripTrailingNewlines" [style=solid];
"strong" [style=solid];
"strongAndEmph" [style=solid];
"strongEmph" [style=solid];
"strongHtml" [style=solid];
"strongName" [style=solid];
"strongOrEmph" [style=solid];
"strongTag" [style=solid];
"styleAttr" [style=solid];
"styleAttrParser" [style=solid];
"stylePropertyChain" [style=solid];
"styleToMs" [style=solid];
"styleToOpenXml" [style=solid];
"styleToStrAttr" [style=solid];
"styled" [style=solid];
"subListParName" [style=solid];
"subMacro" [style=solid];
"subOrSuperExpr" [style=solid];
"subTag" [style=solid];
"subscript" [style=solid];
"subscriptName" [style=solid];
"subscriptTag" [style=solid];
"subst" [style=solid];
"substKey" [style=solid];
"substitute" [style=solid];
"succeedWith" [style=solid];
"suffix" [style=solid];
"superMacro" [style=solid];
"superTag" [style=solid];
"superscript" [style=solid];
"superscriptName" [style=solid];
"superscriptTag" [style=solid];
"surroundWithMathAlternate" [style=solid];
"surrounded" [style=solid];
"surroundingEmphasisChar" [style=solid];
"svgSize" [style=solid];
"svgToPng" [style=solid];
"swap" [style=solid];
"swapCurrentListStyle" [style=solid];
"swapStack" [style=solid];
"swapStack\'" [style=solid];
"swing" [style=solid];
"switch" [style=solid];
"switchCurrentListStyle" [style=solid];
"switchPolarity" [style=solid];
"switchesAsAttributes" [style=solid];
"switchingTheStack" [style=solid];
"sym" [style=solid];
"symbol" [style=solid];
"symbolIn" [style=solid];
"syntax" [style=solid];
"syntaxhighlight" [style=solid];
"t" [style=solid];
"t1" [style=solid];
"t2tURI" [style=solid];
"tab" [style=solid];
"tabFilter" [style=solid];
"table" [style=solid];
"table1" [style=solid];
"table2" [style=solid];
"tableAlignFromChar" [style=solid];
"tableAlignRow" [style=solid];
"tableAnyRowToTexinfo" [style=solid];
"tableBodyToHtml" [style=solid];
"tableBodyToJats" [style=solid];
"tableBodyToOpenDocument" [style=solid];
"tableCaption" [style=solid];
"tableCaptionName" [style=solid];
"tableCell" [style=solid];
"tableCellSeparator" [style=solid];
"tableCellToConTeXt" [style=solid];
"tableCellToHtml" [style=solid];
"tableCellToJats" [style=solid];
"tableCellToLaTeX" [style=solid];
"tableCellToMediaWiki" [style=solid];
"tableCellXWiki" [style=solid];
"tableColFormat" [style=solid];
"tableColToConTeXt" [style=solid];
"tableColumnContent" [style=solid];
"tableContentCell" [style=solid];
"tableContentRow" [style=solid];
"tableDirective" [style=solid];
"tableElements" [style=solid];
"tableEnd" [style=solid];
"tableEndOfRow" [style=solid];
"tableFootToHtml" [style=solid];
"tableFootToJats" [style=solid];
"tableFooter" [style=solid];
"tableFormatSpec" [style=solid];
"tableFormatSpecLine" [style=solid];
"tableHeadToHtml" [style=solid];
"tableHeadToJats" [style=solid];
"tableHeadToTexinfo" [style=solid];
"tableHeaderName" [style=solid];
"tableHeaderSeparator" [style=solid];
"tableHeadersToTEI" [style=solid];
"tableHline" [style=solid];
"tableItemToDocbook" [style=solid];
"tableItemToDokuWiki" [style=solid];
"tableItemToOpenDocument" [style=solid];
"tableItemToRTF" [style=solid];
"tableItemToTEI" [style=solid];
"tableItemToTextile" [style=solid];
"tableItemToZimWiki" [style=solid];
"tableLine" [style=solid];
"tableName" [style=solid];
"tableOfContents" [style=solid];
"tableOption" [style=solid];
"tableOptions" [style=solid];
"tableParseBody" [style=solid];
"tableParseCaption" [style=solid];
"tableParseColumn" [style=solid];
"tableParseElement" [style=solid];
"tableParseFooter" [style=solid];
"tableParseHeader" [style=solid];
"tableParseRow" [style=solid];
"tablePartToHtml" [style=solid];
"tablePartToJats" [style=solid];
"tableRow" [style=solid];
"tableRowEnd" [style=solid];
"tableRowToConTeXt" [style=solid];
"tableRowToDocbook" [style=solid];
"tableRowToHtml" [style=solid];
"tableRowToJats" [style=solid];
"tableRowToLaTeX" [style=solid];
"tableRowToMediaWiki" [style=solid];
"tableRowToOpenDocument" [style=solid];
"tableRowToRTF" [style=solid];
"tableRowToTEI" [style=solid];
"tableRowToTexinfo" [style=solid];
"tableRowToTextile" [style=solid];
"tableRows" [style=solid];
"tableSep" [style=solid];
"tableStart" [style=solid];
"tableStyle" [style=solid];
"tableToConTeXt" [style=solid];
"tableToHtml" [style=solid];
"tableToJATS" [style=solid];
"tableToLaTeX" [style=solid];
"tableType" [style=solid];
"tableWith" [style=solid];
"tableWith\'" [style=solid];
"tag" [style=solid];
"tagList" [style=solid];
"tagSpan" [style=solid];
"tagToText" [style=solid];
"tagWithAttributes" [style=solid];
"tagWithAttrs" [style=solid];
"tagged" [style=solid];
"taggedBlock" [style=solid];
"tagsToInlines" [style=solid];
"take1WhileP" [style=solid];
"takeP" [style=solid];
"targetURI" [style=solid];
"taskListItemFromAscii" [style=solid];
"taskListItemToAscii" [style=solid];
"tectonic2pdf" [style=solid];
"template" [style=solid];
"templatePh" [style=solid];
"testBitMask" [style=solid];
"testStringWith" [style=solid];
"tex2pdf" [style=solid];
"texMathToInlines" [style=solid];
"texSetting" [style=solid];
"textContent" [style=solid];
"textContentRecursive" [style=solid];
"textInTags" [style=solid];
"textStr" [style=solid];
"textStyleAttr" [style=solid];
"textualCite" [style=solid];
"theoremEnvironment" [style=solid];
"theoremstyle" [style=solid];
"three" [style=solid];
"throwTopMessageAsError\'" [style=solid];
"timestamp" [style=solid];
"title" [style=solid];
"titleBlock" [style=solid];
"titleLine" [style=solid];
"titleLink" [style=solid];
"titleToElement" [style=solid];
"titleToRST" [style=solid];
"titleTransform" [style=solid];
"titleline" [style=solid];
"tm" [style=solid];
"toAlignment" [style=solid];
"toAscii" [style=solid];
"toAsciiChar" [style=solid];
"toAttr" [style=solid];
"toAttribs" [style=solid];
"toAttrs" [style=solid];
"toBabel" [style=solid];
"toBookmarkName" [style=solid];
"toChunks" [style=solid];
"toColDescriptor" [style=solid];
"toContextDir" [style=solid];
"toCslJson" [style=solid];
"toEntities" [style=solid];
"toHeaderRow" [style=solid];
"toHtml5Entities" [style=solid];
"toIETF" [style=solid];
"toId" [style=solid];
"toJiraBlocks" [style=solid];
"toJiraCode" [style=solid];
"toJiraDefinitionList" [style=solid];
"toJiraHeader" [style=solid];
"toJiraInlines" [style=solid];
"toJiraItems" [style=solid];
"toJiraLink" [style=solid];
"toJiraPanel" [style=solid];
"toJiraRaw" [style=solid];
"toKey" [style=solid];
"toLabel" [style=solid];
"toLang" [style=solid];
"toLanguageId" [style=solid];
"toLazy" [style=solid];
"toLegacyTable" [style=solid];
"toList" [style=solid];
"toListItem" [style=solid];
"toListItems" [style=solid];
"toListingsLanguage" [style=solid];
"toLiteralList" [style=solid];
"toLocatorMap" [style=solid];
"toMacro" [style=solid];
"toName" [style=solid];
"toNameList" [style=solid];
"toPandocCodeBlocks" [style=solid];
"toPandocDiv" [style=solid];
"toPandocList" [style=solid];
"toPandocTable" [style=solid];
"toPolyglossia" [style=solid];
"toPolyglossiaEnv" [style=solid];
"toPropertyKey" [style=solid];
"toPropertyValue" [style=solid];
"toRelator" [style=solid];
"toRomanNumeral" [style=solid];
"toRow" [style=solid];
"toSlides" [style=solid];
"toSmallCaps" [style=solid];
"toString" [style=solid];
"toStringAttr" [style=solid];
"toStringLazy" [style=solid];
"toStyleString" [style=solid];
"toSubscript" [style=solid];
"toSubscriptInline" [style=solid];
"toSuperscript" [style=solid];
"toSuperscriptInline" [style=solid];
"toTable" [style=solid];
"toTableOfContents" [style=solid];
"toTag" [style=solid];
"toText" [style=solid];
"toTextLazy" [style=solid];
"toVal\'" [style=solid];
"toXml" [style=solid];
"to_simple_table" [style=solid];
"tocSlideId" [style=solid];
"todoKeyword" [style=solid];
"todoKeywordToInlines" [style=solid];
"todoMark" [style=solid];
"todoSequence" [style=solid];
"tok" [style=solid];
"tokTypeIn" [style=solid];
"token" [style=solid];
"tokenize" [style=solid];
"toksToString" [style=solid];
"tonum" [style=solid];
"topLevelRels" [style=solid];
"topLevelRelsEntry" [style=solid];
"tostringLogMessage" [style=solid];
"totoks" [style=solid];
"transformBlock" [style=solid];
"transformInline" [style=solid];
"transformInlines" [style=solid];
"transformKey" [style=solid];
"transformPicMath" [style=solid];
"transformTag" [style=solid];
"translateLang" [style=solid];
"translateTerm" [style=solid];
"treatAsBlock" [style=solid];
"treatAsInline" [style=solid];
"trim" [style=solid];
"trimCode" [style=solid];
"trimInlinesF" [style=solid];
"trimMath" [style=solid];
"trimNl" [style=solid];
"trimSps" [style=solid];
"trimTrailingNewlines" [style=solid];
"triml" [style=solid];
"trimr" [style=solid];
"truish" [style=solid];
"try" [style=solid];
"tryAll" [style=solid];
"tryModifyState" [style=solid];
"tryMsg" [style=solid];
"tryToRead" [style=solid];
"tshow" [style=solid];
"ttfamily" [style=solid];
"two" [style=solid];
"twoColumnToElement" [style=solid];
"txt" [style=solid];
"uattr" [style=solid];
"unNumberedCaption" [style=solid];
"unPlain" [style=solid];
"unTitlecase" [style=solid];
"uname" [style=solid];
"uncurry3" [style=solid];
"uncurry4" [style=solid];
"uncurry5" [style=solid];
"uncurry6" [style=solid];
"underline" [style=solid];
"underlineChars" [style=solid];
"underlineName" [style=solid];
"underlineSpan" [style=solid];
"underlined" [style=solid];
"unescapeURL" [style=solid];
"unicodeTransform" [style=solid];
"unindent" [style=solid];
"union3" [style=solid];
"uniqueIdent" [style=solid];
"uniqueIdentFrom" [style=solid];
"uniqueSlideId" [style=solid];
"uniqueSlideId\'" [style=solid];
"unmarkedInterpretedText" [style=solid];
"unordList" [style=solid];
"unorderedList" [style=solid];
"unprunedHeadlineToBlocks" [style=solid];
"unquotedString" [style=solid];
"unsmartify" [style=solid];
"unstackInlines" [style=solid];
"untoken" [style=solid];
"untokenAccum" [style=solid];
"untokenize" [style=solid];
"unwrap" [style=solid];
"unwrapChild" [style=solid];
"upToColon" [style=solid];
"updateLastForbiddenCharPos" [style=solid];
"updateLastPreCharPos" [style=solid];
"updateLastSpacePos" [style=solid];
"updateLastStrPos" [style=solid];
"updateMediaWithResource" [style=solid];
"updatePositions" [style=solid];
"updateStyleWithLang" [style=solid];
"upperAlpha" [style=solid];
"upperAlphaName" [style=solid];
"upperRoman" [style=solid];
"upperRomanName" [style=solid];
"uri" [style=solid];
"uriPathToPath" [style=solid];
"uriScheme" [style=solid];
"url" [style=solid];
"urlEscapeBrackets" [style=solid];
"urlToText" [style=solid];
"usageMessage" [style=solid];
"usedAnchors" [style=solid];
"utf8ToString" [style=solid];
"valToMetaValue" [style=solid];
"valToYaml" [style=solid];
"validTablePartAttribs" [style=solid];
"variable" [style=solid];
"vcat" [style=solid];
"verbEnv" [style=solid];
"verbTok" [style=solid];
"verbatim" [style=solid];
"verbatimBetween" [style=solid];
"verbatimTag" [style=solid];
"verseBlock" [style=solid];
"verseLine" [style=solid];
"verseTag" [style=solid];
"versionTooOldMessage" [style=solid];
"versionTypeName" [style=solid];
"viewPropsElement" [style=solid];
"walkBlock" [style=solid];
"walkBlockLists" [style=solid];
"walkBlocks" [style=solid];
"walkDocument" [style=solid];
"walkDocument\'" [style=solid];
"walkElement" [style=solid];
"walkInline" [style=solid];
"walkInlineLists" [style=solid];
"walkInlines" [style=solid];
"walkMWithLuaFilter" [style=solid];
"walkMeta" [style=solid];
"walkPandoc" [style=solid];
"walkSingletonsListM" [style=solid];
"when" [style=solid];
"whitespace" [style=solid];
"whitespaceSwitch" [style=solid];
"whitespace\'" [style=solid];
"widthsFromIndices" [style=solid];
"wikiLink" [style=solid];
"wikiLinkText" [style=solid];
"withAttr" [style=solid];
"withContext" [style=solid];
"withDirection" [style=solid];
"withEvery" [style=solid];
"withEveryL" [style=solid];
"withFontFeature" [style=solid];
"withForkWait" [style=solid];
"withHorizDisplacement" [style=solid];
"withIntraword" [style=solid];
"withLangFromAttr" [style=solid];
"withNewStyle" [style=solid];
"withNumId" [style=solid];
"withParaProp" [style=solid];
"withParaPropM" [style=solid];
"withParagraphStyle" [style=solid];
"withPaths" [style=solid];
"withRaw" [style=solid];
"withState" [style=solid];
"withSubStateF" [style=solid];
"withSubStateF\'" [style=solid];
"withTextProp" [style=solid];
"withTextPropM" [style=solid];
"withTextStyle" [style=solid];
"withUseTags" [style=solid];
"withVerbatimMode" [style=solid];
"word" [style=solid];
"wordBoundaries" [style=solid];
"wordChunk" [style=solid];
"wrap" [style=solid];
"wrapBookmark" [style=solid];
"wrapDiv" [style=solid];
"wrapTop" [style=solid];
"wrappedBlocksToJATS" [style=solid];
"writeAsciiDoc" [style=solid];
"writeAsciiDoctor" [style=solid];
"writeBeamer" [style=solid];
"writeCommonMark" [style=solid];
"writeConTeXt" [style=solid];
"writeCslJson" [style=solid];
"writeCustom" [style=solid];
"writeDZSlides" [style=solid];
"writeDocbook" [style=solid];
"writeDocbook4" [style=solid];
"writeDocbook5" [style=solid];
"writeDocx" [style=solid];
"writeDokuWiki" [style=solid];
"writeEPUB" [style=solid];
"writeEPUB2" [style=solid];
"writeEPUB3" [style=solid];
"writeFB2" [style=solid];
"writeFile" [style=solid];
"writeFileWith" [style=solid];
"writeFnBinary" [style=solid];
"writeHaddock" [style=solid];
"writeHtml4" [style=solid];
"writeHtml4String" [style=solid];
"writeHtml5" [style=solid];
"writeHtml5String" [style=solid];
"writeHtmlInlines" [style=solid];
"writeHtmlSlideShow\'" [style=solid];
"writeHtmlStringForEPUB" [style=solid];
"writeHtmlString\'" [style=solid];
"writeHtml\'" [style=solid];
"writeICML" [style=solid];
"writeInlines" [style=solid];
"writeIpynb" [style=solid];
"writeJATS" [style=solid];
"writeJSON" [style=solid];
"writeJats" [style=solid];
"writeJatsArchiving" [style=solid];
"writeJatsArticleAuthoring" [style=solid];
"writeJatsPublishing" [style=solid];
"writeJira" [style=solid];
"writeLaTeX" [style=solid];
"writeMan" [style=solid];
"writeMarkdown" [style=solid];
"writeMedia" [style=solid];
"writeMediaWiki" [style=solid];
"writeMs" [style=solid];
"writeMuse" [style=solid];
"writeNative" [style=solid];
"writeODT" [style=solid];
"writeOPML" [style=solid];
"writeOpenDocument" [style=solid];
"writeOpenXML" [style=solid];
"writeOrg" [style=solid];
"writePlain" [style=solid];
"writePowerpoint" [style=solid];
"writeRST" [style=solid];
"writeRTF" [style=solid];
"writeRevealJs" [style=solid];
"writeS5" [style=solid];
"writeSlideous" [style=solid];
"writeSlidy" [style=solid];
"writeTEI" [style=solid];
"writeTexinfo" [style=solid];
"writeTextile" [style=solid];
"writeXWiki" [style=solid];
"writeZimWiki" [style=solid];
"writerFn" [style=solid];
"writers" [style=solid];
"writersNames" [style=solid];
"x" [style=solid];
"yamlBsToMeta" [style=solid];
"yamlBsToRefs" [style=solid];
"yamlMap" [style=solid];
"yamlMetaBlock" [style=solid];
"yamlMetadataBlock" [style=solid];
"yamlToMeta" [style=solid];
"yamlToMetaValue" [style=solid];
"yamlToRefs" [style=solid];
"" -> "applyFilters";
"" -> "convertWithOpts";
"" -> "defaultOpts";
"" -> "defaultUserDataDirs";
"" -> "filterIpynbOutput";
"" -> "findM";
"" -> "headerShift";
"" -> "isURI";
"" -> "options";
"" -> "pandocVersion";
"" -> "parseOptions";
"" -> "tabFilter";
"" -> "tshow";
"" -> "uriPathToPath";
"_" -> "closes";
"_" -> "t";
"_" -> "x";
"__index" -> "_";
"__index" -> "must_be_at_least";
"__index" -> "str";
"__pairs" -> "_";
"__tostring" -> "_";
"__tostring" -> "peekPandocError";
"__tostring" -> "peekSimpleTable";
"__tostring" -> "pushPandocError";
"__tostring" -> "pushSimpleTable";
"__tostring" -> "simpleTableHeader";
"a" -> "a";
"a" -> "x";
"abbrevKey" -> "blanklines";
"abbrevKey" -> "guardEnabled";
"abbrevKey" -> "reference";
"abbrevKey" -> "try";
"absNumElemToAbsNum" -> "_";
"absNumElemToAbsNum" -> "findAttrTextByName";
"absNumElemToAbsNum" -> "findChildrenByName";
"absNumElemToAbsNum" -> "isElem";
"absNumElemToAbsNum" -> "levelElemToLevel";
"accent" -> "_";
"accent" -> "fromList";
"accent" -> "str";
"accent" -> "toList";
"accent" -> "tok";
"accent" -> "try";
"accent" -> "x";
"activeTodoMarkers" -> "activeTodoSequences";
"addAttachment" -> "a";
"addAttachment" -> "attr";
"addAttachment" -> "encode";
"addAttachment" -> "fetchItem";
"addAttachment" -> "insertMedia";
"addAttachment" -> "isURI";
"addAttachment" -> "report";
"addAttachment" -> "t";
"addAttachment" -> "x";
"addAttrDiv" -> "attr";
"addAttrs" -> "attr";
"addAttrs" -> "attrsToHtml";
"addAuthorAndDate" -> "a";
"addAuthorAndDate" -> "author";
"addAuthorAndDate" -> "smushBlocks";
"addBlock" -> "_";
"addBlock" -> "blockToAsciiDoc";
"addBlock" -> "x";
"addField" -> "a";
"addField" -> "addValue";
"addFunction" -> "a";
"addFunction" -> "liftPandocLua";
"addFunction" -> "x";
"addHash" -> "_";
"addIdentifiers" -> "uniqueIdent";
"addIdentifiers" -> "x";
"addImageCaption" -> "_";
"addImageCaption" -> "attr";
"addImageCaption" -> "getNextNumber";
"addImageCaption" -> "renderDottedNum";
"addImageCaption" -> "toList";
"addImageCaption" -> "x";
"addLang" -> "_";
"addLang" -> "x";
"addLinkFormatter" -> "manyChar";
"addLinkFormatter" -> "parseFormat";
"addLinkFormatter" -> "skipSpaces";
"addLinkFormatter" -> "try";
"addLogMessage" -> "a";
"addMarkdownAttribute" -> "_";
"addMarkdownAttribute" -> "renderTags\'";
"addMarkdownAttribute" -> "t";
"addMarkdownAttribute" -> "x";
"addMeta" -> "addMetaField";
"addMeta" -> "meta";
"addMeta" -> "readMetaValue";
"addMeta" -> "x";
"addMetaField" -> "a";
"addMetaField" -> "meta";
"addMetaField" -> "x";
"addMetadataFromElement" -> "a";
"addMetadataFromElement" -> "addMeta";
"addMetadataFromElement" -> "addMetaField";
"addMetadataFromElement" -> "getInlines";
"addMetadataFromElement" -> "named";
"addMetadataFromXML" -> "_";
"addMetadataFromXML" -> "getAttr";
"addMetadataFromXML" -> "lookupAttr";
"addMetadataFromXML" -> "normalizeDate\'";
"addMetadataFromXML" -> "opfName";
"addNewRole" -> "_";
"addNewRole" -> "a";
"addNewRole" -> "attr";
"addNewRole" -> "keyValues";
"addNewRole" -> "logMessage";
"addNewRole" -> "parseFromString\'";
"addNewRole" -> "roleName";
"addNewRole" -> "when";
"addNote" -> "logMessage";
"addNote" -> "when";
"addPrefix" -> "_";
"addQed" -> "_";
"addRoleToLink" -> "x";
"addSpaceAfterPeriod" -> "splitStrWhen";
"addSpeakerNotesToMetaSlide" -> "blockToSpeakerNotes";
"addSpeakerNotesToMetaSlide" -> "isNotesDiv";
"addStyle" -> "keyvals";
"addSuffix" -> "_";
"addTableCaption" -> "_";
"addTableCaption" -> "addAttrDiv";
"addTableCaption" -> "attr";
"addTableCaption" -> "getNextNumber";
"addTableCaption" -> "plain";
"addTableCaption" -> "renderDottedNum";
"addTableCaption" -> "x";
"addTextStyleAttr" -> "t";
"addTitle" -> "_";
"addToFileTree" -> "_";
"addToFileTree" -> "addToFileTree";
"addToFileTree" -> "insertInFileTree";
"addToFileTree" -> "isSpecial";
"addToNotesTable" -> "note";
"addToStart" -> "_";
"addToStart" -> "fromList";
"addToStart" -> "para";
"addToStart" -> "toList";
"addUnderscores" -> "isSpace";
"addUnderscores" -> "splitTextBy";
"addValue" -> "a";
"addVariablesToContext" -> "a";
"addVariablesToContext" -> "encode";
"addVariablesToContext" -> "fromText";
"addVariablesToContext" -> "literal";
"adjustImagePath" -> "_";
"adjustImagePath" -> "a";
"adjustImagePath" -> "attr";
"adjustImagePath" -> "extractMedia";
"adjustImagePath" -> "runIO";
"adjustImagePath" -> "runIOorExplode";
"adjustImagePath" -> "x";
"adjustMetadata" -> "meta";
"adjustNumbers" -> "safeRead";
"adjustNumbers" -> "tshow";
"adjustNumbers" -> "x";
"adjustSpans" -> "_";
"adjustSpans" -> "parseRawLaTeX";
"adjustSpans" -> "x";
"alertIndent" -> "l";
"alignAttrib" -> "_";
"alignAttrib" -> "a";
"alignToConTeXt" -> "empty";
"alignType" -> "_";
"alignType" -> "trimr";
"alignType" -> "x";
"alignedBlock" -> "_";
"alignedBlock" -> "blockListToTexinfo";
"allowsMathEnvironments" -> "_";
"alltt" -> "x";
"alterStr" -> "_";
"alterStr" -> "x";
"alternative" -> "_";
"alternative" -> "a";
"alternative" -> "x";
"amp" -> "symbol";
"amuseHeadingUntil" -> "a";
"amuseHeadingUntil" -> "attr";
"amuseHeadingUntil" -> "guardEnabled";
"amuseHeadingUntil" -> "headingStart";
"amuseHeadingUntil" -> "paraContentsUntil";
"amuseHeadingUntil" -> "registerHeader";
"amuseHeadingUntil" -> "runF";
"amuseHeadingUntil" -> "try";
"amuseNoteBlockUntil" -> "a";
"amuseNoteBlockUntil" -> "addNote";
"amuseNoteBlockUntil" -> "allowPara";
"amuseNoteBlockUntil" -> "eol";
"amuseNoteBlockUntil" -> "guardEnabled";
"amuseNoteBlockUntil" -> "listItemContentsUntil";
"amuseNoteBlockUntil" -> "noteMarker";
"amuseNoteBlockUntil" -> "spaceChar";
"amuseNoteBlockUntil" -> "try";
"anchor" -> "_";
"anchor" -> "blanklines";
"anchor" -> "block";
"anchor" -> "many1Char";
"anchor" -> "newline";
"anchor" -> "parseAnchor";
"anchor" -> "recordAnchorId";
"anchor" -> "referenceNames";
"anchor" -> "returnF";
"anchor" -> "skipSpaces";
"anchor" -> "solidify";
"anchor" -> "spaceChar";
"anchor" -> "try";
"anchor" -> "txt";
"anchorDef" -> "blanklines";
"anchorDef" -> "raw";
"anchorDef" -> "referenceNames";
"anchorDef" -> "toKey";
"anchorDef" -> "try";
"anchorDef" -> "withRaw";
"and2" -> "a";
"and3" -> "a";
"and3" -> "and3";
"and3" -> "x";
"and4" -> "a";
"and4" -> "and4";
"and5" -> "a";
"and5" -> "and5";
"and6" -> "a";
"and6" -> "and2";
"and6" -> "x";
"angleLink" -> "link";
"angleLink" -> "plainLink";
"angleLink" -> "try";
"annotateBodySection" -> "_";
"annotateBodySection" -> "annotateRowSection";
"annotateBodySection" -> "attr";
"annotateBodySection" -> "incRowNumber";
"annotateHeaderSection" -> "_";
"annotateHeaderSection" -> "annotateRowSection";
"annotateHeaderSection" -> "attr";
"annotateHeaderSection" -> "incRowNumber";
"annotateMML" -> "_";
"annotateMML" -> "l";
"annotateMML" -> "math";
"annotateMML" -> "x";
"annotateRowSection" -> "_";
"annotateRowSection" -> "a";
"annotateRowSection" -> "annotateRowSection";
"annotateRowSection" -> "splitCellHang";
"annotateRowSection" -> "x";
"annotateTable" -> "annotateTableBody";
"annotateTable" -> "annotateTableFoot";
"annotateTable" -> "annotateTableHead";
"annotateTableBody" -> "annotateBodySection";
"annotateTableBody" -> "annotateHeaderSection";
"annotateTableBody" -> "attr";
"annotateTableFoot" -> "annotateHeaderSection";
"annotateTableFoot" -> "attr";
"annotateTableHead" -> "annotateHeaderSection";
"annotateTableHead" -> "attr";
"anonymousKey" -> "oneOfStrings";
"anonymousKey" -> "targetURI";
"anonymousKey" -> "toKey";
"anonymousKey" -> "try";
"anyChar\'" -> "blankline";
"anyChar\'" -> "try";
"anyControlSeq" -> "isCtrlSeq";
"anyControlSeq" -> "satisfyTok";
"anyLine" -> "_";
"anyLine" -> "a";
"anyLine" -> "updateLastForbiddenCharPos";
"anyLine" -> "updateLastPreCharPos";
"anyLineNewline" -> "anyLine";
"anyList" -> "anyListAtDepth";
"anyList" -> "blanklines";
"anyList" -> "orderedList";
"anyList" -> "try";
"anyList" -> "unorderedList";
"anyListAtDepth" -> "bulletListAtDepth";
"anyListAtDepth" -> "definitionList";
"anyListAtDepth" -> "orderedListAtDepth";
"anyListItem" -> "listItem";
"anyListStart" -> "guardColumnOne";
"anyListUntil" -> "a";
"anyListUntil" -> "bulletListUntil";
"anyListUntil" -> "definitionListUntil";
"anyListUntil" -> "orderedListUntil";
"anyOrderedListMarker" -> "decimal";
"anyOrderedListMarker" -> "defaultNum";
"anyOrderedListMarker" -> "exampleNum";
"anyOrderedListMarker" -> "inOneParen";
"anyOrderedListMarker" -> "inPeriod";
"anyOrderedListMarker" -> "inTwoParens";
"anyOrderedListMarker" -> "lowerAlpha";
"anyOrderedListMarker" -> "lowerRoman";
"anyOrderedListMarker" -> "romanOne";
"anyOrderedListMarker" -> "upperAlpha";
"anyOrderedListMarker" -> "upperRoman";
"anySymbol" -> "isSymbolTok";
"anySymbol" -> "satisfyTok";
"anyTok" -> "satisfyTok";
"apply" -> "_";
"apply" -> "externalFilter";
"apply" -> "forceResult";
"apply" -> "runFilterFile";
"apply" -> "runLua";
"apply" -> "setGlobals";
"apply" -> "x";
"applyCustomLinkFormat" -> "asksF";
"applyCustomLinkFormat" -> "link";
"applyDefaults" -> "defaultUserDataDirs";
"applyDefaults" -> "fileExists";
"applyDefaults" -> "findM";
"applyDefaults" -> "opt";
"applyDefaults" -> "readFileLazy";
"applyDefaults" -> "runIOorExplode";
"applyDefaults" -> "setVerbosity";
"applyFilters" -> "expandFilterPath";
"applyFilters" -> "getVerbosity";
"applyFilters" -> "processCitations";
"applyFilters" -> "report";
"applyFilters" -> "when";
"applyMacros" -> "guardDisabled";
"applyMacros" -> "satisfyTok";
"applyMacros" -> "tokenize";
"applyMacros" -> "untokenize";
"applyToLayout" -> "applyToShape";
"applyToLayout" -> "authors";
"applyToLayout" -> "title";
"applyToParagraph" -> "para";
"applyToShape" -> "_";
"applyToShape" -> "applyToParagraph";
"applyToShape" -> "str";
"applyToSlide" -> "applyToLayout";
"applyToSlide" -> "applyToParagraph";
"archiveToComments" -> "elemToComments";
"archiveToComments" -> "elemToNameSpaces";
"archiveToComments" -> "walkDocument";
"archiveToDocument" -> "elemToBody";
"archiveToDocument" -> "elemToNameSpaces";
"archiveToDocument" -> "findChildByName";
"archiveToDocument" -> "maybeToD";
"archiveToDocument" -> "namespaces";
"archiveToDocument" -> "walkDocument";
"archiveToDocx" -> "archiveToDocxWithWarnings";
"archiveToDocxWithWarnings" -> "archiveToComments";
"archiveToDocxWithWarnings" -> "archiveToDocument";
"archiveToDocxWithWarnings" -> "archiveToNotes";
"archiveToDocxWithWarnings" -> "archiveToNumbering";
"archiveToDocxWithWarnings" -> "archiveToRelationships";
"archiveToDocxWithWarnings" -> "archiveToStyles";
"archiveToDocxWithWarnings" -> "filePathIsMedia";
"archiveToDocxWithWarnings" -> "filteredFilesFromArchive";
"archiveToDocxWithWarnings" -> "getDocumentXmlPath";
"archiveToDocxWithWarnings" -> "runD";
"archiveToEPUB" -> "_";
"archiveToEPUB" -> "a";
"archiveToEPUB" -> "enableExtension";
"archiveToEPUB" -> "escapeURI";
"archiveToEPUB" -> "fetchImages";
"archiveToEPUB" -> "findEntryByPathE";
"archiveToEPUB" -> "fixInternalReferences";
"archiveToEPUB" -> "foldM\'";
"archiveToEPUB" -> "getManifest";
"archiveToEPUB" -> "imageMimes";
"archiveToEPUB" -> "imageToPandoc";
"archiveToEPUB" -> "items";
"archiveToEPUB" -> "meta";
"archiveToEPUB" -> "parseManifest";
"archiveToEPUB" -> "parseMeta";
"archiveToEPUB" -> "parseSpine";
"archiveToEPUB" -> "prependHash";
"archiveToEPUB" -> "readHtml";
"archiveToNotes" -> "elemToNameSpaces";
"archiveToNotes" -> "elemToNotes";
"archiveToNotes" -> "walkDocument";
"archiveToNotes" -> "x";
"archiveToNumbering" -> "archiveToNumbering\'";
"archiveToNumbering\'" -> "absNumElemToAbsNum";
"archiveToNumbering\'" -> "elemToNameSpaces";
"archiveToNumbering\'" -> "findChildrenByName";
"archiveToNumbering\'" -> "namespaces";
"archiveToNumbering\'" -> "numElemToNum";
"archiveToOdt" -> "chooseMax";
"archiveToOdt" -> "entryToXmlElem";
"archiveToOdt" -> "filteredFilesFromArchive";
"archiveToOdt" -> "readStylesAt";
"archiveToOdt" -> "read_body";
"archiveToOdt" -> "readerState";
"archiveToOdt" -> "runConverter\'";
"archiveToOdt" -> "startState";
"archiveToRelationships" -> "filePathToRelationships";
"archiveToStyles" -> "a";
"archiveToStyles" -> "archiveToStyles\'";
"archiveToStyles" -> "t";
"archiveToStyles\'" -> "a";
"archiveToStyles\'" -> "buildBasedOnList";
"archiveToStyles\'" -> "elemToNameSpaces";
"archiveToStyles\'" -> "namespaces";
"archivedHeadlineToBlocks" -> "getExportSetting";
"archivedHeadlineToBlocks" -> "headlineToHeader";
"archivedHeadlineToBlocks" -> "headlineToHeaderWithContents";
"archivedTreeSetting" -> "elispBoolean";
"archivedTreeSetting" -> "genericExportSetting";
"archivedTreeSetting" -> "optionString";
"archivedTreeSetting" -> "try";
"argspecArg" -> "_";
"argspecArg" -> "isArgTok";
"argspecArg" -> "satisfyTok";
"argspecPattern" -> "_";
"argspecPattern" -> "satisfyTok";
"argspecPattern" -> "txt";
"asHtml" -> "_";
"asHtml" -> "blocksToInlines\'";
"asHtml" -> "readHtml";
"asList" -> "env";
"asMarkdown" -> "_";
"asMarkdown" -> "fromList";
"asMarkdown" -> "readMarkdown";
"asciiMap" -> "getLang";
"asciiMap" -> "parseBCP47";
"asciiMap" -> "renderLang";
"askF" -> "a";
"asksF" -> "a";
"asterisks" -> "many1Char";
"attr" -> "qname";
"attrHtml" -> "literal";
"attrToMap" -> "addField";
"attrToMap" -> "blockListToCustom";
"attrToMap" -> "inlineListToCustom";
"attrToMap" -> "keyvals";
"attrToMap" -> "x";
"attrToNSPair" -> "_";
"attrToPair" -> "_";
"attrValue" -> "attr";
"attrValue" -> "maybeAttrValue";
"attrValue" -> "x";
"attribute" -> "_";
"attribute" -> "a";
"attribute" -> "between";
"attribute" -> "classAttr";
"attribute" -> "classIdAttr";
"attribute" -> "countChar";
"attribute" -> "fromEntities";
"attribute" -> "identifierAttr";
"attribute" -> "keyValAttr";
"attribute" -> "langAttr";
"attribute" -> "macroName";
"attribute" -> "many1Char";
"attribute" -> "spaceChar";
"attribute" -> "specialAttr";
"attribute" -> "styleAttr";
"attribute" -> "try";
"attributeList" -> "a";
"attributeList" -> "escapeNls";
"attributeList" -> "escapeStringForXML";
"attributes" -> "attribute";
"attributes" -> "newline";
"attributes" -> "spaceChar";
"attributes" -> "special";
"attributes" -> "specialAttribute";
"attributes" -> "spnl";
"attributes" -> "try";
"attributes" -> "x";
"attrsToHtml" -> "keyvals";
"attrsToHtml" -> "prefixedId";
"attrsToHtml" -> "toAttrs";
"attrsToMarkdown" -> "empty";
"attrsToMarkdown" -> "literal";
"atxChar" -> "extensionEnabled";
"atxClosing" -> "attr";
"atxClosing" -> "attributes";
"atxClosing" -> "atxChar";
"atxClosing" -> "blanklines";
"atxClosing" -> "guardEnabled";
"atxClosing" -> "mmdHeaderIdentifier";
"atxClosing" -> "skipSpaces";
"atxClosing" -> "try";
"atxHeader" -> "attr";
"atxHeader" -> "atxChar";
"atxHeader" -> "atxClosing";
"atxHeader" -> "defaultParserState";
"atxHeader" -> "guardDisabled";
"atxHeader" -> "guardEnabled";
"atxHeader" -> "inline";
"atxHeader" -> "nonspaceChar";
"atxHeader" -> "raw";
"atxHeader" -> "registerHeader";
"atxHeader" -> "registerImplicitHeader";
"atxHeader" -> "runF";
"atxHeader" -> "skipSpaces";
"atxHeader" -> "trimInlinesF";
"atxHeader" -> "try";
"atxHeader" -> "withRaw";
"author" -> "cMap";
"author" -> "el";
"author" -> "list";
"author" -> "plain";
"authorToDocbook" -> "escapeStringForXML";
"authorToDocbook" -> "inTags";
"authorToDocbook" -> "inTagsSimple";
"authorToDocbook" -> "inlinesToDocbook";
"authorToDocbook" -> "literal";
"authorToDocbook" -> "triml";
"authorline" -> "author";
"authorline" -> "headerline";
"authorline" -> "inline";
"authorline" -> "newline";
"authors" -> "a";
"authors" -> "addMeta";
"authors" -> "author";
"authors" -> "bgroup";
"authors" -> "block";
"authors" -> "blocksToInlines\'";
"authors" -> "cMap";
"authors" -> "controlSeq";
"authors" -> "egroup";
"authors" -> "try";
"authorsLine" -> "inline";
"authorsLine" -> "newline";
"authorsLine" -> "parseFromString\'";
"authorsLine" -> "raw";
"authorsLine" -> "rawTitleBlockLine";
"authorsLine" -> "spaces";
"authorsLine" -> "trimInlinesF";
"authorsLine" -> "try";
"autoEmail" -> "emailAddress";
"autoEmail" -> "makeLink";
"autoEmail" -> "try";
"autoLink" -> "attr";
"autoLink" -> "attributes";
"autoLink" -> "autoEmail";
"autoLink" -> "autoURI";
"autoLink" -> "emailAddress";
"autoLink" -> "escapeURI";
"autoLink" -> "fromEntities";
"autoLink" -> "guardEnabled";
"autoLink" -> "makeLink";
"autoLink" -> "manyTillChar";
"autoLink" -> "nonspaceChar";
"autoLink" -> "nop";
"autoLink" -> "parseLink";
"autoLink" -> "try";
"autoLink" -> "uri";
"autoLink" -> "url";
"autoNumAttrs" -> "_";
"autoNumAttrs" -> "lookupMetaString";
"autoNumAttrs" -> "reservedSlideIds";
"autoNumAttrs" -> "toLegacyTable";
"autoNumAttrs" -> "toTableOfContents";
"autoURI" -> "uri";
"avoidBadWrapsInList" -> "avoidBadWrapsInList";
"avoidBadWrapsInList" -> "isOrderedListMarker";
"avoidBadWrapsInList" -> "isSp";
"avoidBadWrapsInList" -> "x";
"babelLangToBCP47" -> "_";
"babelLangToBCP47" -> "anyControlSeq";
"babelLangToBCP47" -> "anySymbol";
"babelLangToBCP47" -> "anyTok";
"babelLangToBCP47" -> "applyMacros";
"babelLangToBCP47" -> "begin_";
"babelLangToBCP47" -> "bgroup";
"babelLangToBCP47" -> "blankline";
"babelLangToBCP47" -> "braced";
"babelLangToBCP47" -> "bracedOrToken";
"babelLangToBCP47" -> "bracedUrl";
"babelLangToBCP47" -> "braced\'";
"babelLangToBCP47" -> "bracketed";
"babelLangToBCP47" -> "bracketedToks";
"babelLangToBCP47" -> "comment";
"babelLangToBCP47" -> "controlSeq";
"babelLangToBCP47" -> "defaultLaTeXState";
"babelLangToBCP47" -> "dimenarg";
"babelLangToBCP47" -> "doMacros";
"babelLangToBCP47" -> "doMacros\'";
"babelLangToBCP47" -> "egroup";
"babelLangToBCP47" -> "end_";
"babelLangToBCP47" -> "endline";
"babelLangToBCP47" -> "getNextNumber";
"babelLangToBCP47" -> "getRawCommand";
"babelLangToBCP47" -> "grouped";
"babelLangToBCP47" -> "ignore";
"babelLangToBCP47" -> "incrementDottedNum";
"babelLangToBCP47" -> "isArgTok";
"babelLangToBCP47" -> "isNewlineTok";
"babelLangToBCP47" -> "isWordTok";
"babelLangToBCP47" -> "keyvals";
"babelLangToBCP47" -> "newlineTok";
"babelLangToBCP47" -> "overlaySpecification";
"babelLangToBCP47" -> "parenWrapped";
"babelLangToBCP47" -> "polyglossiaLangToBCP47";
"babelLangToBCP47" -> "primEscape";
"babelLangToBCP47" -> "rawLaTeXParser";
"babelLangToBCP47" -> "rawopt";
"babelLangToBCP47" -> "renderDottedNum";
"babelLangToBCP47" -> "satisfyTok";
"babelLangToBCP47" -> "setpos";
"babelLangToBCP47" -> "singleChar";
"babelLangToBCP47" -> "skipopts";
"babelLangToBCP47" -> "sp";
"babelLangToBCP47" -> "space";
"babelLangToBCP47" -> "spaces";
"babelLangToBCP47" -> "spaces1";
"babelLangToBCP47" -> "specialChars";
"babelLangToBCP47" -> "symbol";
"babelLangToBCP47" -> "symbolIn";
"babelLangToBCP47" -> "tokTypeIn";
"babelLangToBCP47" -> "tokenize";
"babelLangToBCP47" -> "toksToString";
"babelLangToBCP47" -> "totoks";
"babelLangToBCP47" -> "untoken";
"babelLangToBCP47" -> "untokenize";
"babelLangToBCP47" -> "verbEnv";
"babelLangToBCP47" -> "whitespace";
"babelLangToBCP47" -> "withRaw";
"babelLangToBCP47" -> "withVerbatimMode";
"babelResultsBlock" -> "anyLineNewline";
"babelResultsBlock" -> "blankline";
"babelResultsBlock" -> "blanklines";
"babelResultsBlock" -> "block";
"babelResultsBlock" -> "metaLineStart";
"babelResultsBlock" -> "stringAnyCase";
"babelResultsBlock" -> "try";
"backSlashLineBreaks" -> "escape";
"balancedTitle" -> "attr";
"balancedTitle" -> "enclosed";
"balancedTitle" -> "label";
"balancedTitle" -> "manyTillChar";
"balancedTitle" -> "newline";
"balancedTitle" -> "spaceChar";
"balancedTitle" -> "spaces";
"balancedTitle" -> "try";
"balancedTitle" -> "x";
"bareIP" -> "_";
"bareIP" -> "msatisfy";
"bareURL" -> "emailAddress";
"bareURL" -> "guardEnabled";
"bareURL" -> "htmlTag";
"bareURL" -> "spaces";
"bareURL" -> "try";
"bareURL" -> "uri";
"bareloc" -> "citeList";
"bareloc" -> "spnl";
"bareloc" -> "suffix";
"bareloc" -> "try";
"basicDLStart" -> "newline";
"basicDLStart" -> "whitespace";
"bcp47LangToIETF" -> "_";
"bcp47LangToIETF" -> "readBibtexString";
"bcp47LangToIETF" -> "report";
"beginOrEndCommand" -> "_";
"beginOrEndCommand" -> "anyControlSeq";
"beginOrEndCommand" -> "braced";
"beginOrEndCommand" -> "inlineEnvironments";
"beginOrEndCommand" -> "rawBlock";
"beginOrEndCommand" -> "try";
"beginOrEndCommand" -> "txt";
"beginOrEndCommand" -> "untokenize";
"beginOrEndCommand" -> "withRaw";
"begin_" -> "braced";
"begin_" -> "controlSeq";
"begin_" -> "spaces";
"begin_" -> "t";
"begin_" -> "try";
"begin_" -> "txt";
"begin_" -> "untokenize";
"beginsWithOrderedListMarker" -> "_";
"beginsWithOrderedListMarker" -> "defaultParserState";
"beginsWithOrderedListMarker" -> "olMarker";
"beginsWithOrderedListMarker" -> "str";
"berkeleyBareTag" -> "berkeleyBareTag\'";
"berkeleyBareTag" -> "try";
"berkeleyBareTag\'" -> "try";
"berkeleyCitationList" -> "berkeleyBareTag";
"berkeleyCitationList" -> "berkeleyParensTag";
"berkeleyCitationList" -> "citeKey";
"berkeleyCitationList" -> "citeList";
"berkeleyCitationList" -> "inline";
"berkeleyCitationList" -> "notFollowedBy\'";
"berkeleyCitationList" -> "skipSpaces";
"berkeleyCitationList" -> "trimInlinesF";
"berkeleyCitationList" -> "try";
"berkeleyCite" -> "_";
"berkeleyCite" -> "a";
"berkeleyCite" -> "berkeleyCitationList";
"berkeleyCite" -> "prefix";
"berkeleyCite" -> "suffix";
"berkeleyCite" -> "try";
"berkeleyParensTag" -> "berkeleyBareTag\'";
"berkeleyParensTag" -> "enclosedByPair1";
"berkeleyParensTag" -> "try";
"berkeleyTextualCite" -> "citeKey";
"berkeleyTextualCite" -> "returnF";
"berkeleyTextualCite" -> "try";
"between" -> "a";
"between" -> "many1Till";
"between" -> "try";
"between" -> "whitespace";
"bgroup" -> "controlSeq";
"bgroup" -> "sp";
"bgroup" -> "symbol";
"bgroup" -> "try";
"bibComment" -> "bibSkip";
"bibComment" -> "cistring";
"bibComment" -> "inBraces";
"bibComment" -> "spaces";
"bibEntries" -> "bibComment";
"bibEntries" -> "bibItem";
"bibEntries" -> "bibPreamble";
"bibEntries" -> "bibSkip";
"bibEntries" -> "bibString";
"bibEntries" -> "try";
"bibItem" -> "entField";
"bibItem" -> "isBibtexKeyChar";
"bibItem" -> "spaces";
"bibItem" -> "take1WhileP";
"bibPreamble" -> "cistring";
"bibPreamble" -> "inBraces";
"bibPreamble" -> "spaces";
"bibSkip" -> "take1WhileP";
"bibString" -> "cistring";
"bibString" -> "entField";
"bibString" -> "l";
"bibString" -> "spaces";
"biblatexStringMap" -> "_";
"biblatexStringMap" -> "biblatexLocalizations";
"biblatexStringMap" -> "parseLocator";
"biblatexStringMap" -> "toIETF";
"biblatexStringMap" -> "x";
"biblioTag" -> "guardEnabled";
"biblioTag" -> "parseHtmlContent";
"birdCodeBlock" -> "birdTrackLine";
"birdTrackLine" -> "anyLine";
"birdTrackLine" -> "try";
"birdTrackLine" -> "when";
"blankLineBlockLine" -> "blankline";
"blankLineBlockLine" -> "try";
"blankline" -> "newline";
"blankline" -> "newlineTok";
"blankline" -> "skipSpaces";
"blankline" -> "try";
"blankline" -> "whitespace";
"blanklines" -> "blankline";
"blanklines" -> "updateLastForbiddenCharPos";
"blanklines" -> "updateLastPreCharPos";
"blanklines\'" -> "blanklines";
"blanklines\'" -> "divFenceEnd";
"blanklines\'" -> "guardEnabled";
"blanklines\'" -> "try";
"block" -> "abbrevKey";
"block" -> "anchor";
"block" -> "anyList";
"block" -> "blankline";
"block" -> "blanklines";
"block" -> "block";
"block" -> "blockCommand";
"block" -> "blockElements";
"block" -> "blockParsers";
"block" -> "blockQuote";
"block" -> "blockTag";
"block" -> "bulletList";
"block" -> "codeBlock";
"block" -> "codeBlockFenced";
"block" -> "codeBlockIndented";
"block" -> "comment";
"block" -> "commentBlock";
"block" -> "defaultParserState";
"block" -> "definitionList";
"block" -> "directive";
"block" -> "displayMath";
"block" -> "divFenced";
"block" -> "divHtml";
"block" -> "eFootnote";
"block" -> "eSection";
"block" -> "eSwitch";
"block" -> "eTOC";
"block" -> "eTitlePage";
"block" -> "environment";
"block" -> "example";
"block" -> "fieldList";
"block" -> "figure";
"block" -> "genericDrawer";
"block" -> "grouped";
"block" -> "header";
"block" -> "horizontalRule";
"block" -> "hrule";
"block" -> "htmlBlock";
"block" -> "htmlComment";
"block" -> "include";
"block" -> "latexFragment";
"block" -> "lhsCodeBlock";
"block" -> "lineBlock";
"block" -> "list";
"block" -> "macroDef";
"block" -> "mixedList";
"block" -> "noteBlock";
"block" -> "nowiki";
"block" -> "orderedList";
"block" -> "orgBlock";
"block" -> "pBlockQuote";
"block" -> "pBody";
"block" -> "pCodeBlock";
"block" -> "pDiv";
"block" -> "pFigure";
"block" -> "pHead";
"block" -> "pHeader";
"block" -> "pHrule";
"block" -> "pHtml";
"block" -> "pIframe";
"block" -> "pLineBlock";
"block" -> "pList";
"block" -> "pPara";
"block" -> "pPlain";
"block" -> "pRawHtmlBlock";
"block" -> "pTable";
"block" -> "para";
"block" -> "paraOrPlain";
"block" -> "paragraph";
"block" -> "placeholder";
"block" -> "plain";
"block" -> "preformatted";
"block" -> "quote";
"block" -> "rawBlock";
"block" -> "rawOrgLine";
"block" -> "rawTeXBlock";
"block" -> "referenceKey";
"block" -> "runF";
"block" -> "spaces";
"block" -> "spaces1";
"block" -> "specialLine";
"block" -> "table";
"block" -> "taggedBlock";
"block" -> "template";
"block" -> "title";
"block" -> "toList";
"block" -> "try";
"block" -> "tshow";
"block" -> "verbatim";
"block" -> "when";
"block" -> "yamlMetaBlock";
"blockAttributes" -> "inlines";
"blockAttributes" -> "keyValues";
"blockAttributes" -> "label";
"blockAttributes" -> "parseFromString";
"blockAttributes" -> "stringyMetaAttribute";
"blockAttributes" -> "try";
"blockCode" -> "codeTag";
"blockCommand" -> "_";
"blockCommand" -> "anyControlSeq";
"blockCommand" -> "blankline";
"blockCommand" -> "blockCommand";
"blockCommand" -> "blockCommands";
"blockCommand" -> "getRawCommand";
"blockCommand" -> "guardEnabled";
"blockCommand" -> "ignore";
"blockCommand" -> "isBlockCommand";
"blockCommand" -> "isInlineCommand";
"blockCommand" -> "lookupListDefault";
"blockCommand" -> "ordNub";
"blockCommand" -> "raw";
"blockCommand" -> "rawBlock";
"blockCommand" -> "sp";
"blockCommand" -> "symbol";
"blockCommand" -> "try";
"blockCommand" -> "txt";
"blockCommands" -> "addMeta";
"blockCommands" -> "anyTok";
"blockCommands" -> "authors";
"blockCommands" -> "block";
"blockCommands" -> "blockquote";
"blockCommands" -> "braced";
"blockCommands" -> "closing";
"blockCommands" -> "coloredBlock";
"blockCommands" -> "doSubfile";
"blockCommands" -> "epigraph";
"blockCommands" -> "graphicsPath";
"blockCommands" -> "grouped";
"blockCommands" -> "horizontalRule";
"blockCommands" -> "hypertargetBlock";
"blockCommands" -> "include";
"blockCommands" -> "inline";
"blockCommands" -> "inputListing";
"blockCommands" -> "inputMinted";
"blockCommands" -> "looseItem";
"blockCommands" -> "newtheorem";
"blockCommands" -> "para";
"blockCommands" -> "parbox";
"blockCommands" -> "preamble";
"blockCommands" -> "rawBlockOr";
"blockCommands" -> "rule";
"blockCommands" -> "section";
"blockCommands" -> "setCaption";
"blockCommands" -> "setDefaultLanguage";
"blockCommands" -> "skipopts";
"blockCommands" -> "splitBibs";
"blockCommands" -> "theoremstyle";
"blockCommands" -> "tok";
"blockCommands" -> "untokenize";
"blockDelimiter" -> "l";
"blockDelimiter" -> "skipNonindentSpaces";
"blockDelimiter" -> "try";
"blockDocBookTags" -> "fromList";
"blockElementNames" -> "constructorsFor";
"blockElements" -> "biblioTag";
"blockElements" -> "blankline";
"blockElements" -> "blockCode";
"blockElements" -> "blockFile";
"blockElements" -> "blockHtml";
"blockElements" -> "blockPhp";
"blockElements" -> "blockQuote";
"blockElements" -> "centerTag";
"blockElements" -> "codeMacro";
"blockElements" -> "comment";
"blockElements" -> "commentTag";
"blockElements" -> "definitionList";
"blockElements" -> "divTag";
"blockElements" -> "example";
"blockElements" -> "exampleTag";
"blockElements" -> "header";
"blockElements" -> "horizontalLine";
"blockElements" -> "hr";
"blockElements" -> "indentedCode";
"blockElements" -> "lineBlock";
"blockElements" -> "list";
"blockElements" -> "literal";
"blockElements" -> "literalTag";
"blockElements" -> "mixedList";
"blockElements" -> "museGridTable";
"blockElements" -> "noautolink";
"blockElements" -> "pagebreak";
"blockElements" -> "playTag";
"blockElements" -> "quote";
"blockElements" -> "quoteTag";
"blockElements" -> "rightTag";
"blockElements" -> "separator";
"blockElements" -> "table";
"blockElements" -> "verbatim";
"blockElements" -> "verseTag";
"blockFile" -> "codeTag";
"blockHtml" -> "eol";
"blockHtml" -> "manyTillChar";
"blockHtml" -> "spaceChar";
"blockHtml" -> "try";
"blockHtmlTags" -> "fromList";
"blockList" -> "blocks";
"blockList" -> "documentTree";
"blockList" -> "inline";
"blockList" -> "runF";
"blockList" -> "unprunedHeadlineToBlocks";
"blockListToAsciiDoc" -> "blockToAsciiDoc";
"blockListToAsciiDoc" -> "blocks";
"blockListToConTeXt" -> "blockToConTeXt";
"blockListToConTeXt" -> "vcat";
"blockListToCustom" -> "blockToCustom";
"blockListToDokuWiki" -> "backSlashLineBreaks";
"blockListToDokuWiki" -> "blockToDokuWiki";
"blockListToDokuWiki" -> "blocks";
"blockListToDokuWiki" -> "consolidateRawBlocks";
"blockListToDokuWiki" -> "vcat";
"blockListToHaddock" -> "blockToHaddock";
"blockListToHaddock" -> "blocks";
"blockListToHtml" -> "_";
"blockListToHtml" -> "blockToHtml";
"blockListToHtml" -> "nl";
"blockListToJira" -> "toJiraBlocks";
"blockListToLaTeX" -> "blockToLaTeX";
"blockListToLaTeX" -> "setEmptyLine";
"blockListToMan" -> "blockToMan";
"blockListToMan" -> "blocks";
"blockListToMan" -> "vcat";
"blockListToMarkdown" -> "_";
"blockListToMarkdown" -> "attr";
"blockListToMarkdown" -> "blockToMarkdown";
"blockListToMarkdown" -> "blocks";
"blockListToMarkdown" -> "isEnabled";
"blockListToMarkdown" -> "isListBlock";
"blockListToMarkdown" -> "raw";
"blockListToMarkdown" -> "x";
"blockListToMediaWiki" -> "blockToMediaWiki";
"blockListToMediaWiki" -> "blocks";
"blockListToMediaWiki" -> "vcat";
"blockListToMs" -> "blockToMs";
"blockListToMs" -> "blocks";
"blockListToMs" -> "vcat";
"blockListToMuse" -> "env";
"blockListToMuse" -> "flatBlockListToMuse";
"blockListToNote" -> "_";
"blockListToNote" -> "blockListToHtml";
"blockListToNote" -> "blocks";
"blockListToNote" -> "nl";
"blockListToNote" -> "prefixedId";
"blockListToOrg" -> "blockToOrg";
"blockListToOrg" -> "blocks";
"blockListToOrg" -> "vcat";
"blockListToRST" -> "blockListToRST\'";
"blockListToRST\'" -> "_";
"blockListToRST\'" -> "blockToRST";
"blockListToRST\'" -> "blocks";
"blockListToRST\'" -> "t";
"blockListToRST\'" -> "vcat";
"blockListToTexinfo" -> "_";
"blockListToTexinfo" -> "blankline";
"blockListToTexinfo" -> "blockListToTexinfo";
"blockListToTexinfo" -> "blockToTexinfo";
"blockListToTexinfo" -> "collectNodes";
"blockListToTexinfo" -> "empty";
"blockListToTexinfo" -> "isHeaderBlock";
"blockListToTexinfo" -> "makeMenuLine";
"blockListToTexinfo" -> "vcat";
"blockListToTexinfo" -> "x";
"blockListToTextile" -> "blockToTextile";
"blockListToTextile" -> "blocks";
"blockListToTextile" -> "vcat";
"blockListToXWiki" -> "blockToXWiki";
"blockListToXWiki" -> "blocks";
"blockListToXWiki" -> "vcat";
"blockListToZimWiki" -> "blockToZimWiki";
"blockListToZimWiki" -> "blocks";
"blockListToZimWiki" -> "vcat";
"blockML" -> "displayMath";
"blockML" -> "preformatted";
"blockML" -> "table";
"blockMarkupArea" -> "a";
"blockMarkupArea" -> "blankline";
"blockMarkupArea" -> "textStr";
"blockMarkupArea" -> "try";
"blockMarkupLine" -> "a";
"blockMarkupLine" -> "space";
"blockMarkupLine" -> "textStr";
"blockMarkupLine" -> "try";
"blockOption" -> "orgArgKey";
"blockOption" -> "orgParamValue";
"blockOption" -> "try";
"blockParsers" -> "anyList";
"blockParsers" -> "blanklines";
"blockParsers" -> "blockQuote";
"blockParsers" -> "codeBlock";
"blockParsers" -> "commentBlock";
"blockParsers" -> "header";
"blockParsers" -> "hrule";
"blockParsers" -> "maybeExplicitBlock";
"blockParsers" -> "para";
"blockParsers" -> "rawHtmlBlock";
"blockParsers" -> "rawLaTeXBlock\'";
"blockParsers" -> "table";
"blockPhp" -> "eol";
"blockPhp" -> "manyTillChar";
"blockPhp" -> "spaceChar";
"blockPhp" -> "try";
"blockQuote" -> "attributes";
"blockQuote" -> "block";
"blockQuote" -> "emailBlockQuote";
"blockQuote" -> "indentedBlock";
"blockQuote" -> "inlineBQ";
"blockQuote" -> "para";
"blockQuote" -> "parseBlocks";
"blockQuote" -> "parseFromString\'";
"blockQuote" -> "parseHtmlContent";
"blockQuote" -> "raw";
"blockQuote" -> "toList";
"blockQuote" -> "try";
"blockQuote" -> "whitespace";
"blockTag" -> "_";
"blockTag" -> "blocksInTags";
"blockTag" -> "htmlTag";
"blockTag" -> "isBlockTag\'";
"blockTag" -> "syntaxhighlight";
"blockTag" -> "tag";
"blockTag" -> "textInTags";
"blockTag" -> "trimCode";
"blockTags" -> "admonitionTags";
"blockTags" -> "blockDocBookTags";
"blockTags" -> "blockHtmlTags";
"blockTags" -> "epubTags";
"blockToAsciiDoc" -> "_";
"blockToAsciiDoc" -> "attr";
"blockToAsciiDoc" -> "blankline";
"blockToAsciiDoc" -> "blockListToAsciiDoc";
"blockToAsciiDoc" -> "blockToAsciiDoc";
"blockToAsciiDoc" -> "blocks";
"blockToAsciiDoc" -> "bulletListItemToAsciiDoc";
"blockToAsciiDoc" -> "definitionListItemToAsciiDoc";
"blockToAsciiDoc" -> "doubleQuotes";
"blockToAsciiDoc" -> "empty";
"blockToAsciiDoc" -> "identifier";
"blockToAsciiDoc" -> "imageArguments";
"blockToAsciiDoc" -> "inList";
"blockToAsciiDoc" -> "inlineListToAsciiDoc";
"blockToAsciiDoc" -> "inlines";
"blockToAsciiDoc" -> "isEnabled";
"blockToAsciiDoc" -> "items";
"blockToAsciiDoc" -> "l";
"blockToAsciiDoc" -> "listStart";
"blockToAsciiDoc" -> "literal";
"blockToAsciiDoc" -> "needsEscaping";
"blockToAsciiDoc" -> "orderedListItemToAsciiDoc";
"blockToAsciiDoc" -> "report";
"blockToAsciiDoc" -> "space";
"blockToAsciiDoc" -> "str";
"blockToAsciiDoc" -> "toLegacyTable";
"blockToAsciiDoc" -> "tshow";
"blockToAsciiDoc" -> "uniqueIdent";
"blockToAsciiDoc" -> "vcat";
"blockToAsciiDoc" -> "x";
"blockToConTeXt" -> "_";
"blockToConTeXt" -> "attr";
"blockToConTeXt" -> "blankline";
"blockToConTeXt" -> "blockListToConTeXt";
"blockToConTeXt" -> "defListItemToConTeXt";
"blockToConTeXt" -> "empty";
"blockToConTeXt" -> "fromBCP47";
"blockToConTeXt" -> "inlineListToConTeXt";
"blockToConTeXt" -> "inlineToConTeXt";
"blockToConTeXt" -> "isEnabled";
"blockToConTeXt" -> "isTightList";
"blockToConTeXt" -> "label";
"blockToConTeXt" -> "listItemToConTeXt";
"blockToConTeXt" -> "literal";
"blockToConTeXt" -> "orderedListMarkers";
"blockToConTeXt" -> "orderedListStyles";
"blockToConTeXt" -> "report";
"blockToConTeXt" -> "sectionFooter";
"blockToConTeXt" -> "sectionHeader";
"blockToConTeXt" -> "str";
"blockToConTeXt" -> "tableRowToConTeXt";
"blockToConTeXt" -> "tableToConTeXt";
"blockToConTeXt" -> "toLabel";
"blockToConTeXt" -> "toLegacyTable";
"blockToConTeXt" -> "tshow";
"blockToConTeXt" -> "txt";
"blockToConTeXt" -> "vcat";
"blockToCustom" -> "_";
"blockToCustom" -> "attr";
"blockToCustom" -> "attrToMap";
"blockToCustom" -> "blocks";
"blockToCustom" -> "inlines";
"blockToCustom" -> "items";
"blockToCustom" -> "str";
"blockToCustom" -> "toLegacyTable";
"blockToCustom" -> "txt";
"blockToDocbook" -> "_";
"blockToDocbook" -> "alignmentToString";
"blockToDocbook" -> "attr";
"blockToDocbook" -> "blockToDocbook";
"blockToDocbook" -> "blocks";
"blockToDocbook" -> "blocksToDocbook";
"blockToDocbook" -> "deflistItemsToDocbook";
"blockToDocbook" -> "empty";
"blockToDocbook" -> "escapeStringForXML";
"blockToDocbook" -> "getStartLvl";
"blockToDocbook" -> "hasLineBreaks";
"blockToDocbook" -> "idName";
"blockToDocbook" -> "imageToDocbook";
"blockToDocbook" -> "inTags";
"blockToDocbook" -> "inTagsIndented";
"blockToDocbook" -> "inTagsSimple";
"blockToDocbook" -> "inlinesToDocbook";
"blockToDocbook" -> "isTightList";
"blockToDocbook" -> "items";
"blockToDocbook" -> "l";
"blockToDocbook" -> "languages";
"blockToDocbook" -> "languagesByExtension";
"blockToDocbook" -> "linesToPara";
"blockToDocbook" -> "listItemsToDocbook";
"blockToDocbook" -> "literal";
"blockToDocbook" -> "percent";
"blockToDocbook" -> "plainToPara";
"blockToDocbook" -> "report";
"blockToDocbook" -> "selfClosingTag";
"blockToDocbook" -> "str";
"blockToDocbook" -> "tableRowToDocbook";
"blockToDocbook" -> "tableType";
"blockToDocbook" -> "tag";
"blockToDocbook" -> "toLegacyTable";
"blockToDocbook" -> "tshow";
"blockToDocbook" -> "txt";
"blockToDocbook" -> "vcat";
"blockToDokuWiki" -> "_";
"blockToDokuWiki" -> "attr";
"blockToDokuWiki" -> "blockListToDokuWiki";
"blockToDokuWiki" -> "blockToDokuWiki";
"blockToDokuWiki" -> "blocks";
"blockToDokuWiki" -> "definitionListItemToDokuWiki";
"blockToDokuWiki" -> "imageDims";
"blockToDokuWiki" -> "indent";
"blockToDokuWiki" -> "inlineListToDokuWiki";
"blockToDokuWiki" -> "inlines";
"blockToDokuWiki" -> "isSimpleBlockQuote";
"blockToDokuWiki" -> "isSimpleList";
"blockToDokuWiki" -> "items";
"blockToDokuWiki" -> "languageNames";
"blockToDokuWiki" -> "linesToPara";
"blockToDokuWiki" -> "listAttribsToString";
"blockToDokuWiki" -> "listItemToDokuWiki";
"blockToDokuWiki" -> "opt";
"blockToDokuWiki" -> "orderedListItemToDokuWiki";
"blockToDokuWiki" -> "removeFormatting";
"blockToDokuWiki" -> "report";
"blockToDokuWiki" -> "str";
"blockToDokuWiki" -> "tableItemToDokuWiki";
"blockToDokuWiki" -> "toLegacyTable";
"blockToDokuWiki" -> "txt";
"blockToDokuWiki" -> "vcat";
"blockToDokuWiki" -> "x";
"blockToHaddock" -> "_";
"blockToHaddock" -> "attr";
"blockToHaddock" -> "blankline";
"blockToHaddock" -> "blockListToHaddock";
"blockToHaddock" -> "blockToHaddock";
"blockToHaddock" -> "blocks";
"blockToHaddock" -> "bulletListItemToHaddock";
"blockToHaddock" -> "definitionListItemToHaddock";
"blockToHaddock" -> "empty";
"blockToHaddock" -> "gridTable";
"blockToHaddock" -> "inlineListToHaddock";
"blockToHaddock" -> "inlines";
"blockToHaddock" -> "isTightList";
"blockToHaddock" -> "items";
"blockToHaddock" -> "linesToPara";
"blockToHaddock" -> "literal";
"blockToHaddock" -> "orderedListItemToHaddock";
"blockToHaddock" -> "orderedListMarkers";
"blockToHaddock" -> "report";
"blockToHaddock" -> "space";
"blockToHaddock" -> "str";
"blockToHaddock" -> "toLegacyTable";
"blockToHaddock" -> "vcat";
"blockToHtml" -> "_";
"blockToHtml" -> "addAttrs";
"blockToHtml" -> "allowsMathEnvironments";
"blockToHtml" -> "attr";
"blockToHtml" -> "blockListToHtml";
"blockToHtml" -> "blockToHtml";
"blockToHtml" -> "blocks";
"blockToHtml" -> "camelCaseToHyphenated";
"blockToHtml" -> "defList";
"blockToHtml" -> "figure";
"blockToHtml" -> "highlight";
"blockToHtml" -> "inlineListToHtml";
"blockToHtml" -> "inlineToHtml";
"blockToHtml" -> "isEnabled";
"blockToHtml" -> "isMathEnvironment";
"blockToHtml" -> "isRawHtml";
"blockToHtml" -> "isTaskListItem";
"blockToHtml" -> "l";
"blockToHtml" -> "linesToPara";
"blockToHtml" -> "listItemToHtml";
"blockToHtml" -> "nl";
"blockToHtml" -> "ordList";
"blockToHtml" -> "ordNub";
"blockToHtml" -> "report";
"blockToHtml" -> "safeRead";
"blockToHtml" -> "splitBy";
"blockToHtml" -> "str";
"blockToHtml" -> "strToHtml";
"blockToHtml" -> "t";
"blockToHtml" -> "tableToHtml";
"blockToHtml" -> "tshow";
"blockToHtml" -> "txt";
"blockToHtml" -> "unordList";
"blockToHtml" -> "when";
"blockToHtml" -> "x";
"blockToICML" -> "_";
"blockToICML" -> "alignCenterName";
"blockToICML" -> "alignLeftName";
"blockToICML" -> "alignRightName";
"blockToICML" -> "blockToICML";
"blockToICML" -> "blocks";
"blockToICML" -> "blocksToICML";
"blockToICML" -> "bulletListName";
"blockToICML" -> "definitionListItemToICML";
"blockToICML" -> "dynamicStyleKey";
"blockToICML" -> "empty";
"blockToICML" -> "figure";
"blockToICML" -> "headerName";
"blockToICML" -> "inTags";
"blockToICML" -> "intersperseBrs";
"blockToICML" -> "linesToPara";
"blockToICML" -> "listItemsToICML";
"blockToICML" -> "literal";
"blockToICML" -> "orderedListName";
"blockToICML" -> "parStyle";
"blockToICML" -> "report";
"blockToICML" -> "selfClosingTag";
"blockToICML" -> "str";
"blockToICML" -> "tableName";
"blockToICML" -> "toLegacyTable";
"blockToICML" -> "tshow";
"blockToICML" -> "txt";
"blockToICML" -> "vcat";
"blockToInlines" -> "_";
"blockToInlines" -> "attr";
"blockToInlines" -> "blocksToInlines\'";
"blockToInlines" -> "combineLines";
"blockToInlines" -> "str";
"blockToJATS" -> "_";
"blockToJATS" -> "a";
"blockToJATS" -> "attr";
"blockToJATS" -> "blockToJATS";
"blockToJATS" -> "blocks";
"blockToJATS" -> "blocksToJATS";
"blockToJATS" -> "codeAttr";
"blockToJATS" -> "deflistItemsToJATS";
"blockToJATS" -> "empty";
"blockToJATS" -> "escapeStringForXML";
"blockToJATS" -> "imageMimeType";
"blockToJATS" -> "inTags";
"blockToJATS" -> "inTagsIndented";
"blockToJATS" -> "inTagsSimple";
"blockToJATS" -> "inlinesToJATS";
"blockToJATS" -> "isPara";
"blockToJATS" -> "items";
"blockToJATS" -> "l";
"blockToJATS" -> "linesToPara";
"blockToJATS" -> "listItemsToJATS";
"blockToJATS" -> "orderedListMarkers";
"blockToJATS" -> "report";
"blockToJATS" -> "selfClosingTag";
"blockToJATS" -> "simpleList";
"blockToJATS" -> "str";
"blockToJATS" -> "tableToJATS";
"blockToJATS" -> "tag";
"blockToJATS" -> "title";
"blockToJATS" -> "txt";
"blockToJATS" -> "wrappedBlocksToJATS";
"blockToLaTeX" -> "_";
"blockToLaTeX" -> "anchor";
"blockToLaTeX" -> "attr";
"blockToLaTeX" -> "blockListToLaTeX";
"blockToLaTeX" -> "blockToLaTeX";
"blockToLaTeX" -> "defListItemToLaTeX";
"blockToLaTeX" -> "empty";
"blockToLaTeX" -> "env";
"blockToLaTeX" -> "figure";
"blockToLaTeX" -> "getCaption";
"blockToLaTeX" -> "getListingsLanguage";
"blockToLaTeX" -> "highlight";
"blockToLaTeX" -> "hypertarget";
"blockToLaTeX" -> "identifier";
"blockToLaTeX" -> "inlineListToLaTeX";
"blockToLaTeX" -> "inlineToLaTeX";
"blockToLaTeX" -> "isEnabled";
"blockToLaTeX" -> "isListBlock";
"blockToLaTeX" -> "isTightList";
"blockToLaTeX" -> "items";
"blockToLaTeX" -> "l";
"blockToLaTeX" -> "labelFor";
"blockToLaTeX" -> "lhsCodeBlock";
"blockToLaTeX" -> "linesToPara";
"blockToLaTeX" -> "listItemToLaTeX";
"blockToLaTeX" -> "literal";
"blockToLaTeX" -> "mbBraced";
"blockToLaTeX" -> "options";
"blockToLaTeX" -> "ordNub";
"blockToLaTeX" -> "report";
"blockToLaTeX" -> "sectionHeader";
"blockToLaTeX" -> "str";
"blockToLaTeX" -> "stringToLaTeX";
"blockToLaTeX" -> "tableToLaTeX";
"blockToLaTeX" -> "toLabel";
"blockToLaTeX" -> "toRomanNumeral";
"blockToLaTeX" -> "txt";
"blockToLaTeX" -> "vcat";
"blockToLaTeX" -> "when";
"blockToLaTeX" -> "wrapDiv";
"blockToLaTeX" -> "x";
"blockToMan" -> "_";
"blockToMan" -> "blockListToMan";
"blockToMan" -> "blockToMan";
"blockToMan" -> "blocks";
"blockToMan" -> "bulletListItemToMan";
"blockToMan" -> "definitionListItemToMan";
"blockToMan" -> "empty";
"blockToMan" -> "escString";
"blockToMan" -> "indent";
"blockToMan" -> "inlineListToMan";
"blockToMan" -> "inlines";
"blockToMan" -> "item";
"blockToMan" -> "items";
"blockToMan" -> "linesToPara";
"blockToMan" -> "literal";
"blockToMan" -> "orderedListItemToMan";
"blockToMan" -> "orderedListMarkers";
"blockToMan" -> "report";
"blockToMan" -> "splitSentences";
"blockToMan" -> "str";
"blockToMan" -> "toLegacyTable";
"blockToMan" -> "vcat";
"blockToMarkdown" -> "blockToMarkdown\'";
"blockToMarkdown" -> "env";
"blockToMarkdown" -> "notesAndRefs";
"blockToMarkdown\'" -> "_";
"blockToMarkdown\'" -> "a";
"blockToMarkdown\'" -> "addMarkdownAttribute";
"blockToMarkdown\'" -> "attr";
"blockToMarkdown\'" -> "attrsToMarkdown";
"blockToMarkdown\'" -> "beginsWithOrderedListMarker";
"blockToMarkdown\'" -> "blankline";
"blockToMarkdown\'" -> "blanklines";
"blockToMarkdown\'" -> "blockListToMarkdown";
"blockToMarkdown\'" -> "blockToMarkdown";
"blockToMarkdown\'" -> "blocks";
"blockToMarkdown\'" -> "bulletListItemToMarkdown";
"blockToMarkdown\'" -> "capitalize";
"blockToMarkdown\'" -> "definitionListItemToMarkdown";
"blockToMarkdown\'" -> "elemText";
"blockToMarkdown\'" -> "empty";
"blockToMarkdown\'" -> "endline";
"blockToMarkdown\'" -> "gridTable";
"blockToMarkdown\'" -> "inList";
"blockToMarkdown\'" -> "inlineListToMarkdown";
"blockToMarkdown\'" -> "inlines";
"blockToMarkdown\'" -> "isEnabled";
"blockToMarkdown\'" -> "isTightList";
"blockToMarkdown\'" -> "items";
"blockToMarkdown\'" -> "lineBreakToSpace";
"blockToMarkdown\'" -> "linesToPara";
"blockToMarkdown\'" -> "literal";
"blockToMarkdown\'" -> "notesAndRefs";
"blockToMarkdown\'" -> "onlySimpleTableCells";
"blockToMarkdown\'" -> "orderedListItemToMarkdown";
"blockToMarkdown\'" -> "orderedListMarkers";
"blockToMarkdown\'" -> "pandocTable";
"blockToMarkdown\'" -> "pipeTable";
"blockToMarkdown\'" -> "report";
"blockToMarkdown\'" -> "space";
"blockToMarkdown\'" -> "startsWithSpace";
"blockToMarkdown\'" -> "str";
"blockToMarkdown\'" -> "t";
"blockToMarkdown\'" -> "tagWithAttrs";
"blockToMarkdown\'" -> "toLegacyTable";
"blockToMarkdown\'" -> "trim";
"blockToMarkdown\'" -> "uniqueIdent";
"blockToMarkdown\'" -> "vcat";
"blockToMarkdown\'" -> "when";
"blockToMarkdown\'" -> "writeHtml5String";
"blockToMarkdown\'" -> "x";
"blockToMediaWiki" -> "_";
"blockToMediaWiki" -> "attr";
"blockToMediaWiki" -> "blockListToMediaWiki";
"blockToMediaWiki" -> "blockToMediaWiki";
"blockToMediaWiki" -> "blocks";
"blockToMediaWiki" -> "definitionListItemToMediaWiki";
"blockToMediaWiki" -> "escapeText";
"blockToMediaWiki" -> "highlightingLangs";
"blockToMediaWiki" -> "imageToMediaWiki";
"blockToMediaWiki" -> "inlineListToMediaWiki";
"blockToMediaWiki" -> "inlines";
"blockToMediaWiki" -> "isSimpleList";
"blockToMediaWiki" -> "items";
"blockToMediaWiki" -> "keyvals";
"blockToMediaWiki" -> "linesToPara";
"blockToMediaWiki" -> "listAttribsToText";
"blockToMediaWiki" -> "listItemToMediaWiki";
"blockToMediaWiki" -> "opt";
"blockToMediaWiki" -> "report";
"blockToMediaWiki" -> "str";
"blockToMediaWiki" -> "tableRowToMediaWiki";
"blockToMediaWiki" -> "tagWithAttrs";
"blockToMediaWiki" -> "toLegacyTable";
"blockToMediaWiki" -> "trimr";
"blockToMediaWiki" -> "txt";
"blockToMediaWiki" -> "vcat";
"blockToMediaWiki" -> "x";
"blockToMs" -> "_";
"blockToMs" -> "anchor";
"blockToMs" -> "attr";
"blockToMs" -> "blockListToMs";
"blockToMs" -> "blockToMs";
"blockToMs" -> "blocks";
"blockToMs" -> "breakToSpace";
"blockToMs" -> "bulletListItemToMs";
"blockToMs" -> "cslEntryToMs";
"blockToMs" -> "definitionListItemToMs";
"blockToMs" -> "dimension";
"blockToMs" -> "doubleQuotes";
"blockToMs" -> "empty";
"blockToMs" -> "escapeStr";
"blockToMs" -> "highlightCode";
"blockToMs" -> "inPoints";
"blockToMs" -> "indent";
"blockToMs" -> "inlineListToMs\'";
"blockToMs" -> "inlines";
"blockToMs" -> "item";
"blockToMs" -> "items";
"blockToMs" -> "literal";
"blockToMs" -> "orderedListItemToMs";
"blockToMs" -> "orderedListMarkers";
"blockToMs" -> "report";
"blockToMs" -> "resetFirstPara";
"blockToMs" -> "safeRead";
"blockToMs" -> "setFirstPara";
"blockToMs" -> "space";
"blockToMs" -> "splitSentences";
"blockToMs" -> "str";
"blockToMs" -> "stringify";
"blockToMs" -> "toAscii";
"blockToMs" -> "toLegacyTable";
"blockToMs" -> "tshow";
"blockToMs" -> "vcat";
"blockToMuse" -> "_";
"blockToMuse" -> "blankline";
"blockToMuse" -> "blockListToMuse";
"blockToMuse" -> "blocks";
"blockToMuse" -> "empty";
"blockToMuse" -> "env";
"blockToMuse" -> "flatBlockListToMuse";
"blockToMuse" -> "gridTable";
"blockToMuse" -> "inlineListToMuse";
"blockToMuse" -> "inlineListToMuse\'";
"blockToMuse" -> "inlines";
"blockToMuse" -> "isEnabled";
"blockToMuse" -> "item";
"blockToMuse" -> "items";
"blockToMuse" -> "label";
"blockToMuse" -> "literal";
"blockToMuse" -> "onlySimpleTableCells";
"blockToMuse" -> "orderedListMarkers";
"blockToMuse" -> "simpleTable";
"blockToMuse" -> "space";
"blockToMuse" -> "str";
"blockToMuse" -> "toLegacyTable";
"blockToMuse" -> "uniqueIdent";
"blockToMuse" -> "vcat";
"blockToMuseWithNotes" -> "blankline";
"blockToMuseWithNotes" -> "blockToMuse";
"blockToMuseWithNotes" -> "currentNotesToMuse";
"blockToOPML" -> "_";
"blockToOPML" -> "blockToOPML";
"blockToOPML" -> "blocks";
"blockToOPML" -> "empty";
"blockToOPML" -> "inTags";
"blockToOPML" -> "setTranslations";
"blockToOPML" -> "title";
"blockToOPML" -> "toLang";
"blockToOPML" -> "vcat";
"blockToOPML" -> "writeHtmlInlines";
"blockToOPML" -> "writeMarkdown";
"blockToOpenDocument" -> "_";
"blockToOpenDocument" -> "a";
"blockToOpenDocument" -> "addParaStyle";
"blockToOpenDocument" -> "addTableStyle";
"blockToOpenDocument" -> "attr";
"blockToOpenDocument" -> "blockToOpenDocument";
"blockToOpenDocument" -> "blocksToInlines";
"blockToOpenDocument" -> "blocksToOpenDocument";
"blockToOpenDocument" -> "bulletListToOpenDocument";
"blockToOpenDocument" -> "colHeadsToOpenDocument";
"blockToOpenDocument" -> "defList";
"blockToOpenDocument" -> "deflistItemToOpenDocument";
"blockToOpenDocument" -> "empty";
"blockToOpenDocument" -> "escapeStringForXML";
"blockToOpenDocument" -> "figure";
"blockToOpenDocument" -> "inBlockQuote";
"blockToOpenDocument" -> "inHeaderTags";
"blockToOpenDocument" -> "inParagraphTags";
"blockToOpenDocument" -> "inPreformattedTags";
"blockToOpenDocument" -> "inTags";
"blockToOpenDocument" -> "increaseIndent";
"blockToOpenDocument" -> "inlinesToOpenDocument";
"blockToOpenDocument" -> "isEnabled";
"blockToOpenDocument" -> "isTightList";
"blockToOpenDocument" -> "linesToPara";
"blockToOpenDocument" -> "newOrderedListStyle";
"blockToOpenDocument" -> "numberedFigureCaption";
"blockToOpenDocument" -> "numberedTableCaption";
"blockToOpenDocument" -> "orderedList";
"blockToOpenDocument" -> "orderedListToOpenDocument";
"blockToOpenDocument" -> "paraStyle";
"blockToOpenDocument" -> "paraTableStyles";
"blockToOpenDocument" -> "plainToPara";
"blockToOpenDocument" -> "preformatted";
"blockToOpenDocument" -> "report";
"blockToOpenDocument" -> "selfClosingTag";
"blockToOpenDocument" -> "setFirstPara";
"blockToOpenDocument" -> "setInDefinitionList";
"blockToOpenDocument" -> "source";
"blockToOpenDocument" -> "t";
"blockToOpenDocument" -> "table";
"blockToOpenDocument" -> "tableBodyToOpenDocument";
"blockToOpenDocument" -> "tableStyle";
"blockToOpenDocument" -> "title";
"blockToOpenDocument" -> "tshow";
"blockToOpenDocument" -> "unNumberedCaption";
"blockToOpenDocument" -> "vcat";
"blockToOpenDocument" -> "withLangFromAttr";
"blockToOpenDocument" -> "withParagraphStyle";
"blockToOpenXML" -> "blockToOpenXML\'";
"blockToOpenXML" -> "withDirection";
"blockToOpenXML\'" -> "_";
"blockToOpenXML\'" -> "addList";
"blockToOpenXML\'" -> "alignmentToString";
"blockToOpenXML\'" -> "asList";
"blockToOpenXML\'" -> "attr";
"blockToOpenXML\'" -> "block";
"blockToOpenXML\'" -> "blockToOpenXML";
"blockToOpenXML\'" -> "blocks";
"blockToOpenXML\'" -> "blocksToOpenXML";
"blockToOpenXML\'" -> "definitionListItemToOpenXML";
"blockToOpenXML\'" -> "dynamicStyleKey";
"blockToOpenXML\'" -> "el";
"blockToOpenXML\'" -> "elName";
"blockToOpenXML\'" -> "env";
"blockToOpenXML\'" -> "fromString";
"blockToOpenXML\'" -> "getNumId";
"blockToOpenXML\'" -> "getParaProps";
"blockToOpenXML\'" -> "header";
"blockToOpenXML\'" -> "inlineToOpenXML";
"blockToOpenXML\'" -> "inlinesToOpenXML";
"blockToOpenXML\'" -> "isDisplayMath";
"blockToOpenXML\'" -> "isEnabled";
"blockToOpenXML\'" -> "isHeaderBlock";
"blockToOpenXML\'" -> "items";
"blockToOpenXML\'" -> "l";
"blockToOpenXML\'" -> "linesToPara";
"blockToOpenXML\'" -> "listItemToOpenXML";
"blockToOpenXML\'" -> "mknode";
"blockToOpenXML\'" -> "pStyleM";
"blockToOpenXML\'" -> "rStyleM";
"blockToOpenXML\'" -> "report";
"blockToOpenXML\'" -> "setFirstPara";
"blockToOpenXML\'" -> "str";
"blockToOpenXML\'" -> "stringify";
"blockToOpenXML\'" -> "toLegacyTable";
"blockToOpenXML\'" -> "withParaProp";
"blockToOpenXML\'" -> "withParaPropM";
"blockToOpenXML\'" -> "withTextPropM";
"blockToOpenXML\'" -> "wrapBookmark";
"blockToOpenXML\'" -> "x";
"blockToOrg" -> "_";
"blockToOrg" -> "attr";
"blockToOrg" -> "blankline";
"blockToOrg" -> "blockListToOrg";
"blockToOrg" -> "blocks";
"blockToOrg" -> "bulletListItemToOrg";
"blockToOrg" -> "definitionListItemToOrg";
"blockToOrg" -> "divToOrg";
"blockToOrg" -> "empty";
"blockToOrg" -> "inlineListToOrg";
"blockToOrg" -> "inlineToOrg";
"blockToOrg" -> "inlines";
"blockToOrg" -> "isRawFormat";
"blockToOrg" -> "isTightList";
"blockToOrg" -> "items";
"blockToOrg" -> "l";
"blockToOrg" -> "literal";
"blockToOrg" -> "orderedListItemToOrg";
"blockToOrg" -> "orderedListMarkers";
"blockToOrg" -> "orgLangIdentifiers";
"blockToOrg" -> "pandocLangToOrg";
"blockToOrg" -> "propertiesDrawer";
"blockToOrg" -> "report";
"blockToOrg" -> "str";
"blockToOrg" -> "toLegacyTable";
"blockToOrg" -> "trimr";
"blockToOrg" -> "txt";
"blockToOrg" -> "vcat";
"blockToOrg" -> "x";
"blockToOutput" -> "_";
"blockToOutput" -> "extractData";
"blockToOutput" -> "pairsToJSONMeta";
"blockToOutput" -> "safeRead";
"blockToOutput" -> "t";
"blockToParagraphs" -> "_";
"blockToParagraphs" -> "addLogMessage";
"blockToParagraphs" -> "attr";
"blockToParagraphs" -> "blockQuoteSize";
"blockToParagraphs" -> "blockToParagraphs";
"blockToParagraphs" -> "concatMapM";
"blockToParagraphs" -> "env";
"blockToParagraphs" -> "formatSourceLines";
"blockToParagraphs" -> "highlight";
"blockToParagraphs" -> "inlinesToParElems";
"blockToParagraphs" -> "isListType";
"blockToParagraphs" -> "multiParBullet";
"blockToParagraphs" -> "registerAnchorId";
"blockToParagraphs" -> "str";
"blockToRST" -> "_";
"blockToRST" -> "anchor";
"blockToRST" -> "attr";
"blockToRST" -> "blankline";
"blockToRST" -> "blockListToRST";
"blockToRST" -> "blockToRST";
"blockToRST" -> "blocks";
"blockToRST" -> "bulletListItemToRST";
"blockToRST" -> "definitionListItemToRST";
"blockToRST" -> "description";
"blockToRST" -> "empty";
"blockToRST" -> "gridTable";
"blockToRST" -> "imageDimsToRST";
"blockToRST" -> "inlineListToRST";
"blockToRST" -> "inlines";
"blockToRST" -> "isEnabled";
"blockToRST" -> "isTightList";
"blockToRST" -> "items";
"blockToRST" -> "linesToLineBlock";
"blockToRST" -> "literal";
"blockToRST" -> "orderedListItemToRST";
"blockToRST" -> "orderedListMarkers";
"blockToRST" -> "simpleTable";
"blockToRST" -> "space";
"blockToRST" -> "splitBy";
"blockToRST" -> "str";
"blockToRST" -> "toLegacyTable";
"blockToRST" -> "txt";
"blockToRST" -> "uniqueIdent";
"blockToRST" -> "vcat";
"blockToRST" -> "x";
"blockToRTF" -> "_";
"blockToRTF" -> "blockToRTF";
"blockToRTF" -> "blocksToRTF";
"blockToRTF" -> "bulletMarker";
"blockToRTF" -> "codeStringToRTF";
"blockToRTF" -> "definitionListItemToRTF";
"blockToRTF" -> "indent";
"blockToRTF" -> "indentIncrement";
"blockToRTF" -> "inlinesToRTF";
"blockToRTF" -> "linesToPara";
"blockToRTF" -> "listItemToRTF";
"blockToRTF" -> "orderedMarkers";
"blockToRTF" -> "report";
"blockToRTF" -> "rtfCompact";
"blockToRTF" -> "rtfPar";
"blockToRTF" -> "spaceAtEnd";
"blockToRTF" -> "str";
"blockToRTF" -> "tableRowToRTF";
"blockToRTF" -> "toLegacyTable";
"blockToRTF" -> "tshow";
"blockToShape" -> "_";
"blockToShape" -> "attr";
"blockToShape" -> "blockToParagraphs";
"blockToShape" -> "blockToShape";
"blockToShape" -> "combineParaElems";
"blockToShape" -> "inlinesToParElems";
"blockToShape" -> "rowToParagraphs";
"blockToShape" -> "str";
"blockToShape" -> "toLegacyTable";
"blockToShape" -> "url";
"blockToShape" -> "withAttr";
"blockToSpeakerNotes" -> "_";
"blockToSpeakerNotes" -> "blockToParagraphs";
"blockToSpeakerNotes" -> "concatMapM";
"blockToSpeakerNotes" -> "env";
"blockToTEI" -> "_";
"blockToTEI" -> "attr";
"blockToTEI" -> "blockToTEI";
"blockToTEI" -> "blocks";
"blockToTEI" -> "blocksToTEI";
"blockToTEI" -> "deflistItemsToTEI";
"blockToTEI" -> "empty";
"blockToTEI" -> "escapeStringForXML";
"blockToTEI" -> "idFromAttr";
"blockToTEI" -> "inTags";
"blockToTEI" -> "inTagsIndented";
"blockToTEI" -> "inTagsSimple";
"blockToTEI" -> "inlinesToTEI";
"blockToTEI" -> "items";
"blockToTEI" -> "l";
"blockToTEI" -> "languages";
"blockToTEI" -> "languagesByExtension";
"blockToTEI" -> "linesToPara";
"blockToTEI" -> "listItemsToTEI";
"blockToTEI" -> "literal";
"blockToTEI" -> "plainToPara";
"blockToTEI" -> "report";
"blockToTEI" -> "selfClosingTag";
"blockToTEI" -> "str";
"blockToTEI" -> "tableHeadersToTEI";
"blockToTEI" -> "tableRowToTEI";
"blockToTEI" -> "toLegacyTable";
"blockToTEI" -> "tshow";
"blockToTEI" -> "vcat";
"blockToTexinfo" -> "_";
"blockToTexinfo" -> "attr";
"blockToTexinfo" -> "blankline";
"blockToTexinfo" -> "blockListToTexinfo";
"blockToTexinfo" -> "blockToTexinfo";
"blockToTexinfo" -> "decimal";
"blockToTexinfo" -> "defListItemToTexinfo";
"blockToTexinfo" -> "empty";
"blockToTexinfo" -> "inCmd";
"blockToTexinfo" -> "inlineListForNode";
"blockToTexinfo" -> "inlineListToTexinfo";
"blockToTexinfo" -> "inlineToTexinfo";
"blockToTexinfo" -> "items";
"blockToTexinfo" -> "linesToPara";
"blockToTexinfo" -> "listItemToTexinfo";
"blockToTexinfo" -> "literal";
"blockToTexinfo" -> "lowerAlpha";
"blockToTexinfo" -> "report";
"blockToTexinfo" -> "str";
"blockToTexinfo" -> "tableHeadToTexinfo";
"blockToTexinfo" -> "tableRowToTexinfo";
"blockToTexinfo" -> "toLegacyTable";
"blockToTexinfo" -> "txt";
"blockToTexinfo" -> "uniqueIdent";
"blockToTexinfo" -> "upperAlpha";
"blockToTexinfo" -> "vcat";
"blockToTexinfo" -> "x";
"blockToTextile" -> "_";
"blockToTextile" -> "alignmentToText";
"blockToTextile" -> "attr";
"blockToTextile" -> "blockListToTextile";
"blockToTextile" -> "blockToTextile";
"blockToTextile" -> "blocks";
"blockToTextile" -> "definitionListItemToTextile";
"blockToTextile" -> "escapeStringForXML";
"blockToTextile" -> "header";
"blockToTextile" -> "inlineListToTextile";
"blockToTextile" -> "inlineToTextile";
"blockToTextile" -> "inlines";
"blockToTextile" -> "isSimpleList";
"blockToTextile" -> "isSpace";
"blockToTextile" -> "items";
"blockToTextile" -> "keyvals";
"blockToTextile" -> "linesToPara";
"blockToTextile" -> "listAttribsToString";
"blockToTextile" -> "listItemToTextile";
"blockToTextile" -> "percent";
"blockToTextile" -> "prefix";
"blockToTextile" -> "report";
"blockToTextile" -> "str";
"blockToTextile" -> "stripTrailingNewlines";
"blockToTextile" -> "tableRowToTextile";
"blockToTextile" -> "tagWithAttrs";
"blockToTextile" -> "toLegacyTable";
"blockToTextile" -> "tshow";
"blockToTextile" -> "txt";
"blockToTextile" -> "vcat";
"blockToTextile" -> "withUseTags";
"blockToTextile" -> "x";
"blockToXWiki" -> "_";
"blockToXWiki" -> "blockListToXWiki";
"blockToXWiki" -> "blockToXWiki";
"blockToXWiki" -> "blockToXWikiList";
"blockToXWiki" -> "blocks";
"blockToXWiki" -> "definitionListItemToMediaWiki";
"blockToXWiki" -> "formRow";
"blockToXWiki" -> "genAnchor";
"blockToXWiki" -> "inlineListToXWiki";
"blockToXWiki" -> "inlineToXWiki";
"blockToXWiki" -> "inlines";
"blockToXWiki" -> "items";
"blockToXWiki" -> "linesToPara";
"blockToXWiki" -> "report";
"blockToXWiki" -> "split";
"blockToXWiki" -> "str";
"blockToXWiki" -> "tableCellXWiki";
"blockToXWiki" -> "toLegacyTable";
"blockToXWiki" -> "vcat";
"blockToXWikiList" -> "listItemToXWiki";
"blockToXWikiList" -> "vcat";
"blockToXml" -> "_";
"blockToXml" -> "a";
"blockToXml" -> "blockToXml";
"blockToXml" -> "cMapM";
"blockToXml" -> "el";
"blockToXml" -> "indentBlocks";
"blockToXml" -> "insertImage";
"blockToXml" -> "insertMath";
"blockToXml" -> "items";
"blockToXml" -> "list";
"blockToXml" -> "mkitem";
"blockToXml" -> "orderedListMarkers";
"blockToXml" -> "plainToPara";
"blockToXml" -> "report";
"blockToXml" -> "spaceBeforeAfter";
"blockToXml" -> "split";
"blockToXml" -> "str";
"blockToXml" -> "t";
"blockToXml" -> "tag";
"blockToXml" -> "toLegacyTable";
"blockToXml" -> "toXml";
"blockToXml" -> "wrap";
"blockToZimWiki" -> "_";
"blockToZimWiki" -> "attr";
"blockToZimWiki" -> "blockListToZimWiki";
"blockToZimWiki" -> "blockToZimWiki";
"blockToZimWiki" -> "blocks";
"blockToZimWiki" -> "cleanupCode";
"blockToZimWiki" -> "definitionListItemToZimWiki";
"blockToZimWiki" -> "imageDims";
"blockToZimWiki" -> "indent";
"blockToZimWiki" -> "indentFromHTML";
"blockToZimWiki" -> "inlineListToZimWiki";
"blockToZimWiki" -> "inlines";
"blockToZimWiki" -> "items";
"blockToZimWiki" -> "linesToPara";
"blockToZimWiki" -> "listItemToZimWiki";
"blockToZimWiki" -> "opt";
"blockToZimWiki" -> "orderedListItemToZimWiki";
"blockToZimWiki" -> "removeFormatting";
"blockToZimWiki" -> "report";
"blockToZimWiki" -> "str";
"blockToZimWiki" -> "tableItemToZimWiki";
"blockToZimWiki" -> "toLegacyTable";
"blockToZimWiki" -> "txt";
"blockToZimWiki" -> "vcat";
"blockToZimWiki" -> "x";
"blockquote" -> "babelLangToBCP47";
"blockquote" -> "block";
"blockquote" -> "blockQuote";
"blockquote" -> "bracketed";
"blockquote" -> "cite";
"blockquote" -> "cites";
"blockquote" -> "grouped";
"blockquote" -> "inline";
"blockquote" -> "l";
"blockquote" -> "para";
"blockquote" -> "renderLang";
"blockquote" -> "symbolIn";
"blocks" -> "block";
"blocks" -> "headerStart";
"blocksInTags" -> "block";
"blocksInTags" -> "htmlTag";
"blocksInTags" -> "raw";
"blocksInTags" -> "tag";
"blocksInTags" -> "try";
"blocksThenInline" -> "blockML";
"blocksThenInline" -> "plainInlineML";
"blocksThenInline" -> "try";
"blocksThenInline" -> "x";
"blocksToBullets" -> "flatToBullets";
"blocksToBullets" -> "handleListParagraphs";
"blocksToBullets" -> "removeListDivs";
"blocksToBullets" -> "singleItemHeaderToHeader";
"blocksToDefinitions" -> "a";
"blocksToDefinitions" -> "archiveToDocx";
"blocksToDefinitions" -> "archiveToDocxWithWarnings";
"blocksToDefinitions" -> "blocksToDefinitions\'";
"blocksToDefinitions" -> "constructBogusParStyleData";
"blocksToDefinitions" -> "getStyleNames";
"blocksToDefinitions" -> "leftBiasedMergeRunStyle";
"blocksToDefinitions" -> "pHeading";
"blocksToDefinitions\'" -> "_";
"blocksToDefinitions\'" -> "blocksToDefinitions\'";
"blocksToDefinitions\'" -> "delete";
"blocksToDefinitions\'" -> "plainParaInlines";
"blocksToDocbook" -> "blockToDocbook";
"blocksToDocbook" -> "vcat";
"blocksToICML" -> "blockToICML";
"blocksToICML" -> "intersperseBrs";
"blocksToInlines" -> "_";
"blocksToInlines" -> "blocksToInlines\'";
"blocksToInlines" -> "liftPandocLua";
"blocksToInlinesWarn" -> "_";
"blocksToInlinesWarn" -> "blocksToInlines\'";
"blocksToInlinesWarn" -> "paraOrPlain";
"blocksToInlinesWarn" -> "toList";
"blocksToInlinesWithSep" -> "blockToInlines";
"blocksToInlines\'" -> "blocksToInlinesWithSep";
"blocksToInlines\'" -> "defaultBlocksSeparator";
"blocksToJATS" -> "wrappedBlocksToJATS";
"blocksToOpenDocument" -> "blockToOpenDocument";
"blocksToOpenDocument" -> "vcat";
"blocksToOpenXML" -> "blockToOpenXML";
"blocksToOpenXML" -> "separateTables";
"blocksToPresentationSlides" -> "addSpeakerNotesToMetaSlide";
"blocksToPresentationSlides" -> "applyToSlide";
"blocksToPresentationSlides" -> "blocksToSlide";
"blocksToPresentationSlides" -> "emptySlide";
"blocksToPresentationSlides" -> "endNotesSlideId";
"blocksToPresentationSlides" -> "env";
"blocksToPresentationSlides" -> "getMetaSlide";
"blocksToPresentationSlides" -> "makeEndNotesSlideBlocks";
"blocksToPresentationSlides" -> "makeTOCSlide";
"blocksToPresentationSlides" -> "replaceAnchor";
"blocksToPresentationSlides" -> "runUniqueSlideId";
"blocksToPresentationSlides" -> "splitBlocks";
"blocksToPresentationSlides" -> "tshow";
"blocksToRTF" -> "blockToRTF";
"blocksToRTF" -> "indent";
"blocksToShapes" -> "blockToShape";
"blocksToShapes" -> "combineShapes";
"blocksToSlide" -> "blocksToSlide\'";
"blocksToSlide" -> "handleAndFilterSpeakerNotes";
"blocksToSlide\'" -> "_";
"blocksToSlide\'" -> "addLogMessage";
"blocksToSlide\'" -> "blocksToShapes";
"blocksToSlide\'" -> "blocksToSlide\'";
"blocksToSlide\'" -> "forceFontSize";
"blocksToSlide\'" -> "inlinesToParElems";
"blocksToSlide\'" -> "noteSize";
"blocksToSlide\'" -> "registerAnchorId";
"blocksToSlide\'" -> "splitBlocks";
"blocksToTEI" -> "blockToTEI";
"blocksToTEI" -> "vcat";
"bodyPartToBlocks" -> "_";
"bodyPartToBlocks" -> "addAuthorAndDate";
"bodyPartToBlocks" -> "attr";
"bodyPartToBlocks" -> "bodyPartToBlocks";
"bodyPartToBlocks" -> "codeBlock";
"bodyPartToBlocks" -> "constructBogusParStyleData";
"bodyPartToBlocks" -> "delete";
"bodyPartToBlocks" -> "displayMath";
"bodyPartToBlocks" -> "getStyleNames";
"bodyPartToBlocks" -> "hasStylesInheritedFrom";
"bodyPartToBlocks" -> "isCodeDiv";
"bodyPartToBlocks" -> "isEnabled";
"bodyPartToBlocks" -> "l";
"bodyPartToBlocks" -> "makeHeaderAnchor";
"bodyPartToBlocks" -> "normalizeToClassName";
"bodyPartToBlocks" -> "pHeading";
"bodyPartToBlocks" -> "parPartToInlines";
"bodyPartToBlocks" -> "parPartToText";
"bodyPartToBlocks" -> "parStyleToTransform";
"bodyPartToBlocks" -> "para";
"bodyPartToBlocks" -> "paraOrPlain";
"bodyPartToBlocks" -> "plain";
"bodyPartToBlocks" -> "removeStyleNamed";
"bodyPartToBlocks" -> "rowToBlocksList";
"bodyPartToBlocks" -> "smushInlines";
"bodyPartToBlocks" -> "space";
"bodyPartToBlocks" -> "table";
"bodyPartToBlocks" -> "toHeaderRow";
"bodyPartToBlocks" -> "toRow";
"bodyPartToBlocks" -> "trimSps";
"bodyPartToBlocks" -> "tshow";
"bodyPartToBlocks" -> "txt";
"bodyPartsToMeta" -> "bodyPartsToMeta\'";
"bodyPartsToMeta" -> "fixAuthors";
"bodyPartsToMeta\'" -> "_";
"bodyPartsToMeta\'" -> "bodyPartsToMeta\'";
"bodyPartsToMeta\'" -> "getStyleNames";
"bodyPartsToMeta\'" -> "inlines";
"bodyPartsToMeta\'" -> "metaStyles";
"bodyPartsToMeta\'" -> "parPartToInlines";
"bodyPartsToMeta\'" -> "smushInlines";
"bodyPartsToMeta\'" -> "toList";
"bodyRowCells" -> "bodyRows";
"bodyRowCells" -> "rowCells";
"bodyRows" -> "_";
"bodyRowsToHtml" -> "attr";
"bodyRowsToHtml" -> "rowListToHtml";
"bodyRowsToJats" -> "attr";
"bodyRowsToJats" -> "rowListToJats";
"bodyToOutput" -> "blocksToBullets";
"bodyToOutput" -> "blocksToDefinitions";
"bodyToOutput" -> "bodyPartToBlocks";
"bodyToOutput" -> "bodyPartsToMeta";
"bodyToOutput" -> "meta";
"bodyToOutput" -> "removeOrphanAnchors";
"bodyToOutput" -> "rewriteLinks";
"bodyToOutput" -> "sepBodyParts";
"bodyToOutput" -> "smushBlocks";
"bodyToOutput" -> "toList";
"bold" -> "enclosed";
"bold" -> "inline";
"bold" -> "inlineMarkup";
"bold" -> "nestedInlines";
"bold" -> "try";
"boldCode" -> "enclosed";
"boldCode" -> "fromEntities";
"boldCode" -> "nestedString";
"boldCode" -> "try";
"bookTrans" -> "_";
"booktitle" -> "cMapM";
"booktitle" -> "el";
"booktitle" -> "t";
"booktitle" -> "toXml";
"booleanSetting" -> "elispBoolean";
"booleanSetting" -> "genericExportSetting";
"bordered" -> "empty";
"bordered" -> "literal";
"boxed" -> "try";
"br" -> "a";
"br" -> "mknode";
"br" -> "space";
"br" -> "try";
"braced" -> "anyTok";
"braced" -> "braced\'";
"braced" -> "symbol";
"bracedOrToken" -> "a";
"bracedOrToken" -> "anyControlSeq";
"bracedOrToken" -> "braced";
"bracedOrToken" -> "singleChar";
"bracedUrl" -> "anyTok";
"bracedUrl" -> "bgroup";
"bracedUrl" -> "braced\'";
"bracedUrl" -> "retokenizeComment";
"braced\'" -> "braced\'";
"braced\'" -> "symbol";
"braced\'" -> "t";
"bracketed" -> "symbol";
"bracketed" -> "try";
"bracketedNum" -> "_";
"bracketedNum" -> "bracketedToks";
"bracketedNum" -> "safeRead";
"bracketedNum" -> "untokenize";
"bracketedSpan" -> "attr";
"bracketedSpan" -> "attributes";
"bracketedSpan" -> "guardEnabled";
"bracketedSpan" -> "isSmallCaps";
"bracketedSpan" -> "isUnderline";
"bracketedSpan" -> "reference";
"bracketedSpan" -> "try";
"bracketedToks" -> "a";
"bracketedToks" -> "anyTok";
"bracketedToks" -> "braced";
"bracketedToks" -> "symbol";
"bracketedToks" -> "try";
"bracketedToks" -> "withRaw";
"breakChars" -> "try";
"breakSentence" -> "_";
"breakSentence" -> "breakSentence";
"breakSentence" -> "x";
"breakToSpace" -> "x";
"buildBasedOnList" -> "buildBasedOnList";
"buildBasedOnList" -> "getStyleChildren";
"buildSpTree" -> "_";
"buildSpTree" -> "elContent";
"buildSpTree" -> "isElem";
"bulletItem" -> "listItemLine";
"bulletItem" -> "prefix";
"bulletItem" -> "try";
"bulletList" -> "bulletListStart";
"bulletList" -> "compactify";
"bulletList" -> "guardEnabled";
"bulletList" -> "htmlTag";
"bulletList" -> "indent";
"bulletList" -> "indented";
"bulletList" -> "items";
"bulletList" -> "li";
"bulletList" -> "listItem";
"bulletList" -> "parseBlocks";
"bulletList" -> "parseList";
"bulletList" -> "prefix";
"bulletList" -> "spaces";
"bulletList" -> "try";
"bulletList" -> "tryMsg";
"bulletListAtDepth" -> "bulletListItemAtDepth";
"bulletListAtDepth" -> "try";
"bulletListItemAtDepth" -> "genericListItemAtDepth";
"bulletListItemToAsciiDoc" -> "addBlock";
"bulletListItemToAsciiDoc" -> "blocks";
"bulletListItemToAsciiDoc" -> "empty";
"bulletListItemToAsciiDoc" -> "listBegin";
"bulletListItemToHaddock" -> "blankline";
"bulletListItemToHaddock" -> "blockListToHaddock";
"bulletListItemToHaddock" -> "endsWithPlain";
"bulletListItemToHaddock" -> "items";
"bulletListItemToMan" -> "_";
"bulletListItemToMan" -> "blockListToMan";
"bulletListItemToMan" -> "blockToMan";
"bulletListItemToMan" -> "bulletListItemToMan";
"bulletListItemToMan" -> "empty";
"bulletListItemToMan" -> "literal";
"bulletListItemToMarkdown" -> "blockListToMarkdown";
"bulletListItemToMarkdown" -> "itemEndsWithTightList";
"bulletListItemToMarkdown" -> "literal";
"bulletListItemToMarkdown" -> "taskListItemToAscii";
"bulletListItemToMs" -> "_";
"bulletListItemToMs" -> "blockListToMs";
"bulletListItemToMs" -> "blockToMs";
"bulletListItemToMs" -> "bulletListItemToMs";
"bulletListItemToMs" -> "empty";
"bulletListItemToMs" -> "literal";
"bulletListItemToOrg" -> "blankline";
"bulletListItemToOrg" -> "blockListToOrg";
"bulletListItemToOrg" -> "endsWithPlain";
"bulletListItemToOrg" -> "items";
"bulletListItemToRST" -> "blankline";
"bulletListItemToRST" -> "blockListToRST";
"bulletListItemToRST" -> "endsWithPlain";
"bulletListItemToRST" -> "items";
"bulletListItemsUntil" -> "a";
"bulletListItemsUntil" -> "allowPara";
"bulletListItemsUntil" -> "blankline";
"bulletListItemsUntil" -> "bulletListItemsUntil";
"bulletListItemsUntil" -> "eol";
"bulletListItemsUntil" -> "indent";
"bulletListItemsUntil" -> "indentWith";
"bulletListItemsUntil" -> "listItemContentsUntil";
"bulletListItemsUntil" -> "spaceChar";
"bulletListItemsUntil" -> "try";
"bulletListItemsUntil" -> "x";
"bulletListStart" -> "bulletListMarkers";
"bulletListStart" -> "eol";
"bulletListStart" -> "genericListStart";
"bulletListStart" -> "gobbleAtMostSpaces";
"bulletListStart" -> "gobbleSpaces";
"bulletListStart" -> "hrule";
"bulletListStart" -> "isBulletListMarker";
"bulletListStart" -> "newline";
"bulletListStart" -> "notFollowedBy\'";
"bulletListStart" -> "skipNonindentSpaces";
"bulletListStart" -> "skipSpaces1";
"bulletListStart" -> "spaceChar";
"bulletListStart" -> "try";
"bulletListStyle" -> "bulletList";
"bulletListStyle" -> "inTags";
"bulletListStyle" -> "l";
"bulletListStyle" -> "listLevelStyle";
"bulletListStyle" -> "paraListStyle";
"bulletListStyle" -> "tshow";
"bulletListToOpenDocument" -> "bulletListStyle";
"bulletListToOpenDocument" -> "inTags";
"bulletListToOpenDocument" -> "inTightList";
"bulletListToOpenDocument" -> "isTightList";
"bulletListToOpenDocument" -> "listItemsToOpenDocument";
"bulletListToOpenDocument" -> "tshow";
"bulletListUntil" -> "a";
"bulletListUntil" -> "bulletListItemsUntil";
"bulletListUntil" -> "getIndent";
"bulletListUntil" -> "indent";
"bulletListUntil" -> "try";
"bulletMarker" -> "_";
"bulletMarker" -> "indent";
"bytesToOdt" -> "_";
"bytesToOdt" -> "archiveToOdt";
"cMap" -> "a";
"cMapM" -> "html4Attributes";
"cMapM" -> "html5Attributes";
"cMapM" -> "rdfaAttributes";
"cMapM" -> "tagWithAttributes";
"cMapM" -> "writeDZSlides";
"cMapM" -> "writeHtml4";
"cMapM" -> "writeHtml4String";
"cMapM" -> "writeHtml5";
"cMapM" -> "writeHtml5String";
"cMapM" -> "writeHtmlStringForEPUB";
"cMapM" -> "writeRevealJs";
"cMapM" -> "writeS5";
"cMapM" -> "writeSlideous";
"cMapM" -> "writeSlidy";
"calculateAlignments" -> "_";
"calculateAlignments" -> "bodyRowCells";
"callWithTraceback" -> "pcallWithTraceback";
"callWithTraceback" -> "when";
"camelCaseStrToHyphenated" -> "a";
"camelCaseToHyphenated" -> "camelCaseStrToHyphenated";
"canonicalizeUrl" -> "_";
"canonicalizeUrl" -> "tshow";
"canonicalizeUrl" -> "url";
"capitalize" -> "x";
"capitalizeNoteCitation" -> "x";
"captionlessTable" -> "attr";
"captionlessTable" -> "colSpecListToJATS";
"captionlessTable" -> "inTags";
"captionlessTable" -> "tableBodyToJats";
"captionlessTable" -> "tableFootToJats";
"captionlessTable" -> "tableHeadToJats";
"captionlessTable" -> "toAttribs";
"captionlessTable" -> "vcat";
"catWithBlankLines" -> "_";
"catWithBlankLines" -> "blanklines";
"catWithBlankLines" -> "blockToMuseWithNotes";
"catWithBlankLines" -> "flatBlockListToMuse";
"cellAlignment" -> "_";
"cellAlignment" -> "singleChar";
"cellAlignment" -> "symbol";
"cellAlignment" -> "untoken";
"cellAttributes" -> "_";
"cellAttributes" -> "attributes";
"cellAttributes" -> "isHeader";
"cellAttributes" -> "toAlignment";
"cellAttributes" -> "try";
"cellToBlocks" -> "_";
"cellToBlocks" -> "a";
"cellToBlocks" -> "addAttachment";
"cellToBlocks" -> "blocksToBullets";
"cellToBlocks" -> "blocksToDefinitions";
"cellToBlocks" -> "bodyPartToBlocks";
"cellToBlocks" -> "fixImage";
"cellToBlocks" -> "fromList";
"cellToBlocks" -> "isEnabled";
"cellToBlocks" -> "jsonMetaToPairs";
"cellToBlocks" -> "outputToBlock";
"cellToBlocks" -> "readMarkdown";
"cellToBlocks" -> "smushBlocks";
"cellToBlocks" -> "source";
"cellToBlocks" -> "toList";
"cellToBlocks" -> "tshow";
"cellToBlocks" -> "x";
"cellToHtml" -> "_";
"cellToHtml" -> "tableCellToHtml";
"cellToJats" -> "_";
"cellToJats" -> "tableCellToJats";
"cellToParagraphs" -> "blockToParagraphs";
"cellsep" -> "skipSpaces";
"cellsep" -> "try";
"centerTag" -> "parseHtmlContent";
"centered" -> "try";
"charOrRef" -> "characterReference";
"charOrRef" -> "try";
"charRef" -> "characterReference";
"charStyle" -> "inTags";
"charStyle" -> "makeContent";
"charStyle" -> "styleToStrAttr";
"charStylesToDoc" -> "codeName";
"charStylesToDoc" -> "contains";
"charStylesToDoc" -> "emphName";
"charStylesToDoc" -> "empty";
"charStylesToDoc" -> "inTags";
"charStylesToDoc" -> "monospacedFont";
"charStylesToDoc" -> "smallCapsName";
"charStylesToDoc" -> "strikeoutName";
"charStylesToDoc" -> "strongName";
"charStylesToDoc" -> "subscriptName";
"charStylesToDoc" -> "superscriptName";
"charStylesToDoc" -> "vcat";
"characterCodeMap" -> "a";
"characterCodeMap" -> "characterCodes";
"characterCodes" -> "a";
"characterReference" -> "_";
"characterReference" -> "many1Till";
"characterReference" -> "nonspaceChar";
"characterReference" -> "try";
"charsInBalanced" -> "charsInBalanced";
"charsInBalanced" -> "raw";
"charsInBalanced" -> "try";
"checkBoolean" -> "t";
"checkDefined" -> "_";
"checkExistence" -> "fileExists";
"checkOnOff" -> "_";
"checkOnOff" -> "findAttrByName";
"checkOnOff" -> "findChild";
"checkOnOff" -> "t";
"checkOnOff" -> "tag";
"childElemToRun" -> "_";
"childElemToRun" -> "elemToBodyPart";
"childElemToRun" -> "elemToExtent";
"childElemToRun" -> "expandDrawingId";
"childElemToRun" -> "findAttrText";
"childElemToRun" -> "findAttrTextByName";
"childElemToRun" -> "getTitleAndAlt";
"childElemToRun" -> "isElem";
"childElemToRun" -> "lookupEndnote";
"childElemToRun" -> "lookupFootnote";
"childElemToRun" -> "mapD";
"childElemToRun" -> "title";
"choiceToMaybe" -> "a";
"choiceToMaybe" -> "eitherToMaybe";
"chooseMax" -> "a";
"chooseMax" -> "chooseMaxWith";
"chooseMaxWith" -> "_";
"chooseMaxWith" -> "a";
"chooseMaxWith" -> "x";
"chooseMostSpecificListLevelStyle" -> "_";
"chooseMostSpecificListLevelStyle" -> "t1";
"cistring" -> "t";
"cistring" -> "try";
"cistring" -> "x";
"citation" -> "cite";
"citation" -> "citeKey";
"citation" -> "cites";
"citation" -> "inline";
"citation" -> "nonspaceChar";
"citation" -> "prefix";
"citation" -> "raw";
"citation" -> "skipSpaces";
"citation" -> "suffix";
"citation" -> "trimInlinesF";
"citation" -> "try";
"citation" -> "untokenize";
"citation" -> "withRaw";
"citation" -> "x";
"citationBlock" -> "citationMarker";
"citationBlock" -> "noteBlock\'";
"citationBlock" -> "raw";
"citationBlock" -> "toKey";
"citationBlock" -> "try";
"citationLabel" -> "isWordTok";
"citationLabel" -> "satisfyTok";
"citationLabel" -> "sp";
"citationLabel" -> "symbol";
"citationLabel" -> "symbolIn";
"citationLabel" -> "untokenize";
"citationMarker" -> "simpleReferenceName";
"citationName" -> "citationMarker";
"citationName" -> "raw";
"citationsToBiblatex" -> "_";
"citationsToBiblatex" -> "citeArgumentsList";
"citationsToBiblatex" -> "citeCommand";
"citationsToBiblatex" -> "empty";
"citationsToBiblatex" -> "literal";
"citationsToBiblatex" -> "one";
"citationsToNatbib" -> "a";
"citationsToNatbib" -> "author";
"citationsToNatbib" -> "citationsToNatbib";
"citationsToNatbib" -> "citeCommand";
"citationsToNatbib" -> "empty";
"citationsToNatbib" -> "one";
"cite" -> "berkeleyCite";
"cite" -> "berkeleyTextualCite";
"cite" -> "guardEnabled";
"cite" -> "inNote";
"cite" -> "normalCite";
"cite" -> "orgRefCite";
"cite" -> "pandocOrgCite";
"cite" -> "raw";
"cite" -> "textualCite";
"cite" -> "try";
"cite" -> "withRaw";
"citeArguments" -> "citeArgumentsList";
"citeArgumentsList" -> "_";
"citeArgumentsList" -> "empty";
"citeArgumentsList" -> "inlineListToLaTeX";
"citeArgumentsList" -> "literal";
"citeArgumentsList" -> "stripLocatorBraces";
"citeArgumentsList" -> "t";
"citeArgumentsList" -> "x";
"citeCommand" -> "citeArguments";
"citeCommand" -> "literal";
"citeKey" -> "notAfterString";
"citeKey" -> "t";
"citeKey" -> "try";
"citeList" -> "citation";
"citeList" -> "skipSpaces";
"citeList" -> "spnl";
"citeList" -> "try";
"cites" -> "_";
"cites" -> "a";
"cites" -> "addPrefix";
"cites" -> "addSuffix";
"cites" -> "paropt";
"cites" -> "simpleCiteArgs";
"cites" -> "t";
"cites" -> "toList";
"cites" -> "try";
"classAttr" -> "identifier";
"classAttr" -> "try";
"classIdAttr" -> "anyChar\'";
"classIdAttr" -> "keyvals";
"classIdAttr" -> "try";
"classTag" -> "closeTag";
"classTag" -> "inline";
"classTag" -> "openTag";
"cleanLinkText" -> "_";
"cleanLinkText" -> "elemText";
"clonePandoc" -> "pushModule";
"clonePandoc" -> "pushSimpleTable";
"closeTag" -> "tag";
"closeTag" -> "textStr";
"closeTag" -> "try";
"closes" -> "closes";
"closing" -> "_";
"closing" -> "fromList";
"closing" -> "para";
"closing" -> "tok";
"code" -> "a";
"code" -> "atStart";
"code" -> "attr";
"code" -> "attributes";
"code" -> "between";
"code" -> "blankline";
"code" -> "code1";
"code" -> "code2";
"code" -> "enclosed";
"code" -> "fromEntities";
"code" -> "guardEnabled";
"code" -> "inList";
"code" -> "inlineMarkup";
"code" -> "listStart";
"code" -> "many1Char";
"code" -> "many1TillChar";
"code" -> "manyTillChar";
"code" -> "manyUntilChar";
"code" -> "nestedString";
"code" -> "newline";
"code" -> "notFollowedBy\'";
"code" -> "rawAttribute";
"code" -> "skipSpaces";
"code" -> "spaceChar";
"code" -> "trim";
"code" -> "try";
"code" -> "verbatimBetween";
"code1" -> "anyChar\'";
"code1" -> "surrounded";
"code2" -> "anyChar\'";
"code2" -> "htmlTag";
"code2" -> "try";
"codeAttr" -> "attr";
"codeAttr" -> "languageFor";
"codeBlock" -> "babelResultsBlock";
"codeBlock" -> "codeBlockBody";
"codeBlock" -> "codeBlockHtml";
"codeBlock" -> "codeBlockStart";
"codeBlock" -> "codeBlockTextile";
"codeBlock" -> "codeHeaderArgs";
"codeBlock" -> "exportsCode";
"codeBlock" -> "ignHeaders";
"codeBlock" -> "rawBlockContent";
"codeBlock" -> "skipSpaces";
"codeBlock" -> "try";
"codeBlockBody" -> "indentedBlock";
"codeBlockBody" -> "quotedBlock";
"codeBlockBody" -> "stripTrailingNewlines";
"codeBlockBody" -> "try";
"codeBlockFenced" -> "anyLine";
"codeBlockFenced" -> "attr";
"codeBlockFenced" -> "attributes";
"codeBlockFenced" -> "blankline";
"codeBlockFenced" -> "blanklines";
"codeBlockFenced" -> "blockDelimiter";
"codeBlockFenced" -> "gobbleAtMostSpaces";
"codeBlockFenced" -> "guardEnabled";
"codeBlockFenced" -> "many1Char";
"codeBlockFenced" -> "nonindentSpaces";
"codeBlockFenced" -> "nonspaceChar";
"codeBlockFenced" -> "rawAttribute";
"codeBlockFenced" -> "spaceChar";
"codeBlockFenced" -> "toLanguageId";
"codeBlockFenced" -> "try";
"codeBlockFenced" -> "x";
"codeBlockHtml" -> "_";
"codeBlockHtml" -> "htmlTag";
"codeBlockHtml" -> "t";
"codeBlockHtml" -> "try";
"codeBlockIndented" -> "blanklines";
"codeBlockIndented" -> "indentedLine";
"codeBlockIndented" -> "l";
"codeBlockIndented" -> "stripTrailingNewlines";
"codeBlockIndented" -> "try";
"codeBlockStart" -> "blankline";
"codeBlockTextile" -> "anyLine";
"codeBlockTextile" -> "blanklines";
"codeBlockTextile" -> "ender";
"codeBlockTextile" -> "explicitBlockStart";
"codeBlockTextile" -> "trimTrailingNewlines";
"codeBlockTextile" -> "try";
"codeHeaderArgs" -> "blockOption";
"codeHeaderArgs" -> "newline";
"codeHeaderArgs" -> "orgArgWord";
"codeHeaderArgs" -> "originalLang";
"codeHeaderArgs" -> "skipSpaces";
"codeHeaderArgs" -> "switchesAsAttributes";
"codeHeaderArgs" -> "translateLang";
"codeHeaderArgs" -> "try";
"codeHtml" -> "fromEntities";
"codeHtml" -> "parseCharHtmlContentWithAttrs";
"codeLanguage" -> "attr";
"codeLanguage" -> "l";
"codeLanguage" -> "manyTillChar";
"codeLanguage" -> "spaceChar";
"codeLanguage" -> "try";
"codeMacro" -> "macroAttrs";
"codeMacro" -> "mungeAttrs";
"codeMacro" -> "newline";
"codeMacro" -> "try";
"codeStringToRTF" -> "str";
"codeStringToRTF" -> "stringToRTF";
"codeTag" -> "a";
"codeTag" -> "closeTag";
"codeTag" -> "codeLanguage";
"codeTag" -> "eol";
"codeTag" -> "htmlAttrToPandoc";
"codeTag" -> "manyTillChar";
"codeTag" -> "openTag";
"codeTag" -> "spaceChar";
"codeTag" -> "tag";
"codeTag" -> "textStr";
"codeTag" -> "try";
"codeblock" -> "_";
"codeblock" -> "stripTrailingNewlines";
"colHeadsToOpenDocument" -> "_";
"colHeadsToOpenDocument" -> "empty";
"colHeadsToOpenDocument" -> "inTagsIndented";
"colHeadsToOpenDocument" -> "tableItemToOpenDocument";
"colHeadsToOpenDocument" -> "vcat";
"colHeadsToOpenDocument" -> "x";
"colSpecListToHtml" -> "_";
"colSpecListToHtml" -> "nl";
"colSpecListToHtml" -> "percent";
"colSpecListToJATS" -> "_";
"colSpecListToJATS" -> "inTags";
"colSpecListToJATS" -> "percent";
"colSpecListToJATS" -> "selfClosingTag";
"colSpecListToJATS" -> "tshow";
"colSpecListToJATS" -> "vcat";
"collapseEither" -> "a";
"collapseEither" -> "x";
"collapseFilePath" -> "_";
"collapseFilePath" -> "x";
"collectAsList" -> "_";
"collectAsList" -> "meta";
"collectAsList" -> "x";
"collectLines" -> "blocksToInlines";
"collectLines" -> "meta";
"collectNodes" -> "_";
"collectNodes" -> "collectNodes";
"collectNodes" -> "x";
"colored" -> "try";
"coloredBlock" -> "block";
"coloredBlock" -> "braced";
"coloredBlock" -> "grouped";
"coloredBlock" -> "inline";
"coloredBlock" -> "skipopts";
"coloredBlock" -> "try";
"coloredBlock" -> "untokenize";
"coloredInline" -> "braced";
"coloredInline" -> "skipopts";
"coloredInline" -> "tok";
"coloredInline" -> "untokenize";
"colspanAttrib" -> "tshow";
"columnPropertyCell" -> "endOfCell";
"columnPropertyCell" -> "many1Char";
"columnPropertyCell" -> "safeRead";
"columnPropertyCell" -> "skipSpaces";
"columnPropertyCell" -> "tableAlignFromChar";
"columnPropertyCell" -> "try";
"combineBlocks" -> "_";
"combineBlocks" -> "a";
"combineBlocks" -> "attr";
"combineInlines" -> "combineSingletonInlines";
"combineInlines" -> "inlinesL";
"combineInlines" -> "inlinesR";
"combineInlines" -> "x";
"combineList" -> "_";
"combineList" -> "attr";
"combineList" -> "fromList";
"combineList" -> "toList";
"combineList" -> "x";
"combineParaElems" -> "combineParaElems\'";
"combineParaElems\'" -> "combineParaElems\'";
"combineShapes" -> "combineShapes";
"combineSingletonInlines" -> "combineInlines";
"combineSingletonInlines" -> "isAttrModifier";
"combineSingletonInlines" -> "sp";
"combineSingletonInlines" -> "spaceOutInlinesL";
"combineSingletonInlines" -> "spaceOutInlinesR";
"combineSingletonInlines" -> "stackInlines";
"combineSingletonInlines" -> "unstackInlines";
"combineSingletonInlines" -> "x";
"combiningAccents" -> "a";
"combiningAccents" -> "getInputFiles";
"combiningAccents" -> "report";
"combiningAccents" -> "setInputFiles";
"combiningAccentsMap" -> "combiningAccents";
"comment" -> "anyLine";
"comment" -> "atStart";
"comment" -> "blanklines";
"comment" -> "eol";
"comment" -> "firstColumn";
"comment" -> "indentedBlock";
"comment" -> "isCommentTok";
"comment" -> "macro";
"comment" -> "newline";
"comment" -> "satisfyTok";
"comment" -> "spaceChar";
"comment" -> "try";
"commentBlock" -> "anyLine";
"commentBlock" -> "blanklines";
"commentBlock" -> "blockMarkupArea";
"commentBlock" -> "comment";
"commentBlock" -> "try";
"commentLine" -> "anyLine";
"commentLine" -> "comment";
"commentLine" -> "commentLineStart";
"commentLineStart" -> "skipSpaces";
"commentLineStart" -> "try";
"commentTag" -> "closeTag";
"commentTag" -> "eol";
"commentTag" -> "openTag";
"commentTag" -> "spaceChar";
"commentTag" -> "try";
"commonFromBcp47" -> "_";
"commonFromBcp47" -> "getCaption";
"commonFromBcp47" -> "l";
"commonStateTypeName" -> "commonStateTypeName";
"commonStateTypeName" -> "indexCommonState";
"commonStateTypeName" -> "pairsCommonState";
"compactDefinitionList" -> "compactifyDL";
"compactDefinitionList" -> "definitionListItem";
"compactDefinitionList" -> "guardEnabled";
"compactDefinitionList" -> "items";
"compactify" -> "_";
"compactify" -> "a";
"compactify" -> "items";
"compactify" -> "plainToPara";
"compactify" -> "x";
"compactifyDL" -> "_";
"compactifyDL" -> "isPara";
"compactifyDL" -> "items";
"compactifyDL" -> "t";
"compactifyDL" -> "x";
"compileDefaultTemplate" -> "_";
"compileDefaultTemplate" -> "getDefaultTemplate";
"compileDefaultTemplate" -> "lookupTerm";
"compileDefaultTemplate" -> "readTranslations";
"compileDefaultTemplate" -> "safeRead";
"compileDefaultTemplate" -> "t";
"complementableListSetting" -> "elispBoolean";
"complementableListSetting" -> "genericExportSetting";
"complementableListSetting" -> "manyTillChar";
"complementableListSetting" -> "spaces";
"complementableListSetting" -> "try";
"complexNatbibCitation" -> "bgroup";
"complexNatbibCitation" -> "cite";
"complexNatbibCitation" -> "egroup";
"complexNatbibCitation" -> "handleCitationPart";
"complexNatbibCitation" -> "inline";
"complexNatbibCitation" -> "items";
"complexNatbibCitation" -> "raw";
"complexNatbibCitation" -> "symbol";
"complexNatbibCitation" -> "try";
"complexNatbibCitation" -> "untokenize";
"complexNatbibCitation" -> "withRaw";
"composition" -> "a";
"concatMapM" -> "a";
"concatWith" -> "_";
"concatWith" -> "x";
"conditionalEscapeText" -> "escapeText";
"conditionalEscapeText" -> "shouldEscapeText";
"consolidateAdjacentRawBlocks" -> "consolidateAdjacentRawBlocks";
"consolidateAdjacentRawBlocks" -> "writeJATS";
"consolidateAdjacentRawBlocks" -> "writeJatsArchiving";
"consolidateAdjacentRawBlocks" -> "writeJatsArticleAuthoring";
"consolidateAdjacentRawBlocks" -> "writeJatsPublishing";
"consolidateAdjacentRawBlocks" -> "x";
"consolidateRawBlocks" -> "consolidateRawBlocks";
"consolidateRawBlocks" -> "x";
"constructList" -> "_";
"constructList" -> "a";
"constructList" -> "blocks";
"constructList" -> "findAttr";
"constructList" -> "getCurrentListLevel";
"constructList" -> "getExtraState";
"constructList" -> "getListConstructor";
"constructList" -> "getListLevelStyle";
"constructList" -> "listLevelStyle";
"constructList" -> "lookupListStyle";
"constructList" -> "modifyExtraState";
"constructList" -> "orderedList";
"constructList" -> "shiftListLevel";
"constructList" -> "switchCurrentListStyle";
"constructList" -> "x";
"constructPara" -> "_";
"constructPara" -> "blocks";
"constructPara" -> "getParaModifier";
"constructPara" -> "readStyleByName";
"constructorsFor" -> "x";
"contains" -> "a";
"contains" -> "rule";
"containsNotes" -> "x";
"contentToElement" -> "_";
"contentToElement" -> "buildSpTree";
"contentToElement" -> "elemName";
"contentToElement" -> "elemToNameSpaces";
"contentToElement" -> "env";
"contentToElement" -> "findChild";
"contentToElement" -> "mknode";
"contentToElement" -> "nonBodyTextToElement";
"contentToElement" -> "shapesToElements";
"contentTypesToElement" -> "defaultContentTypeToElem";
"contentTypesToElement" -> "mknode";
"contentTypesToElement" -> "overrideContentTypeToElem";
"contentTypesToEntry" -> "contentTypesToElement";
"contentTypesToEntry" -> "elemToEntry";
"context2pdf" -> "_";
"context2pdf" -> "extractConTeXtMsg";
"context2pdf" -> "handlePDFProgramNotFound";
"context2pdf" -> "inDirectory";
"context2pdf" -> "pipeProcess";
"context2pdf" -> "showVerboseInfo";
"context2pdf" -> "source";
"context2pdf" -> "when";
"contextToYaml" -> "_";
"contextToYaml" -> "empty";
"contextToYaml" -> "valToYaml";
"contextToYaml" -> "vcat";
"contextToYaml" -> "x";
"contingentInheritedPatterns" -> "presHasSpeakerNotes";
"continuation" -> "bareIP";
"continuation" -> "endmacro";
"continuation" -> "mmacro";
"continuation" -> "parseBlock";
"continuation" -> "parseCodeBlock";
"continuation" -> "parsePara";
"continuation" -> "try";
"controlSeq" -> "_";
"controlSeq" -> "satisfyTok";
"convertDate" -> "normalizeDate";
"convertDate" -> "showDateTimeRFC822";
"convertDate" -> "stringify";
"convertEnDash" -> "cslJsonToReferences";
"convertEnDash" -> "x";
"convertImage" -> "_";
"convertImage" -> "getMimeType";
"convertImage" -> "pipeProcess";
"convertImage" -> "tshow";
"convertImages" -> "_";
"convertImages" -> "attr";
"convertImages" -> "convertImage";
"convertImages" -> "report";
"convertImages" -> "x";
"convertMath" -> "a";
"convertMath" -> "mkFallback";
"convertMath" -> "options";
"convertMath" -> "report";
"convertMath" -> "str";
"convertQuotes" -> "_";
"convertQuotes" -> "x";
"convertTags" -> "convertTags";
"convertTags" -> "getData";
"convertTags" -> "getDataURI";
"convertTags" -> "isSourceAttribute";
"convertTags" -> "makeDataURI";
"convertTags" -> "t";
"convertTags" -> "toText";
"convertTags" -> "x";
"convertWithOpts" -> "_";
"convertWithOpts" -> "a";
"convertWithOpts" -> "adjustMetadata";
"convertWithOpts" -> "applyFilters";
"convertWithOpts" -> "applyTransforms";
"convertWithOpts" -> "defaultUserDataDirs";
"convertWithOpts" -> "eastAsianLineBreakFilter";
"convertWithOpts" -> "encodeLogMessages";
"convertWithOpts" -> "eol";
"convertWithOpts" -> "extensionEnabled";
"convertWithOpts" -> "extractMedia";
"convertWithOpts" -> "fillMediaBag";
"convertWithOpts" -> "filterIpynbOutput";
"convertWithOpts" -> "findM";
"convertWithOpts" -> "formatFromFilePaths";
"convertWithOpts" -> "getLog";
"convertWithOpts" -> "getReader";
"convertWithOpts" -> "headerShift";
"convertWithOpts" -> "htmlFormat";
"convertWithOpts" -> "isTextFormat";
"convertWithOpts" -> "isURI";
"convertWithOpts" -> "l";
"convertWithOpts" -> "lookupMetaString";
"convertWithOpts" -> "makeDataURI";
"convertWithOpts" -> "makePDF";
"convertWithOpts" -> "makeSelfContained";
"convertWithOpts" -> "messageVerbosity";
"convertWithOpts" -> "optToOutputSettings";
"convertWithOpts" -> "parseBCP47";
"convertWithOpts" -> "raw";
"convertWithOpts" -> "readDataFile";
"convertWithOpts" -> "readFileLazy";
"convertWithOpts" -> "readFileStrict";
"convertWithOpts" -> "readFile\'";
"convertWithOpts" -> "readSource";
"convertWithOpts" -> "report";
"convertWithOpts" -> "runIOorExplode";
"convertWithOpts" -> "setInputFiles";
"convertWithOpts" -> "setNoCheckCertificate";
"convertWithOpts" -> "setOutputFile";
"convertWithOpts" -> "setRequestHeader";
"convertWithOpts" -> "setResourcePath";
"convertWithOpts" -> "setTrace";
"convertWithOpts" -> "setTranslations";
"convertWithOpts" -> "setUserDataDir";
"convertWithOpts" -> "setVerbosity";
"convertWithOpts" -> "stripEmptyParagraphs";
"convertWithOpts" -> "t";
"convertWithOpts" -> "tabFilter";
"convertWithOpts" -> "when";
"convertWithOpts" -> "writeFnBinary";
"convertWithOpts" -> "writerFn";
"convertWithOpts" -> "x";
"convertWithOpts" -> "yamlToMeta";
"convertingExtraState" -> "a";
"convertingExtraState" -> "extractFromState";
"convertingExtraState" -> "keepingTheValue";
"convertingExtraState" -> "liftAsSuccess";
"convertingExtraState" -> "replaceExtraState";
"convertingExtraState" -> "withSubStateF";
"convertingExtraState" -> "x";
"copyChildren" -> "elContent";
"copyChildren" -> "parseXml";
"copyChildren" -> "prefix";
"copyChildren" -> "renderXml";
"copyChildren" -> "timestamp";
"countSubStrs" -> "str";
"createCaption" -> "captionHeight";
"createCaption" -> "mknode";
"createCaption" -> "para";
"createCaption" -> "paragraphToElement";
"createCaption" -> "x";
"createStartState" -> "parents";
"cslEntryToMs" -> "_";
"cslEntryToMs" -> "atStart";
"cslEntryToMs" -> "blockToMs";
"cslEntryToMs" -> "cslEntryToMs";
"cslEntryToMs" -> "doubleQuotes";
"cslEntryToMs" -> "inlineListToMs\'";
"cslEntryToMs" -> "inlineToMs";
"cslEntryToMs" -> "literal";
"cslEntryToMs" -> "x";
"cslJsonToReferences" -> "biblatexStringMap";
"cslJsonToReferences" -> "fromCslJson";
"cslJsonToReferences" -> "raw";
"cssAttributes" -> "_";
"cssAttributes" -> "styleAttrParser";
"cssAttributes" -> "x";
"cssURLs" -> "parseCSSUrls";
"cssURLs" -> "report";
"csvTableDirective" -> "_";
"csvTableDirective" -> "bodyRows";
"csvTableDirective" -> "defaultCSVOptions";
"csvTableDirective" -> "fetchItem";
"csvTableDirective" -> "headerRow";
"csvTableDirective" -> "inline";
"csvTableDirective" -> "l";
"csvTableDirective" -> "parseBlocks";
"csvTableDirective" -> "parseCSV";
"csvTableDirective" -> "parseFromString\'";
"csvTableDirective" -> "parseRow";
"csvTableDirective" -> "safeRead";
"csvTableDirective" -> "singleParaToPlain";
"csvTableDirective" -> "splitTextBy";
"csvTableDirective" -> "t";
"csvTableDirective" -> "title";
"csvTableDirective" -> "toHeaderRow";
"csvTableDirective" -> "toRow";
"csvTableDirective" -> "trim";
"csvTableDirective" -> "x";
"currentNotesToMuse" -> "notesToMuse";
"dash" -> "a";
"dash" -> "extensionEnabled";
"dash" -> "try";
"dashedLine" -> "sp";
"dashedLine" -> "spaceChar";
"dataFiles" -> "dataFiles\'";
"dateLine" -> "inlines";
"dateLine" -> "parseFromString\'";
"dateLine" -> "raw";
"dateLine" -> "rawTitleBlockLine";
"dateLine" -> "trimInlinesF";
"dateLine" -> "try";
"dateToMetaValue" -> "_";
"dateToMetaValue" -> "l";
"dateline" -> "headerline";
"dateline" -> "inline";
"dateline" -> "newline";
"dcName" -> "t";
"dcNode" -> "dcName";
"deLink" -> "_";
"deLink" -> "x";
"deNote" -> "_";
"deNote" -> "blocksToInlines";
"deNote" -> "deNote";
"deNote" -> "removeFinalPeriod";
"deNote" -> "t";
"deNote" -> "x";
"deQuote" -> "a";
"deQuote" -> "x";
"decimal" -> "safeRead";
"decodeArg" -> "a";
"decodeArg" -> "l";
"defField" -> "a";
"defList" -> "items";
"defList" -> "nl";
"defList" -> "toList";
"defListItem" -> "defListTerm";
"defListItem" -> "listItem";
"defListItem" -> "try";
"defListItemToConTeXt" -> "blankline";
"defListItemToConTeXt" -> "blockListToConTeXt";
"defListItemToConTeXt" -> "inlineListToConTeXt";
"defListItemToLaTeX" -> "_";
"defListItemToLaTeX" -> "blockListToLaTeX";
"defListItemToLaTeX" -> "blockToLaTeX";
"defListItemToLaTeX" -> "inlineListToLaTeX";
"defListItemToLaTeX" -> "x";
"defListItemToTexinfo" -> "_";
"defListItemToTexinfo" -> "blankline";
"defListItemToTexinfo" -> "blockListToTexinfo";
"defListItemToTexinfo" -> "inlineListToTexinfo";
"defListItemToTexinfo" -> "vcat";
"defListMarker" -> "nonindentSpaces";
"defListMarker" -> "spaceChar";
"defListMarker" -> "try";
"defListTerm" -> "anyLine";
"defListTerm" -> "guardColumnOne";
"defListTerm" -> "inline";
"defListTerm" -> "parseFromString";
"defListTerm" -> "spaceChar";
"defMarkerE" -> "newline";
"defMarkerM" -> "spaceChar";
"defRawBlock" -> "anyLine";
"defRawBlock" -> "anyLineNewline";
"defRawBlock" -> "blankline";
"defRawBlock" -> "blanklines";
"defRawBlock" -> "defListMarker";
"defRawBlock" -> "indentSpaces";
"defRawBlock" -> "notFollowedByDivCloser";
"defRawBlock" -> "notFollowedByHtmlCloser";
"defRawBlock" -> "trimr";
"defRawBlock" -> "try";
"defaultAbbrevs" -> "_";
"defaultAbbrevs" -> "a";
"defaultAbbrevs" -> "defaultKaTeXURL";
"defaultAbbrevs" -> "defaultMathJaxURL";
"defaultAbbrevs" -> "emptyExtensions";
"defaultAbbrevs" -> "t";
"defaultBlocksSeparator" -> "a";
"defaultCommonState" -> "a";
"defaultCommonState" -> "defaultCommonState";
"defaultCommonState" -> "extractMedia";
"defaultCommonState" -> "fileExists";
"defaultCommonState" -> "getCurrentTime";
"defaultCommonState" -> "getCurrentTimeZone";
"defaultCommonState" -> "getDataFileName";
"defaultCommonState" -> "getMediaBag";
"defaultCommonState" -> "getModificationTime";
"defaultCommonState" -> "glob";
"defaultCommonState" -> "logIOError";
"defaultCommonState" -> "logOutput";
"defaultCommonState" -> "lookupEnv";
"defaultCommonState" -> "newStdGen";
"defaultCommonState" -> "newUniqueHash";
"defaultCommonState" -> "openURL";
"defaultCommonState" -> "readFileLazy";
"defaultCommonState" -> "readFileStrict";
"defaultCommonState" -> "report";
"defaultContentTypeToElem" -> "mknode";
"defaultExportSettings" -> "anyLine";
"defaultExportSettings" -> "anyLineNewline";
"defaultExportSettings" -> "blankline";
"defaultExportSettings" -> "blanklines";
"defaultExportSettings" -> "charsInBalanced";
"defaultExportSettings" -> "citeKey";
"defaultExportSettings" -> "countChar";
"defaultExportSettings" -> "dash";
"defaultExportSettings" -> "doubleQuoteEnd";
"defaultExportSettings" -> "doubleQuoteStart";
"defaultExportSettings" -> "ellipses";
"defaultExportSettings" -> "enclosed";
"defaultExportSettings" -> "getExportSetting";
"defaultExportSettings" -> "gridTableWith";
"defaultExportSettings" -> "guardEnabled";
"defaultExportSettings" -> "inList";
"defaultExportSettings" -> "indentWith";
"defaultExportSettings" -> "insertIncludedFileF";
"defaultExportSettings" -> "many1Char";
"defaultExportSettings" -> "many1Till";
"defaultExportSettings" -> "many1TillChar";
"defaultExportSettings" -> "manyChar";
"defaultExportSettings" -> "manyTillChar";
"defaultExportSettings" -> "newline";
"defaultExportSettings" -> "nonspaceChar";
"defaultExportSettings" -> "notAfterString";
"defaultExportSettings" -> "notFollowedBy\'";
"defaultExportSettings" -> "orgArgKey";
"defaultExportSettings" -> "orgArgWord";
"defaultExportSettings" -> "orgArgWordChar";
"defaultExportSettings" -> "orgTagWord";
"defaultExportSettings" -> "orgTagWordChar";
"defaultExportSettings" -> "parseFromString";
"defaultExportSettings" -> "readWithM";
"defaultExportSettings" -> "registerHeader";
"defaultExportSettings" -> "singleQuoteEnd";
"defaultExportSettings" -> "singleQuoteStart";
"defaultExportSettings" -> "skipSpaces";
"defaultExportSettings" -> "skipSpaces1";
"defaultExportSettings" -> "spaceChar";
"defaultExportSettings" -> "spaces";
"defaultExportSettings" -> "stringAnyCase";
"defaultExportSettings" -> "textStr";
"defaultExportSettings" -> "try";
"defaultExportSettings" -> "updateLastForbiddenCharPos";
"defaultExportSettings" -> "updateLastPreCharPos";
"defaultExportSettings" -> "updateLastStrPos";
"defaultExportSettings" -> "uri";
"defaultExportSettings" -> "withContext";
"defaultExportSettings" -> "withRaw";
"defaultFootnotes" -> "a";
"defaultFootnotes" -> "mknode";
"defaultGlobals" -> "a";
"defaultGlobals" -> "addField";
"defaultGlobals" -> "addFunction";
"defaultGlobals" -> "addValue";
"defaultGlobals" -> "callWithTraceback";
"defaultGlobals" -> "defineHowTo";
"defaultGlobals" -> "dofileWithTraceback";
"defaultGlobals" -> "fileExists";
"defaultGlobals" -> "getCurrentTime";
"defaultGlobals" -> "getCurrentTimeZone";
"defaultGlobals" -> "getDataFileName";
"defaultGlobals" -> "getModificationTime";
"defaultGlobals" -> "getTag";
"defaultGlobals" -> "glob";
"defaultGlobals" -> "logOutput";
"defaultGlobals" -> "lookupEnv";
"defaultGlobals" -> "newStdGen";
"defaultGlobals" -> "newUniqueHash";
"defaultGlobals" -> "openURL";
"defaultGlobals" -> "pushViaConstructor";
"defaultGlobals" -> "rawField";
"defaultGlobals" -> "readFileLazy";
"defaultGlobals" -> "readFileStrict";
"defaultGlobals" -> "setGlobals";
"defaultGlobals" -> "throwTopMessageAsError\'";
"defaultKaTeXURL" -> "_";
"defaultKaTeXURL" -> "camelCaseStrToHyphenated";
"defaultKaTeXURL" -> "report";
"defaultKaTeXURL" -> "setVerbosity";
"defaultLaTeXState" -> "a";
"defaultLaTeXState" -> "addLogMessage";
"defaultLaTeXState" -> "defaultLaTeXState";
"defaultParserState" -> "a";
"defaultRunStyle" -> "isSmallCaps";
"defaultUserDataDirs" -> "_";
"defaultUserDataDirs" -> "ordNub";
"defaultWriterState" -> "defListMarker";
"defaultWriterState" -> "defaultFootnotes";
"defaultWriterState" -> "inList";
"definitionDef" -> "definitionDef1";
"definitionDef" -> "definitionDef2";
"definitionDef" -> "definitionTerm";
"definitionDef" -> "spaceChar";
"definitionDef" -> "try";
"definitionDef1" -> "defMarkerE";
"definitionDef1" -> "try";
"definitionDef2" -> "defMarkerM";
"definitionDef2" -> "inline\'";
"definitionDef2" -> "newline";
"definitionDef2" -> "try";
"definitionList" -> "anyLine";
"definitionList" -> "blankline";
"definitionList" -> "bulletListStart";
"definitionList" -> "compactDefinitionList";
"definitionList" -> "compactifyDL";
"definitionList" -> "defListItem";
"definitionList" -> "defListMarker";
"definitionList" -> "definitionListEnd";
"definitionList" -> "definitionListItem";
"definitionList" -> "definitionListStart";
"definitionList" -> "dlItemWithDT";
"definitionList" -> "dlItemWithoutDT";
"definitionList" -> "indent";
"definitionList" -> "indented";
"definitionList" -> "inline";
"definitionList" -> "listItem";
"definitionList" -> "listItemLine";
"definitionList" -> "many1Till";
"definitionList" -> "normalDefinitionList";
"definitionList" -> "prefix";
"definitionList" -> "skipSpaces";
"definitionList" -> "table";
"definitionList" -> "textStr";
"definitionList" -> "try";
"definitionList" -> "tryMsg";
"definitionListEnd" -> "inline";
"definitionListEnd" -> "newline";
"definitionListEnd" -> "parseBlocks";
"definitionListItem" -> "anyLine";
"definitionListItem" -> "anyLineNewline";
"definitionListItem" -> "blankline";
"definitionListItem" -> "blanklines";
"definitionListItem" -> "blocks";
"definitionListItem" -> "continuation";
"definitionListItem" -> "defRawBlock";
"definitionListItem" -> "definitionListStart";
"definitionListItem" -> "endline";
"definitionListItem" -> "indentedBlock";
"definitionListItem" -> "inline";
"definitionListItem" -> "inlines";
"definitionListItem" -> "listContinuation";
"definitionListItem" -> "many1Till";
"definitionListItem" -> "manyTillChar";
"definitionListItem" -> "memptyLine";
"definitionListItem" -> "mmacro";
"definitionListItem" -> "newline";
"definitionListItem" -> "para";
"definitionListItem" -> "parseBlocks";
"definitionListItem" -> "parseFromString";
"definitionListItem" -> "parseFromString\'";
"definitionListItem" -> "parseInline";
"definitionListItem" -> "parseInlines";
"definitionListItem" -> "raw";
"definitionListItem" -> "spaceChar";
"definitionListItem" -> "trimInlinesF";
"definitionListItem" -> "try";
"definitionListItem" -> "whitespace";
"definitionListItemToAsciiDoc" -> "blockToAsciiDoc";
"definitionListItemToAsciiDoc" -> "defListMarker";
"definitionListItemToAsciiDoc" -> "inlineListToAsciiDoc";
"definitionListItemToAsciiDoc" -> "label";
"definitionListItemToAsciiDoc" -> "literal";
"definitionListItemToAsciiDoc" -> "vcat";
"definitionListItemToDokuWiki" -> "blockListToDokuWiki";
"definitionListItemToDokuWiki" -> "indent";
"definitionListItemToDokuWiki" -> "inlineListToDokuWiki";
"definitionListItemToDokuWiki" -> "items";
"definitionListItemToDokuWiki" -> "label";
"definitionListItemToHaddock" -> "blankline";
"definitionListItemToHaddock" -> "blockToHaddock";
"definitionListItemToHaddock" -> "empty";
"definitionListItemToHaddock" -> "inlineListToHaddock";
"definitionListItemToHaddock" -> "isTightList";
"definitionListItemToHaddock" -> "label";
"definitionListItemToHaddock" -> "vcat";
"definitionListItemToICML" -> "blocksToICML";
"definitionListItemToICML" -> "intersperseBrs";
"definitionListItemToICML" -> "parStyle";
"definitionListItemToMan" -> "_";
"definitionListItemToMan" -> "blockToMan";
"definitionListItemToMan" -> "empty";
"definitionListItemToMan" -> "inlineListToMan";
"definitionListItemToMan" -> "item";
"definitionListItemToMan" -> "label";
"definitionListItemToMan" -> "literal";
"definitionListItemToMan" -> "makeCodeBold";
"definitionListItemToMan" -> "vcat";
"definitionListItemToMan" -> "x";
"definitionListItemToMarkdown" -> "_";
"definitionListItemToMarkdown" -> "blankline";
"definitionListItemToMarkdown" -> "blockToMarkdown";
"definitionListItemToMarkdown" -> "empty";
"definitionListItemToMarkdown" -> "isEnabled";
"definitionListItemToMarkdown" -> "label";
"definitionListItemToMarkdown" -> "literal";
"definitionListItemToMarkdown" -> "vcat";
"definitionListItemToMediaWiki" -> "blockListToMediaWiki";
"definitionListItemToMediaWiki" -> "blockListToXWiki";
"definitionListItemToMediaWiki" -> "inlineListToMediaWiki";
"definitionListItemToMediaWiki" -> "inlineListToXWiki";
"definitionListItemToMediaWiki" -> "items";
"definitionListItemToMediaWiki" -> "label";
"definitionListItemToMs" -> "blockToMs";
"definitionListItemToMs" -> "blocks";
"definitionListItemToMs" -> "breakToSpace";
"definitionListItemToMs" -> "doubleQuotes";
"definitionListItemToMs" -> "empty";
"definitionListItemToMs" -> "inlineListToMs\'";
"definitionListItemToMs" -> "item";
"definitionListItemToMs" -> "label";
"definitionListItemToMs" -> "literal";
"definitionListItemToMs" -> "vcat";
"definitionListItemToMs" -> "withFontFeature";
"definitionListItemToOpenXML" -> "blockToOpenXML";
"definitionListItemToOpenXML" -> "blocksToOpenXML";
"definitionListItemToOpenXML" -> "pStyleM";
"definitionListItemToOpenXML" -> "withParaPropM";
"definitionListItemToOrg" -> "blankline";
"definitionListItemToOrg" -> "blockListToOrg";
"definitionListItemToOrg" -> "inlineListToOrg";
"definitionListItemToOrg" -> "isTightList";
"definitionListItemToOrg" -> "label";
"definitionListItemToOrg" -> "vcat";
"definitionListItemToRST" -> "blankline";
"definitionListItemToRST" -> "blockListToRST";
"definitionListItemToRST" -> "inlineListToRST";
"definitionListItemToRST" -> "isTightList";
"definitionListItemToRST" -> "label";
"definitionListItemToRST" -> "vcat";
"definitionListItemToRTF" -> "blockToRTF";
"definitionListItemToRTF" -> "blocksToRTF";
"definitionListItemToRTF" -> "indent";
"definitionListItemToRTF" -> "label";
"definitionListItemToRTF" -> "listIncrement";
"definitionListItemToTextile" -> "blockListToTextile";
"definitionListItemToTextile" -> "inlineListToTextile";
"definitionListItemToTextile" -> "items";
"definitionListItemToTextile" -> "label";
"definitionListItemToZimWiki" -> "blockListToZimWiki";
"definitionListItemToZimWiki" -> "indent";
"definitionListItemToZimWiki" -> "inlineListToZimWiki";
"definitionListItemToZimWiki" -> "items";
"definitionListItemToZimWiki" -> "label";
"definitionListItemsUntil" -> "a";
"definitionListItemsUntil" -> "blankline";
"definitionListItemsUntil" -> "continuation";
"definitionListItemsUntil" -> "descriptionsUntil";
"definitionListItemsUntil" -> "indent";
"definitionListItemsUntil" -> "indentWith";
"definitionListItemsUntil" -> "inline\'";
"definitionListItemsUntil" -> "trimInlinesF";
"definitionListItemsUntil" -> "try";
"definitionListItemsUntil" -> "x";
"definitionListStart" -> "basicDLStart";
"definitionListStart" -> "genericListStart";
"definitionListStart" -> "inline";
"definitionListStart" -> "many1Till";
"definitionListStart" -> "newline";
"definitionListStart" -> "try";
"definitionListUntil" -> "a";
"definitionListUntil" -> "definitionListItemsUntil";
"definitionListUntil" -> "getIndent";
"definitionListUntil" -> "guardDisabled";
"definitionListUntil" -> "indent";
"definitionListUntil" -> "try";
"definitionTerm" -> "definitionTerm1";
"definitionTerm" -> "definitionTerm2";
"definitionTerm" -> "stringify";
"definitionTerm" -> "try";
"definitionTerm" -> "x";
"definitionTerm1" -> "defMarkerE";
"definitionTerm1" -> "inline\'";
"definitionTerm1" -> "try";
"definitionTerm2" -> "defMarkerM";
"definitionTerm2" -> "hasDefMarkerM";
"definitionTerm2" -> "inline\'";
"definitionTerm2" -> "try";
"deflistItemToDocbook" -> "blocksToDocbook";
"deflistItemToDocbook" -> "inTagsIndented";
"deflistItemToDocbook" -> "inlinesToDocbook";
"deflistItemToDocbook" -> "plainToPara";
"deflistItemToJATS" -> "demoteHeaderAndRefs";
"deflistItemToJATS" -> "inTagsIndented";
"deflistItemToJATS" -> "inTagsSimple";
"deflistItemToJATS" -> "inlinesToJATS";
"deflistItemToJATS" -> "isPara";
"deflistItemToJATS" -> "plainToPara";
"deflistItemToJATS" -> "wrappedBlocksToJATS";
"deflistItemToOpenDocument" -> "isTightList";
"deflistItemToOpenDocument" -> "plainToPara";
"deflistItemToOpenDocument" -> "t";
"deflistItemToOpenDocument" -> "vcat";
"deflistItemToOpenDocument" -> "withParagraphStyle";
"deflistItemToTEI" -> "blocksToTEI";
"deflistItemToTEI" -> "inTagsIndented";
"deflistItemToTEI" -> "inlinesToTEI";
"deflistItemToTEI" -> "plainToPara";
"deflistItemsToDocbook" -> "deflistItemToDocbook";
"deflistItemsToDocbook" -> "items";
"deflistItemsToDocbook" -> "vcat";
"deflistItemsToJATS" -> "deflistItemToJATS";
"deflistItemsToJATS" -> "items";
"deflistItemsToJATS" -> "vcat";
"deflistItemsToTEI" -> "deflistItemToTEI";
"deflistItemsToTEI" -> "items";
"deflistItemsToTEI" -> "vcat";
"defmacro" -> "_";
"defmacro" -> "anyControlSeq";
"defmacro" -> "argspecArg";
"defmacro" -> "argspecPattern";
"defmacro" -> "bracedOrToken";
"defmacro" -> "controlSeq";
"defmacro" -> "try";
"defmacro" -> "withVerbatimMode";
"deleted" -> "between";
"deleted" -> "nestedInlines";
"deleted" -> "try";
"demoteHeaderAndRefs" -> "_";
"demoteHeaderAndRefs" -> "x";
"deprecatedOption" -> "report";
"deprecatedOption" -> "runIO";
"descItem" -> "a";
"descItem" -> "blocks";
"descItem" -> "controlSeq";
"descItem" -> "opt";
"descItem" -> "sp";
"description" -> "_";
"description" -> "authors";
"description" -> "blockToXml";
"description" -> "booktitle";
"description" -> "cMapM";
"description" -> "docdate";
"description" -> "el";
"description" -> "insertImage";
"description" -> "list";
"description" -> "lookupMetaString";
"description" -> "stringify";
"description" -> "unPlain";
"description" -> "url";
"descriptionsUntil" -> "a";
"descriptionsUntil" -> "allowPara";
"descriptionsUntil" -> "blankline";
"descriptionsUntil" -> "descriptionsUntil";
"descriptionsUntil" -> "eol";
"descriptionsUntil" -> "indent";
"descriptionsUntil" -> "indentWith";
"descriptionsUntil" -> "listItemContentsUntil";
"descriptionsUntil" -> "spaceChar";
"descriptionsUntil" -> "try";
"descriptionsUntil" -> "x";
"desiredSizeInPoints" -> "_";
"desiredSizeInPoints" -> "attr";
"desiredSizeInPoints" -> "dimension";
"desiredSizeInPoints" -> "inPoints";
"desiredSizeInPoints" -> "sizeInPoints";
"dfName" -> "defaultNameSpace";
"dimenarg" -> "_";
"dimenarg" -> "a";
"dimenarg" -> "isWordTok";
"dimenarg" -> "satisfyTok";
"dimenarg" -> "sp";
"dimenarg" -> "symbol";
"dimenarg" -> "t";
"dimenarg" -> "try";
"dimension" -> "_";
"dimension" -> "lengthToDim";
"dimensionsToAttrList" -> "_";
"dimensionsToAttrList" -> "a";
"dimensionsToAttrList" -> "attr";
"dimensionsToAttrList" -> "dimension";
"dimensionsToAttrList" -> "isStyle";
"dimensionsToAttrList" -> "tshow";
"dimensionsToAttrList" -> "x";
"directive" -> "a";
"directive" -> "directive\'";
"directive" -> "extensionEnabled";
"directive" -> "parseAmuseDirective";
"directive" -> "parseEmacsDirective";
"directive" -> "try";
"directive" -> "x";
"directiveLabel" -> "many1TillChar";
"directiveLabel" -> "try";
"directive\'" -> "_";
"directive\'" -> "addNewRole";
"directive\'" -> "attr";
"directive\'" -> "blankline";
"directive\'" -> "blanklines";
"directive\'" -> "block";
"directive\'" -> "codeblock";
"directive\'" -> "csvTableDirective";
"directive\'" -> "directiveLabel";
"directive\'" -> "escapeURI";
"directive\'" -> "extractCaption";
"directive\'" -> "getCurrentTime";
"directive\'" -> "includeDirective";
"directive\'" -> "indentedBlock";
"directive\'" -> "isSpace";
"directive\'" -> "keyvals";
"directive\'" -> "l";
"directive\'" -> "label";
"directive\'" -> "lengthToDim";
"directive\'" -> "lineBlockDirective";
"directive\'" -> "listTableDirective";
"directive\'" -> "logMessage";
"directive\'" -> "manyChar";
"directive\'" -> "newline";
"directive\'" -> "notFollowedBy\'";
"directive\'" -> "parseBlocks";
"directive\'" -> "parseFromString\'";
"directive\'" -> "parseInlineFromText";
"directive\'" -> "percent";
"directive\'" -> "rawFieldListItem";
"directive\'" -> "safeRead";
"directive\'" -> "scaleDimension";
"directive\'" -> "spaceChar";
"directive\'" -> "stripTrailingNewlines";
"directive\'" -> "t";
"directive\'" -> "tableDirective";
"directive\'" -> "toChunks";
"directive\'" -> "trim";
"directive\'" -> "trimr";
"directive\'" -> "try";
"directive\'" -> "tshow";
"directive\'" -> "unicodeTransform";
"directive\'" -> "x";
"disableExtension" -> "x";
"displayMath" -> "manyTillChar";
"displayMath" -> "mathTag";
"displayMath" -> "mathTagParser";
"displayMath" -> "newline";
"displayMath" -> "rawMathBetween";
"displayMath" -> "space";
"displayMath" -> "spaceChar";
"displayMath" -> "try";
"displayMathToInline" -> "x";
"distributeValue" -> "findID";
"distributeValue" -> "nsIDmap";
"divBlockType" -> "_";
"divFenceEnd" -> "blanklines";
"divFenceEnd" -> "try";
"divFenced" -> "attributes";
"divFenced" -> "blankline";
"divFenced" -> "block";
"divFenced" -> "divFenceEnd";
"divFenced" -> "guardEnabled";
"divFenced" -> "many1Char";
"divFenced" -> "nonspaceChar";
"divFenced" -> "spaceChar";
"divFenced" -> "try";
"divFenced" -> "x";
"divHtml" -> "_";
"divHtml" -> "blankline";
"divHtml" -> "blanklines";
"divHtml" -> "block";
"divHtml" -> "guardEnabled";
"divHtml" -> "htmlTag";
"divHtml" -> "keyvals";
"divHtml" -> "notFollowedBy\'";
"divHtml" -> "try";
"divTag" -> "parseHtmlContent";
"divToOrg" -> "attr";
"divToOrg" -> "attrHtml";
"divToOrg" -> "blankline";
"divToOrg" -> "blockListToOrg";
"divToOrg" -> "divBlockType";
"divToOrg" -> "literal";
"divToOrg" -> "space";
"divToOrg" -> "vcat";
"dlItemWithDT" -> "definitionDef";
"dlItemWithDT" -> "definitionTerm";
"dlItemWithoutDT" -> "definitionDef";
"doAcronym" -> "braced";
"doAcronym" -> "str";
"doAcronym" -> "untokenize";
"doAcronymPlural" -> "braced";
"doAcronymPlural" -> "lit";
"doAcronymPlural" -> "str";
"doAcronymPlural" -> "untokenize";
"doLHSverb" -> "isNewlineTok";
"doLHSverb" -> "satisfyTok";
"doLHSverb" -> "symbol";
"doLHSverb" -> "untokenize";
"doMacros" -> "doMacros\'";
"doMacros\'" -> "_";
"doMacros\'" -> "anyTok";
"doMacros\'" -> "braced";
"doMacros\'" -> "bracedOrToken";
"doMacros\'" -> "bracketedToks";
"doMacros\'" -> "doMacros\'";
"doMacros\'" -> "isLetterOrAt";
"doMacros\'" -> "isSpaceOrTab";
"doMacros\'" -> "satisfyTok";
"doMacros\'" -> "setpos";
"doMacros\'" -> "spaces";
"doMacros\'" -> "t";
"doMacros\'" -> "try";
"doMacros\'" -> "txt";
"doMacros\'" -> "when";
"doMacros\'" -> "withVerbatimMode";
"doMacros\'" -> "x";
"doOpt" -> "_";
"doOpt" -> "addMeta";
"doOpt" -> "t";
"doOpt" -> "x";
"doOpt" -> "yamlToMeta";
"doSI" -> "bracketed";
"doSI" -> "doSInum";
"doSI" -> "dosi";
"doSI" -> "emptyOr160";
"doSI" -> "skipopts";
"doSI" -> "tok";
"doSIang" -> "_";
"doSIang" -> "braced";
"doSIang" -> "skipopts";
"doSIang" -> "str";
"doSIang" -> "untokenize";
"doSInum" -> "braced";
"doSInum" -> "skipopts";
"doSInum" -> "tonum";
"doSInum" -> "untokenize";
"doSInumlist" -> "_";
"doSInumlist" -> "braced";
"doSInumlist" -> "skipopts";
"doSInumlist" -> "space";
"doSInumlist" -> "str";
"doSInumlist" -> "tonum";
"doSInumlist" -> "untokenize";
"doSInumlist" -> "x";
"doSIrange" -> "bracketed";
"doSIrange" -> "doSInum";
"doSIrange" -> "dosi";
"doSIrange" -> "emptyOr160";
"doSIrange" -> "skipopts";
"doSIrange" -> "tok";
"doSubfile" -> "a";
"doSubfile" -> "blocks";
"doSubfile" -> "braced";
"doSubfile" -> "insertIncluded";
"doSubfile" -> "opt";
"doSubfile" -> "removeDoubleQuotes";
"doSubfile" -> "untokenize";
"doTerm" -> "a";
"doTerm" -> "str";
"doTerm" -> "translateTerm";
"docContainsSelectTags" -> "docContainsSelectTags";
"docContainsSelectTags" -> "headlineContainsSelectTags";
"docCustomPropsElement" -> "mknode";
"docCustomPropsToEntry" -> "docCustomPropsElement";
"docCustomPropsToEntry" -> "elemToEntry";
"docHToBlocks" -> "_";
"docHToBlocks" -> "bodyRows";
"docHToBlocks" -> "docHToBlocks";
"docHToBlocks" -> "docHToInlines";
"docHToBlocks" -> "header";
"docHToBlocks" -> "headerLevel";
"docHToBlocks" -> "items";
"docHToBlocks" -> "l";
"docHToBlocks" -> "makeExample";
"docHToBlocks" -> "t";
"docHToBlocks" -> "toHeaderRow";
"docHToBlocks" -> "toRow";
"docHToBlocks" -> "trim";
"docHToBlocks" -> "x";
"docHToInlines" -> "_";
"docHToInlines" -> "docHToInlines";
"docHToInlines" -> "splitTextBy";
"docPropsElement" -> "mknode";
"docPropsElement" -> "x";
"docPropsToEntry" -> "docPropsElement";
"docPropsToEntry" -> "elemToEntry";
"docTitle\'" -> "_";
"docTitle\'" -> "makeSections";
"docTitle\'" -> "meta";
"docTitle\'" -> "stringify";
"docTitle\'" -> "tshow";
"docTitle\'" -> "x";
"docToCustom" -> "blockListToCustom";
"docToCustom" -> "blocks";
"docToJATS" -> "_";
"docToJATS" -> "blocks";
"docToJATS" -> "blocksToJATS";
"docToJATS" -> "defField";
"docToJATS" -> "getField";
"docToJATS" -> "inTagsIndented";
"docToJATS" -> "inlinesToJATS";
"docToJATS" -> "makeSections";
"docToJATS" -> "meta";
"docToJATS" -> "metaToContext";
"docToJATS" -> "parseDate";
"docToJATS" -> "resetField";
"docToJATS" -> "toEntities";
"docToJATS" -> "vcat";
"docToJATS" -> "x";
"docdate" -> "cMapM";
"docdate" -> "el";
"docdate" -> "toXml";
"documentSettings" -> "elemName";
"documentSettings" -> "elemToNameSpaces";
"documentSettings" -> "fitToPage";
"documentSettings" -> "fromStringLazy";
"documentSettings" -> "inTags";
"documentSettings" -> "inTagsSimple";
"documentSettings" -> "isElem";
"documentSettings" -> "mktnode";
"documentSettings" -> "nodename";
"documentSettings" -> "parseXml";
"documentSettings" -> "renderXml";
"documentSettings" -> "t";
"documentSettings" -> "toLazy";
"documentToPresentation" -> "blocksToPresentationSlides";
"documentToPresentation" -> "env";
"documentToPresentation" -> "getSlideLevel";
"documentToPresentation" -> "meta";
"documentToPresentation" -> "metaToDocProps";
"documentToPresentation" -> "runPres";
"documentTree" -> "blocks";
"documentTree" -> "emptyPlanning";
"documentTree" -> "headline";
"documentTree" -> "inline";
"documentTree" -> "title";
"docxToOutput" -> "_";
"docxToOutput" -> "bodyToOutput";
"docxToOutput" -> "evalDocxContext";
"dofileWithTraceback" -> "_";
"dofileWithTraceback" -> "a";
"dofileWithTraceback" -> "pcallWithTraceback";
"dofileWithTraceback" -> "querySingletonsList";
"dofileWithTraceback" -> "walkSingletonsListM";
"doinlinecode" -> "_";
"doinlinecode" -> "anySymbol";
"doinlinecode" -> "nlToSpace";
"doinlinecode" -> "symbol";
"doinlinecode" -> "t";
"doinlinecode" -> "untokenize";
"doinlinecode" -> "verbTok";
"doinlinecode" -> "withVerbatimMode";
"dolabel" -> "braced";
"dolabel" -> "inBrackets";
"dolabel" -> "str";
"dolabel" -> "untokenize";
"dollarsMath" -> "mathDisplay";
"dollarsMath" -> "mathInline";
"dollarsMath" -> "pDollarsMath";
"dollarsMath" -> "symbol";
"dollarsMath" -> "try";
"dollarsMath" -> "untokenize";
"dolstinline" -> "doinlinecode";
"dolstinline" -> "keyvals";
"dolstinline" -> "listingsLanguage";
"dolstinline" -> "options";
"domintinline" -> "braced";
"domintinline" -> "doinlinecode";
"domintinline" -> "skipopts";
"domintinline" -> "untokenize";
"doref" -> "braced";
"doref" -> "inBrackets";
"doref" -> "str";
"doref" -> "untokenize";
"dosi" -> "grouped";
"dosi" -> "siUnit";
"dosi" -> "tok";
"doubleHeader" -> "attr";
"doubleHeader" -> "doubleHeader\'";
"doubleHeader" -> "registerHeader";
"doubleHeader" -> "txt";
"doubleHeader\'" -> "blankline";
"doubleHeader\'" -> "blanklines";
"doubleHeader\'" -> "inline";
"doubleHeader\'" -> "newline";
"doubleHeader\'" -> "skipSpaces";
"doubleHeader\'" -> "try";
"doubleHeader\'" -> "txt";
"doubleHeader\'" -> "underlineChars";
"doubleHeader\'" -> "when";
"doubleQuote" -> "doubleQuoted";
"doubleQuote" -> "quoted\'";
"doubleQuote" -> "symbol";
"doubleQuote" -> "try";
"doubleQuoteEnd" -> "charOrRef";
"doubleQuoteStart" -> "charOrRef";
"doubleQuoteStart" -> "failIfInQuoteContext";
"doubleQuoteStart" -> "try";
"doubleQuoted" -> "defaultFontSpec";
"doubleQuoted" -> "doubleQuoteEnd";
"doubleQuoted" -> "doubleQuoteStart";
"doubleQuoted" -> "getExportSetting";
"doubleQuoted" -> "getResourcePath";
"doubleQuoted" -> "guardOrSmartEnabled";
"doubleQuoted" -> "inline";
"doubleQuoted" -> "lexRoff";
"doubleQuoted" -> "linePartsToText";
"doubleQuoted" -> "many1Till";
"doubleQuoted" -> "metaExport";
"doubleQuoted" -> "metaKey";
"doubleQuoted" -> "metaLine";
"doubleQuoted" -> "readFileFromDirs";
"doubleQuoted" -> "report";
"doubleQuoted" -> "t";
"doubleQuoted" -> "trimInlinesF";
"doubleQuoted" -> "try";
"doubleQuoted" -> "updateLastForbiddenCharPos";
"doubleQuoted" -> "updatePositions";
"doubleQuotes" -> "guardEnabled";
"doubleQuotes" -> "inlinesBetween";
"doubleQuotes" -> "nested";
"doubleQuotes" -> "nonspaceChar";
"doubleQuotes" -> "sym";
"doubleQuotes" -> "try";
"doubleQuotes" -> "yamlBsToMeta";
"doubleQuotes" -> "yamlBsToRefs";
"doubleQuotes" -> "yamlMap";
"doverb" -> "_";
"doverb" -> "anySymbol";
"doverb" -> "code";
"doverb" -> "newlineTok";
"doverb" -> "symbol";
"doverb" -> "t";
"doverb" -> "untokenize";
"doverb" -> "verbTok";
"doverb" -> "withVerbatimMode";
"downloadOrRead" -> "_";
"downloadOrRead" -> "getMimeType";
"downloadOrRead" -> "getResourcePath";
"downloadOrRead" -> "openURL";
"downloadOrRead" -> "parseURIReference\'";
"downloadOrRead" -> "readFileStrict";
"downloadOrRead" -> "uriPathToPath";
"downloadOrRead" -> "uriScheme";
"downloadOrRead" -> "withPaths";
"downloadOrRead" -> "x";
"doxspace" -> "_";
"doxspace" -> "satisfyTok";
"doxspace" -> "space";
"doxspace" -> "t";
"drawerEnd" -> "newline";
"drawerEnd" -> "skipSpaces";
"drawerEnd" -> "stringAnyCase";
"drawerEnd" -> "try";
"drawerLine" -> "anyLine";
"drawerStart" -> "manyTillChar";
"drawerStart" -> "newline";
"drawerStart" -> "nonspaceChar";
"drawerStart" -> "skipSpaces";
"drawerStart" -> "try";
"dropInlineParent" -> "_";
"dropSpacePrefix" -> "isSpaceChar";
"dropSpacePrefix" -> "t";
"duplicate" -> "a";
"duplicate" -> "x";
"eCase" -> "_";
"eCase" -> "attr";
"eCase" -> "matchTagClose";
"eCase" -> "matchTagOpen";
"eCase" -> "namespaces";
"eCase" -> "pAny";
"eCase" -> "pBlank";
"eCase" -> "pInTags";
"eCase" -> "pSatisfy";
"eCase" -> "toStringAttr";
"eFootnote" -> "addNote";
"eFootnote" -> "attr";
"eFootnote" -> "block";
"eFootnote" -> "guardEnabled";
"eFootnote" -> "pAny";
"eFootnote" -> "pInTags";
"eFootnote" -> "tag";
"eFootnote" -> "toStringAttr";
"eFootnote" -> "try";
"eNoteref" -> "_";
"eNoteref" -> "attr";
"eNoteref" -> "guardEnabled";
"eNoteref" -> "pAny";
"eNoteref" -> "pSatisfy";
"eNoteref" -> "t";
"eNoteref" -> "tag";
"eNoteref" -> "try";
"eSection" -> "_";
"eSection" -> "block";
"eSection" -> "pInTags";
"eSection" -> "pSatisfy";
"eSection" -> "sectioningContent";
"eSection" -> "setInChapter";
"eSection" -> "tag";
"eSection" -> "try";
"eSwitch" -> "a";
"eSwitch" -> "eCase";
"eSwitch" -> "guardEnabled";
"eSwitch" -> "matchTagClose";
"eSwitch" -> "matchTagOpen";
"eSwitch" -> "pBlank";
"eSwitch" -> "pInTags";
"eSwitch" -> "pSatisfy";
"eSwitch" -> "try";
"eTOC" -> "attr";
"eTOC" -> "block";
"eTOC" -> "guardEnabled";
"eTOC" -> "pAny";
"eTOC" -> "pInTags";
"eTOC" -> "tag";
"eTOC" -> "try";
"eTitlePage" -> "_";
"eTitlePage" -> "block";
"eTitlePage" -> "groupingContent";
"eTitlePage" -> "pInTags";
"eTitlePage" -> "pSatisfy";
"eTitlePage" -> "tag";
"eTitlePage" -> "try";
"eTitlePage" -> "x";
"eastAsianLineBreakFilter" -> "_";
"eastAsianLineBreakFilter" -> "stringify";
"eastAsianLineBreakFilter" -> "x";
"egroup" -> "a";
"egroup" -> "controlSeq";
"egroup" -> "symbol";
"eitherBlockOrInline" -> "fromList";
"eitherToD" -> "_";
"eitherToD" -> "a";
"eitherToMaybe" -> "_";
"eitherToMaybe" -> "a";
"el" -> "t";
"elContent" -> "getCurrentElement";
"elName" -> "x";
"elemName" -> "prefix";
"elemNameIs" -> "elemNameMatches";
"elemNameMatches" -> "keepingTheValue";
"elemNameMatches" -> "lookupNSiri";
"elemToBody" -> "_";
"elemToBody" -> "elemToBodyPart";
"elemToBody" -> "isElem";
"elemToBody" -> "mapD";
"elemToBodyPart" -> "_";
"elemToBodyPart" -> "defaultTblLook";
"elemToBodyPart" -> "eitherToD";
"elemToBodyPart" -> "elemToParPart";
"elemToBodyPart" -> "elemToParagraphStyle";
"elemToBodyPart" -> "elemToRow";
"elemToBodyPart" -> "elemToTblGrid";
"elemToBodyPart" -> "elemToTblLook";
"elemToBodyPart" -> "findAttrTextByName";
"elemToBodyPart" -> "findChildByName";
"elemToBodyPart" -> "findChildrenByName";
"elemToBodyPart" -> "getNumInfo";
"elemToBodyPart" -> "isElem";
"elemToBodyPart" -> "l";
"elemToBodyPart" -> "lookupLevel";
"elemToBodyPart" -> "mapD";
"elemToBodyPart" -> "pHeading";
"elemToBodyPart" -> "pNumInfo";
"elemToCell" -> "_";
"elemToCell" -> "elemToBodyPart";
"elemToCell" -> "isElem";
"elemToCell" -> "mapD";
"elemToCharStyle" -> "elemToRunStyle";
"elemToCharStyle" -> "findAttrTextByName";
"elemToCharStyle" -> "getElementStyleName";
"elemToCommentStart" -> "_";
"elemToCommentStart" -> "elemToBodyPart";
"elemToCommentStart" -> "findAttrTextByName";
"elemToCommentStart" -> "isElem";
"elemToCommentStart" -> "mapD";
"elemToComments" -> "_";
"elemToComments" -> "a";
"elemToComments" -> "findAttrTextByName";
"elemToComments" -> "findChildrenByName";
"elemToComments" -> "isElem";
"elemToEntry" -> "renderXml";
"elemToExtent" -> "_";
"elemToExtent" -> "findAttr";
"elemToExtent" -> "safeRead";
"elemToNameSpaces" -> "attrToNSPair";
"elemToNotes" -> "_";
"elemToNotes" -> "a";
"elemToNotes" -> "findAttrTextByName";
"elemToNotes" -> "findChildrenByName";
"elemToNotes" -> "isElem";
"elemToParIndentation" -> "_";
"elemToParIndentation" -> "findAttrByName";
"elemToParIndentation" -> "isElem";
"elemToParIndentation" -> "stringToInteger";
"elemToParPart" -> "_";
"elemToParPart" -> "anchor";
"elemToParPart" -> "eitherToD";
"elemToParPart" -> "elemName";
"elemToParPart" -> "elemToCommentStart";
"elemToParPart" -> "elemToExtent";
"elemToParPart" -> "elemToRun";
"elemToParPart" -> "expandDrawingId";
"elemToParPart" -> "findAttrByName";
"elemToParPart" -> "findAttrTextByName";
"elemToParPart" -> "findChildByName";
"elemToParPart" -> "getTitleAndAlt";
"elemToParPart" -> "getTrackedChange";
"elemToParPart" -> "isElem";
"elemToParPart" -> "lookupRelationship";
"elemToParPart" -> "mapD";
"elemToParPart" -> "parseFieldInfo";
"elemToParPart" -> "title";
"elemToParStyleData" -> "_";
"elemToParStyleData" -> "elemName";
"elemToParStyleData" -> "elemToNameSpaces";
"elemToParStyleData" -> "findAttrByName";
"elemToParStyleData" -> "findAttrText";
"elemToParStyleData" -> "findAttrTextByName";
"elemToParStyleData" -> "findChildByName";
"elemToParStyleData" -> "findChildrenByName";
"elemToParStyleData" -> "getElementStyleName";
"elemToParStyleData" -> "getHeaderLevel";
"elemToParStyleData" -> "getNumInfo";
"elemToParStyleData" -> "isElem";
"elemToParagraphStyle" -> "_";
"elemToParagraphStyle" -> "checkOnOff";
"elemToParagraphStyle" -> "defaultParagraphStyle";
"elemToParagraphStyle" -> "elemName";
"elemToParagraphStyle" -> "elemToParIndentation";
"elemToParagraphStyle" -> "findAttrByName";
"elemToParagraphStyle" -> "findAttrTextByName";
"elemToParagraphStyle" -> "findChildByName";
"elemToParagraphStyle" -> "findChildrenByName";
"elemToParagraphStyle" -> "getTrackedChange";
"elemToParagraphStyle" -> "isElem";
"elemToRow" -> "_";
"elemToRow" -> "elemToCell";
"elemToRow" -> "findChildrenByName";
"elemToRow" -> "isElem";
"elemToRow" -> "mapD";
"elemToRun" -> "_";
"elemToRun" -> "a";
"elemToRun" -> "childElemToRun";
"elemToRun" -> "elemToRunElems";
"elemToRun" -> "elemToRunStyleD";
"elemToRun" -> "findChildByName";
"elemToRun" -> "findChildrenByName";
"elemToRun" -> "isElem";
"elemToRun" -> "mapD";
"elemToRunElem" -> "getSymChar";
"elemToRunElem" -> "isElem";
"elemToRunElem" -> "str";
"elemToRunElem" -> "x";
"elemToRunElems" -> "_";
"elemToRunElems" -> "elemName";
"elemToRunElems" -> "elemToRunElem";
"elemToRunElems" -> "findAttr";
"elemToRunElems" -> "isElem";
"elemToRunElems" -> "mapD";
"elemToRunElems" -> "setFont";
"elemToRunStyle" -> "_";
"elemToRunStyle" -> "checkOnOff";
"elemToRunStyle" -> "defaultRunStyle";
"elemToRunStyle" -> "elemName";
"elemToRunStyle" -> "findAttrByName";
"elemToRunStyle" -> "findChildByName";
"elemToRunStyle" -> "isSmallCaps";
"elemToRunStyleD" -> "_";
"elemToRunStyleD" -> "defaultRunStyle";
"elemToRunStyleD" -> "elemToRunStyle";
"elemToRunStyleD" -> "findAttrTextByName";
"elemToRunStyleD" -> "findChildByName";
"elemToTblGrid" -> "_";
"elemToTblGrid" -> "findAttrByName";
"elemToTblGrid" -> "findChildrenByName";
"elemToTblGrid" -> "isElem";
"elemToTblGrid" -> "mapD";
"elemToTblGrid" -> "maybeToD";
"elemToTblGrid" -> "stringToInteger";
"elemToTblLook" -> "_";
"elemToTblLook" -> "findAttrByName";
"elemToTblLook" -> "isElem";
"elemToTblLook" -> "testBitMask";
"elementOrList" -> "_";
"elementOrList" -> "a";
"elementOrList" -> "peekEither";
"elementOrList" -> "x";
"elementToBeamer" -> "_";
"elementToBeamer" -> "x";
"elementToRel" -> "_";
"elementToRel" -> "elName";
"elementToRel" -> "findAttr";
"elementToRel" -> "findAttrText";
"elementToRel" -> "stripPrefix";
"elementToStr" -> "strContentRecursive";
"elementToStr" -> "x";
"elementsToTable" -> "museAppendElement";
"elispBoolean" -> "_";
"elispBoolean" -> "nonspaceChar";
"elispBoolean" -> "try";
"ellipses" -> "try";
"emacsHeading" -> "attr";
"emacsHeading" -> "eol";
"emacsHeading" -> "guardDisabled";
"emacsHeading" -> "headingStart";
"emacsHeading" -> "inline";
"emacsHeading" -> "registerHeader";
"emacsHeading" -> "runF";
"emacsHeading" -> "trimInlinesF";
"emacsHeading" -> "try";
"emacsNoteBlock" -> "addNote";
"emacsNoteBlock" -> "guardDisabled";
"emacsNoteBlock" -> "many1Till";
"emacsNoteBlock" -> "noteMarker";
"emacsNoteBlock" -> "parseBlock";
"emacsNoteBlock" -> "try";
"emailAddress" -> "escapeURI";
"emailAddress" -> "fromEntities";
"emailAddress" -> "sepBy1\'";
"emailAddress" -> "space";
"emailAddress" -> "try";
"emailAddress" -> "x";
"emailBlockQuote" -> "blanklines";
"emailBlockQuote" -> "emailBlockQuoteStart";
"emailBlockQuote" -> "endline";
"emailBlockQuote" -> "manyChar";
"emailBlockQuote" -> "newline";
"emailBlockQuote" -> "nonEndline";
"emailBlockQuote" -> "raw";
"emailBlockQuote" -> "try";
"emailBlockQuoteStart" -> "skipNonindentSpaces";
"emailBlockQuoteStart" -> "try";
"emfSize" -> "_";
"emfSize" -> "encodeLogMessages";
"emfSize" -> "messageVerbosity";
"emfSize" -> "showLogMessage";
"emfSize" -> "skip";
"emfSize" -> "t";
"emfSize" -> "x";
"emoji" -> "emojiChars";
"emoji" -> "emojiToInline";
"emoji" -> "guardEnabled";
"emoji" -> "many1Char";
"emoji" -> "try";
"emojiToInline" -> "a";
"emojiToInline" -> "handleError";
"emph" -> "atStart";
"emph" -> "between";
"emph" -> "emphasisBetween";
"emph" -> "enclosed";
"emph" -> "inlineContent";
"emph" -> "inline\'";
"emph" -> "inlinesBetween";
"emph" -> "nested";
"emph" -> "nestedInlines";
"emph" -> "nonspaceChar";
"emph" -> "notFollowedBy\'";
"emph" -> "spaceChars";
"emph" -> "strong";
"emph" -> "sym";
"emph" -> "try";
"emphChars" -> "anyLine";
"emphChars" -> "safeRead";
"emphChars" -> "skipSpaces";
"emphHtml" -> "a";
"emphHtml" -> "inline";
"emphHtml" -> "parseHtmlContent";
"emphTag" -> "inlineTag";
"emphasis" -> "env";
"emphasis" -> "inlineListToMuse";
"emphasis" -> "literal";
"emphasisBetween" -> "a";
"emphasisBetween" -> "atStart";
"emphasisBetween" -> "emphasisAllowedNewlines";
"emphasisBetween" -> "emphasisEnd";
"emphasisBetween" -> "emphasisStart";
"emphasisBetween" -> "enclosedInlines";
"emphasisBetween" -> "inline";
"emphasisBetween" -> "many1Till";
"emphasisBetween" -> "noSpaceBefore";
"emphasisBetween" -> "resetEmphasisNewlines";
"emphasisBetween" -> "space";
"emphasisBetween" -> "startEmphasisNewlinesCounting";
"emphasisBetween" -> "trimInlinesF";
"emphasisBetween" -> "try";
"emphasisBetween" -> "when";
"emphasisEnd" -> "notAfterForbiddenBorderChar";
"emphasisEnd" -> "popInlineCharStack";
"emphasisEnd" -> "surroundingEmphasisChar";
"emphasisEnd" -> "try";
"emphasisEnd" -> "updateLastStrPos";
"emphasisEnd" -> "x";
"emphasisStart" -> "afterEmphasisPreChar";
"emphasisStart" -> "emphasisForbiddenBorderChars";
"emphasisStart" -> "notAfterString";
"emphasisStart" -> "pushToInlineCharStack";
"emphasisStart" -> "try";
"emphasisStart" -> "updateLastPreCharPos";
"emphasizedText" -> "emph";
"emphasizedText" -> "strikeout";
"emphasizedText" -> "strong";
"emphasizedText" -> "try";
"emphasizedText" -> "underline";
"emptyLayout" -> "authors";
"emptyLayout" -> "emptyParaElem";
"emptyLayout" -> "emptyShape";
"emptyLayout" -> "title";
"emptyOr160" -> "str";
"emptyOr160" -> "x";
"emptyParaElem" -> "_";
"emptyParagraph" -> "emptyParaElem";
"emptyParagraph" -> "para";
"emptyShape" -> "_";
"emptyShape" -> "emptyParagraph";
"emptySlide" -> "_";
"emptySlide" -> "emptyLayout";
"enableExtension" -> "x";
"enclosed" -> "a";
"enclosed" -> "between";
"enclosed" -> "many1Till";
"enclosed" -> "newline";
"enclosed" -> "skip";
"enclosed" -> "space";
"enclosed" -> "spaceChar";
"enclosed" -> "try";
"enclosedByPair" -> "a";
"enclosedByPair1" -> "a";
"enclosedByPair1" -> "many1Till";
"enclosedInlines" -> "a";
"enclosedInlines" -> "enclosed";
"enclosedInlines" -> "inline";
"enclosedInlines" -> "trimInlinesF";
"enclosedInlines" -> "try";
"enclosedRaw" -> "anyLine";
"enclosedRaw" -> "many1TillChar";
"enclosedRaw" -> "try";
"enclosure" -> "_";
"enclosure" -> "guardDisabled";
"enclosure" -> "many1Char";
"enclosure" -> "notAfterString";
"enclosure" -> "one";
"enclosure" -> "three";
"enclosure" -> "two";
"enclosure" -> "whitespace";
"encode" -> "x";
"endOfBlock" -> "blankline";
"endOfBlock" -> "blockList";
"endOfBlock" -> "bulletListStart";
"endOfBlock" -> "commentLineStart";
"endOfBlock" -> "drawerStart";
"endOfBlock" -> "exampleLineStart";
"endOfBlock" -> "exportsCode";
"endOfBlock" -> "gridTableStart";
"endOfBlock" -> "headerStart";
"endOfBlock" -> "hline";
"endOfBlock" -> "latexEnvStart";
"endOfBlock" -> "meta";
"endOfBlock" -> "metaLineStart";
"endOfBlock" -> "noteMarker";
"endOfBlock" -> "orderedListStart";
"endOfBlock" -> "originalLang";
"endOfBlock" -> "tableStart";
"endOfBlock" -> "translateLang";
"endOfBlock" -> "try";
"endOfBlock" -> "unprunedHeadlineToBlocks";
"endOfCell" -> "newline";
"endOfCell" -> "try";
"endOfParaElement" -> "a";
"endOfParaElement" -> "anyListItem";
"endOfParaElement" -> "blankline";
"endOfParaElement" -> "header";
"endOfParaElement" -> "horizontalRule";
"endOfParaElement" -> "hr";
"endOfParaElement" -> "nowiki";
"endOfParaElement" -> "skipSpaces";
"endOfParaElement" -> "table";
"endOfParaElement" -> "try";
"endOfParagraph" -> "endOfBlock";
"endOfParagraph" -> "newline";
"endOfParagraph" -> "skipSpaces";
"endOfParagraph" -> "try";
"endWithPunct" -> "_";
"endWithPunct" -> "stringify";
"end_" -> "braced";
"end_" -> "controlSeq";
"end_" -> "spaces";
"end_" -> "t";
"end_" -> "try";
"end_" -> "txt";
"end_" -> "untokenize";
"ender" -> "guardDisabled";
"ender" -> "try";
"endline" -> "anyListStart";
"endline" -> "anyOrderedListMarker";
"endline" -> "anyTok";
"endline" -> "atxChar";
"endline" -> "blankline";
"endline" -> "bulletListStart";
"endline" -> "codeBlockFenced";
"endline" -> "decEmphasisNewlinesCount";
"endline" -> "emailBlockQuoteStart";
"endline" -> "endOfBlock";
"endline" -> "fetchItem";
"endline" -> "guardDisabled";
"endline" -> "guardEnabled";
"endline" -> "header";
"endline" -> "hrule";
"endline" -> "inList";
"endline" -> "linebreak";
"endline" -> "list";
"endline" -> "listStart";
"endline" -> "newline";
"endline" -> "newlineTok";
"endline" -> "newlinesCountWithinLimits";
"endline" -> "notFollowedByDivCloser";
"endline" -> "notFollowedByHtmlCloser";
"endline" -> "notFollowedBy\'";
"endline" -> "pandocExtensions";
"endline" -> "processCitations";
"endline" -> "quote";
"endline" -> "rawBlock";
"endline" -> "rawHtmlBlock";
"endline" -> "readDataFile";
"endline" -> "report";
"endline" -> "returnF";
"endline" -> "spaceChar";
"endline" -> "table";
"endline" -> "tableStart";
"endline" -> "taggedBlock";
"endline" -> "title";
"endline" -> "try";
"endline" -> "updateLastPreCharPos";
"endline" -> "updateLastSpacePos";
"endline" -> "verbatim";
"endline" -> "when";
"endlineBQ" -> "nFBTTBSB";
"endlineBQ" -> "newline";
"endlineBQ" -> "try";
"endlineML" -> "nFBTTBSB";
"endlineML" -> "newline";
"endlineML" -> "spaceChar";
"endlineML" -> "try";
"endlineP" -> "blockQuote";
"endlineP" -> "nFBTTBSB";
"endlineP" -> "newline";
"endlineP" -> "try";
"endmacro" -> "_";
"endmacro" -> "mmacro";
"endmacro" -> "msatisfy";
"endsWithPlain" -> "_";
"endsWithSpace" -> "endsWithSpace";
"endsWithSpace" -> "stringEndsWithSpace";
"engines" -> "htmlEngines";
"engines" -> "latexEngines";
"enquote" -> "babelLangToBCP47";
"enquote" -> "doubleQuoted";
"enquote" -> "l";
"enquote" -> "renderLang";
"enquote" -> "singleQuoted";
"enquote" -> "skipopts";
"enquote" -> "tok";
"entField" -> "expandString";
"entField" -> "fieldName";
"entField" -> "inBraces";
"entField" -> "inQuotes";
"entField" -> "rawWord";
"entField" -> "spaces";
"entField" -> "try";
"entryToXmlElem" -> "a";
"env" -> "end_";
"environment" -> "braced";
"environment" -> "controlSeq";
"environment" -> "environments";
"environment" -> "inlineEnvironments";
"environment" -> "rawEnv";
"environment" -> "rawVerbEnv";
"environment" -> "theoremEnvironment";
"environment" -> "try";
"environment" -> "untokenize";
"environments" -> "addMeta";
"environments" -> "addTableCaption";
"environments" -> "alltt";
"environments" -> "anyTok";
"environments" -> "attr";
"environments" -> "block";
"environments" -> "blockQuote";
"environments" -> "blocks";
"environments" -> "braced";
"environments" -> "bulletList";
"environments" -> "codeBlock";
"environments" -> "definitionList";
"environments" -> "descItem";
"environments" -> "env";
"environments" -> "fancyverbEnv";
"environments" -> "figure";
"environments" -> "guardEnabled";
"environments" -> "ifToggle";
"environments" -> "ifstrequal";
"environments" -> "item";
"environments" -> "keyvals";
"environments" -> "letterContents";
"environments" -> "listenv";
"environments" -> "minted";
"environments" -> "newToggle";
"environments" -> "obeylines";
"environments" -> "orderedList\'";
"environments" -> "parseListingsOptions";
"environments" -> "proof";
"environments" -> "rawVerbEnv";
"environments" -> "resetCaption";
"environments" -> "setToggle";
"environments" -> "simpTable";
"environments" -> "skipopts";
"environments" -> "spaces";
"environments" -> "tok";
"environments" -> "try";
"environments" -> "verbEnv";
"eofline" -> "newline";
"eol" -> "a";
"eol" -> "newline";
"epigraph" -> "block";
"epigraph" -> "grouped";
"epsSize" -> "_";
"epsSize" -> "safeRead";
"epsSize" -> "x";
"epubTags" -> "fromList";
"equals" -> "_";
"equals" -> "try";
"equals" -> "x";
"equation" -> "elContent";
"equation" -> "elName";
"equation" -> "removePrefix";
"equation" -> "showVerbatimCData";
"equation" -> "x";
"err" -> "a";
"err" -> "disableExtension";
"err" -> "emptyExtensions";
"err" -> "enableExtension";
"err" -> "extensionEnabled";
"err" -> "extensionsFromList";
"err" -> "getAllExtensions";
"err" -> "getDefaultExtensions";
"err" -> "githubMarkdownExtensions";
"err" -> "multimarkdownExtensions";
"err" -> "pandocExtensions";
"err" -> "parseFormatSpec";
"err" -> "phpMarkdownExtraExtensions";
"err" -> "plainExtensions";
"err" -> "strictExtensions";
"errorConversion" -> "a";
"errorConversion" -> "addContextToException";
"errorConversion" -> "alternative";
"errorConversion" -> "errorToException";
"errorConversion" -> "exceptionToError";
"errorToException" -> "a";
"errorToException" -> "err";
"errorToException" -> "l";
"errorToException" -> "peekPandocError";
"escFont" -> "_";
"escFont" -> "countChar";
"escFont" -> "defaultFontSpec";
"escFont" -> "escapeArg";
"escFont" -> "modifyState";
"escIgnore" -> "report";
"escIgnore" -> "withRaw";
"escString" -> "_";
"escString" -> "countChar";
"escString" -> "escapeArg";
"escString" -> "escapeString";
"escString" -> "resolveText";
"escString" -> "try";
"escUnknown" -> "report";
"escape" -> "backslash";
"escape" -> "escapeGlyph";
"escape" -> "escapeNormal";
"escape" -> "try";
"escapeArg" -> "countChar";
"escapeArg" -> "expandString";
"escapeArg" -> "manyTillChar";
"escapeCharForConTeXt" -> "isEnabled";
"escapeCharForConTeXt" -> "x";
"escapeCharForTextile" -> "x";
"escapeCharForXML" -> "x";
"escapeColons" -> "txt";
"escapeGlyph" -> "escapeArg";
"escapeGlyph" -> "resolveGlyph";
"escapeNls" -> "a";
"escapeNormal" -> "_";
"escapeNormal" -> "checkDefined";
"escapeNormal" -> "countChar";
"escapeNormal" -> "escFont";
"escapeNormal" -> "escIgnore";
"escapeNormal" -> "escString";
"escapeNormal" -> "escapeArg";
"escapeNormal" -> "expandString";
"escapeNormal" -> "newline";
"escapeNormal" -> "quoteArg";
"escapeNormal" -> "resolveGlyph";
"escapeNormal" -> "signedNumber";
"escapeSpecial" -> "backslashEscapes";
"escapeSpecial" -> "escapeStringUsing";
"escapeSpecialChars" -> "_";
"escapeSpecialChars" -> "singleton";
"escapeSpecialChars" -> "t";
"escapeStr" -> "escapeString";
"escapeString" -> "_";
"escapeString" -> "accents";
"escapeString" -> "backslashEscapes";
"escapeString" -> "characterCodeMap";
"escapeString" -> "combiningAccentsMap";
"escapeString" -> "escapeStringUsing";
"escapeString" -> "essentialEscapes";
"escapeString" -> "t";
"escapeString" -> "x";
"escapeStringForXML" -> "escapeCharForXML";
"escapeText" -> "_";
"escapeText" -> "elemText";
"escapeText" -> "escapeStringForXML";
"escapeText" -> "isEnabled";
"escapeText" -> "x";
"escapeTextForTextile" -> "escapeCharForTextile";
"escapeURI" -> "elemText";
"escapeURI" -> "isSpace";
"escapeURI" -> "needsEscaping";
"escaped" -> "try";
"escapedChar" -> "_";
"escapedChar" -> "escaped";
"escapedChar" -> "escapedChar\'";
"escapedChar" -> "safeRead";
"escapedChar" -> "try";
"escapedChar\'" -> "_";
"escapedChar\'" -> "guardEnabled";
"escapedChar\'" -> "try";
"escapedEqs" -> "anyChar\'";
"escapedEqs" -> "try";
"escapedInline" -> "escapedEqs";
"escapedInline" -> "escapedTag";
"escapedLink" -> "_";
"escapedLink" -> "try";
"escapedLink" -> "uri";
"escapedNewline" -> "guardEnabled";
"escapedNewline" -> "try";
"escapedTag" -> "anyChar\'";
"escapedTag" -> "try";
"essentialEscapes" -> "standardEscapes";
"evalDocxContext" -> "env";
"evalMD" -> "env";
"evalMuse" -> "env";
"example" -> "anyLine";
"example" -> "exampleCode";
"example" -> "exampleLineStart";
"example" -> "manyTillChar";
"example" -> "returnF";
"example" -> "spaceChar";
"example" -> "try";
"example" -> "unindent";
"exampleBlock" -> "newline";
"exampleBlock" -> "rawBlockContent";
"exampleBlock" -> "skipSpaces";
"exampleBlock" -> "switchesAsAttributes";
"exampleLineStart" -> "skipSpaces";
"exampleLineStart" -> "try";
"exampleNum" -> "try";
"exampleRef" -> "askF";
"exampleRef" -> "guardEnabled";
"exampleRef" -> "try";
"exampleRef" -> "tshow";
"exampleTag" -> "closeTag";
"exampleTag" -> "eol";
"exampleTag" -> "htmlAttrToPandoc";
"exampleTag" -> "manyTillChar";
"exampleTag" -> "openTag";
"exampleTag" -> "spaceChar";
"exampleTag" -> "try";
"exampleTag" -> "unindent";
"exceptionToError" -> "pushPandocError";
"exceptionToError" -> "runFilterFile";
"exceptionToError" -> "walkBlocks";
"exceptionToError" -> "walkInlines";
"executeIn" -> "a";
"executeIn" -> "duplicate";
"executeIn" -> "switchingTheStack";
"executeInSub" -> "_";
"executeInSub" -> "a";
"executeInSub" -> "findChild";
"executeInSub" -> "ignoringState";
"executeInSub" -> "keepingTheValue";
"executeInSub" -> "switchingTheStack";
"executeInSub" -> "x";
"executeThere" -> "a";
"executeThere" -> "collapseEither";
"executeThere" -> "jumpBack";
"executeThere" -> "jumpThere";
"expandDrawingId" -> "lookupRelationship";
"expandFilterPath" -> "_";
"expandFilterPath" -> "fileExists";
"expandFilterPath" -> "fromListingsLanguage";
"expandFilterPath" -> "getUserDataDir";
"expandFilterPath" -> "highlight";
"expandFilterPath" -> "languages";
"expandFilterPath" -> "languagesByExtension";
"expandFilterPath" -> "toListingsLanguage";
"expandString" -> "countChar";
"expandString" -> "escapeArg";
"expandString" -> "fieldName";
"expandString" -> "linePartsToText";
"expandString" -> "resolveKey\'";
"expandString" -> "resolveText";
"expandString" -> "try";
"explicitBlockStart" -> "attributes";
"explicitBlockStart" -> "endline";
"explicitBlockStart" -> "try";
"explicitBlockStart" -> "whitespace";
"explicitLink" -> "_";
"explicitLink" -> "attr";
"explicitLink" -> "escapeURI";
"explicitLink" -> "inlineContent";
"explicitLink" -> "isURI";
"explicitLink" -> "lookupKey";
"explicitLink" -> "manyTillChar";
"explicitLink" -> "skipSpaces";
"explicitLink" -> "toKey";
"explicitLink" -> "trim";
"explicitLink" -> "try";
"explicitOrImageLink" -> "_";
"explicitOrImageLink" -> "applyCustomLinkFormat";
"explicitOrImageLink" -> "cleanLinkText";
"explicitOrImageLink" -> "enclosedRaw";
"explicitOrImageLink" -> "inline";
"explicitOrImageLink" -> "isImageFilename";
"explicitOrImageLink" -> "linkToInlinesF";
"explicitOrImageLink" -> "parseFromString";
"explicitOrImageLink" -> "possiblyEmptyLinkTarget";
"explicitOrImageLink" -> "title";
"explicitOrImageLink" -> "try";
"exportBlock" -> "ignHeaders";
"exportBlock" -> "orgArgWord";
"exportBlock" -> "rawBlockContent";
"exportBlock" -> "returnF";
"exportBlock" -> "skipSpaces";
"exportBlock" -> "try";
"exportSetting" -> "archivedTreeSetting";
"exportSetting" -> "booleanSetting";
"exportSetting" -> "complementableListSetting";
"exportSetting" -> "ignoreAndWarn";
"exportSetting" -> "ignoredSetting";
"exportSetting" -> "integerSetting";
"exportSetting" -> "texSetting";
"exportSettings" -> "exportSetting";
"exportSettings" -> "skipSpaces";
"exportSnippet" -> "many1TillChar";
"exportSnippet" -> "manyTillChar";
"exportSnippet" -> "returnF";
"exportSnippet" -> "try";
"exportsCode" -> "getCurrentTime";
"exportsCode" -> "readFileFromDirs";
"expression" -> "_";
"expression" -> "charsInBalanced";
"expression" -> "many1Char";
"expression" -> "modifyState";
"expression" -> "nonspaceChar";
"expression" -> "raw";
"extendedStylePropertyChain" -> "_";
"extendedStylePropertyChain" -> "extendedStylePropertyChain";
"extendedStylePropertyChain" -> "getStyleFamily";
"extendedStylePropertyChain" -> "lookupDefaultStyle\'";
"extendedStylePropertyChain" -> "stylePropertyChain";
"extensionEnabled" -> "x";
"extensionFromMimeType" -> "reverseMimeTypes";
"extensionsFromList" -> "emptyExtensions";
"extensionsFromList" -> "enableExtension";
"extentToAttr" -> "_";
"extentToAttr" -> "tshow";
"externalFilter" -> "_";
"externalFilter" -> "a";
"externalFilter" -> "encode";
"externalFilter" -> "env";
"externalFilter" -> "pandocVersion";
"externalFilter" -> "pipeProcess";
"externalFilter" -> "tshow";
"externalFilter" -> "when";
"externalLink" -> "_";
"externalLink" -> "inline";
"externalLink" -> "makeLink";
"externalLink" -> "spaceChar";
"externalLink" -> "try";
"externalLink" -> "tshow";
"externalLink" -> "uri";
"extract" -> "_";
"extract" -> "attr";
"extract" -> "extractInline";
"extract" -> "lookKey";
"extractCaption" -> "blanklines";
"extractCaption" -> "block";
"extractCaption" -> "inline";
"extractCells" -> "_";
"extractCells" -> "a";
"extractCells" -> "addAttachment";
"extractCells" -> "blockToOutput";
"extractCells" -> "consolidateAdjacentRawBlocks";
"extractCells" -> "extractCells";
"extractCells" -> "meta";
"extractCells" -> "pairsToJSONMeta";
"extractCells" -> "raw";
"extractCells" -> "safeRead";
"extractCells" -> "source";
"extractCells" -> "t";
"extractCells" -> "writeMarkdown";
"extractData" -> "_";
"extractData" -> "code";
"extractData" -> "consolidateAdjacentRawBlocks";
"extractData" -> "fetchItem";
"extractData" -> "meta";
"extractData" -> "pairsToJSONMeta";
"extractData" -> "raw";
"extractData" -> "report";
"extractInline" -> "_";
"extractInline" -> "attr";
"extractInline" -> "lookKey";
"extractMedia" -> "_";
"extractMedia" -> "a";
"extractMedia" -> "adjustImagePath";
"extractMedia" -> "fetchItem";
"extractMedia" -> "fetchMediaResource";
"extractMedia" -> "fileExists";
"extractMedia" -> "fillMediaBag";
"extractMedia" -> "getCurrentTime";
"extractMedia" -> "getCurrentTimeZone";
"extractMedia" -> "getDataFileName";
"extractMedia" -> "getInputFiles";
"extractMedia" -> "getLog";
"extractMedia" -> "getMediaBag";
"extractMedia" -> "getModificationTime";
"extractMedia" -> "getOutputFile";
"extractMedia" -> "getPOSIXTime";
"extractMedia" -> "getResourcePath";
"extractMedia" -> "getUserDataDir";
"extractMedia" -> "getVerbosity";
"extractMedia" -> "getZonedTime";
"extractMedia" -> "glob";
"extractMedia" -> "insertMedia";
"extractMedia" -> "logOutput";
"extractMedia" -> "lookupEnv";
"extractMedia" -> "makeCanonical";
"extractMedia" -> "mediaDirectory";
"extractMedia" -> "newStdGen";
"extractMedia" -> "newUniqueHash";
"extractMedia" -> "openURL";
"extractMedia" -> "readDataFile";
"extractMedia" -> "readDefaultDataFile";
"extractMedia" -> "readFileFromDirs";
"extractMedia" -> "readFileLazy";
"extractMedia" -> "readFileStrict";
"extractMedia" -> "readTranslations";
"extractMedia" -> "report";
"extractMedia" -> "setInputFiles";
"extractMedia" -> "setMediaBag";
"extractMedia" -> "setNoCheckCertificate";
"extractMedia" -> "setOutputFile";
"extractMedia" -> "setRequestHeader";
"extractMedia" -> "setResourcePath";
"extractMedia" -> "setTrace";
"extractMedia" -> "setTranslations";
"extractMedia" -> "setUserDataDir";
"extractMedia" -> "setVerbosity";
"extractMedia" -> "toLang";
"extractMedia" -> "translateTerm";
"extractMedia" -> "when";
"extractMedia" -> "writeMedia";
"extractSpaces" -> "_";
"extractSpaces" -> "a";
"extractText" -> "_";
"extractText" -> "toText";
"extractText" -> "x";
"extractUnicodeChar" -> "safeRead";
"failEmpty" -> "a";
"failEmpty" -> "failWith";
"failIfInQuoteContext" -> "when";
"fancyverbEnv" -> "attr";
"fancyverbEnv" -> "keyvals";
"fancyverbEnv" -> "options";
"fancyverbEnv" -> "verbEnv";
"fetch" -> "fetchItem";
"fetch" -> "liftPandocLua";
"fetch" -> "loadScriptFromDataDir";
"fetch" -> "pushModule";
"fetchImage" -> "_";
"fetchImage" -> "el";
"fetchImage" -> "encode";
"fetchImage" -> "isURI";
"fetchImage" -> "link";
"fetchImage" -> "readDataURI";
"fetchImage" -> "report";
"fetchImage" -> "tshow";
"fetchImage" -> "txt";
"fetchImage" -> "uattr";
"fetchImages" -> "fetchImage";
"fetchImages" -> "insertMedia";
"fetchImages" -> "iq";
"fetchImages" -> "link";
"fetchImages" -> "uncurry3";
"fetchItem" -> "downloadOrRead";
"fetchItem" -> "getMediaBag";
"fetchItem" -> "lookupMedia";
"fetchMediaResource" -> "downloadOrRead";
"fetchMediaResource" -> "extensionFromMimeType";
"fetchMediaResource" -> "sha1";
"fieldArgument" -> "quotedString";
"fieldArgument" -> "unquotedString";
"fieldInfo" -> "hyperlink";
"fieldInfo" -> "try";
"fieldList" -> "fieldListItem";
"fieldList" -> "indent";
"fieldList" -> "items";
"fieldList" -> "spaceChar";
"fieldList" -> "try";
"fieldListItem" -> "blanklines";
"fieldListItem" -> "parseBlocks";
"fieldListItem" -> "parseFromString\'";
"fieldListItem" -> "parseInlineFromText";
"fieldListItem" -> "raw";
"fieldListItem" -> "rawFieldListItem";
"fieldListItem" -> "try";
"fieldName" -> "resolveAlias";
"fieldName" -> "take1WhileP";
"figure" -> "addImageCaption";
"figure" -> "attr";
"figure" -> "blockAttributes";
"figure" -> "blocks";
"figure" -> "cleanLinkText";
"figure" -> "endOfParagraph";
"figure" -> "inlineListToHtml";
"figure" -> "inlineToHtml";
"figure" -> "isImageFilename";
"figure" -> "linkTarget";
"figure" -> "nl";
"figure" -> "resetCaption";
"figure" -> "skipSpaces";
"figure" -> "try";
"figure" -> "txt";
"fileExists" -> "liftIOError";
"filePathIsMedia" -> "_";
"filePathToRelType" -> "_";
"filePathToRelationships" -> "_";
"filePathToRelationships" -> "filePathToRelType";
"filePathToRelationships" -> "relElemToRelationship";
"fillMediaBag" -> "_";
"fillMediaBag" -> "addToFileTree";
"fillMediaBag" -> "attr";
"fillMediaBag" -> "fetchMediaResource";
"fillMediaBag" -> "fileExists";
"fillMediaBag" -> "getCurrentTime";
"fillMediaBag" -> "getCurrentTimeZone";
"fillMediaBag" -> "getDataFileName";
"fillMediaBag" -> "getMediaBag";
"fillMediaBag" -> "getModificationTime";
"fillMediaBag" -> "getPureState";
"fillMediaBag" -> "getsPureState";
"fillMediaBag" -> "glob";
"fillMediaBag" -> "insertInFileTree";
"fillMediaBag" -> "insertMedia";
"fillMediaBag" -> "logOutput";
"fillMediaBag" -> "lookupEnv";
"fillMediaBag" -> "lookupMedia";
"fillMediaBag" -> "modifyPureState";
"fillMediaBag" -> "newStdGen";
"fillMediaBag" -> "newUniqueHash";
"fillMediaBag" -> "openURL";
"fillMediaBag" -> "putPureState";
"fillMediaBag" -> "readFileLazy";
"fillMediaBag" -> "readFileStrict";
"fillMediaBag" -> "report";
"fillMediaBag" -> "runPure";
"fillMediaBag" -> "t";
"fillMediaBag" -> "when";
"fillMediaBag" -> "x";
"filterChildrenName\'" -> "elemNameMatches";
"filterChildrenName\'" -> "getCurrentElement";
"filterChildrenName\'" -> "iterateS";
"filterChildrenName\'" -> "keepingTheValue";
"filterChildrenName\'" -> "x";
"filterIpynbOutput" -> "_";
"filterIpynbOutput" -> "attr";
"filterIpynbOutput" -> "code";
"filterIpynbOutput" -> "t";
"filterIpynbOutput" -> "x";
"filteredFilesFromArchive" -> "a";
"finalBold" -> "endOfParaElement";
"finalBold" -> "inline";
"finalBold" -> "many1Till";
"finalBold" -> "try";
"finalItalics" -> "endOfParaElement";
"finalItalics" -> "inline";
"finalItalics" -> "many1Till";
"finalItalics" -> "try";
"findAlign" -> "x";
"findAnchorName" -> "getPrettyAnchor";
"findAnchorName" -> "keepingTheValue";
"findAnchorName" -> "readAnchorAttr";
"findAnchorRef" -> "_ANCHOR_PREFIX_";
"findAnchorRef" -> "findAttrText";
"findAnchorRef" -> "getPrettyAnchor";
"findAttr" -> "findAttr\'";
"findAttr" -> "maybeToChoice";
"findAttr" -> "x";
"findAttrByName" -> "el";
"findAttrByName" -> "elemName";
"findAttrByName" -> "elemToNameSpaces";
"findAttrByName" -> "findAttr";
"findAttrE" -> "findAttr";
"findAttrE" -> "mkE";
"findAttrText" -> "findAttr";
"findAttrText" -> "findAttr\'";
"findAttrText" -> "maybeToChoice";
"findAttrText" -> "x";
"findAttrTextBy" -> "x";
"findAttrTextByName" -> "a";
"findAttrTextByName" -> "findAttrByName";
"findAttrTextWithDefault" -> "attrValue";
"findAttrTextWithDefault" -> "findAttr\'";
"findAttrTextWithDefault" -> "x";
"findAttrText\'" -> "getCurrentElement";
"findAttrText\'" -> "qualifyName";
"findAttrText\'" -> "x";
"findAttrWithDefault" -> "findAttr\'";
"findAttrWithDefault" -> "x";
"findAttr\'" -> "getCurrentElement";
"findAttr\'" -> "qualifyName";
"findAttr\'" -> "x";
"findBy" -> "_";
"findBy" -> "elName";
"findBy" -> "executeIn";
"findBy" -> "executeInSub";
"findBy" -> "filterChildrenName\'";
"findBy" -> "findAttr";
"findBy" -> "findAttrText";
"findBy" -> "findAttrTextWithDefault";
"findBy" -> "findAttrText\'";
"findBy" -> "findAttrWithDefault";
"findBy" -> "findAttr\'";
"findBy" -> "findBy";
"findBy" -> "findChild\'";
"findBy" -> "getAttr";
"findBy" -> "getExtraState";
"findBy" -> "isSetWithDefault";
"findBy" -> "isSet\'";
"findBy" -> "lookupAttr";
"findBy" -> "lookupAttr\'";
"findBy" -> "lookupDefaultingAttr";
"findBy" -> "matchContent";
"findBy" -> "matchContent\'";
"findBy" -> "modifyExtraState";
"findBy" -> "producingExtraState";
"findBy" -> "readAttr";
"findBy" -> "readAttrWithDefault";
"findBy" -> "readAttr\'";
"findBy" -> "runConverter\'";
"findBy" -> "searchAttr";
"findBy" -> "setExtraState";
"findBy" -> "tryAll";
"findBy" -> "withEveryL";
"findBy" -> "x";
"findChild" -> "findChild\'";
"findChild" -> "maybeToChoice";
"findChild" -> "x";
"findChildByName" -> "el";
"findChildByName" -> "elemName";
"findChildByName" -> "elemToNameSpaces";
"findChildByName" -> "findChild";
"findChild\'" -> "getCurrentElement";
"findChild\'" -> "qualifyName";
"findChild\'" -> "x";
"findChildren" -> "getCurrentElement";
"findChildren" -> "qualifyName";
"findChildren" -> "x";
"findChildrenByName" -> "el";
"findChildrenByName" -> "elemName";
"findChildrenByName" -> "elemToNameSpaces";
"findChildrenByName" -> "findChildren";
"findElementE" -> "a";
"findElementE" -> "mkE";
"findElementE" -> "x";
"findEntryByPathE" -> "a";
"findEntryByPathE" -> "mkE";
"findID" -> "nsIDs";
"findM" -> "a";
"findM" -> "toString";
"findM" -> "toText";
"findM" -> "x";
"findPHType" -> "_";
"findPHType" -> "elemName";
"findPHType" -> "findAttr";
"findPHType" -> "findAttrText";
"findPHType" -> "findChild";
"findPHType" -> "isElem";
"findPitch" -> "_";
"findPitch" -> "choiceToMaybe";
"findPitch" -> "estimateInMillimeter";
"findPitch" -> "findAttr";
"findPitch" -> "getExtraState";
"findPitch" -> "ifFailedDo";
"findPitch" -> "keepingTheValue";
"findPitch" -> "lookupAttr";
"findPitch" -> "maybeToChoice";
"findPitch" -> "percent";
"findPitch" -> "readPercent";
"findPitch" -> "underline";
"findStyleFamily" -> "fromStyles";
"findStyleFamily" -> "getStyleFamily";
"findStyleFamily" -> "maybeToChoice";
"findUsableIndex" -> "findUsableIndex";
"findUsableIndex" -> "tshow";
"firstParaToPlain" -> "_";
"fitToPage" -> "x";
"fixAttrs" -> "addHash";
"fixAttrs" -> "removeEPUBAttrs";
"fixBlockIRs" -> "_";
"fixBlockIRs" -> "code";
"fixBlockIRs" -> "fixAttrs";
"fixDisplayMath" -> "isDisplayMath";
"fixDisplayMath" -> "stripLeadingTrailingSpace";
"fixDisplayMath" -> "x";
"fixImage" -> "attr";
"fixImage" -> "x";
"fixInlineIRs" -> "_";
"fixInlineIRs" -> "addHash";
"fixInlineIRs" -> "code";
"fixInlineIRs" -> "fixAttrs";
"fixInlineIRs" -> "t";
"fixInlineIRs" -> "url";
"fixInternalReferences" -> "escapeURI";
"fixInternalReferences" -> "fixBlockIRs";
"fixInternalReferences" -> "fixInlineIRs";
"fixInternalReferences" -> "renameImages";
"fixLeadingDash" -> "_";
"fixLeadingDash" -> "t";
"fixLineBreaks" -> "fixLineBreaks\'";
"fixLineBreaks" -> "x";
"fixLineBreaks\'" -> "splitBy";
"fixLinks" -> "attr";
"fixLinks" -> "fixLinks";
"fixLinks" -> "t";
"fixLinks" -> "x";
"fixListNesting" -> "_";
"fixListNesting" -> "fixListNesting";
"fixListNesting" -> "recurseOnList";
"fixNotes" -> "fixNotes";
"fixNotes" -> "x";
"fixOrEscape" -> "_";
"fixOrEscape" -> "isHorizontalRule";
"fixOrEscape" -> "isSpace";
"fixOrEscape" -> "sp";
"fixOrEscape" -> "startsWithMarker";
"fixOrEscape" -> "stringStartsWithSpace";
"fixOrEscape" -> "t";
"fixPlains" -> "_";
"fixPlains" -> "inList";
"fixPlains" -> "plainToPara";
"fixPlains" -> "x";
"fixTableBody" -> "attr";
"fixTableBody" -> "fixTableRows";
"fixTableHead" -> "attr";
"fixTableHead" -> "fixTableRows";
"fixTableRow" -> "_";
"fixTableRow" -> "fixTableRow";
"fixTableRow" -> "l";
"fixTableRows" -> "_";
"fixTableRows" -> "attr";
"fixTableRows" -> "fixTableRow";
"flatBlockListToMuse" -> "_";
"flatBlockListToMuse" -> "catWithBlankLines";
"flatToBullets" -> "flatToBullets\'";
"flatToBullets\'" -> "_";
"flatToBullets\'" -> "attr";
"flatToBullets\'" -> "flatToBullets\'";
"flatToBullets\'" -> "getLevelN";
"flatToBullets\'" -> "getListType";
"flatToBullets\'" -> "getNumIdN";
"flatToBullets\'" -> "separateBlocks";
"flatten" -> "_";
"flatten" -> "dropInlineParent";
"flatten" -> "mapNested";
"flatten" -> "setInlineChildren";
"foldM\'" -> "_";
"foldM\'" -> "a";
"foldM\'" -> "foldM\'";
"foldM\'" -> "x";
"foldS" -> "a";
"foldS" -> "x";
"fontChange" -> "a";
"fontPitchReader" -> "executeInSub";
"fontPitchReader" -> "findAttr\'";
"fontPitchReader" -> "ifFailedDo";
"fontPitchReader" -> "liftAsSuccess";
"fontPitchReader" -> "lookupDefaultingAttr";
"fontPitchReader" -> "returnV";
"fontPitchReader" -> "withEveryL";
"fontPitchReader" -> "x";
"fontSizeAttributes" -> "_";
"footRows" -> "_";
"footnote" -> "askF";
"footnote" -> "asksF";
"footnote" -> "between";
"footnote" -> "getExportSetting";
"footnote" -> "inlineNote";
"footnote" -> "nestedInlines";
"footnote" -> "note";
"footnote" -> "noteMarker";
"footnote" -> "referencedNote";
"footnote" -> "runF";
"footnote" -> "try";
"footnoteID" -> "tshow";
"footnoteSection" -> "nl";
"footnoteSection" -> "x";
"footnoteToICML" -> "block";
"footnoteToICML" -> "blockToICML";
"footnoteToICML" -> "inTags";
"footnoteToICML" -> "inTagsSimple";
"footnoteToICML" -> "intersperseBrs";
"forceFontSize" -> "x";
"forceResult" -> "_";
"forceResult" -> "err";
"forceResult" -> "expandFilterPath";
"forceResult" -> "x";
"forcedLinebreak" -> "readCslJson";
"forcedLinebreak" -> "try";
"foreignlanguage" -> "_";
"foreignlanguage" -> "babelLangToBCP47";
"foreignlanguage" -> "braced";
"foreignlanguage" -> "renderLang";
"foreignlanguage" -> "tok";
"foreignlanguage" -> "untokenize";
"formRow" -> "tableCellXWiki";
"formatFromExtension" -> "_";
"formatFromFilePath" -> "_";
"formatFromFilePath" -> "addMeta";
"formatFromFilePath" -> "defaultOpts";
"formatFromFilePath" -> "doOpt";
"formatFromFilePath" -> "t";
"formatFromFilePath" -> "x";
"formatFromFilePaths" -> "formatFromFilePath";
"formatFromFilePaths" -> "formatFromFilePaths";
"formatFromFilePaths" -> "x";
"formatSourceLine" -> "_";
"formatSourceLine" -> "formatToken";
"formatSourceLines" -> "formatSourceLine";
"formatTitle" -> "a";
"formatTitle" -> "blockToXml";
"formatTitle" -> "cMapM";
"formatTitle" -> "inlines";
"formatTitle" -> "split";
"formatToken" -> "applyTokStyToRunProps";
"formatToken" -> "txt";
"formattedRun" -> "getTextProps";
"formattedRun" -> "mknode";
"formattedString" -> "formattedRun";
"formattedString" -> "formattedString\'";
"formattedString" -> "mknode";
"formattedString" -> "splitTextBy";
"formattedString" -> "str";
"formattedString\'" -> "formattedRun";
"formattedString\'" -> "mktnode";
"formattedString\'" -> "str";
"formattedString\'" -> "stripInvalidChars";
"formulaStyle" -> "inTags";
"formulaStyle" -> "selfClosingTag";
"formulaStyles" -> "formulaStyle";
"fromBCP47" -> "fromBCP47\'";
"fromBCP47" -> "toLang";
"fromBCP47\'" -> "_";
"fromBCP47\'" -> "l";
"fromBodyRow" -> "_";
"fromBodyRow" -> "attr";
"fromBodyRow" -> "fromCell";
"fromCell" -> "_";
"fromCell" -> "inList";
"fromCslJson" -> "fromCslJson";
"fromCslJson" -> "t";
"fromCslJson" -> "x";
"fromEntities" -> "fromEntities\'";
"fromEntities\'" -> "_";
"fromEntities\'" -> "fromEntities\'";
"fromEntities\'" -> "isSpace";
"fromEntities\'" -> "t";
"fromEntities\'" -> "x";
"fromHeaderRow" -> "_";
"fromHeaderRow" -> "attr";
"fromHeaderRow" -> "fromCell";
"fromInline" -> "_";
"fromInline" -> "fromInlines";
"fromInline" -> "t";
"fromInlines" -> "fromInline";
"fromLeft" -> "_";
"fromLeft" -> "a";
"fromList" -> "empty";
"fromList" -> "insert";
"fromListingsLanguage" -> "listingsToLangMap";
"fromPandocCitations" -> "parseLocator";
"fromPandocCitations" -> "suffix";
"fromState" -> "x";
"fromString" -> "fromText";
"fromStringLazy" -> "fromTextLazy";
"fromStyles" -> "getExtraState";
"fromStyles" -> "keepingTheValue";
"fromTable" -> "attr";
"fromTable" -> "fromTableBody";
"fromTable" -> "fromTableFoot";
"fromTable" -> "fromTableHead";
"fromTableBody" -> "attr";
"fromTableBody" -> "fromBodyRow";
"fromTableBody" -> "fromHeaderRow";
"fromTableFoot" -> "attr";
"fromTableFoot" -> "fromHeaderRow";
"fromTableHead" -> "attr";
"fromTableHead" -> "fromHeaderRow";
"from_simple_table" -> "a";
"generic2pdf" -> "_";
"generic2pdf" -> "handlePDFProgramNotFound";
"generic2pdf" -> "pipeProcess";
"generic2pdf" -> "showVerboseInfo";
"generic2pdf" -> "source";
"generic2pdf" -> "when";
"genericBlock" -> "a";
"genericBlock" -> "blockMarkupArea";
"genericBlock" -> "blockMarkupLine";
"genericDrawer" -> "_";
"genericDrawer" -> "blocks";
"genericDrawer" -> "drawerEnd";
"genericDrawer" -> "drawerLine";
"genericDrawer" -> "drawerStart";
"genericDrawer" -> "parseFromString";
"genericDrawer" -> "try";
"genericExportSetting" -> "_";
"genericExportSetting" -> "a";
"genericExportSetting" -> "textStr";
"genericExportSetting" -> "try";
"genericListItemAtDepth" -> "anyListAtDepth";
"genericListItemAtDepth" -> "attributes";
"genericListItemAtDepth" -> "codeBlockHtml";
"genericListItemAtDepth" -> "inline";
"genericListItemAtDepth" -> "newline";
"genericListItemAtDepth" -> "try";
"genericListItemAtDepth" -> "whitespace";
"genericListStart" -> "eol";
"genericListStart" -> "skipSpaces1";
"genericListStart" -> "space";
"genericListStart" -> "spaceChar";
"genericListStart" -> "try";
"genericListStart" -> "whitespace";
"genericRow" -> "newline";
"genericRow" -> "spaces";
"genericRow" -> "tableCell";
"genericRow" -> "try";
"genericSwitch" -> "skipSpaces";
"genericSwitch" -> "switchPolarity";
"genericSwitch" -> "try";
"getAbstract" -> "addMeta";
"getAbstract" -> "getBlocks";
"getAbstract" -> "named";
"getAffiliations" -> "addMeta";
"getAffiliations" -> "getInlines";
"getAffiliations" -> "named";
"getAffiliations" -> "x";
"getAllExtensions" -> "_";
"getAllExtensions" -> "extensionsFromList";
"getAllExtensions" -> "pandocExtensions";
"getAttr" -> "attrValue";
"getAttr" -> "readAttrWithDefault";
"getAttr" -> "x";
"getAuthors" -> "_";
"getAuthors" -> "a";
"getAuthors" -> "addMeta";
"getAuthors" -> "attrValue";
"getAuthors" -> "authors";
"getAuthors" -> "getContrib";
"getAuthors" -> "getInlines";
"getAuthors" -> "named";
"getAuthors" -> "x";
"getBlocks" -> "elContent";
"getBlocks" -> "parseBlock";
"getCaption" -> "_";
"getCaption" -> "deNote";
"getCaption" -> "empty";
"getCaption" -> "inlineListToLaTeX";
"getCaption" -> "notesToLaTeX";
"getCaption" -> "txt";
"getCitations" -> "_";
"getCitations" -> "fromPandocCitations";
"getContentShape" -> "_";
"getContentShape" -> "getShapesByPlaceHolderType";
"getContentShape" -> "isElem";
"getContentShape" -> "sp";
"getContentShapeSize" -> "_";
"getContentShapeSize" -> "elemName";
"getContentShapeSize" -> "findAttrText";
"getContentShapeSize" -> "findChild";
"getContentShapeSize" -> "getContentShape";
"getContentShapeSize" -> "getMasterShapeDimensionsById";
"getContentShapeSize" -> "getShapeDimensions";
"getContentShapeSize" -> "isElem";
"getContentShapeSize" -> "sp";
"getContentType" -> "_";
"getContentType" -> "noPresML";
"getContentType" -> "presML";
"getContents" -> "hGetContents";
"getContrib" -> "getInlines";
"getContrib" -> "named";
"getContrib" -> "space";
"getContrib" -> "x";
"getCreator" -> "getList";
"getCreator" -> "meta";
"getCreator" -> "metaValueToString";
"getCurrentElement" -> "currentElement";
"getCurrentElement" -> "extractFromState";
"getCurrentElement" -> "x";
"getCurrentListLevel" -> "getExtraState";
"getData" -> "_";
"getData" -> "cssURLs";
"getData" -> "fetchItem";
"getData" -> "getInputFiles";
"getData" -> "raw";
"getData" -> "setInputFiles";
"getData" -> "x";
"getDataFileName" -> "liftIOError";
"getDataFileNames" -> "dataFiles";
"getDataFileNames" -> "x";
"getDataURI" -> "getData";
"getDataURI" -> "makeDataURI";
"getDataURI" -> "uri";
"getDataURI" -> "x";
"getDate" -> "getList";
"getDate" -> "getRawField";
"getDate" -> "meta";
"getDate" -> "metaValueToString";
"getDate" -> "normalizeDate\'";
"getDefaultExtensions" -> "_";
"getDefaultExtensions" -> "extensionsFromList";
"getDefaultExtensions" -> "getDefaultExtensions";
"getDefaultExtensions" -> "githubMarkdownExtensions";
"getDefaultExtensions" -> "multimarkdownExtensions";
"getDefaultExtensions" -> "pandocExtensions";
"getDefaultExtensions" -> "phpMarkdownExtraExtensions";
"getDefaultExtensions" -> "plainExtensions";
"getDefaultExtensions" -> "strictExtensions";
"getDefaultReferenceDocx" -> "fileExists";
"getDefaultReferenceDocx" -> "getCurrentTime";
"getDefaultReferenceDocx" -> "getUserDataDir";
"getDefaultReferenceDocx" -> "readDataFile";
"getDefaultReferenceDocx" -> "readFileLazy";
"getDefaultReferenceDocx" -> "toLazy";
"getDefaultReferenceODT" -> "fileExists";
"getDefaultReferenceODT" -> "getPOSIXTime";
"getDefaultReferenceODT" -> "getUserDataDir";
"getDefaultReferenceODT" -> "readDataFile";
"getDefaultReferenceODT" -> "readFileLazy";
"getDefaultReferencePptx" -> "fileExists";
"getDefaultReferencePptx" -> "getCurrentTime";
"getDefaultReferencePptx" -> "getUserDataDir";
"getDefaultReferencePptx" -> "readDataFile";
"getDefaultReferencePptx" -> "readFileLazy";
"getDefaultReferencePptx" -> "toLazy";
"getDefaultTableStyle" -> "findAttrText";
"getDefaultTableStyle" -> "parseXml";
"getDefaultTemplate" -> "_";
"getDefaultTemplate" -> "getDefaultTemplate";
"getDefaultTemplate" -> "readDataFile";
"getDocumentXmlPath" -> "_";
"getDocumentXmlPath" -> "findAttr";
"getEPUBMetadata" -> "addMetadataFromXML";
"getEPUBMetadata" -> "getRandomUUID";
"getEPUBMetadata" -> "meta";
"getEPUBMetadata" -> "metadataFromMeta";
"getEPUBMetadata" -> "showDateTimeISO8601";
"getEPUBMetadata" -> "stringify";
"getEPUBMetadata" -> "x";
"getElementStyleName" -> "el";
"getElementStyleName" -> "findAttrTextByName";
"getElementStyleName" -> "findChildByName";
"getExtraState" -> "extractFromState";
"getField" -> "a";
"getField" -> "latex";
"getField" -> "notFound";
"getField" -> "x";
"getFigure" -> "attrValue";
"getFigure" -> "getBlocks";
"getFigure" -> "getInlines";
"getFigure" -> "named";
"getFigure" -> "t";
"getFileInfo" -> "makeCanonical";
"getGraphic" -> "a";
"getGraphic" -> "attr";
"getGraphic" -> "attrValue";
"getGraphic" -> "title";
"getHeaderAnchor" -> "anchor";
"getHeaderAnchor" -> "extensionsFromList";
"getHeaderAnchor" -> "getExtraState";
"getHeaderAnchor" -> "modifyExtraState";
"getHeaderAnchor" -> "putPrettyAnchor";
"getHeaderAnchor" -> "title";
"getHeaderAnchor" -> "toList";
"getHeaderAnchor" -> "uniqueIdent";
"getHeaderAnchor" -> "usedAnchors";
"getHeaderLevel" -> "_";
"getHeaderLevel" -> "a";
"getHeaderLevel" -> "getElementStyleName";
"getHeaderLevel" -> "stringToInteger";
"getIdentifier" -> "getList";
"getIdentifier" -> "meta";
"getIdentifier" -> "metaValueToString";
"getIndent" -> "spaceChar";
"getInlines" -> "elContent";
"getInlines" -> "parseInline";
"getKey" -> "toKey";
"getLang" -> "_";
"getLang" -> "meta";
"getLayout" -> "parseXml";
"getLevel" -> "_";
"getLevel" -> "safeRead";
"getLevelN" -> "getLevel";
"getList" -> "meta";
"getListConstructor" -> "_";
"getListConstructor" -> "bulletList";
"getListConstructor" -> "x";
"getListLevelStyle" -> "_";
"getListType" -> "_";
"getListType" -> "isListItem";
"getListType" -> "listDelimMap";
"getListType" -> "listStyleMap";
"getListType" -> "safeRead";
"getListType" -> "t";
"getListType" -> "txt";
"getListingsLanguage" -> "toListingsLanguage";
"getLiteralList" -> "latex\'";
"getLiteralList" -> "notFound";
"getLiteralList" -> "toLiteralList";
"getLiteralList" -> "x";
"getLiteralList\'" -> "_";
"getLiteralList\'" -> "latex\'";
"getLiteralList\'" -> "notFound";
"getLiteralList\'" -> "splitByAnd";
"getLiteralList\'" -> "x";
"getManifest" -> "attrToNSPair";
"getManifest" -> "attrToPair";
"getManifest" -> "findElementE";
"getManifest" -> "findEntryByPathE";
"getManifest" -> "mkE";
"getManifest" -> "namespaces";
"getManifest" -> "parseXMLDocE";
"getMaster" -> "parseXml";
"getMasterShapeDimensionsById" -> "elemName";
"getMasterShapeDimensionsById" -> "elemToNameSpaces";
"getMasterShapeDimensionsById" -> "findChild";
"getMasterShapeDimensionsById" -> "getShapeDimensions";
"getMasterShapeDimensionsById" -> "isElem";
"getMasterShapeDimensionsById" -> "shapeHasId";
"getMasterShapeDimensionsById" -> "sp";
"getMediaNextNewName" -> "getMediaNextNewName";
"getMediaobject" -> "a";
"getMediaobject" -> "attr";
"getMediaobject" -> "attrValue";
"getMediaobject" -> "el";
"getMediaobject" -> "elContent";
"getMediaobject" -> "getCaption";
"getMediaobject" -> "named";
"getMediaobject" -> "parseInline";
"getMediaobject" -> "title";
"getMediaobject" -> "x";
"getMetaSlide" -> "authors";
"getMetaSlide" -> "inlinesToParElems";
"getMetaSlide" -> "lookupMetaInlines";
"getMetaSlide" -> "meta";
"getMetaSlide" -> "metadataSlideId";
"getMetaSlide" -> "title";
"getMimeType" -> "mimeTypes";
"getMimeTypeDef" -> "getMimeType";
"getModificationTime" -> "liftIOError";
"getNameList" -> "latexNames";
"getNameList" -> "notFound";
"getNameList" -> "x";
"getNextIndex" -> "findUsableIndex";
"getNextNumber" -> "_";
"getNextNumber" -> "doSI";
"getNextNumber" -> "doSIang";
"getNextNumber" -> "doSInum";
"getNextNumber" -> "doSInumlist";
"getNextNumber" -> "doSIrange";
"getNextNumber" -> "dosi";
"getNextNumber" -> "space";
"getNextNumber" -> "spaces";
"getNextNumber" -> "withRaw";
"getNotesMaster" -> "parseXml";
"getNumId" -> "_";
"getNumId" -> "baseListId";
"getNumId" -> "safeRead";
"getNumIdN" -> "getNumId";
"getNumInfo" -> "findAttrTextByName";
"getNumInfo" -> "findChildByName";
"getOldDate" -> "fixLeadingDash";
"getOldDate" -> "getField";
"getOldDate" -> "getRawField";
"getOldDate" -> "literal";
"getOldDate" -> "parseMonth";
"getOldDate" -> "prefix";
"getOldDate" -> "stringify";
"getOldDate" -> "x";
"getPOSIXTime" -> "getCurrentTime";
"getParStyleField" -> "_";
"getParStyleField" -> "getParentStyleValue";
"getParaModifier" -> "_MINIMUM_INDENTATION_FOR_BLOCKQUOTES_IN_MM_";
"getParaModifier" -> "_MINIMUM_INDENTATION_FOR_BLOCKQUOTES_IN_PERCENT_";
"getParaModifier" -> "blockQuote";
"getParaModifier" -> "indent";
"getParaModifier" -> "isBlockQuote";
"getParaProps" -> "a";
"getParaProps" -> "mknode";
"getParaProps" -> "squashProps";
"getParentStyleValue" -> "_";
"getParentStyleValue" -> "a";
"getParentStyleValue" -> "getParentStyleValue";
"getPeriodicalTitle" -> "getField";
"getPresentationSize" -> "_";
"getPresentationSize" -> "a";
"getPresentationSize" -> "elemName";
"getPresentationSize" -> "elemToNameSpaces";
"getPresentationSize" -> "findAttr";
"getPresentationSize" -> "findChild";
"getPrettyAnchor" -> "getExtraState";
"getPrettyAnchor" -> "lookupPrettyAnchor";
"getPrettyAnchor" -> "modifyExtraState";
"getPrettyAnchor" -> "putPrettyAnchor";
"getPrettyAnchor" -> "uniqueIdentFrom";
"getPrettyAnchor" -> "usedAnchors";
"getPureState" -> "a";
"getRandomUUID" -> "getUUID";
"getRandomUUID" -> "getWriter";
"getRandomUUID" -> "newStdGen";
"getRandomUUID" -> "writeAsciiDoc";
"getRandomUUID" -> "writeAsciiDoctor";
"getRandomUUID" -> "writeBeamer";
"getRandomUUID" -> "writeCommonMark";
"getRandomUUID" -> "writeConTeXt";
"getRandomUUID" -> "writeCslJson";
"getRandomUUID" -> "writeCustom";
"getRandomUUID" -> "writeDZSlides";
"getRandomUUID" -> "writeDocbook4";
"getRandomUUID" -> "writeDocbook5";
"getRandomUUID" -> "writeDocx";
"getRandomUUID" -> "writeDokuWiki";
"getRandomUUID" -> "writeEPUB2";
"getRandomUUID" -> "writeEPUB3";
"getRandomUUID" -> "writeFB2";
"getRandomUUID" -> "writeHaddock";
"getRandomUUID" -> "writeHtml4";
"getRandomUUID" -> "writeHtml4String";
"getRandomUUID" -> "writeHtml5";
"getRandomUUID" -> "writeHtml5String";
"getRandomUUID" -> "writeICML";
"getRandomUUID" -> "writeIpynb";
"getRandomUUID" -> "writeJATS";
"getRandomUUID" -> "writeJSON";
"getRandomUUID" -> "writeJatsArchiving";
"getRandomUUID" -> "writeJatsArticleAuthoring";
"getRandomUUID" -> "writeJatsPublishing";
"getRandomUUID" -> "writeJira";
"getRandomUUID" -> "writeLaTeX";
"getRandomUUID" -> "writeMan";
"getRandomUUID" -> "writeMarkdown";
"getRandomUUID" -> "writeMediaWiki";
"getRandomUUID" -> "writeMs";
"getRandomUUID" -> "writeMuse";
"getRandomUUID" -> "writeNative";
"getRandomUUID" -> "writeODT";
"getRandomUUID" -> "writeOPML";
"getRandomUUID" -> "writeOpenDocument";
"getRandomUUID" -> "writeOrg";
"getRandomUUID" -> "writePlain";
"getRandomUUID" -> "writePowerpoint";
"getRandomUUID" -> "writeRST";
"getRandomUUID" -> "writeRTF";
"getRandomUUID" -> "writeRevealJs";
"getRandomUUID" -> "writeS5";
"getRandomUUID" -> "writeSlideous";
"getRandomUUID" -> "writeSlidy";
"getRandomUUID" -> "writeTEI";
"getRandomUUID" -> "writeTexinfo";
"getRandomUUID" -> "writeTextile";
"getRandomUUID" -> "writeXWiki";
"getRandomUUID" -> "writeZimWiki";
"getRandomUUID" -> "writers";
"getRawCommand" -> "_";
"getRawCommand" -> "anyTok";
"getRawCommand" -> "braced";
"getRawCommand" -> "dimenarg";
"getRawCommand" -> "isFontSizeCommand";
"getRawCommand" -> "isWordTok";
"getRawCommand" -> "satisfyTok";
"getRawCommand" -> "skipopts";
"getRawCommand" -> "try";
"getRawCommand" -> "txt";
"getRawCommand" -> "untokenize";
"getRawCommand" -> "withRaw";
"getRawField" -> "notFound";
"getRawField" -> "x";
"getReader" -> "disableExtension";
"getReader" -> "enableExtension";
"getReader" -> "extensionEnabled";
"getReader" -> "getAllExtensions";
"getReader" -> "getDefaultExtensions";
"getReader" -> "parseFormatSpec";
"getReader" -> "readers";
"getReference" -> "_";
"getReference" -> "a";
"getReference" -> "attr";
"getReference" -> "getKey";
"getReference" -> "getNextIndex";
"getReference" -> "label";
"getReference" -> "literal";
"getReference" -> "t";
"getReference" -> "tshow";
"getReference" -> "when";
"getRefs" -> "cslJsonToReferences";
"getRefs" -> "metaValueToReference";
"getRefs" -> "pandocExtensions";
"getRefs" -> "raw";
"getRefs" -> "readBibtexString";
"getRefs" -> "tshow";
"getRefs" -> "yamlToRefs";
"getRefsFromBib" -> "_";
"getRefsFromBib" -> "fetchItem";
"getRefsFromBib" -> "formatFromExtension";
"getRefsFromBib" -> "getRefs";
"getRefsFromBib" -> "raw";
"getRels" -> "elementToRel";
"getRels" -> "findChildren";
"getRels" -> "parseXml";
"getShapeByPlaceHolderType" -> "getShapesByPlaceHolderType";
"getShapeByPlaceHolderTypes" -> "_";
"getShapeByPlaceHolderTypes" -> "getShapeByPlaceHolderType";
"getShapeByPlaceHolderTypes" -> "getShapeByPlaceHolderTypes";
"getShapeDimensions" -> "_";
"getShapeDimensions" -> "elemName";
"getShapeDimensions" -> "findAttr";
"getShapeDimensions" -> "findChild";
"getShapeDimensions" -> "isElem";
"getShapeDimensions" -> "x";
"getShapesByPlaceHolderType" -> "findPHType";
"getShapesByPlaceHolderType" -> "isElem";
"getShortTitle" -> "containsColon";
"getShortTitle" -> "getTitle";
"getShortTitle" -> "splitStrWhen";
"getShortTitle" -> "upToColon";
"getSize" -> "_";
"getSize" -> "meta";
"getSize" -> "x";
"getSlideLevel" -> "_";
"getSlideLevel" -> "x";
"getSlideNumberFieldId" -> "elemName";
"getSlideNumberFieldId" -> "elemToNameSpaces";
"getSlideNumberFieldId" -> "findAttrText";
"getSlideNumberFieldId" -> "findChild";
"getSlideNumberFieldId" -> "getShapeByPlaceHolderType";
"getSlideNumberFieldId" -> "sp";
"getStyleByName" -> "fromStyles";
"getStyleByName" -> "lookupStyle";
"getStyleByName" -> "maybeToChoice";
"getStyleChildren" -> "a";
"getStyleChildren" -> "isBasedOnStyle";
"getStyleChildren" -> "isElem";
"getStyleFamily" -> "getStyleFamily";
"getStyleFamily" -> "parents";
"getStyleIdFromName" -> "fromString";
"getStyleIdFromName" -> "isSpace";
"getStyleMaps" -> "archiveToStyles\'";
"getStyleMaps" -> "removeFormatting";
"getStyleMaps" -> "trimr";
"getStyleMaps" -> "tshow";
"getSymChar" -> "_";
"getSymChar" -> "findAttrByName";
"getT2TMeta" -> "_";
"getTag" -> "a";
"getTag" -> "x";
"getTarget" -> "_";
"getTemplate" -> "_";
"getTemplate" -> "fetchItem";
"getTemplate" -> "readDataFile";
"getText" -> "_";
"getTextProps" -> "a";
"getTextProps" -> "mknode";
"getTextProps" -> "squashProps";
"getTitle" -> "addMeta";
"getTitle" -> "getField";
"getTitle" -> "getInlines";
"getTitle" -> "getList";
"getTitle" -> "meta";
"getTitle" -> "metaValueToString";
"getTitle" -> "named";
"getTitle" -> "unTitlecase";
"getTitle" -> "when";
"getTitleAndAlt" -> "findAttrTextByName";
"getTitleAndAlt" -> "findChildByName";
"getTitleAndAlt" -> "title";
"getTrackedChange" -> "_";
"getTrackedChange" -> "findAttrTextByName";
"getTrackedChange" -> "isElem";
"getTranslations" -> "_";
"getTranslations" -> "readDataFile";
"getTranslations" -> "readTranslations";
"getTranslations" -> "renderLang";
"getTranslations" -> "report";
"getTranslations" -> "t";
"getTypeAndGenre" -> "_";
"getTypeAndGenre" -> "getRawField";
"getTypeAndGenre" -> "resolveKey\'";
"getUUID" -> "_";
"getUUID" -> "a";
"getUUID" -> "l";
"getWriter" -> "disableExtension";
"getWriter" -> "enableExtension";
"getWriter" -> "extensionEnabled";
"getWriter" -> "getAllExtensions";
"getWriter" -> "getDefaultExtensions";
"getWriter" -> "parseFormatSpec";
"getWriter" -> "writers";
"getXrefFields" -> "getXrefFields";
"getXrefFields" -> "identifier";
"getXrefFields" -> "splitKeys";
"getXrefFields" -> "transformKey";
"getXrefFields" -> "x";
"getZonedTime" -> "getCurrentTime";
"getZonedTime" -> "getCurrentTimeZone";
"getZonedTime" -> "t";
"getsPureState" -> "getPureState";
"githubMarkdownExtensions" -> "extensionsFromList";
"glob" -> "liftIOError";
"gobbleAtMostSpaces" -> "eatOneSpaceOfTab";
"gobbleAtMostSpaces" -> "gobbleAtMostSpaces";
"gobbleAtMostSpaces" -> "t";
"gobbleSpaces" -> "eatOneSpaceOfTab";
"gobbleSpaces" -> "gobbleSpaces";
"gobbleSpaces" -> "try";
"graphicFrameToElements" -> "_";
"graphicFrameToElements" -> "captionHeight";
"graphicFrameToElements" -> "createCaption";
"graphicFrameToElements" -> "elemToNameSpaces";
"graphicFrameToElements" -> "getContentShapeSize";
"graphicFrameToElements" -> "getMaster";
"graphicFrameToElements" -> "graphicToElement";
"graphicFrameToElements" -> "mknode";
"graphicFrameToElements" -> "x";
"graphicToElement" -> "_";
"graphicToElement" -> "getDefaultTableStyle";
"graphicToElement" -> "mknode";
"graphicToElement" -> "paragraphToElement";
"graphicsPath" -> "bgroup";
"graphicsPath" -> "braced";
"graphicsPath" -> "egroup";
"graphicsPath" -> "getResourcePath";
"graphicsPath" -> "setResourcePath";
"graphicsPath" -> "spaces";
"graphicsPath" -> "untokenize";
"gridDashedLines" -> "blankline";
"gridDashedLines" -> "gridPart";
"gridDashedLines" -> "try";
"gridTable" -> "a";
"gridTable" -> "blocks";
"gridTable" -> "empty";
"gridTable" -> "gridTableWith";
"gridTable" -> "gridTableWith\'";
"gridTable" -> "parseBlocks";
"gridTable" -> "vcat";
"gridTable" -> "x";
"gridTableFooter" -> "blanklines";
"gridTableHeader" -> "blanklines";
"gridTableHeader" -> "blocks";
"gridTableHeader" -> "gridDashedLines";
"gridTableHeader" -> "gridTableSep";
"gridTableHeader" -> "gridTableSplitLine";
"gridTableHeader" -> "many1Till";
"gridTableHeader" -> "newline";
"gridTableHeader" -> "parseFromString\'";
"gridTableHeader" -> "trim";
"gridTableHeader" -> "try";
"gridTableRawLine" -> "gridTableSplitLine";
"gridTableRawLine" -> "many1Till";
"gridTableRawLine" -> "newline";
"gridTableRow" -> "blocks";
"gridTableRow" -> "compactify";
"gridTableRow" -> "gridTableRawLine";
"gridTableRow" -> "parseFromString\'";
"gridTableRow" -> "removeOneLeadingSpace";
"gridTableRow" -> "x";
"gridTableSep" -> "gridDashedLines";
"gridTableSep" -> "try";
"gridTableSplitLine" -> "removeFinalBar";
"gridTableSplitLine" -> "splitTextByIndices";
"gridTableSplitLine" -> "trimr";
"gridTableStart" -> "skipSpaces";
"gridTableStart" -> "try";
"gridTableWith" -> "blocks";
"gridTableWith" -> "gridTableFooter";
"gridTableWith" -> "gridTableHeader";
"gridTableWith" -> "gridTableRow";
"gridTableWith" -> "gridTableSep";
"gridTableWith" -> "tableWith";
"gridTableWith\'" -> "blocks";
"gridTableWith\'" -> "gridTableFooter";
"gridTableWith\'" -> "gridTableHeader";
"gridTableWith\'" -> "gridTableRow";
"gridTableWith\'" -> "gridTableSep";
"gridTableWith\'" -> "tableWith\'";
"grouped" -> "bgroup";
"grouped" -> "egroup";
"grouped" -> "grouped";
"grouped" -> "try";
"groupedInlineMarkup" -> "inlineMarkup";
"groupedInlineMarkup" -> "try";
"groupedInlineMarkup" -> "whitespace";
"groupingContent" -> "addLogMessage";
"groupingContent" -> "readHaddock";
"guardDisabled" -> "a";
"guardDisabled" -> "extensionEnabled";
"guardEnabled" -> "a";
"guardEnabled" -> "extensionEnabled";
"guardOrSmartEnabled" -> "extensionEnabled";
"hGetContents" -> "toString";
"hPutStr" -> "hPutStrWith";
"hPutStrLn" -> "hPutStrLnWith";
"hPutStrLnWith" -> "eol";
"hPutStrWith" -> "eol";
"handleAndFilterSpeakerNotes" -> "handleAndFilterSpeakerNotes\'";
"handleAndFilterSpeakerNotes\'" -> "handleSpeakerNotes";
"handleAndFilterSpeakerNotes\'" -> "isNotesDiv";
"handleCSSUrl" -> "cssURLs";
"handleCSSUrl" -> "fromText";
"handleCSSUrl" -> "getData";
"handleCSSUrl" -> "isURI";
"handleCSSUrl" -> "raw";
"handleCSSUrl" -> "trim";
"handleCSSUrl" -> "uri";
"handleCSSUrl" -> "url";
"handleCitationPart" -> "_";
"handleCitationPart" -> "addPrefix";
"handleCitationPart" -> "addSuffix";
"handleCitationPart" -> "toList";
"handleData" -> "_";
"handleData" -> "encode";
"handleData" -> "extensionFromMimeType";
"handleData" -> "insertMedia";
"handleData" -> "jsonMetaToPairs";
"handleData" -> "meta";
"handleData" -> "sha1";
"handleData" -> "t";
"handleData" -> "toStringLazy";
"handleError" -> "_";
"handleError" -> "a";
"handleError" -> "err";
"handleError" -> "tshow";
"handleImages" -> "convertImages";
"handleImages" -> "extractMedia";
"handleImages" -> "fillMediaBag";
"handleInlineMacro" -> "_";
"handleInlineMacro" -> "emph";
"handleInlineMacro" -> "linePartsToInlines";
"handleInlineMacro" -> "linebreak";
"handleInlineMacro" -> "parseAlternatingFonts";
"handleInlineMacro" -> "parseBold";
"handleInlineMacro" -> "parseEmailLink";
"handleInlineMacro" -> "parseItalic";
"handleInlineMacro" -> "parseLink";
"handleInlineMacro" -> "str";
"handleInlineMacro" -> "strong";
"handleInlineMacro" -> "x";
"handleInstructions" -> "handleInstructions\'";
"handleInstructions\'" -> "handleInstructions\'";
"handleListParagraphs" -> "_";
"handleListParagraphs" -> "handleListParagraphs";
"handleListParagraphs" -> "listParagraphDivs";
"handleMathComment" -> "_";
"handleNote" -> "_";
"handleNote" -> "blockListToMs";
"handleNote" -> "literal";
"handleNotes" -> "handleNote";
"handleNotes" -> "vcat";
"handleSpaces" -> "_";
"handleSpaces" -> "empty";
"handleSpaces" -> "selfClosingTag";
"handleSpaces" -> "t";
"handleSpaces" -> "tag";
"handleSpaces" -> "tshow";
"handleSpaces" -> "when";
"handleSpaces" -> "x";
"handleSpeakerNotes" -> "blockToSpeakerNotes";
"handleTaskListItem" -> "a";
"handleTaskListItem" -> "extensionEnabled";
"handleUnicode" -> "tshow";
"handleUnicode" -> "x";
"handleUnrecognizedOption" -> "handleUnrecognizedOption";
"handleUnrecognizedOption" -> "x";
"hasDefMarker" -> "spaceChars";
"hasDefMarkerM" -> "defMarkerM";
"hasDefMarkerM" -> "manyTillChar";
"hasDefMarkerM" -> "try";
"hasLineBreaks" -> "_";
"hasLineBreaks" -> "isLineBreak";
"hasLineBreaks" -> "removeNote";
"hasLineBreaks" -> "x";
"hasStylesInheritedFrom" -> "isInheritedFromStyles";
"hasTagWarning" -> "_";
"headRows" -> "_";
"header" -> "a";
"header" -> "attr";
"header" -> "attributes";
"header" -> "atxHeader";
"header" -> "authorline";
"header" -> "dateline";
"header" -> "doubleHeader";
"header" -> "guardColumnOne";
"header" -> "inline";
"header" -> "isEnabled";
"header" -> "makeId";
"header" -> "manyTillChar";
"header" -> "modifyIdentifier";
"header" -> "newline";
"header" -> "registerHeader";
"header" -> "setextHeader";
"header" -> "singleHeader";
"header" -> "skipSpaces";
"header" -> "sp";
"header" -> "spaceChar";
"header" -> "titleline";
"header" -> "try";
"header" -> "tryMsg";
"header" -> "whitespace";
"headerBlock" -> "_";
"headerBlock" -> "doubleHeader\'";
"headerBlock" -> "raw";
"headerBlock" -> "registerHeader";
"headerBlock" -> "singleHeader\'";
"headerBlock" -> "stringify";
"headerBlock" -> "toKey";
"headerBlock" -> "txt";
"headerBlock" -> "withRaw";
"headerLevel" -> "safeRead";
"headerLtEq" -> "_";
"headerLtEq" -> "headerLtEq";
"headerLtEq" -> "l";
"headerRow" -> "genericRow";
"headerRowsToHtml" -> "attr";
"headerRowsToHtml" -> "rowListToHtml";
"headerRowsToJats" -> "attr";
"headerRowsToJats" -> "rowListToJats";
"headerShift" -> "_";
"headerShift" -> "attr";
"headerShift" -> "headerShift";
"headerShift" -> "meta";
"headerShift" -> "x";
"headerStart" -> "try";
"headerStart" -> "updateLastPreCharPos";
"headerline" -> "blankline";
"headerline" -> "try";
"headingStart" -> "eol";
"headingStart" -> "firstColumn";
"headingStart" -> "parseAnchor";
"headingStart" -> "spaceChar";
"headingStart" -> "try";
"headline" -> "a";
"headline" -> "blocks";
"headline" -> "emptyPlanning";
"headline" -> "headerStart";
"headline" -> "headline";
"headline" -> "inline";
"headline" -> "newline";
"headline" -> "orgTagWord";
"headline" -> "planningInfo";
"headline" -> "propertiesDrawer";
"headline" -> "skipSpaces";
"headline" -> "title";
"headline" -> "toTag";
"headline" -> "todoKeyword";
"headline" -> "trimInlinesF";
"headline" -> "try";
"headline" -> "x";
"headlineToBlocks" -> "_";
"headlineToBlocks" -> "archivedHeadlineToBlocks";
"headlineToBlocks" -> "getExportSetting";
"headlineToBlocks" -> "headlineToHeaderWithContents";
"headlineToBlocks" -> "headlineToHeaderWithList";
"headlineToBlocks" -> "isArchiveTag";
"headlineToBlocks" -> "isCommentTitle";
"headlineToHeader" -> "attr";
"headlineToHeader" -> "getExportSetting";
"headlineToHeader" -> "propertiesToAttr";
"headlineToHeader" -> "registerHeader";
"headlineToHeader" -> "tagsToInlines";
"headlineToHeader" -> "todoKeywordToInlines";
"headlineToHeaderWithContents" -> "header";
"headlineToHeaderWithContents" -> "headlineToBlocks";
"headlineToHeaderWithContents" -> "headlineToHeader";
"headlineToHeaderWithContents" -> "planningToBlock";
"headlineToHeaderWithList" -> "_";
"headlineToHeaderWithList" -> "getExportSetting";
"headlineToHeaderWithList" -> "header";
"headlineToHeaderWithList" -> "headlineToBlocks";
"headlineToHeaderWithList" -> "headlineToHeader";
"headlineToHeaderWithList" -> "planningToBlock";
"highlight" -> "a";
"highlight" -> "keyvals";
"highlight" -> "safeRead";
"highlight" -> "syntax";
"highlight" -> "tokenize";
"highlightCode" -> "attr";
"highlightCode" -> "escapeStr";
"highlightCode" -> "highlight";
"highlightCode" -> "literal";
"highlightCode" -> "msFormatter";
"highlightCode" -> "report";
"highlightCode" -> "str";
"hline" -> "controlSeq";
"hline" -> "newline";
"hline" -> "opt";
"hline" -> "skipSpaces";
"hline" -> "spaces";
"hline" -> "try";
"horizontalLine" -> "eol";
"horizontalLine" -> "try";
"horizontalRule" -> "hline";
"horizontalRule" -> "newline";
"horizontalRule" -> "skipSpaces";
"horizontalRule" -> "try";
"hr" -> "newline";
"hr" -> "try";
"hrule" -> "blankline";
"hrule" -> "blanklines";
"hrule" -> "isHruleChar";
"hrule" -> "newline";
"hrule" -> "skipSpaces";
"hrule" -> "spaceChar";
"hrule" -> "spaces";
"hrule" -> "try";
"hrule" -> "underlineChars";
"html2pdf" -> "_";
"html2pdf" -> "handlePDFProgramNotFound";
"html2pdf" -> "pipeProcess";
"html2pdf" -> "showVerboseInfo";
"html2pdf" -> "source";
"html2pdf" -> "when";
"html5EntityMap" -> "_";
"htmlAttrToPandoc" -> "keyvals";
"htmlBlock" -> "_";
"htmlBlock" -> "guardEnabled";
"htmlBlock" -> "htmlBlock\'";
"htmlBlock" -> "htmlTag";
"htmlBlock" -> "isBlockTag";
"htmlBlock" -> "rawHtmlBlocks";
"htmlBlock" -> "rawVerbatimBlock";
"htmlBlock" -> "try";
"htmlBlock\'" -> "blanklines";
"htmlBlock\'" -> "htmlElement";
"htmlBlock\'" -> "spaceChar";
"htmlBlock\'" -> "try";
"htmlComment" -> "htmlTag";
"htmlComment" -> "isCommentTag";
"htmlComment" -> "try";
"htmlElement" -> "_";
"htmlElement" -> "attr";
"htmlElement" -> "blankline";
"htmlElement" -> "htmlAttrToPandoc";
"htmlElement" -> "htmlTag";
"htmlElement" -> "isBlockTag";
"htmlElement" -> "rawVerbatimBlock";
"htmlElement" -> "skipSpaces";
"htmlElement" -> "strictHtmlBlock";
"htmlElement" -> "tag";
"htmlElement" -> "trim";
"htmlElement" -> "try";
"htmlElement" -> "tryMsg";
"htmlInBalanced" -> "_";
"htmlInBalanced" -> "anyLine";
"htmlInBalanced" -> "hasTagWarning";
"htmlInBalanced" -> "htmlInBalanced\'";
"htmlInBalanced" -> "parseOptions";
"htmlInBalanced" -> "t";
"htmlInBalanced" -> "try";
"htmlInBalanced" -> "x";
"htmlInBalanced\'" -> "_";
"htmlInBalanced\'" -> "a";
"htmlInBalanced\'" -> "t";
"htmlTag" -> "_";
"htmlTag" -> "attr";
"htmlTag" -> "parseOptions";
"htmlTag" -> "try";
"hyperlink" -> "_";
"hyperlink" -> "blocksToDefinitions";
"hyperlink" -> "braced";
"hyperlink" -> "fieldArgument";
"hyperlink" -> "hyperlinkSwitch";
"hyperlink" -> "link";
"hyperlink" -> "listParagraphDivs";
"hyperlink" -> "listParagraphStyles";
"hyperlink" -> "space";
"hyperlink" -> "spaces";
"hyperlink" -> "tok";
"hyperlink" -> "try";
"hyperlink" -> "untokenize";
"hyperlink" -> "url";
"hyperlinkSwitch" -> "fieldArgument";
"hyperlinkSwitch" -> "spaces";
"hyperlinksToDoc" -> "empty";
"hyperlinksToDoc" -> "escapeColons";
"hyperlinksToDoc" -> "hyperlinksToDoc";
"hyperlinksToDoc" -> "inTags";
"hyperlinksToDoc" -> "makeDest";
"hyperlinksToDoc" -> "selfClosingTag";
"hyperlinksToDoc" -> "tshow";
"hyperlinksToDoc" -> "url";
"hyperlinksToDoc" -> "x";
"hypertarget" -> "_";
"hypertarget" -> "empty";
"hypertarget" -> "literal";
"hypertarget" -> "toLabel";
"hypertarget" -> "x";
"hypertargetBlock" -> "_";
"hypertargetBlock" -> "block";
"hypertargetBlock" -> "braced";
"hypertargetBlock" -> "grouped";
"hypertargetBlock" -> "toList";
"hypertargetBlock" -> "try";
"hypertargetBlock" -> "untokenize";
"hypertargetInline" -> "braced";
"hypertargetInline" -> "grouped";
"hypertargetInline" -> "inline";
"hypertargetInline" -> "try";
"hypertargetInline" -> "untokenize";
"hyphenedWords" -> "try";
"hyphenedWords" -> "wordChunk";
"hyphenedWords" -> "x";
"hyphens" -> "endline";
"hyphens" -> "many1Char";
"iconUnicode" -> "applyMacros";
"iconUnicode" -> "babelLangToBCP47";
"iconUnicode" -> "inlineCommand";
"iconUnicode" -> "rawLaTeXBlock";
"iconUnicode" -> "rawLaTeXInline";
"iconUnicode" -> "readFileFromDirs";
"iconUnicode" -> "report";
"iconUnicode" -> "setResourcePath";
"iconUnicode" -> "setTranslations";
"iconUnicode" -> "space";
"iconUnicode" -> "spaces";
"iconUnicode" -> "tokenize";
"iconUnicode" -> "translateTerm";
"iconUnicode" -> "untokenize";
"iconUnicode" -> "withRaw";
"idAndRole" -> "getMimeTypeDef";
"identifierAttr" -> "identifier";
"identifierAttr" -> "try";
"ifFailedDo" -> "_";
"ifFailedDo" -> "a";
"ifFailedDo" -> "ifFailedDo";
"ifFailedDo" -> "keepingTheValue";
"ifFailedDo" -> "x";
"ifToggle" -> "braced";
"ifToggle" -> "report";
"ifToggle" -> "spaces";
"ifToggle" -> "untokenize";
"ifdim" -> "anyTok";
"ifdim" -> "controlSeq";
"ifdim" -> "untokenize";
"ifstrequal" -> "braced";
"ifstrequal" -> "tok";
"ignHeaders" -> "anyLine";
"ignHeaders" -> "newline";
"ignorableRow" -> "_";
"ignorableRow" -> "anyLine";
"ignorableRow" -> "attributes";
"ignorableRow" -> "try";
"ignore" -> "a";
"ignore" -> "logMessage";
"ignore" -> "raw";
"ignore" -> "report";
"ignoreAndWarn" -> "many1Char";
"ignoreAndWarn" -> "nonspaceChar";
"ignoreAndWarn" -> "opt";
"ignoreAndWarn" -> "report";
"ignoreAndWarn" -> "try";
"ignoreSigPipe" -> "_";
"ignoreSigPipe" -> "getDefaultExtensions";
"ignoreSigPipe" -> "getReader";
"ignoreSigPipe" -> "readBibLaTeX";
"ignoreSigPipe" -> "readBibTeX";
"ignoreSigPipe" -> "readCSV";
"ignoreSigPipe" -> "readCommonMark";
"ignoreSigPipe" -> "readCreole";
"ignoreSigPipe" -> "readCslJson";
"ignoreSigPipe" -> "readDocBook";
"ignoreSigPipe" -> "readDocx";
"ignoreSigPipe" -> "readDokuWiki";
"ignoreSigPipe" -> "readEPUB";
"ignoreSigPipe" -> "readFB2";
"ignoreSigPipe" -> "readHaddock";
"ignoreSigPipe" -> "readHtml";
"ignoreSigPipe" -> "readIpynb";
"ignoreSigPipe" -> "readJATS";
"ignoreSigPipe" -> "readJSON";
"ignoreSigPipe" -> "readJira";
"ignoreSigPipe" -> "readLaTeX";
"ignoreSigPipe" -> "readMarkdown";
"ignoreSigPipe" -> "readMediaWiki";
"ignoreSigPipe" -> "readMuse";
"ignoreSigPipe" -> "readNative";
"ignoreSigPipe" -> "readOPML";
"ignoreSigPipe" -> "readOdt";
"ignoreSigPipe" -> "readOrg";
"ignoreSigPipe" -> "readRST";
"ignoreSigPipe" -> "readTWiki";
"ignoreSigPipe" -> "readTextile";
"ignoreSigPipe" -> "readTikiWiki";
"ignoreSigPipe" -> "readTxt2Tags";
"ignoreSigPipe" -> "readVimwiki";
"ignoreSigPipe" -> "readers";
"ignoreSpacesCap" -> "countChar";
"ignoreSpacesCap" -> "definitionList";
"ignoreSpacesCap" -> "displayMath";
"ignoreSpacesCap" -> "emph";
"ignoreSpacesCap" -> "horizontalRule";
"ignoreSpacesCap" -> "image";
"ignoreSpacesCap" -> "isURI";
"ignoreSpacesCap" -> "link";
"ignoreSpacesCap" -> "many1Char";
"ignoreSpacesCap" -> "many1Till";
"ignoreSpacesCap" -> "many1TillChar";
"ignoreSpacesCap" -> "manyChar";
"ignoreSpacesCap" -> "manyTillChar";
"ignoreSpacesCap" -> "math";
"ignoreSpacesCap" -> "orderedList";
"ignoreSpacesCap" -> "orderedListMarker";
"ignoreSpacesCap" -> "para";
"ignoreSpacesCap" -> "plain";
"ignoreSpacesCap" -> "readWithM";
"ignoreSpacesCap" -> "registerHeader";
"ignoreSpacesCap" -> "simpleTable";
"ignoreSpacesCap" -> "space";
"ignoreSpacesCap" -> "spaceChar";
"ignoreSpacesCap" -> "spaces";
"ignoreSpacesCap" -> "str";
"ignoreSpacesCap" -> "strikeout";
"ignoreSpacesCap" -> "strong";
"ignoreSpacesCap" -> "subscript";
"ignoreSpacesCap" -> "superscript";
"ignoreSpacesCap" -> "textStr";
"ignoreSpacesCap" -> "tshow";
"ignoreSpacesCap" -> "uri";
"ignoredSetting" -> "nonspaceChar";
"ignoredSetting" -> "textStr";
"ignoredSetting" -> "try";
"ignoringState" -> "a";
"ilModifierAndInnards" -> "_";
"ilModifierAndInnards" -> "attr";
"ilModifierAndInnards" -> "emph";
"ilModifierAndInnards" -> "fromList";
"ilModifierAndInnards" -> "strikeout";
"ilModifierAndInnards" -> "strong";
"ilModifierAndInnards" -> "subscript";
"ilModifierAndInnards" -> "superscript";
"ilModifierAndInnards" -> "underline";
"ilModifierAndInnards" -> "x";
"image" -> "_";
"image" -> "a";
"image" -> "addUnderscores";
"image" -> "attr";
"image" -> "attributes";
"image" -> "description";
"image" -> "imageAttr";
"image" -> "imageIdentifiers";
"image" -> "imageOption";
"image" -> "images";
"image" -> "inline";
"image" -> "isWidthHeightParameter";
"image" -> "linkContent";
"image" -> "many1Char";
"image" -> "manyChar";
"image" -> "manyUntilChar";
"image" -> "normalizePath";
"image" -> "oneOfStrings";
"image" -> "parseLink";
"image" -> "parseWidthHeight";
"image" -> "pickStylesToKVs";
"image" -> "reference";
"image" -> "referenceLink";
"image" -> "regLink";
"image" -> "space";
"image" -> "spaceChar";
"image" -> "spaces";
"image" -> "stringify";
"image" -> "sym";
"image" -> "textStr";
"image" -> "title";
"image" -> "trim";
"image" -> "try";
"image" -> "url";
"image" -> "urlToText";
"imageArguments" -> "a";
"imageArguments" -> "attr";
"imageArguments" -> "dimension";
"imageArguments" -> "empty";
"imageArguments" -> "inlineListToAsciiDoc";
"imageArguments" -> "literal";
"imageArguments" -> "showInPixel";
"imageArguments" -> "title";
"imageArguments" -> "txt";
"imageAttr" -> "try";
"imageDims" -> "_";
"imageDims" -> "attr";
"imageDims" -> "dimension";
"imageDims" -> "escapeStringForXML";
"imageDims" -> "fromEntities";
"imageDims" -> "html4Attributes";
"imageDims" -> "html5Attributes";
"imageDims" -> "inTags";
"imageDims" -> "inTagsIndented";
"imageDims" -> "inTagsSimple";
"imageDims" -> "rdfaAttributes";
"imageDims" -> "selfClosingTag";
"imageDims" -> "showInPixel";
"imageDims" -> "toEntities";
"imageDims" -> "toHtml5Entities";
"imageDimsToRST" -> "_";
"imageDimsToRST" -> "a";
"imageDimsToRST" -> "attr";
"imageDimsToRST" -> "dimension";
"imageDimsToRST" -> "empty";
"imageDimsToRST" -> "literal";
"imageICML" -> "_";
"imageICML" -> "attr";
"imageICML" -> "desiredSizeInPoints";
"imageICML" -> "fetchItem";
"imageICML" -> "image";
"imageICML" -> "imageSize";
"imageICML" -> "inTags";
"imageICML" -> "isURI";
"imageICML" -> "report";
"imageICML" -> "selfClosingTag";
"imageICML" -> "showFl";
"imageICML" -> "sizeInPoints";
"imageICML" -> "styleToStrAttr";
"imageICML" -> "tshow";
"imageICML" -> "vcat";
"imageIdentifiers" -> "identifier";
"imageIdentifiers" -> "sym";
"imageLink" -> "image";
"imageLink" -> "l";
"imageLink" -> "manyTillChar";
"imageLink" -> "space";
"imageLink" -> "try";
"imageMimeType" -> "getMimeType";
"imageOption" -> "oneOfStrings";
"imageOption" -> "opt";
"imageOption" -> "textStr";
"imageOption" -> "try";
"imageSize" -> "_";
"imageSize" -> "emfSize";
"imageSize" -> "epsSize";
"imageSize" -> "getSize";
"imageSize" -> "imageType";
"imageSize" -> "pdfSize";
"imageSize" -> "svgSize";
"imageSize" -> "x";
"imageToDocbook" -> "_";
"imageToDocbook" -> "a";
"imageToDocbook" -> "attr";
"imageToDocbook" -> "dimension";
"imageToDocbook" -> "idAndRole";
"imageToDocbook" -> "selfClosingTag";
"imageToDocbook" -> "tshow";
"imageToJira" -> "_";
"imageToJira" -> "singleton";
"imageToJira" -> "stringify";
"imageToJira" -> "title";
"imageToMediaWiki" -> "_";
"imageToMediaWiki" -> "attr";
"imageToMediaWiki" -> "dimension";
"imageToMediaWiki" -> "showInPixel";
"imageToTEI" -> "a";
"imageToTEI" -> "attr";
"imageToTEI" -> "dimension";
"imageToTEI" -> "idFromAttr";
"imageToTEI" -> "selfClosingTag";
"imageToTEI" -> "tshow";
"imageType" -> "_";
"imageType" -> "findSvgTag";
"image_attributes" -> "_";
"image_attributes" -> "x";
"images" -> "inline";
"images" -> "makeAttr";
"images" -> "manyTillChar";
"images" -> "procImgurl";
"images" -> "try";
"imgAttrsToHtml" -> "_";
"imgAttrsToHtml" -> "attr";
"imgAttrsToHtml" -> "attrsToHtml";
"imgAttrsToHtml" -> "dimensionsToAttrList";
"imgAttrsToHtml" -> "toAttrs";
"inBlockQuote" -> "_";
"inBlockQuote" -> "block";
"inBlockQuote" -> "blockToOpenDocument";
"inBlockQuote" -> "empty";
"inBlockQuote" -> "inBlockQuote";
"inBlockQuote" -> "inParagraphTagsWithStyle";
"inBlockQuote" -> "increaseIndent";
"inBlockQuote" -> "inlinesToOpenDocument";
"inBlockQuote" -> "l";
"inBlockQuote" -> "paraStyle";
"inBlockQuote" -> "plainToPara";
"inBlockQuote" -> "resetIndent";
"inBlockQuote" -> "tshow";
"inBookmarkTags" -> "selfClosingTag";
"inBraces" -> "braced";
"inBraces" -> "inBraces";
"inBraces" -> "take1WhileP";
"inBrackets" -> "manyChar";
"inBrackets" -> "str";
"inBrackets" -> "x";
"inCmd" -> "literal";
"inDirectory" -> "a";
"inDiv" -> "x";
"inEm" -> "inInch";
"inHeaderTags" -> "inBookmarkTags";
"inHeaderTags" -> "inTags";
"inHeaderTags" -> "tshow";
"inInch" -> "_";
"inInch" -> "a";
"inList" -> "env";
"inNote" -> "note";
"inNote" -> "para";
"inNote" -> "str";
"inOneParen" -> "try";
"inParagraphTags" -> "a";
"inParagraphTags" -> "inTags";
"inParagraphTagsWithStyle" -> "inTags";
"inPeriod" -> "try";
"inPixel" -> "_";
"inPixel" -> "a";
"inPoints" -> "inInch";
"inPreformattedTags" -> "handleSpaces";
"inPreformattedTags" -> "inParagraphTagsWithStyle";
"inPreformattedTags" -> "paraStyle";
"inPreformattedTags" -> "tshow";
"inQuotes" -> "braced";
"inQuotes" -> "escapedQuote";
"inQuotes" -> "inBraces";
"inQuotes" -> "take1WhileP";
"inQuotes" -> "try";
"inSpanTags" -> "a";
"inSpanTags" -> "inTags";
"inTags" -> "a";
"inTags" -> "attributeList";
"inTags" -> "closeTag";
"inTags" -> "openTag";
"inTagsIndented" -> "a";
"inTagsIndented" -> "inTags";
"inTagsSimple" -> "a";
"inTagsSimple" -> "inTags";
"inTextStyle" -> "_";
"inTextStyle" -> "addTextStyle";
"inTextStyle" -> "inTags";
"inTextStyle" -> "selfClosingTag";
"inTextStyle" -> "textStyleAttr";
"inTextStyle" -> "tshow";
"inTwoParens" -> "try";
"include" -> "_";
"include" -> "attr";
"include" -> "blockList";
"include" -> "braced";
"include" -> "headerLevel";
"include" -> "insertIncluded";
"include" -> "insertIncludedFileF";
"include" -> "keyValues";
"include" -> "many1Char";
"include" -> "manyChar";
"include" -> "metaLineStart";
"include" -> "opt";
"include" -> "removeDoubleQuotes";
"include" -> "returnF";
"include" -> "safeRead";
"include" -> "skipSpaces";
"include" -> "stringAnyCase";
"include" -> "try";
"include" -> "untokenize";
"includeAncestorsAndSelected" -> "_";
"includeAncestorsAndSelected" -> "headlineContainsSelectTags";
"includeAncestorsAndSelected" -> "includeAncestorsAndSelected";
"includeDirective" -> "_";
"includeDirective" -> "blanklines";
"includeDirective" -> "block";
"includeDirective" -> "codeblock";
"includeDirective" -> "logMessage";
"includeDirective" -> "readFileFromDirs";
"includeDirective" -> "safeRead";
"includeDirective" -> "trim";
"includeDirective" -> "trimr";
"includeDirective" -> "tshow";
"includeDirective" -> "when";
"includeDirective" -> "x";
"includeRootAndSelected" -> "includeAncestorsAndSelected";
"indent" -> "indentPrefix";
"indentBlocks" -> "_";
"indentBlocks" -> "indentPrefix";
"indentBlocks" -> "prefix";
"indentBlocks" -> "x";
"indentFromHTML" -> "_";
"indentFromHTML" -> "indent";
"indentFromHTML" -> "str";
"indentPrefix" -> "a";
"indentPrefix" -> "indent";
"indentPrefix" -> "isLineBreak";
"indentPrefix" -> "l";
"indentPrefix" -> "split";
"indentSpaces" -> "countChar";
"indentSpaces" -> "textStr";
"indentSpaces" -> "try";
"indentWith" -> "countChar";
"indentWith" -> "indentWith";
"indentWith" -> "t";
"indentWith" -> "try";
"indented" -> "try";
"indentedBlock" -> "blanklines";
"indentedBlock" -> "indentedLine";
"indentedBlock" -> "l";
"indentedBlock" -> "spaceChar";
"indentedBlock" -> "try";
"indentedCode" -> "eol";
"indentedCode" -> "indentedLine";
"indentedCode" -> "manyTillChar";
"indentedCode" -> "try";
"indentedLine" -> "anyLine";
"indentedLine" -> "anyLineNewline";
"indentedLine" -> "gobbleAtMostSpaces";
"indentedLine" -> "indentSpaces";
"indentedLine" -> "spaceChar";
"indentedLine" -> "try";
"indexCommonState" -> "_";
"indexCommonState" -> "commonStateFields";
"indexLazyPandoc" -> "_";
"indexLazyPandoc" -> "a";
"indexLazyPandoc" -> "loadScriptFromDataDir";
"indexLazyPandoc" -> "meta";
"indexLazyPandoc" -> "runLua";
"indexLazyPandoc" -> "runPandocLua";
"infix" -> "a";
"infixr" -> "a";
"infixr" -> "l";
"infixr" -> "read_body";
"infixr" -> "readerState";
"infixr" -> "try";
"inheritedPatterns" -> "alwaysInheritedPatterns";
"inheritedPatterns" -> "contingentInheritedPatterns";
"initLuaState" -> "installPandocPackageSearcher";
"initLuaState" -> "liftPandocLua";
"initLuaState" -> "loadScriptFromDataDir";
"initLuaState" -> "putConstructorsInRegistry";
"initialGlobalIds" -> "_";
"initialGlobalIds" -> "stripPrefix";
"inline" -> "anchor";
"inline" -> "autoLink";
"inline" -> "bareURL";
"inline" -> "bold";
"inline" -> "boldCode";
"inline" -> "boxed";
"inline" -> "br";
"inline" -> "bracketedSpan";
"inline" -> "breakChars";
"inline" -> "centered";
"inline" -> "charRef";
"inline" -> "cite";
"inline" -> "code";
"inline" -> "codeHtml";
"inline" -> "colored";
"inline" -> "comment";
"inline" -> "commentLine";
"inline" -> "displayMath";
"inline" -> "doLHSverb";
"inline" -> "dollarsMath";
"inline" -> "doubleQuote";
"inline" -> "doubleQuotes";
"inline" -> "eNoteref";
"inline" -> "eSwitch";
"inline" -> "emoji";
"inline" -> "emph";
"inline" -> "emphHtml";
"inline" -> "emphasizedText";
"inline" -> "endline";
"inline" -> "escapedChar";
"inline" -> "escapedLink";
"inline" -> "escapedNewline";
"inline" -> "exampleRef";
"inline" -> "exportSnippet";
"inline" -> "externalLink";
"inline" -> "finalBold";
"inline" -> "finalItalics";
"inline" -> "footnote";
"inline" -> "forcedLinebreak";
"inline" -> "guardEnabled";
"inline" -> "htmlComment";
"inline" -> "image";
"inline" -> "inline";
"inline" -> "inlineCodeBlock";
"inline" -> "inlineCommand\'";
"inline" -> "inlineContent";
"inline" -> "inlineEnvironment";
"inline" -> "inlineGroup";
"inline" -> "inlineHtml";
"inline" -> "inlineLaTeX";
"inline" -> "inlineNote";
"inline" -> "inlineNowiki";
"inline" -> "inlineParsers";
"inline" -> "inlineTag";
"inline" -> "inline\'";
"inline" -> "internalLink";
"inline" -> "interpretedRole";
"inline" -> "italic";
"inline" -> "italics";
"inline" -> "linebreak";
"inline" -> "link";
"inline" -> "linkOrImage";
"inline" -> "ltSign";
"inline" -> "macro";
"inline" -> "macroDef";
"inline" -> "math";
"inline" -> "nbsp";
"inline" -> "newlinesCountWithinLimits";
"inline" -> "nop";
"inline" -> "noparse";
"inline" -> "notExternalLink";
"inline" -> "note";
"inline" -> "pBdo";
"inline" -> "pCode";
"inline" -> "pCodeWithClass";
"inline" -> "pEmph";
"inline" -> "pImage";
"inline" -> "pLineBreak";
"inline" -> "pLink";
"inline" -> "pMath";
"inline" -> "pQ";
"inline" -> "pRawHtmlInline";
"inline" -> "pScriptMath";
"inline" -> "pSmall";
"inline" -> "pSpan";
"inline" -> "pSpanLike";
"inline" -> "pStrikeout";
"inline" -> "pStrong";
"inline" -> "pSubscript";
"inline" -> "pSuperscript";
"inline" -> "pSvg";
"inline" -> "pTagText";
"inline" -> "pUnderline";
"inline" -> "placeholder";
"inline" -> "primEscape";
"inline" -> "raw";
"inline" -> "rawHtmlInline";
"inline" -> "rawLaTeXInline\'";
"inline" -> "regularSymbol";
"inline" -> "report";
"inline" -> "singleQuote";
"inline" -> "smart";
"inline" -> "space";
"inline" -> "spanHtml";
"inline" -> "special";
"inline" -> "str";
"inline" -> "strike";
"inline" -> "strikeout";
"inline" -> "strong";
"inline" -> "strongAndEmph";
"inline" -> "strongHtml";
"inline" -> "strongOrEmph";
"inline" -> "subMacro";
"inline" -> "subTag";
"inline" -> "subscript";
"inline" -> "subst";
"inline" -> "superMacro";
"inline" -> "superTag";
"inline" -> "superscript";
"inline" -> "symbol";
"inline" -> "symbolIn";
"inline" -> "tagged";
"inline" -> "template";
"inline" -> "try";
"inline" -> "underline";
"inline" -> "underlined";
"inline" -> "untoken";
"inline" -> "url";
"inline" -> "variable";
"inline" -> "verbatim";
"inline" -> "whitespace";
"inline" -> "wikiLink";
"inline" -> "word";
"inlineBQ" -> "whitespace";
"inlineCode" -> "codeTag";
"inlineCodeBlock" -> "enclosedByPair";
"inlineCodeBlock" -> "enclosedByPair1";
"inlineCodeBlock" -> "exportsCode";
"inlineCodeBlock" -> "inlineCode";
"inlineCodeBlock" -> "many1Char";
"inlineCodeBlock" -> "orgArgKey";
"inlineCodeBlock" -> "orgArgWordChar";
"inlineCodeBlock" -> "originalLang";
"inlineCodeBlock" -> "returnF";
"inlineCodeBlock" -> "skipSpaces";
"inlineCodeBlock" -> "translateLang";
"inlineCodeBlock" -> "try";
"inlineCommand" -> "inlineCommand\'";
"inlineCommand" -> "inlineEnvironment";
"inlineCommand" -> "inlines";
"inlineCommand" -> "rawLaTeXParser";
"inlineCommand" -> "tokenize";
"inlineCommand" -> "try";
"inlineCommand\'" -> "_";
"inlineCommand\'" -> "anyControlSeq";
"inlineCommand\'" -> "getRawCommand";
"inlineCommand\'" -> "guardEnabled";
"inlineCommand\'" -> "ignore";
"inlineCommand\'" -> "inlineCommands";
"inlineCommand\'" -> "isBlockCommand";
"inlineCommand\'" -> "isInlineCommand";
"inlineCommand\'" -> "lookupListDefault";
"inlineCommand\'" -> "ordNub";
"inlineCommand\'" -> "overlaySpecification";
"inlineCommand\'" -> "raw";
"inlineCommand\'" -> "sp";
"inlineCommand\'" -> "symbol";
"inlineCommand\'" -> "try";
"inlineCommands" -> "accent";
"inlineCommands" -> "addMeta";
"inlineCommands" -> "anyTok";
"inlineCommands" -> "block";
"inlineCommands" -> "braced";
"inlineCommands" -> "bracedUrl";
"inlineCommands" -> "citation";
"inlineCommands" -> "code";
"inlineCommands" -> "coloredInline";
"inlineCommands" -> "complexNatbibCitation";
"inlineCommands" -> "controlSeq";
"inlineCommands" -> "doAcronym";
"inlineCommands" -> "doAcronymPlural";
"inlineCommands" -> "doSI";
"inlineCommands" -> "doSIang";
"inlineCommands" -> "doSInum";
"inlineCommands" -> "doSInumlist";
"inlineCommands" -> "doSIrange";
"inlineCommands" -> "doTerm";
"inlineCommands" -> "dolabel";
"inlineCommands" -> "dolstinline";
"inlineCommands" -> "domintinline";
"inlineCommands" -> "doref";
"inlineCommands" -> "dosi";
"inlineCommands" -> "doverb";
"inlineCommands" -> "doxspace";
"inlineCommands" -> "emph";
"inlineCommands" -> "enquote";
"inlineCommands" -> "extractSpaces";
"inlineCommands" -> "foreignlanguage";
"inlineCommands" -> "grouped";
"inlineCommands" -> "hyperlink";
"inlineCommands" -> "hypertargetInline";
"inlineCommands" -> "ifToggle";
"inlineCommands" -> "ifdim";
"inlineCommands" -> "ifstrequal";
"inlineCommands" -> "inNote";
"inlineCommands" -> "include";
"inlineCommands" -> "inline";
"inlineCommands" -> "inlineLanguageCommands";
"inlineCommands" -> "inlines";
"inlineCommands" -> "keyvals";
"inlineCommands" -> "lettrine";
"inlineCommands" -> "linebreak";
"inlineCommands" -> "link";
"inlineCommands" -> "lit";
"inlineCommands" -> "makeLowercase";
"inlineCommands" -> "makeUppercase";
"inlineCommands" -> "mathDisplay";
"inlineCommands" -> "mathInline";
"inlineCommands" -> "mkImage";
"inlineCommands" -> "newToggle";
"inlineCommands" -> "note";
"inlineCommands" -> "opt";
"inlineCommands" -> "options";
"inlineCommands" -> "processHBox";
"inlineCommands" -> "rawInlineOr";
"inlineCommands" -> "removeDoubleQuotes";
"inlineCommands" -> "romanNumeralLower";
"inlineCommands" -> "romanNumeralUpper";
"inlineCommands" -> "setToggle";
"inlineCommands" -> "skipopts";
"inlineCommands" -> "sp";
"inlineCommands" -> "space";
"inlineCommands" -> "spaces";
"inlineCommands" -> "str";
"inlineCommands" -> "strikeout";
"inlineCommands" -> "stringify";
"inlineCommands" -> "strong";
"inlineCommands" -> "subscript";
"inlineCommands" -> "superscript";
"inlineCommands" -> "toList";
"inlineCommands" -> "tok";
"inlineCommands" -> "try";
"inlineCommands" -> "ttfamily";
"inlineCommands" -> "underline";
"inlineCommands" -> "unescapeURL";
"inlineCommands" -> "untokenize";
"inlineCommands" -> "url";
"inlineContent" -> "endline";
"inlineContent" -> "escapedChar";
"inlineContent" -> "hyphens";
"inlineContent" -> "smart";
"inlineContent" -> "str";
"inlineContent" -> "symbol";
"inlineContent" -> "whitespace";
"inlineElementNames" -> "constructorsFor";
"inlineEnvironment" -> "braced";
"inlineEnvironment" -> "controlSeq";
"inlineEnvironment" -> "inlineEnvironments";
"inlineEnvironment" -> "try";
"inlineEnvironment" -> "untokenize";
"inlineEnvironments" -> "math";
"inlineEnvironments" -> "mathEnv";
"inlineEnvironments" -> "mathEnvWith";
"inlineFile" -> "codeTag";
"inlineGroup" -> "grouped";
"inlineGroup" -> "inline";
"inlineHtml" -> "htmlTag";
"inlineHtml" -> "isInlineTag\'";
"inlineHtml" -> "manyTillChar";
"inlineHtml" -> "try";
"inlineLaTeX" -> "_";
"inlineLaTeX" -> "a";
"inlineLaTeX" -> "enableExtension";
"inlineLaTeX" -> "getExportSetting";
"inlineLaTeX" -> "inlineCommand";
"inlineLaTeX" -> "inlineLaTeXCommand";
"inlineLaTeX" -> "maybeRight";
"inlineLaTeX" -> "returnF";
"inlineLaTeX" -> "try";
"inlineLaTeX" -> "x";
"inlineLaTeXCommand" -> "_";
"inlineLaTeXCommand" -> "isSpace";
"inlineLaTeXCommand" -> "rawLaTeXInline";
"inlineLaTeXCommand" -> "try";
"inlineLanguage" -> "extractSpaces";
"inlineLanguage" -> "rawopt";
"inlineLanguage" -> "renderLang";
"inlineLanguage" -> "tok";
"inlineLanguageCommands" -> "inlineLanguage";
"inlineLanguageCommands" -> "polyglossiaLangToBCP47";
"inlineList" -> "bareURL";
"inlineList" -> "code";
"inlineList" -> "emph";
"inlineList" -> "image";
"inlineList" -> "inlineMath";
"inlineList" -> "link";
"inlineList" -> "special";
"inlineList" -> "str";
"inlineList" -> "strikeout";
"inlineList" -> "strong";
"inlineList" -> "subscript";
"inlineList" -> "superscript";
"inlineList" -> "tag";
"inlineList" -> "todoMark";
"inlineListForNode" -> "disallowedInNode";
"inlineListForNode" -> "literal";
"inlineListForNode" -> "stringToTexinfo";
"inlineListForNode" -> "stringify";
"inlineListStartsWithAlnum" -> "_";
"inlineListStartsWithAlnum" -> "shouldEscapeText";
"inlineListToAsciiDoc" -> "_";
"inlineListToAsciiDoc" -> "empty";
"inlineListToAsciiDoc" -> "inlineToAsciiDoc";
"inlineListToAsciiDoc" -> "isSpace";
"inlineListToAsciiDoc" -> "isSpacy";
"inlineListToAsciiDoc" -> "setIntraword";
"inlineListToAsciiDoc" -> "withIntraword";
"inlineListToAsciiDoc" -> "x";
"inlineListToConTeXt" -> "_";
"inlineListToConTeXt" -> "inlineToConTeXt";
"inlineListToConTeXt" -> "isSpacey";
"inlineListToConTeXt" -> "x";
"inlineListToCustom" -> "inlineToCustom";
"inlineListToDokuWiki" -> "inlineToDokuWiki";
"inlineListToHaddock" -> "inlineToHaddock";
"inlineListToHtml" -> "inlineToHtml";
"inlineListToIdentifier" -> "_";
"inlineListToIdentifier" -> "extensionEnabled";
"inlineListToIdentifier" -> "isSpace";
"inlineListToIdentifier" -> "stringify";
"inlineListToIdentifier" -> "toAsciiChar";
"inlineListToIdentifier" -> "x";
"inlineListToJira" -> "toJiraInlines";
"inlineListToLaTeX" -> "_";
"inlineListToLaTeX" -> "inlineToLaTeX";
"inlineListToLaTeX" -> "x";
"inlineListToMan" -> "inlineToMan";
"inlineListToMarkdown" -> "_";
"inlineListToMarkdown" -> "avoidBadWrapsInList";
"inlineListToMarkdown" -> "empty";
"inlineListToMarkdown" -> "env";
"inlineListToMarkdown" -> "inlineToMarkdown";
"inlineListToMediaWiki" -> "_";
"inlineListToMediaWiki" -> "inlineToMediaWiki";
"inlineListToMediaWiki" -> "t";
"inlineListToMediaWiki" -> "x";
"inlineListToMs" -> "inlineToMs";
"inlineListToMs\'" -> "empty";
"inlineListToMs\'" -> "handleNotes";
"inlineListToMs\'" -> "inlineToMs";
"inlineListToMs\'" -> "x";
"inlineListToMuse" -> "env";
"inlineListToMuse" -> "fixNotes";
"inlineListToMuse" -> "normalizeInlineList";
"inlineListToMuse" -> "preprocessInlineList";
"inlineListToMuse" -> "removeKeyValues";
"inlineListToMuse" -> "renderInlineList";
"inlineListToMuse" -> "replaceSmallCaps";
"inlineListToMuse\'" -> "env";
"inlineListToMuse\'" -> "inlineListToMuse";
"inlineListToOrg" -> "_";
"inlineListToOrg" -> "inlineToOrg";
"inlineListToOrg" -> "x";
"inlineListToRST" -> "transformInlines";
"inlineListToRST" -> "writeInlines";
"inlineListToTexinfo" -> "inlineToTexinfo";
"inlineListToTextile" -> "inlineToTextile";
"inlineListToXWiki" -> "inlineToXWiki";
"inlineListToZimWiki" -> "inlineToZimWiki";
"inlineLiteralTag" -> "closeTag";
"inlineLiteralTag" -> "manyTillChar";
"inlineLiteralTag" -> "openTag";
"inlineLiteralTag" -> "try";
"inlineLtr" -> "inline";
"inlineLtr" -> "try";
"inlineML" -> "whitespace";
"inlineMarkup" -> "a";
"inlineMarkup" -> "l";
"inlineMarkup" -> "many1Char";
"inlineMarkup" -> "manyTillChar";
"inlineMarkup" -> "parseFromString\'";
"inlineMarkup" -> "simpleInline";
"inlineMarkup" -> "space";
"inlineMarkup" -> "special";
"inlineMarkup" -> "try";
"inlineMarkup" -> "when";
"inlineMath" -> "many1TillChar";
"inlineMath" -> "try";
"inlineNote" -> "addToNotesTable";
"inlineNote" -> "guardEnabled";
"inlineNote" -> "inline";
"inlineNote" -> "inlinesInBalancedBrackets";
"inlineNote" -> "many1Till";
"inlineNote" -> "manyChar";
"inlineNote" -> "note";
"inlineNote" -> "trimInlinesF";
"inlineNote" -> "try";
"inlineNowiki" -> "manyTillChar";
"inlineNowiki" -> "try";
"inlineParsers" -> "characterReference";
"inlineParsers" -> "code";
"inlineParsers" -> "endline";
"inlineParsers" -> "escapedInline";
"inlineParsers" -> "groupedInlineMarkup";
"inlineParsers" -> "image";
"inlineParsers" -> "inline";
"inlineParsers" -> "inlineMarkup";
"inlineParsers" -> "link";
"inlineParsers" -> "mark";
"inlineParsers" -> "note";
"inlineParsers" -> "rawHtmlInline";
"inlineParsers" -> "rawLaTeXInline\'";
"inlineParsers" -> "smartPunctuation";
"inlineParsers" -> "str";
"inlineParsers" -> "symbol";
"inlineParsers" -> "whitespace";
"inlinePhp" -> "manyTillChar";
"inlinePhp" -> "try";
"inlineRtl" -> "inline";
"inlineRtl" -> "try";
"inlineTag" -> "_";
"inlineTag" -> "blankline";
"inlineTag" -> "closeTag";
"inlineTag" -> "encode";
"inlineTag" -> "fromEntities";
"inlineTag" -> "htmlTag";
"inlineTag" -> "inline";
"inlineTag" -> "inlinesInTags";
"inlineTag" -> "isInlineTag\'";
"inlineTag" -> "manyTillChar";
"inlineTag" -> "openTag";
"inlineTag" -> "raw";
"inlineTag" -> "tag";
"inlineTag" -> "textInTags";
"inlineTag" -> "try";
"inlineToAsciiDoc" -> "_";
"inlineToAsciiDoc" -> "attr";
"inlineToAsciiDoc" -> "backslashEscapes";
"inlineToAsciiDoc" -> "blankline";
"inlineToAsciiDoc" -> "empty";
"inlineToAsciiDoc" -> "escapeString";
"inlineToAsciiDoc" -> "escapeStringUsing";
"inlineToAsciiDoc" -> "escapeURI";
"inlineToAsciiDoc" -> "imageArguments";
"inlineToAsciiDoc" -> "inList";
"inlineToAsciiDoc" -> "inlineListToAsciiDoc";
"inlineToAsciiDoc" -> "inlineToAsciiDoc";
"inlineToAsciiDoc" -> "inlines";
"inlineToAsciiDoc" -> "literal";
"inlineToAsciiDoc" -> "prefix";
"inlineToAsciiDoc" -> "report";
"inlineToAsciiDoc" -> "space";
"inlineToAsciiDoc" -> "str";
"inlineToAsciiDoc" -> "txt";
"inlineToConTeXt" -> "_";
"inlineToConTeXt" -> "a";
"inlineToConTeXt" -> "attr";
"inlineToConTeXt" -> "blockListToConTeXt";
"inlineToConTeXt" -> "codeBlock";
"inlineToConTeXt" -> "dimension";
"inlineToConTeXt" -> "elemText";
"inlineToConTeXt" -> "empty";
"inlineToConTeXt" -> "escapeStringUsing";
"inlineToConTeXt" -> "fromBCP47";
"inlineToConTeXt" -> "inlineListToConTeXt";
"inlineToConTeXt" -> "isURI";
"inlineToConTeXt" -> "literal";
"inlineToConTeXt" -> "report";
"inlineToConTeXt" -> "showFl";
"inlineToConTeXt" -> "showInInch";
"inlineToConTeXt" -> "space";
"inlineToConTeXt" -> "str";
"inlineToConTeXt" -> "stringToConTeXt";
"inlineToConTeXt" -> "toLabel";
"inlineToConTeXt" -> "tshow";
"inlineToConTeXt" -> "txt";
"inlineToConTeXt" -> "x";
"inlineToCustom" -> "attr";
"inlineToCustom" -> "attrToMap";
"inlineToCustom" -> "items";
"inlineToCustom" -> "str";
"inlineToCustom" -> "txt";
"inlineToDocbook" -> "_";
"inlineToDocbook" -> "attr";
"inlineToDocbook" -> "blocksToDocbook";
"inlineToDocbook" -> "convertMath";
"inlineToDocbook" -> "empty";
"inlineToDocbook" -> "escapeStringForXML";
"inlineToDocbook" -> "escapeURI";
"inlineToDocbook" -> "idAndRole";
"inlineToDocbook" -> "idName";
"inlineToDocbook" -> "imageToDocbook";
"inlineToDocbook" -> "inTags";
"inlineToDocbook" -> "inTagsIndented";
"inlineToDocbook" -> "inTagsSimple";
"inlineToDocbook" -> "inlineToDocbook";
"inlineToDocbook" -> "inlinesToDocbook";
"inlineToDocbook" -> "isMathML";
"inlineToDocbook" -> "literal";
"inlineToDocbook" -> "qname";
"inlineToDocbook" -> "report";
"inlineToDocbook" -> "selfClosingTag";
"inlineToDocbook" -> "space";
"inlineToDocbook" -> "str";
"inlineToDocbook" -> "t";
"inlineToDocbook" -> "texMathToInlines";
"inlineToDocbook" -> "txt";
"inlineToDocbook" -> "x";
"inlineToDokuWiki" -> "_";
"inlineToDokuWiki" -> "attr";
"inlineToDokuWiki" -> "blockListToDokuWiki";
"inlineToDokuWiki" -> "escapeString";
"inlineToDokuWiki" -> "escapeURI";
"inlineToDokuWiki" -> "imageDims";
"inlineToDokuWiki" -> "inlineListToDokuWiki";
"inlineToDokuWiki" -> "isURI";
"inlineToDokuWiki" -> "label";
"inlineToDokuWiki" -> "report";
"inlineToDokuWiki" -> "source";
"inlineToDokuWiki" -> "str";
"inlineToDokuWiki" -> "txt";
"inlineToHaddock" -> "_";
"inlineToHaddock" -> "attr";
"inlineToHaddock" -> "empty";
"inlineToHaddock" -> "escapeString";
"inlineToHaddock" -> "escapeURI";
"inlineToHaddock" -> "inlineListToHaddock";
"inlineToHaddock" -> "inlineToHaddock";
"inlineToHaddock" -> "isURI";
"inlineToHaddock" -> "literal";
"inlineToHaddock" -> "report";
"inlineToHaddock" -> "source";
"inlineToHaddock" -> "space";
"inlineToHaddock" -> "str";
"inlineToHaddock" -> "stringify";
"inlineToHaddock" -> "tshow";
"inlineToHaddock" -> "txt";
"inlineToHtml" -> "_";
"inlineToHtml" -> "addAttrs";
"inlineToHtml" -> "addRoleToLink";
"inlineToHtml" -> "allowsMathEnvironments";
"inlineToHtml" -> "annotateMML";
"inlineToHtml" -> "attr";
"inlineToHtml" -> "attributes";
"inlineToHtml" -> "blockListToNote";
"inlineToHtml" -> "convertMath";
"inlineToHtml" -> "delete";
"inlineToHtml" -> "highlight";
"inlineToHtml" -> "htmlSpanLikeElements";
"inlineToHtml" -> "imgAttrsToHtml";
"inlineToHtml" -> "inDiv";
"inlineToHtml" -> "inline";
"inlineToHtml" -> "inlineListToHtml";
"inlineToHtml" -> "inlineToHtml";
"inlineToHtml" -> "isMathEnvironment";
"inlineToHtml" -> "isRawHtml";
"inlineToHtml" -> "link";
"inlineToHtml" -> "linkText";
"inlineToHtml" -> "mediaCategory";
"inlineToHtml" -> "obfuscateLink";
"inlineToHtml" -> "prefix";
"inlineToHtml" -> "prefixedId";
"inlineToHtml" -> "report";
"inlineToHtml" -> "str";
"inlineToHtml" -> "strToHtml";
"inlineToHtml" -> "stringify";
"inlineToHtml" -> "t";
"inlineToHtml" -> "tag";
"inlineToHtml" -> "texMathToInlines";
"inlineToHtml" -> "tshow";
"inlineToHtml" -> "txt";
"inlineToHtml" -> "url";
"inlineToHtml" -> "x";
"inlineToICML" -> "_";
"inlineToICML" -> "attr";
"inlineToICML" -> "charStyle";
"inlineToICML" -> "dynamicStyleKey";
"inlineToICML" -> "empty";
"inlineToICML" -> "escapeStringForXML";
"inlineToICML" -> "footnoteToICML";
"inlineToICML" -> "imageICML";
"inlineToICML" -> "inTags";
"inlineToICML" -> "inlineToICML";
"inlineToICML" -> "inlinesToICML";
"inlineToICML" -> "lineSeparator";
"inlineToICML" -> "literal";
"inlineToICML" -> "mergeStrings";
"inlineToICML" -> "report";
"inlineToICML" -> "space";
"inlineToICML" -> "str";
"inlineToICML" -> "texMathToInlines";
"inlineToICML" -> "title";
"inlineToICML" -> "tshow";
"inlineToICML" -> "url";
"inlineToJATS" -> "_";
"inlineToJATS" -> "a";
"inlineToJATS" -> "attr";
"inlineToJATS" -> "codeAttr";
"inlineToJATS" -> "convertMath";
"inlineToJATS" -> "demoteHeaderAndRefs";
"inlineToJATS" -> "empty";
"inlineToJATS" -> "escapeStringForXML";
"inlineToJATS" -> "escapeURI";
"inlineToJATS" -> "getMimeType";
"inlineToJATS" -> "inTags";
"inlineToJATS" -> "inTagsIndented";
"inlineToJATS" -> "inTagsSimple";
"inlineToJATS" -> "inlinesToJATS";
"inlineToJATS" -> "isPara";
"inlineToJATS" -> "l";
"inlineToJATS" -> "literal";
"inlineToJATS" -> "report";
"inlineToJATS" -> "selfClosingTag";
"inlineToJATS" -> "space";
"inlineToJATS" -> "str";
"inlineToJATS" -> "stringify";
"inlineToJATS" -> "t";
"inlineToJATS" -> "tag";
"inlineToJATS" -> "tshow";
"inlineToJATS" -> "txt";
"inlineToJATS" -> "wrappedBlocksToJATS";
"inlineToJATS" -> "x";
"inlineToLaTeX" -> "_";
"inlineToLaTeX" -> "a";
"inlineToLaTeX" -> "attr";
"inlineToLaTeX" -> "backslashEscapes";
"inlineToLaTeX" -> "blockListToLaTeX";
"inlineToLaTeX" -> "citationsToBiblatex";
"inlineToLaTeX" -> "citationsToNatbib";
"inlineToLaTeX" -> "dimension";
"inlineToLaTeX" -> "empty";
"inlineToLaTeX" -> "escapeStringUsing";
"inlineToLaTeX" -> "escapeURI";
"inlineToLaTeX" -> "getListingsLanguage";
"inlineToLaTeX" -> "handleMathComment";
"inlineToLaTeX" -> "highlight";
"inlineToLaTeX" -> "highlightCode";
"inlineToLaTeX" -> "hypertarget";
"inlineToLaTeX" -> "inCmd";
"inlineToLaTeX" -> "inNote";
"inlineToLaTeX" -> "inlineListToLaTeX";
"inlineToLaTeX" -> "isEnabled";
"inlineToLaTeX" -> "isQuoted";
"inlineToLaTeX" -> "isURI";
"inlineToLaTeX" -> "l";
"inlineToLaTeX" -> "literal";
"inlineToLaTeX" -> "mbBraced";
"inlineToLaTeX" -> "protectCode";
"inlineToLaTeX" -> "report";
"inlineToLaTeX" -> "setEmptyLine";
"inlineToLaTeX" -> "showFl";
"inlineToLaTeX" -> "showInInch";
"inlineToLaTeX" -> "source";
"inlineToLaTeX" -> "space";
"inlineToLaTeX" -> "str";
"inlineToLaTeX" -> "stringToLaTeX";
"inlineToLaTeX" -> "toLabel";
"inlineToLaTeX" -> "toLang";
"inlineToLaTeX" -> "toPolyglossia";
"inlineToLaTeX" -> "txt";
"inlineToLaTeX" -> "when";
"inlineToLaTeX" -> "x";
"inlineToMan" -> "_";
"inlineToMan" -> "a";
"inlineToMan" -> "attr";
"inlineToMan" -> "empty";
"inlineToMan" -> "escString";
"inlineToMan" -> "escapeURI";
"inlineToMan" -> "inlineListToMan";
"inlineToMan" -> "inlineToMan";
"inlineToMan" -> "isURI";
"inlineToMan" -> "literal";
"inlineToMan" -> "report";
"inlineToMan" -> "source";
"inlineToMan" -> "space";
"inlineToMan" -> "str";
"inlineToMan" -> "texMathToInlines";
"inlineToMan" -> "tshow";
"inlineToMan" -> "txt";
"inlineToMan" -> "withFontFeature";
"inlineToMan" -> "writeCommonMark";
"inlineToMan" -> "writeMarkdown";
"inlineToMan" -> "writePlain";
"inlineToMarkdown" -> "_";
"inlineToMarkdown" -> "attr";
"inlineToMarkdown" -> "attrsToMarkdown";
"inlineToMarkdown" -> "blankline";
"inlineToMarkdown" -> "br";
"inlineToMarkdown" -> "capitalize";
"inlineToMarkdown" -> "empty";
"inlineToMarkdown" -> "env";
"inlineToMarkdown" -> "escapeText";
"inlineToMarkdown" -> "escapeURI";
"inlineToMarkdown" -> "getKey";
"inlineToMarkdown" -> "getReference";
"inlineToMarkdown" -> "inlineListToMarkdown";
"inlineToMarkdown" -> "inlineToMarkdown";
"inlineToMarkdown" -> "isEnabled";
"inlineToMarkdown" -> "isURI";
"inlineToMarkdown" -> "linkAttributes";
"inlineToMarkdown" -> "literal";
"inlineToMarkdown" -> "makeMathPlainer";
"inlineToMarkdown" -> "report";
"inlineToMarkdown" -> "source";
"inlineToMarkdown" -> "space";
"inlineToMarkdown" -> "str";
"inlineToMarkdown" -> "tagWithAttrs";
"inlineToMarkdown" -> "texMathToInlines";
"inlineToMarkdown" -> "toHtml5Entities";
"inlineToMarkdown" -> "toSubscriptInline";
"inlineToMarkdown" -> "toSuperscript";
"inlineToMarkdown" -> "toSuperscriptInline";
"inlineToMarkdown" -> "tshow";
"inlineToMarkdown" -> "txt";
"inlineToMarkdown" -> "unsmartify";
"inlineToMarkdown" -> "url";
"inlineToMarkdown" -> "writeHtml5String";
"inlineToMarkdown" -> "x";
"inlineToMediaWiki" -> "_";
"inlineToMediaWiki" -> "attr";
"inlineToMediaWiki" -> "blockListToMediaWiki";
"inlineToMediaWiki" -> "escapeText";
"inlineToMediaWiki" -> "escapeURI";
"inlineToMediaWiki" -> "imageToMediaWiki";
"inlineToMediaWiki" -> "inlineListToMediaWiki";
"inlineToMediaWiki" -> "isURI";
"inlineToMediaWiki" -> "label";
"inlineToMediaWiki" -> "report";
"inlineToMediaWiki" -> "source";
"inlineToMediaWiki" -> "str";
"inlineToMediaWiki" -> "stripTrailingNewlines";
"inlineToMediaWiki" -> "tagWithAttrs";
"inlineToMediaWiki" -> "txt";
"inlineToMs" -> "_";
"inlineToMs" -> "attr";
"inlineToMs" -> "breakToSpace";
"inlineToMs" -> "convertMath";
"inlineToMs" -> "doubleQuotes";
"inlineToMs" -> "empty";
"inlineToMs" -> "escapeStr";
"inlineToMs" -> "escapeUri";
"inlineToMs" -> "handleNotes";
"inlineToMs" -> "highlightCode";
"inlineToMs" -> "inlineListToMs";
"inlineToMs" -> "inlineListToMs\'";
"inlineToMs" -> "inlineToMs";
"inlineToMs" -> "literal";
"inlineToMs" -> "report";
"inlineToMs" -> "space";
"inlineToMs" -> "str";
"inlineToMs" -> "stringify";
"inlineToMs" -> "toAscii";
"inlineToMs" -> "toSmallCaps";
"inlineToMs" -> "txt";
"inlineToMs" -> "withFontFeature";
"inlineToMuse" -> "_";
"inlineToMuse" -> "anchor";
"inlineToMuse" -> "attr";
"inlineToMuse" -> "conditionalEscapeText";
"inlineToMuse" -> "dimension";
"inlineToMuse" -> "emphasis";
"inlineToMuse" -> "endsWithSpace";
"inlineToMuse" -> "env";
"inlineToMuse" -> "escapeURI";
"inlineToMuse" -> "inlineListToMuse";
"inlineToMuse" -> "inlineToMuse";
"inlineToMuse" -> "inlines";
"inlineToMuse" -> "isEnabled";
"inlineToMuse" -> "isSpace";
"inlineToMuse" -> "literal";
"inlineToMuse" -> "normalizeInlineList";
"inlineToMuse" -> "replaceNewlines";
"inlineToMuse" -> "source";
"inlineToMuse" -> "space";
"inlineToMuse" -> "startsWithSpace";
"inlineToMuse" -> "str";
"inlineToMuse" -> "title";
"inlineToMuse" -> "tshow";
"inlineToMuse" -> "txt";
"inlineToMuse" -> "urlEscapeBrackets";
"inlineToMuse" -> "x";
"inlineToOpenDocument" -> "_";
"inlineToOpenDocument" -> "addNote";
"inlineToOpenDocument" -> "attr";
"inlineToOpenDocument" -> "empty";
"inlineToOpenDocument" -> "escapeStringForXML";
"inlineToOpenDocument" -> "handleSpaces";
"inlineToOpenDocument" -> "highlight";
"inlineToOpenDocument" -> "inBookmarkTags";
"inlineToOpenDocument" -> "inQuotes";
"inlineToOpenDocument" -> "inTags";
"inlineToOpenDocument" -> "inTagsSimple";
"inlineToOpenDocument" -> "inlinesToOpenDocument";
"inlineToOpenDocument" -> "l";
"inlineToOpenDocument" -> "mkLink";
"inlineToOpenDocument" -> "preformatted";
"inlineToOpenDocument" -> "report";
"inlineToOpenDocument" -> "selfClosingBookmark";
"inlineToOpenDocument" -> "selfClosingTag";
"inlineToOpenDocument" -> "space";
"inlineToOpenDocument" -> "t";
"inlineToOpenDocument" -> "texMathToInlines";
"inlineToOpenDocument" -> "tok";
"inlineToOpenDocument" -> "tshow";
"inlineToOpenDocument" -> "withLangFromAttr";
"inlineToOpenDocument" -> "withParagraphStyle";
"inlineToOpenDocument" -> "withTextStyle";
"inlineToOpenXML" -> "inlineToOpenXML\'";
"inlineToOpenXML" -> "withDirection";
"inlineToOpenXML\'" -> "_";
"inlineToOpenXML\'" -> "attr";
"inlineToOpenXML\'" -> "author";
"inlineToOpenXML\'" -> "blocksToOpenXML";
"inlineToOpenXML\'" -> "br";
"inlineToOpenXML\'" -> "convertMath";
"inlineToOpenXML\'" -> "desiredSizeInPoints";
"inlineToOpenXML\'" -> "dynamicStyleKey";
"inlineToOpenXML\'" -> "env";
"inlineToOpenXML\'" -> "extensionFromMimeType";
"inlineToOpenXML\'" -> "fitToPage";
"inlineToOpenXML\'" -> "formattedString";
"inlineToOpenXML\'" -> "fromString";
"inlineToOpenXML\'" -> "getMimeType";
"inlineToOpenXML\'" -> "getUniqueId";
"inlineToOpenXML\'" -> "highlight";
"inlineToOpenXML\'" -> "imageSize";
"inlineToOpenXML\'" -> "imageType";
"inlineToOpenXML\'" -> "inlineToOpenXML";
"inlineToOpenXML\'" -> "inlineToOpenXML\'";
"inlineToOpenXML\'" -> "inlinesToOpenXML";
"inlineToOpenXML\'" -> "mknode";
"inlineToOpenXML\'" -> "pStyleM";
"inlineToOpenXML\'" -> "rStyleM";
"inlineToOpenXML\'" -> "report";
"inlineToOpenXML\'" -> "setFirstPara";
"inlineToOpenXML\'" -> "str";
"inlineToOpenXML\'" -> "stringify";
"inlineToOpenXML\'" -> "title";
"inlineToOpenXML\'" -> "toBookmarkName";
"inlineToOpenXML\'" -> "tok";
"inlineToOpenXML\'" -> "txt";
"inlineToOpenXML\'" -> "when";
"inlineToOpenXML\'" -> "withParaPropM";
"inlineToOpenXML\'" -> "withTextProp";
"inlineToOpenXML\'" -> "withTextPropM";
"inlineToOpenXML\'" -> "wrapBookmark";
"inlineToOpenXML\'" -> "x";
"inlineToOrg" -> "_";
"inlineToOrg" -> "empty";
"inlineToOrg" -> "escapeString";
"inlineToOrg" -> "escapeURI";
"inlineToOrg" -> "inlineListToOrg";
"inlineToOrg" -> "isRawFormat";
"inlineToOrg" -> "literal";
"inlineToOrg" -> "orgPath";
"inlineToOrg" -> "report";
"inlineToOrg" -> "source";
"inlineToOrg" -> "space";
"inlineToOrg" -> "str";
"inlineToOrg" -> "t";
"inlineToOrg" -> "tshow";
"inlineToOrg" -> "txt";
"inlineToOrg" -> "x";
"inlineToParElems" -> "_";
"inlineToParElems" -> "addLogMessage";
"inlineToParElems" -> "endNotesSlideId";
"inlineToParElems" -> "env";
"inlineToParElems" -> "inlineToParElems";
"inlineToParElems" -> "inlinesToParElems";
"inlineToParElems" -> "str";
"inlineToParElems" -> "title";
"inlineToParElems" -> "tshow";
"inlineToParElems" -> "url";
"inlineToRST" -> "_";
"inlineToRST" -> "attr";
"inlineToRST" -> "blankline";
"inlineToRST" -> "elemText";
"inlineToRST" -> "empty";
"inlineToRST" -> "escapeText";
"inlineToRST" -> "escapeURI";
"inlineToRST" -> "inlineToRST";
"inlineToRST" -> "isEnabled";
"inlineToRST" -> "isURI";
"inlineToRST" -> "label";
"inlineToRST" -> "literal";
"inlineToRST" -> "registerImage";
"inlineToRST" -> "report";
"inlineToRST" -> "source";
"inlineToRST" -> "space";
"inlineToRST" -> "str";
"inlineToRST" -> "t";
"inlineToRST" -> "trim";
"inlineToRST" -> "txt";
"inlineToRST" -> "unsmartify";
"inlineToRST" -> "writeInlines";
"inlineToRST" -> "x";
"inlineToRTF" -> "_";
"inlineToRTF" -> "blockToRTF";
"inlineToRTF" -> "characterCodes";
"inlineToRTF" -> "codeStringToRTF";
"inlineToRTF" -> "combiningAccents";
"inlineToRTF" -> "defaultWriterState";
"inlineToRTF" -> "escapeString";
"inlineToRTF" -> "inlinesToRTF";
"inlineToRTF" -> "report";
"inlineToRTF" -> "source";
"inlineToRTF" -> "str";
"inlineToRTF" -> "stringToRTF";
"inlineToRTF" -> "t";
"inlineToRTF" -> "texMathToInlines";
"inlineToRTF" -> "withFontFeature";
"inlineToTEI" -> "_";
"inlineToTEI" -> "attr";
"inlineToTEI" -> "blocksToTEI";
"inlineToTEI" -> "description";
"inlineToTEI" -> "empty";
"inlineToTEI" -> "escapeStringForXML";
"inlineToTEI" -> "escapeURI";
"inlineToTEI" -> "idFromAttr";
"inlineToTEI" -> "imageToTEI";
"inlineToTEI" -> "inTags";
"inlineToTEI" -> "inTagsIndented";
"inlineToTEI" -> "inTagsSimple";
"inlineToTEI" -> "inlinesToTEI";
"inlineToTEI" -> "literal";
"inlineToTEI" -> "report";
"inlineToTEI" -> "selfClosingTag";
"inlineToTEI" -> "space";
"inlineToTEI" -> "str";
"inlineToTEI" -> "t";
"inlineToTEI" -> "txt";
"inlineToTEI" -> "x";
"inlineToTexinfo" -> "_";
"inlineToTexinfo" -> "a";
"inlineToTexinfo" -> "attr";
"inlineToTexinfo" -> "blockListToTexinfo";
"inlineToTexinfo" -> "dimension";
"inlineToTexinfo" -> "empty";
"inlineToTexinfo" -> "escapeCommas";
"inlineToTexinfo" -> "escapeURI";
"inlineToTexinfo" -> "inCmd";
"inlineToTexinfo" -> "inlineListToTexinfo";
"inlineToTexinfo" -> "inlineToTexinfo";
"inlineToTexinfo" -> "isURI";
"inlineToTexinfo" -> "literal";
"inlineToTexinfo" -> "report";
"inlineToTexinfo" -> "showInInch";
"inlineToTexinfo" -> "source";
"inlineToTexinfo" -> "space";
"inlineToTexinfo" -> "str";
"inlineToTexinfo" -> "stringToTexinfo";
"inlineToTexinfo" -> "tshow";
"inlineToTexinfo" -> "txt";
"inlineToTexinfo" -> "x";
"inlineToTextile" -> "_";
"inlineToTextile" -> "a";
"inlineToTextile" -> "attr";
"inlineToTextile" -> "blockListToTextile";
"inlineToTextile" -> "dimension";
"inlineToTextile" -> "elemText";
"inlineToTextile" -> "escapeStringForXML";
"inlineToTextile" -> "escapeTextForTextile";
"inlineToTextile" -> "inlineListToTextile";
"inlineToTextile" -> "isEnabled";
"inlineToTextile" -> "label";
"inlineToTextile" -> "report";
"inlineToTextile" -> "showInPixel";
"inlineToTextile" -> "source";
"inlineToTextile" -> "str";
"inlineToTextile" -> "tshow";
"inlineToTextile" -> "txt";
"inlineToXWiki" -> "_";
"inlineToXWiki" -> "blockListToXWiki";
"inlineToXWiki" -> "code";
"inlineToXWiki" -> "escapeURI";
"inlineToXWiki" -> "escapeXWikiString";
"inlineToXWiki" -> "genAnchor";
"inlineToXWiki" -> "highlightingLangs";
"inlineToXWiki" -> "inlineListToXWiki";
"inlineToXWiki" -> "isURI";
"inlineToXWiki" -> "label";
"inlineToXWiki" -> "report";
"inlineToXWiki" -> "source";
"inlineToXWiki" -> "str";
"inlineToXWiki" -> "title";
"inlineToXWiki" -> "txt";
"inlineToZimWiki" -> "_";
"inlineToZimWiki" -> "attr";
"inlineToZimWiki" -> "blockListToZimWiki";
"inlineToZimWiki" -> "escapeText";
"inlineToZimWiki" -> "escapeURI";
"inlineToZimWiki" -> "imageDims";
"inlineToZimWiki" -> "indentFromHTML";
"inlineToZimWiki" -> "inlineListToZimWiki";
"inlineToZimWiki" -> "isURI";
"inlineToZimWiki" -> "label";
"inlineToZimWiki" -> "removeFormatting";
"inlineToZimWiki" -> "report";
"inlineToZimWiki" -> "source";
"inlineToZimWiki" -> "str";
"inlineToZimWiki" -> "trimr";
"inlineToZimWiki" -> "txt";
"inline\'" -> "anchor";
"inline\'" -> "asterisks";
"inline\'" -> "autoEmail";
"inline\'" -> "autoLink";
"inline\'" -> "bold";
"inline\'" -> "br";
"inline\'" -> "classTag";
"inline\'" -> "code";
"inline\'" -> "codeTag";
"inline\'" -> "deleted";
"inline\'" -> "emph";
"inline\'" -> "emphTag";
"inline\'" -> "footnote";
"inline\'" -> "image";
"inline\'" -> "inlineCode";
"inline\'" -> "inlineFile";
"inline\'" -> "inlineHtml";
"inline\'" -> "inlineLiteralTag";
"inline\'" -> "inlineLtr";
"inline\'" -> "inlinePhp";
"inline\'" -> "inlineRtl";
"inline\'" -> "italic";
"inline\'" -> "link";
"inline\'" -> "linkOrImage";
"inline\'" -> "mathTag";
"inline\'" -> "monospaced";
"inline\'" -> "nbsp";
"inline\'" -> "nocache";
"inline\'" -> "notoc";
"inline\'" -> "nowiki";
"inline\'" -> "percent";
"inline\'" -> "str";
"inline\'" -> "strikeoutTag";
"inline\'" -> "strong";
"inline\'" -> "strongEmph";
"inline\'" -> "strongTag";
"inline\'" -> "subscript";
"inline\'" -> "subscriptTag";
"inline\'" -> "superscript";
"inline\'" -> "superscriptTag";
"inline\'" -> "symbol";
"inline\'" -> "underlined";
"inline\'" -> "verbatimTag";
"inline\'" -> "whitespace";
"inlines" -> "inline";
"inlines" -> "trimInlinesF";
"inlines1" -> "inline";
"inlinesBetween" -> "a";
"inlinesBetween" -> "inline";
"inlinesBetween" -> "many1Till";
"inlinesBetween" -> "notFollowedBy\'";
"inlinesBetween" -> "trimInlinesF";
"inlinesBetween" -> "try";
"inlinesBetween" -> "whitespace";
"inlinesInBalancedBrackets" -> "_";
"inlinesInBalancedBrackets" -> "code";
"inlinesInBalancedBrackets" -> "escapedChar";
"inlinesInBalancedBrackets" -> "inlines";
"inlinesInBalancedBrackets" -> "parseFromString";
"inlinesInBalancedBrackets" -> "rawHtmlInline";
"inlinesInBalancedBrackets" -> "rawLaTeXInline\'";
"inlinesInBalancedBrackets" -> "t";
"inlinesInBalancedBrackets" -> "try";
"inlinesInBalancedBrackets" -> "withRaw";
"inlinesInTags" -> "htmlTag";
"inlinesInTags" -> "inline";
"inlinesInTags" -> "raw";
"inlinesInTags" -> "tag";
"inlinesInTags" -> "try";
"inlinesL" -> "_";
"inlinesL" -> "singleton";
"inlinesR" -> "_";
"inlinesR" -> "singleton";
"inlinesToDocbook" -> "inlineToDocbook";
"inlinesToICML" -> "inlineToICML";
"inlinesToICML" -> "mergeStrings";
"inlinesToICML" -> "vcat";
"inlinesToJATS" -> "_";
"inlinesToJATS" -> "inlineToJATS";
"inlinesToJATS" -> "stringify";
"inlinesToJATS" -> "x";
"inlinesToOpenDocument" -> "l";
"inlinesToOpenDocument" -> "toChunks";
"inlinesToOpenXML" -> "a";
"inlinesToOpenXML" -> "inlineToOpenXML";
"inlinesToParElems" -> "concatMapM";
"inlinesToParElems" -> "inlineToParElems";
"inlinesToRTF" -> "inlineToRTF";
"inlinesToTEI" -> "inlineToTEI";
"inputListing" -> "_";
"inputListing" -> "keyvals";
"inputListing" -> "languagesByExtension";
"inputListing" -> "listingsLanguage";
"inputListing" -> "lookupEnv";
"inputListing" -> "options";
"inputListing" -> "parseListingsOptions";
"inputListing" -> "readFileFromDirs";
"inputListing" -> "report";
"inputListing" -> "safeRead";
"inputListing" -> "splitTextBy";
"inputMinted" -> "attr";
"inputMinted" -> "lookupEnv";
"inputMinted" -> "mintedAttr";
"inputMinted" -> "readFileFromDirs";
"inputMinted" -> "report";
"inputMinted" -> "splitTextBy";
"insertImage" -> "_";
"insertImage" -> "attr";
"insertImage" -> "cMap";
"insertImage" -> "el";
"insertImage" -> "images";
"insertImage" -> "list";
"insertImage" -> "plain";
"insertImage" -> "tshow";
"insertImage" -> "uattr";
"insertImage" -> "url";
"insertInFileTree" -> "a";
"insertInFileTree" -> "makeCanonical";
"insertIncluded" -> "_";
"insertIncluded" -> "a";
"insertIncluded" -> "lookupEnv";
"insertIncluded" -> "readFileFromDirs";
"insertIncluded" -> "report";
"insertIncluded" -> "splitTextBy";
"insertIncluded" -> "tokenize";
"insertIncluded" -> "when";
"insertIncludedFile" -> "a";
"insertIncludedFile" -> "blocks";
"insertIncludedFile" -> "insertIncludedFile\'";
"insertIncludedFile" -> "totoks";
"insertIncludedFileF" -> "insertIncludedFile\'";
"insertIncludedFile\'" -> "a";
"insertIncludedFile\'" -> "blocks";
"insertIncludedFile\'" -> "readFileFromDirs";
"insertIncludedFile\'" -> "report";
"insertIncludedFile\'" -> "totoks";
"insertIncludedFile\'" -> "when";
"insertMath" -> "_";
"insertMath" -> "el";
"insertMath" -> "insertImage";
"insertMath" -> "url";
"insertMedia" -> "_";
"insertMedia" -> "getMediaBag";
"insertMedia" -> "getMimeTypeDef";
"insertMedia" -> "setMediaBag";
"insertMediaFn" -> "getMediaBag";
"insertMediaFn" -> "setMediaBag";
"insertMedia\'" -> "a";
"insertMedia\'" -> "insertMedia";
"insertRefs" -> "_";
"insertRefs" -> "isRefRemove";
"insertRefs" -> "meta";
"insertRefs" -> "ordNub";
"insertRefs" -> "refTitle";
"insertRefs" -> "x";
"insertResolvedCitations" -> "x";
"insertSpace" -> "_";
"installPandocPackageSearcher" -> "liftPandocLua";
"installPandocPackageSearcher" -> "pandocPackageSearcher";
"integerSetting" -> "genericExportSetting";
"integerSetting" -> "try";
"internalLink" -> "addUnderscores";
"internalLink" -> "asksF";
"internalLink" -> "inline";
"internalLink" -> "label";
"internalLink" -> "link";
"internalLink" -> "manyChar";
"internalLink" -> "sym";
"internalLink" -> "title";
"internalLink" -> "try";
"interpretedRole" -> "renderRole";
"interpretedRole" -> "roleAfter";
"interpretedRole" -> "roleBefore";
"interpretedRole" -> "try";
"intersperseBrs" -> "selfClosingTag";
"intersperseBrs" -> "vcat";
"iq" -> "_";
"iq" -> "url";
"isAbsolutePath" -> "_";
"isAnchorSpan" -> "_";
"isArchiveTag" -> "toTag";
"isArgTok" -> "_";
"isAttrModifier" -> "_";
"isBasedOnStyle" -> "_";
"isBasedOnStyle" -> "a";
"isBasedOnStyle" -> "elemToCharStyle";
"isBasedOnStyle" -> "elemToParStyleData";
"isBasedOnStyle" -> "findAttrByName";
"isBasedOnStyle" -> "findAttrTextByName";
"isBasedOnStyle" -> "findChildByName";
"isBasedOnStyle" -> "isElem";
"isBlank" -> "_";
"isBlockCommand" -> "blockCommands";
"isBlockCommand" -> "treatAsBlock";
"isBlockElement" -> "_";
"isBlockElement" -> "blockTags";
"isBlockElement" -> "elName";
"isBlockQuote" -> "isInheritedFromStyles";
"isBlockTag" -> "a";
"isBlockTag" -> "blockTags";
"isBlockTag" -> "eitherBlockOrInline";
"isBlockTag" -> "t";
"isBlockTag" -> "x";
"isBlockTag\'" -> "_";
"isBlockTag\'" -> "eitherBlockOrInline";
"isBlockTag\'" -> "isBlockTag";
"isBlockTag\'" -> "newBlockTags";
"isBlockTag\'" -> "t";
"isBlockTag\'" -> "tag";
"isBulletListMarker" -> "_";
"isCapitalized" -> "isCapitalized";
"isChunkable" -> "_";
"isCodeCharStyle" -> "isInheritedFromStyles";
"isCodeDiv" -> "hasStylesInheritedFrom";
"isCommentTitle" -> "_";
"isCommentTok" -> "_";
"isCtrlSeq" -> "_";
"isDisplayMath" -> "_";
"isEPUBAttr" -> "_";
"isEPUBAttr" -> "a";
"isElem" -> "elName";
"isElem" -> "elemToNameSpaces";
"isElem" -> "prefix";
"isEmptyPar" -> "_";
"isEmptyPar" -> "trim";
"isEnabled" -> "extensionEnabled";
"isFontSizeCommand" -> "_";
"isHeader" -> "_";
"isHeader" -> "x";
"isHeaderBlock" -> "_";
"isHruleChar" -> "_";
"isImage" -> "_";
"isImageFilename" -> "x";
"isInheritedFromStyles" -> "isInheritedFromStyles";
"isInlineCommand" -> "inlineCommands";
"isInlineCommand" -> "treatAsInline";
"isInlineTag" -> "a";
"isInlineTag" -> "blockTags";
"isInlineTag" -> "isCommentTag";
"isInlineTag" -> "t";
"isInlineTag" -> "x";
"isInlineTag\'" -> "_";
"isInlineTag\'" -> "isBlockTag\'";
"isInlineTag\'" -> "t";
"isLineBreak" -> "_";
"isListBlock" -> "_";
"isListItem" -> "_";
"isListType" -> "_";
"isLocatorSep" -> "_";
"isLowerHex" -> "x";
"isMathML" -> "_";
"isMetaPar" -> "_";
"isMetaPar" -> "getStyleNames";
"isMetaPar" -> "metaStyles";
"isMimeType" -> "_";
"isMimeType" -> "isSpace";
"isNewlineTok" -> "_";
"isNote" -> "_";
"isNotesBody" -> "elName";
"isNotesBody" -> "findAttr";
"isNotesDiv" -> "_";
"isNumber" -> "_";
"isNumber" -> "t";
"isOrderedListMarker" -> "a";
"isOrderedListMarker" -> "anyOrderedListMarker";
"isOrderedListMarker" -> "defaultParserState";
"isOrderedListMarker" -> "isRight";
"isPara" -> "_";
"isParaOrList" -> "_";
"isPlainOrPara" -> "_";
"isQuoted" -> "_";
"isRefRemove" -> "meta";
"isRefRemove" -> "truish";
"isRight" -> "_";
"isSetWithDefault" -> "isSet\'";
"isSetWithDefault" -> "x";
"isSet\'" -> "findAttr\'";
"isSet\'" -> "stringToBool\'";
"isSet\'" -> "x";
"isSimpleBlockQuote" -> "isPlainOrPara";
"isSimpleList" -> "_";
"isSimpleList" -> "isSimpleListItem";
"isSimpleList" -> "items";
"isSimpleList" -> "x";
"isSimpleListItem" -> "_";
"isSimpleListItem" -> "isPlainOrPara";
"isSimpleListItem" -> "isSimpleList";
"isSimpleListItem" -> "x";
"isSmallCaps" -> "_";
"isSourceAttribute" -> "x";
"isSp" -> "_";
"isSpace" -> "_";
"isSpaceChar" -> "_";
"isSpaceOrTab" -> "_";
"isSpaceTok" -> "_";
"isSpacey" -> "_";
"isSpacy" -> "_";
"isSpecial" -> "_";
"isStyle" -> "isElem";
"isStyleToTrace" -> "findStyleFamily";
"isStyleToTrace" -> "x";
"isSymbolTok" -> "_";
"isTaskListItem" -> "_";
"isTextTag" -> "a";
"isTightList" -> "_";
"isTightList" -> "item";
"isURI" -> "schemes";
"isURI" -> "uriScheme";
"isUnderline" -> "_";
"isWidthHeightParameter" -> "_";
"isWidthHeightParameter" -> "x";
"isWordTok" -> "_";
"isYesValue" -> "_";
"italic" -> "enclosed";
"italic" -> "inline";
"italic" -> "inlineMarkup";
"italic" -> "nestedInlines";
"italic" -> "try";
"italicize" -> "a";
"italicize" -> "x";
"italics" -> "enclosed";
"italics" -> "inline";
"italics" -> "try";
"item" -> "blocks";
"item" -> "controlSeq";
"item" -> "skipopts";
"itemEndsWithTightList" -> "_";
"itemEndsWithTightList" -> "isTightList";
"itemToReference" -> "_";
"itemToReference" -> "a";
"itemToReference" -> "addField";
"itemToReference" -> "bib";
"itemToReference" -> "concatWith";
"itemToReference" -> "convertEnDash";
"itemToReference" -> "defaultLang";
"itemToReference" -> "getDate";
"itemToReference" -> "getField";
"itemToReference" -> "getLiteralList";
"itemToReference" -> "getLiteralList\'";
"itemToReference" -> "getNameList";
"itemToReference" -> "getOldDate";
"itemToReference" -> "getPeriodicalTitle";
"itemToReference" -> "getRawField";
"itemToReference" -> "getShortTitle";
"itemToReference" -> "getTitle";
"itemToReference" -> "getTypeAndGenre";
"itemToReference" -> "identifier";
"itemToReference" -> "isNumber";
"itemToReference" -> "item";
"itemToReference" -> "ordinalize";
"itemToReference" -> "parseOptions";
"itemToReference" -> "resolveKey";
"itemToReference" -> "resolveKey\'";
"itemToReference" -> "stringify";
"itemToReference" -> "t";
"itemToReference" -> "toIETF";
"itemToReference" -> "x";
"items" -> "getMediaBag";
"items" -> "liftPandocLua";
"items" -> "pushIterator";
"iterateS" -> "a";
"iterateS" -> "x";
"iterateSL" -> "a";
"iterateSL" -> "x";
"iterateS\'" -> "_";
"iterateS\'" -> "a";
"iterateS\'" -> "x";
"jiraLinkToPandoc" -> "_";
"jiraLinkToPandoc" -> "jiraToPandocInlines";
"jiraLinkToPandoc" -> "link";
"jiraLinkToPandoc" -> "str";
"jiraLinkToPandoc" -> "url";
"jiraToPandoc" -> "jiraToPandocBlocks";
"jiraToPandocBlocks" -> "blockQuote";
"jiraToPandocBlocks" -> "colorName";
"jiraToPandocBlocks" -> "header";
"jiraToPandocBlocks" -> "horizontalRule";
"jiraToPandocBlocks" -> "items";
"jiraToPandocBlocks" -> "jiraToPandocBlocks";
"jiraToPandocBlocks" -> "jiraToPandocInlines";
"jiraToPandocBlocks" -> "para";
"jiraToPandocBlocks" -> "toPandocCodeBlocks";
"jiraToPandocBlocks" -> "toPandocDiv";
"jiraToPandocBlocks" -> "toPandocList";
"jiraToPandocBlocks" -> "toPandocTable";
"jiraToPandocBlocks" -> "txt";
"jiraToPandocInlines" -> "_";
"jiraToPandocInlines" -> "attr";
"jiraToPandocInlines" -> "code";
"jiraToPandocInlines" -> "colorName";
"jiraToPandocInlines" -> "emph";
"jiraToPandocInlines" -> "fromInlines";
"jiraToPandocInlines" -> "iconUnicode";
"jiraToPandocInlines" -> "jiraLinkToPandoc";
"jiraToPandocInlines" -> "jiraToPandocInlines";
"jiraToPandocInlines" -> "linebreak";
"jiraToPandocInlines" -> "link";
"jiraToPandocInlines" -> "space";
"jiraToPandocInlines" -> "str";
"jiraToPandocInlines" -> "strikeout";
"jiraToPandocInlines" -> "stringify";
"jiraToPandocInlines" -> "strong";
"jiraToPandocInlines" -> "subscript";
"jiraToPandocInlines" -> "superscript";
"jiraToPandocInlines" -> "t";
"jiraToPandocInlines" -> "title";
"jiraToPandocInlines" -> "toList";
"jiraToPandocInlines" -> "underline";
"jiraToPandocInlines" -> "url";
"joinLineBlocks" -> "joinLineBlocks";
"jsonMetaToMeta" -> "jsonMetaToMeta";
"jsonMetaToMeta" -> "t";
"jsonMetaToMeta" -> "tshow";
"jsonMetaToMeta" -> "x";
"jsonMetaToPairs" -> "t";
"jsonMetaToPairs" -> "x";
"jumpBack" -> "a";
"jumpBack" -> "maybeToChoice";
"jumpBack" -> "popElement";
"jumpBack" -> "tryModifyState";
"jumpThere" -> "pushElement";
"jumpThere" -> "withState";
"keepingTheValue" -> "a";
"keepingTheValue" -> "l";
"keyToMarkdown" -> "attr";
"keyToMarkdown" -> "empty";
"keyToMarkdown" -> "linkAttributes";
"keyToMarkdown" -> "literal";
"keyToMarkdown" -> "space";
"keyToRST" -> "_";
"keyToRST" -> "inlineListToRST";
"keyToRST" -> "label";
"keyToRST" -> "literal";
"keyValAttr" -> "_";
"keyValAttr" -> "enclosed";
"keyValAttr" -> "escapedChar\'";
"keyValAttr" -> "identifier";
"keyValAttr" -> "keyval";
"keyValAttr" -> "litChar";
"keyValAttr" -> "manyChar";
"keyValAttr" -> "try";
"keyValues" -> "many1Char";
"keyValues" -> "manyTillChar";
"keyValues" -> "newline";
"keyValues" -> "nonspaceChar";
"keyValues" -> "skipSpaces";
"keyValues" -> "spaceChar";
"keyValues" -> "try";
"keyval" -> "_";
"keyval" -> "braced";
"keyval" -> "isWordTok";
"keyval" -> "satisfyTok";
"keyval" -> "sp";
"keyval" -> "symbol";
"keyval" -> "try";
"keyval" -> "untokenize";
"keyval" -> "withRaw";
"keyvals" -> "keyval";
"keyvals" -> "sp";
"keyvals" -> "symbol";
"keyvals" -> "try";
"keywordHandlers" -> "addLinkFormatter";
"keywordHandlers" -> "anyLine";
"keywordHandlers" -> "collectAsList";
"keywordHandlers" -> "collectLines";
"keywordHandlers" -> "emphChars";
"keywordHandlers" -> "exportSettings";
"keywordHandlers" -> "lineOfInlines";
"keywordHandlers" -> "macroDefinition";
"keywordHandlers" -> "metaExportSnippet";
"keywordHandlers" -> "parseThen";
"keywordHandlers" -> "registerMacro";
"keywordHandlers" -> "registerTodoSequence";
"keywordHandlers" -> "setEmphasisPostChar";
"keywordHandlers" -> "setEmphasisPreChar";
"keywordHandlers" -> "setExcludedTags";
"keywordHandlers" -> "setSelectedTags";
"keywordHandlers" -> "tagList";
"keywordHandlers" -> "todoSequence";
"keywordLine" -> "keywordHandlers";
"keywordLine" -> "metaKey";
"keywordLine" -> "try";
"knownLanguages" -> "toListingsLanguage";
"knownLanguages" -> "writeBeamer";
"knownLanguages" -> "writeLaTeX";
"kvPair" -> "blankline";
"kvPair" -> "many1TillChar";
"kvPair" -> "manyTillChar";
"kvPair" -> "newline";
"kvPair" -> "nonspaceChar";
"kvPair" -> "trim";
"kvPair" -> "try";
"l" -> "l";
"label" -> "braced";
"label" -> "controlSeq";
"label" -> "t";
"label" -> "untokenize";
"labelFor" -> "empty";
"labelFor" -> "literal";
"labelFor" -> "toLabel";
"langAttr" -> "enclosed";
"langAttr" -> "t";
"langAttr" -> "try";
"langToListingsMap" -> "langsList";
"languageFor" -> "escapeStringForXML";
"languageFor" -> "l";
"languageFor" -> "languages";
"languageFor" -> "languagesByExtension";
"languageNames" -> "lookupAttr";
"languageNames" -> "safeRead";
"languageNames" -> "stringify";
"languageNames" -> "trim";
"languageNames" -> "tshow";
"languageNames" -> "uniqueIdent";
"latex" -> "blocksToInlines";
"latex" -> "latex\'";
"latexCodeBlock" -> "anyLine";
"latexCodeBlock" -> "blankline";
"latexCodeBlock" -> "many1Till";
"latexCodeBlock" -> "spaceChar";
"latexCodeBlock" -> "try";
"latexEnvStart" -> "blankline";
"latexEnvStart" -> "many1Char";
"latexEnvStart" -> "skipSpaces";
"latexEnvStart" -> "textStr";
"latexEnvStart" -> "try";
"latexFragment" -> "anyLine";
"latexFragment" -> "blankline";
"latexFragment" -> "getExportSetting";
"latexFragment" -> "latexEnvStart";
"latexFragment" -> "returnF";
"latexFragment" -> "skipSpaces";
"latexFragment" -> "textStr";
"latexFragment" -> "try";
"latexNames" -> "latex\'";
"latexNames" -> "t";
"latexNames" -> "toNameList";
"latex\'" -> "_";
"latex\'" -> "parseLaTeX";
"latex\'" -> "t";
"lbreak" -> "controlSeq";
"lbreak" -> "skipopts";
"lbreak" -> "spaces";
"lchop" -> "_";
"leftBiasedMergeRunStyle" -> "a";
"leftBiasedMergeRunStyle" -> "isSmallCaps";
"legacyDateRanges" -> "_";
"legacyDateRanges" -> "lit";
"legacyDateRanges" -> "x";
"lengthToDim" -> "_";
"lengthToDim" -> "a";
"lengthToDim" -> "numUnit";
"letmacro" -> "_";
"letmacro" -> "anyControlSeq";
"letmacro" -> "bracedOrToken";
"letmacro" -> "controlSeq";
"letmacro" -> "doMacros\'";
"letmacro" -> "spaces";
"letmacro" -> "symbol";
"letmacro" -> "withVerbatimMode";
"letterContents" -> "_";
"letterContents" -> "blocks";
"letterContents" -> "fromList";
"letterContents" -> "para";
"lettrine" -> "extractSpaces";
"lettrine" -> "opt";
"lettrine" -> "tok";
"lettrine" -> "x";
"levelElemToLevel" -> "_";
"levelElemToLevel" -> "findAttrByName";
"levelElemToLevel" -> "findAttrTextByName";
"levelElemToLevel" -> "findChildByName";
"levelElemToLevel" -> "isElem";
"levelElemToLevel" -> "txt";
"lexArgs" -> "eofline";
"lexArgs" -> "escape";
"lexArgs" -> "escapedQuote";
"lexArgs" -> "macroArg";
"lexArgs" -> "regularText";
"lexArgs" -> "spaceTabChar";
"lexArgs" -> "spacetab";
"lexArgs" -> "try";
"lexComment" -> "eofline";
"lexComment" -> "try";
"lexConditional" -> "expression";
"lexConditional" -> "lexGroup";
"lexConditional" -> "manToken";
"lexConditional" -> "modifyState";
"lexConditional" -> "newline";
"lexConditional" -> "report";
"lexConditional" -> "spacetab";
"lexConditional" -> "t";
"lexConditional" -> "try";
"lexEmptyLine" -> "newline";
"lexEmptyLine" -> "singleTok";
"lexGroup" -> "manToken";
"lexGroup" -> "try";
"lexIncludeFile" -> "getResourcePath";
"lexIncludeFile" -> "linePartsToText";
"lexIncludeFile" -> "readFileFromDirs";
"lexIncludeFile" -> "report";
"lexLine" -> "eofline";
"lexLine" -> "linePart";
"lexLine" -> "singleTok";
"lexLine" -> "try";
"lexMacro" -> "_";
"lexMacro" -> "lexArgs";
"lexMacro" -> "lexConditional";
"lexMacro" -> "lexIncludeFile";
"lexMacro" -> "lexMacroDef";
"lexMacro" -> "lexStringDef";
"lexMacro" -> "lexTable";
"lexMacro" -> "macroName";
"lexMacro" -> "manyChar";
"lexMacro" -> "resolveMacro";
"lexMacro" -> "singleTok";
"lexMacro" -> "spacetab";
"lexMacroDef" -> "_";
"lexMacroDef" -> "lexArgs";
"lexMacroDef" -> "linePartsToText";
"lexMacroDef" -> "macroName";
"lexMacroDef" -> "manToken";
"lexMacroDef" -> "modifyState";
"lexMacroDef" -> "spacetab";
"lexMacroDef" -> "textStr";
"lexMacroDef" -> "try";
"lexMacroDef" -> "x";
"lexRoff" -> "manToken";
"lexRoff" -> "readWithM";
"lexRoff" -> "txt";
"lexStringDef" -> "linePartsToText";
"lexStringDef" -> "modifyState";
"lexStringDef" -> "singleTok";
"lexStringDef" -> "x";
"lexTable" -> "_";
"lexTable" -> "eofline";
"lexTable" -> "lexComment";
"lexTable" -> "lexTableRows";
"lexTable" -> "modifyState";
"lexTable" -> "newline";
"lexTable" -> "singleTok";
"lexTable" -> "spaces";
"lexTable" -> "spacetab";
"lexTable" -> "tableOptions";
"lexTable" -> "try";
"lexTableRows" -> "lexComment";
"lexTableRows" -> "newline";
"lexTableRows" -> "spaceChar";
"lexTableRows" -> "spaces";
"lexTableRows" -> "tableFormatSpec";
"lexTableRows" -> "tableRow";
"lexTableRows" -> "try";
"lhsCodeBlock" -> "birdCodeBlock";
"lhsCodeBlock" -> "blanklines";
"lhsCodeBlock" -> "codeBlockStart";
"lhsCodeBlock" -> "guardEnabled";
"lhsCodeBlock" -> "latexCodeBlock";
"lhsCodeBlock" -> "lhsCodeBlockBird";
"lhsCodeBlock" -> "lhsCodeBlockInverseBird";
"lhsCodeBlock" -> "lhsCodeBlockLaTeX";
"lhsCodeBlock" -> "try";
"lhsCodeBlockBird" -> "lhsCodeBlockBirdWith";
"lhsCodeBlockBirdWith" -> "birdTrackLine";
"lhsCodeBlockBirdWith" -> "blanklines";
"lhsCodeBlockBirdWith" -> "try";
"lhsCodeBlockBirdWith" -> "when";
"lhsCodeBlockInverseBird" -> "lhsCodeBlockBirdWith";
"lhsCodeBlockLaTeX" -> "blanklines";
"lhsCodeBlockLaTeX" -> "many1TillChar";
"lhsCodeBlockLaTeX" -> "newline";
"lhsCodeBlockLaTeX" -> "spaceChar";
"lhsCodeBlockLaTeX" -> "stripTrailingNewlines";
"lhsCodeBlockLaTeX" -> "try";
"li" -> "blocksInTags";
"li" -> "firstParaToPlain";
"li" -> "htmlTag";
"li" -> "spaces";
"liftA" -> "a";
"liftA2" -> "a";
"liftA3" -> "a";
"liftA3" -> "and4";
"liftA3" -> "uncurry4";
"liftA3" -> "x";
"liftA4" -> "a";
"liftA4" -> "and5";
"liftA4" -> "uncurry5";
"liftA5" -> "a";
"liftA5" -> "and6";
"liftA5" -> "uncurry6";
"liftA6" -> "a";
"liftA6" -> "and3";
"liftA6" -> "uncurry3";
"liftAsSuccess" -> "a";
"liftAsSuccess" -> "x";
"liftPandocLua" -> "a";
"lineBlock" -> "blankline";
"lineBlock" -> "getIndent";
"lineBlock" -> "guardEnabled";
"lineBlock" -> "indent";
"lineBlock" -> "indentWith";
"lineBlock" -> "inlines";
"lineBlock" -> "lineBlockLines";
"lineBlock" -> "parseFromString\'";
"lineBlock" -> "parseInlineFromText";
"lineBlock" -> "sepBy1\'";
"lineBlock" -> "trimInlinesF";
"lineBlock" -> "try";
"lineBlock" -> "verseLine";
"lineBlockDirective" -> "parseInlineFromText";
"lineBlockDirective" -> "stripTrailingNewlines";
"lineBlockLine" -> "anyLine";
"lineBlockLine" -> "newline";
"lineBlockLine" -> "spaceChar";
"lineBlockLine" -> "try";
"lineBlockLines" -> "blankLineBlockLine";
"lineBlockLines" -> "blankline";
"lineBlockLines" -> "lineBlockLine";
"lineBlockLines" -> "try";
"lineBreakToSpace" -> "x";
"lineClump" -> "anyLine";
"lineClump" -> "blankline";
"lineClump" -> "blanklines";
"lineInl" -> "linePartsToInlines";
"lineInl" -> "mline";
"lineNumberSwitch" -> "genericSwitch";
"lineNumberSwitch" -> "manyChar";
"lineOfInlines" -> "inline";
"lineOfInlines" -> "newline";
"lineOfInlines" -> "trimInlinesF";
"lineOfInlines" -> "updateLastPreCharPos";
"linePart" -> "escape";
"linePart" -> "macroArg";
"linePart" -> "quoteChar";
"linePart" -> "regularText";
"linePart" -> "spaceTabChar";
"linePartsToInlines" -> "_";
"linePartsToInlines" -> "code";
"linePartsToInlines" -> "emph";
"linePartsToInlines" -> "strong";
"linePartsToInlines" -> "t";
"linePartsToInlines" -> "x";
"linePartsToText" -> "_";
"linebreak" -> "a";
"linebreak" -> "newline";
"linebreak" -> "skipSpaces";
"linebreak" -> "try";
"linesToLineBlock" -> "blankline";
"linesToLineBlock" -> "inlineListToRST";
"linesToLineBlock" -> "literal";
"linesToLineBlock" -> "vcat";
"linesToPara" -> "combineLines";
"link" -> "attr";
"link" -> "attributes";
"link" -> "autoLink";
"link" -> "bracketed";
"link" -> "eof\'";
"link" -> "explicitLink";
"link" -> "image";
"link" -> "imageLink";
"link" -> "inline";
"link" -> "isURI";
"link" -> "l";
"link" -> "linkContent";
"link" -> "linkText";
"link" -> "many1Till";
"link" -> "manyChar";
"link" -> "manyTillChar";
"link" -> "newline";
"link" -> "nonspaceChar";
"link" -> "prefix";
"link" -> "procLink";
"link" -> "reference";
"link" -> "referenceLink";
"link" -> "regLink";
"link" -> "space";
"link" -> "textStr";
"link" -> "title";
"link" -> "titleLink";
"link" -> "try";
"link" -> "uri";
"link" -> "url";
"link" -> "wikiLink";
"linkAttributes" -> "attr";
"linkAttributes" -> "attrsToMarkdown";
"linkAttributes" -> "empty";
"linkAttributes" -> "isEnabled";
"linkContent" -> "inline";
"linkContent" -> "trimInlinesF";
"linkLikeOrgRefCite" -> "_";
"linkLikeOrgRefCite" -> "inline";
"linkLikeOrgRefCite" -> "orgRefCiteKey";
"linkLikeOrgRefCite" -> "orgRefCiteMode";
"linkLikeOrgRefCite" -> "spaceChar";
"linkLikeOrgRefCite" -> "trimInlinesF";
"linkLikeOrgRefCite" -> "try";
"linkOrImage" -> "angleLink";
"linkOrImage" -> "explicitOrImageLink";
"linkOrImage" -> "image";
"linkOrImage" -> "link";
"linkOrImage" -> "plainLink";
"linkOrImage" -> "selflinkOrImage";
"linkOrImage" -> "try";
"linkRelElement" -> "_";
"linkRelElement" -> "getSlideIdNum";
"linkRelElement" -> "mknode";
"linkRelElement" -> "url";
"linkRelElements" -> "linkRelElement";
"linkTarget" -> "enclosedByPair1";
"linkText" -> "_";
"linkText" -> "description";
"linkText" -> "inline";
"linkText" -> "interwikiToUrl";
"linkText" -> "l";
"linkText" -> "linkContent";
"linkText" -> "many1Till";
"linkText" -> "normalizePath";
"linkText" -> "parseFromString\'";
"linkText" -> "parseLink";
"linkText" -> "splitInterwiki";
"linkText" -> "trim";
"linkText" -> "url";
"linkText" -> "urlToText";
"linkTitle" -> "quotedTitle";
"linkToInlinesF" -> "_";
"linkToInlinesF" -> "cleanLinkText";
"linkToInlinesF" -> "internalLink";
"linkifyVariables" -> "_";
"linkifyVariables" -> "extractText";
"linkifyVariables" -> "x";
"list" -> "anyList";
"list" -> "bulletList";
"list" -> "definitionList";
"list" -> "listItem";
"list" -> "orderedList";
"list" -> "prefix";
"list" -> "try";
"listAttribsToString" -> "_";
"listAttribsToString" -> "camelCaseToHyphenated";
"listAttribsToString" -> "tshow";
"listAttribsToText" -> "_";
"listAttribsToText" -> "camelCaseToHyphenated";
"listAttribsToText" -> "tshow";
"listBegin" -> "_";
"listBegin" -> "blocks";
"listBegin" -> "empty";
"listChunk" -> "countChar";
"listChunk" -> "template";
"listContinuation" -> "_";
"listContinuation" -> "anyLineNewline";
"listContinuation" -> "attrFromBlockAttributes";
"listContinuation" -> "blankline";
"listContinuation" -> "blockAttributes";
"listContinuation" -> "countChar";
"listContinuation" -> "documentTree";
"listContinuation" -> "gobbleSpaces";
"listContinuation" -> "indentWith";
"listContinuation" -> "listLine";
"listContinuation" -> "listStart";
"listContinuation" -> "many1Char";
"listContinuation" -> "manyChar";
"listContinuation" -> "notFollowedByDivCloser";
"listContinuation" -> "notFollowedByHtmlCloser";
"listContinuation" -> "notFollowedBy\'";
"listContinuation" -> "orgBlock";
"listContinuation" -> "try";
"listContinuation" -> "unprunedHeadlineToBlocks";
"listContinuation" -> "withRaw";
"listContinuation" -> "x";
"listItem" -> "_";
"listItem" -> "a";
"listItem" -> "anyLineNewline";
"listItem" -> "anyListItem";
"listItem" -> "anyOrderedListMarker";
"listItem" -> "blankline";
"listItem" -> "blocks";
"listItem" -> "bulletItem";
"listItem" -> "continuation";
"listItem" -> "defaultParserState";
"listItem" -> "endOfParaElement";
"listItem" -> "guardColumnOne";
"listItem" -> "inline";
"listItem" -> "linePartsToText";
"listItem" -> "listChunk";
"listItem" -> "listContinuation";
"listItem" -> "listItem\'";
"listItem" -> "listStart";
"listItem" -> "listStartChar";
"listItem" -> "listTypeMatches";
"listItem" -> "many1Till";
"listItem" -> "memptyLine";
"listItem" -> "mmacro";
"listItem" -> "newline";
"listItem" -> "nextItem";
"listItem" -> "numberedItem";
"listItem" -> "para";
"listItem" -> "parseBlocks";
"listItem" -> "parseFromString";
"listItem" -> "parseFromString\'";
"listItem" -> "parseInlines";
"listItem" -> "raw";
"listItem" -> "rawListItem";
"listItem" -> "skipSpaces";
"listItem" -> "spaceChar";
"listItem" -> "taskListItemFromAscii";
"listItem" -> "try";
"listItem" -> "withContext";
"listItem" -> "x";
"listItemContent" -> "blockML";
"listItemContent" -> "blocksThenInline";
"listItemContent" -> "listTodoMarker";
"listItemContent" -> "plainInlineML\'";
"listItemContent" -> "try";
"listItemContent" -> "x";
"listItemContentsUntil" -> "a";
"listItemContentsUntil" -> "allowPara";
"listItemContentsUntil" -> "anyListUntil";
"listItemContentsUntil" -> "blankline";
"listItemContentsUntil" -> "blockElements";
"listItemContentsUntil" -> "continuation";
"listItemContentsUntil" -> "indentWith";
"listItemContentsUntil" -> "listStart";
"listItemContentsUntil" -> "paraUntil";
"listItemContentsUntil" -> "try";
"listItemLine" -> "a";
"listItemLine" -> "anyLine";
"listItemLine" -> "continuation";
"listItemLine" -> "inline";
"listItemLine" -> "list";
"listItemLine" -> "listContinuation";
"listItemLine" -> "many1Till";
"listItemLine" -> "parseFromString";
"listItemLine" -> "parseFromString\'";
"listItemLine" -> "parseInline";
"listItemLine" -> "prefix";
"listItemLine" -> "textStr";
"listItemLine" -> "try";
"listItemLine" -> "x";
"listItemToConTeXt" -> "blockListToConTeXt";
"listItemToConTeXt" -> "list";
"listItemToDocbook" -> "blocksToDocbook";
"listItemToDocbook" -> "inTagsIndented";
"listItemToDocbook" -> "item";
"listItemToDocbook" -> "plainToPara";
"listItemToDokuWiki" -> "_";
"listItemToDokuWiki" -> "blockListToDokuWiki";
"listItemToDokuWiki" -> "blockToDokuWiki";
"listItemToDokuWiki" -> "indent";
"listItemToDokuWiki" -> "items";
"listItemToDokuWiki" -> "vcat";
"listItemToHtml" -> "blockListToHtml";
"listItemToHtml" -> "inlineListToHtml";
"listItemToHtml" -> "nl";
"listItemToICML" -> "_";
"listItemToICML" -> "beginsWithName";
"listItemToICML" -> "block";
"listItemToICML" -> "blockToICML";
"listItemToICML" -> "blocksToICML";
"listItemToICML" -> "intersperseBrs";
"listItemToICML" -> "item";
"listItemToICML" -> "lowerAlphaName";
"listItemToICML" -> "lowerRomanName";
"listItemToICML" -> "tshow";
"listItemToICML" -> "upperAlphaName";
"listItemToICML" -> "upperRomanName";
"listItemToJATS" -> "demoteHeaderAndRefs";
"listItemToJATS" -> "empty";
"listItemToJATS" -> "inTagsIndented";
"listItemToJATS" -> "inTagsSimple";
"listItemToJATS" -> "isParaOrList";
"listItemToJATS" -> "item";
"listItemToJATS" -> "wrappedBlocksToJATS";
"listItemToLaTeX" -> "_";
"listItemToLaTeX" -> "blockListToLaTeX";
"listItemToLaTeX" -> "inlineListToLaTeX";
"listItemToMediaWiki" -> "blockListToMediaWiki";
"listItemToMediaWiki" -> "items";
"listItemToOpenXML" -> "_";
"listItemToOpenXML" -> "baseListId";
"listItemToOpenXML" -> "blockToOpenXML";
"listItemToOpenXML" -> "blocksToOpenXML";
"listItemToOpenXML" -> "isListBlock";
"listItemToOpenXML" -> "withNumId";
"listItemToRTF" -> "_";
"listItemToRTF" -> "blockToRTF";
"listItemToRTF" -> "indent";
"listItemToRTF" -> "listIncrement";
"listItemToRTF" -> "rtfCompact";
"listItemToRTF" -> "t";
"listItemToRTF" -> "tshow";
"listItemToRTF" -> "x";
"listItemToTEI" -> "blocksToTEI";
"listItemToTEI" -> "inTagsIndented";
"listItemToTEI" -> "item";
"listItemToTEI" -> "plainToPara";
"listItemToTexinfo" -> "_";
"listItemToTexinfo" -> "blankline";
"listItemToTexinfo" -> "blockListToTexinfo";
"listItemToTexinfo" -> "empty";
"listItemToTextile" -> "blockListToTextile";
"listItemToTextile" -> "items";
"listItemToTextile" -> "tshow";
"listItemToXWiki" -> "blockListToXWiki";
"listItemToZimWiki" -> "blockListToZimWiki";
"listItemToZimWiki" -> "indent";
"listItemToZimWiki" -> "items";
"listItem\'" -> "block";
"listItem\'" -> "firstParaToPlain";
"listItem\'" -> "listChunk";
"listItem\'" -> "listStart";
"listItem\'" -> "listStartChar";
"listItem\'" -> "newline";
"listItem\'" -> "parseFromString";
"listItem\'" -> "spaceChar";
"listItem\'" -> "try";
"listItemsToDocbook" -> "items";
"listItemsToDocbook" -> "listItemToDocbook";
"listItemsToDocbook" -> "vcat";
"listItemsToICML" -> "_";
"listItemsToICML" -> "empty";
"listItemsToICML" -> "intersperseBrs";
"listItemsToICML" -> "listItemToICML";
"listItemsToJATS" -> "items";
"listItemsToJATS" -> "listItemToJATS";
"listItemsToJATS" -> "vcat";
"listItemsToOpenDocument" -> "inTagsIndented";
"listItemsToOpenDocument" -> "plainToPara";
"listItemsToOpenDocument" -> "vcat";
"listItemsToOpenDocument" -> "withParagraphStyle";
"listItemsToTEI" -> "items";
"listItemsToTEI" -> "listItemToTEI";
"listItemsToTEI" -> "vcat";
"listLevelStyle" -> "inTags";
"listLevelStyle" -> "indent";
"listLevelStyle" -> "selfClosingTag";
"listLevelStyle" -> "tshow";
"listLine" -> "anyLineNewline";
"listLine" -> "blankline";
"listLine" -> "gobbleSpaces";
"listLine" -> "indentWith";
"listLine" -> "listLineCommon";
"listLine" -> "listStart";
"listLine" -> "notFollowedByDivCloser";
"listLine" -> "notFollowedByHtmlCloser";
"listLine" -> "notFollowedBy\'";
"listLine" -> "spaceChar";
"listLine" -> "try";
"listLineCommon" -> "code";
"listLineCommon" -> "countChar";
"listLineCommon" -> "htmlTag";
"listLineCommon" -> "isCommentTag";
"listLineCommon" -> "many1Char";
"listLineCommon" -> "newline";
"listLineCommon" -> "withRaw";
"listParagraphStyles" -> "fromString";
"listParagraphStyles" -> "listParagraphDivs";
"listStart" -> "bulletListMarkers";
"listStart" -> "bulletListStart";
"listStart" -> "definitionListStart";
"listStart" -> "genericListStart";
"listStart" -> "listStartChar";
"listStart" -> "orderedListMarkers";
"listStart" -> "orderedListStart";
"listStart" -> "spaceChar";
"listStart" -> "try";
"listTableDirective" -> "_";
"listTableDirective" -> "bodyRows";
"listTableDirective" -> "headerRow";
"listTableDirective" -> "inline";
"listTableDirective" -> "l";
"listTableDirective" -> "parseBlocks";
"listTableDirective" -> "parseFromString\'";
"listTableDirective" -> "safeRead";
"listTableDirective" -> "splitTextBy";
"listTableDirective" -> "title";
"listTableDirective" -> "toHeaderRow";
"listTableDirective" -> "toRow";
"listTableDirective" -> "trim";
"listTableDirective" -> "x";
"listTodoMarker" -> "between";
"listTodoMarker" -> "makeListMarkerSpan";
"listTodoMarker" -> "spaceChar";
"listTodoMarker" -> "try";
"listTodoMarker" -> "x";
"listTypeMatches" -> "_";
"listTypeMatches" -> "x";
"listenv" -> "env";
"listenv" -> "try";
"listingsLanguage" -> "fromListingsLanguage";
"listingsLanguage" -> "l";
"listingsToLangMap" -> "langsList";
"listingsToLangMap" -> "switch";
"lit" -> "str";
"litChar" -> "blankline";
"litChar" -> "characterReference";
"litChar" -> "escapedChar\'";
"litChar" -> "newline";
"litChar" -> "try";
"literal" -> "_";
"literal" -> "htmlElement";
"literal" -> "rawBlock";
"literalTag" -> "closeTag";
"literalTag" -> "eol";
"literalTag" -> "manyTillChar";
"literalTag" -> "openTag";
"literalTag" -> "spaceChar";
"literalTag" -> "try";
"literalTag" -> "unindent";
"loElemToLevelOverride" -> "_";
"loElemToLevelOverride" -> "findAttrByName";
"loElemToLevelOverride" -> "findAttrTextByName";
"loElemToLevelOverride" -> "findChildByName";
"loElemToLevelOverride" -> "isElem";
"loElemToLevelOverride" -> "levelElemToLevel";
"loadScriptFromDataDir" -> "liftPandocLua";
"loadScriptFromDataDir" -> "readDataFile";
"loadScriptFromDataDir" -> "when";
"loadStringAsPackage" -> "a";
"loadStringAsPackage" -> "addFunction";
"loadStringAsPackage" -> "liftPandocLua";
"loadStringAsPackage" -> "loadScriptFromDataDir";
"loadStringAsPackage" -> "runPandocLua";
"locatorTerms" -> "metaValueToPath";
"locatorTerms" -> "metaValueToReference";
"locatorTerms" -> "metaValueToText";
"locatorTerms" -> "referenceToMetaValue";
"logIOError" -> "_";
"logIOError" -> "report";
"logMessage" -> "addLogMessage";
"logMessageTypeName" -> "logMessageTypeName";
"logMessageTypeName" -> "tostringLogMessage";
"logOutput" -> "alertIndent";
"logOutput" -> "messageVerbosity";
"logOutput" -> "showLogMessage";
"lookupAttr" -> "a";
"lookupAttr" -> "lookupAttr\'";
"lookupAttr" -> "maybeToChoice";
"lookupAttr" -> "x";
"lookupAttrTextBy" -> "x";
"lookupAttrWithDefault" -> "a";
"lookupAttrWithDefault" -> "lookupAttr\'";
"lookupAttrWithDefault" -> "x";
"lookupAttr\'" -> "a";
"lookupAttr\'" -> "findAttr\'";
"lookupAttr\'" -> "readLookupable";
"lookupAttr\'" -> "x";
"lookupDefaultingAttr" -> "a";
"lookupDefaultingAttr" -> "lookupAttrWithDefault";
"lookupDefaultingAttr" -> "x";
"lookupEndnote" -> "_";
"lookupFootnote" -> "_";
"lookupHighlightStyle" -> "_";
"lookupHighlightStyle" -> "highlightingStyles";
"lookupHighlightStyle" -> "readFileLazy";
"lookupKey" -> "_";
"lookupKey" -> "logMessage";
"lookupKey" -> "lookupKey";
"lookupKey" -> "toKey";
"lookupLevel" -> "_";
"lookupLevel" -> "l";
"lookupListDefault" -> "l";
"lookupListStyle" -> "fromStyles";
"lookupListStyle" -> "lookupListStyleByName";
"lookupListStyle" -> "maybeToChoice";
"lookupMacro" -> "macroName";
"lookupMediaFn" -> "getMediaBag";
"lookupMediaFn" -> "liftPandocLua";
"lookupMetaBlocks" -> "_";
"lookupMetaBlocks" -> "meta";
"lookupMetaBool" -> "_";
"lookupMetaBool" -> "meta";
"lookupMetaBool" -> "x";
"lookupMetaInlines" -> "_";
"lookupMetaInlines" -> "meta";
"lookupMetaString" -> "_";
"lookupMetaString" -> "meta";
"lookupMetaString" -> "stringify";
"lookupNSiri" -> "extractFromState";
"lookupNSiri" -> "x";
"lookupNSprefix" -> "extractFromState";
"lookupNSprefix" -> "x";
"lookupPrettyAnchor" -> "anchor";
"lookupResource" -> "getExtraState";
"lookupResource" -> "getMediaEnv";
"lookupResource" -> "returnV";
"lookupTerm" -> "t";
"lookupTerm" -> "tm";
"lookupYAML" -> "_";
"lookupYAML" -> "fakePos";
"lookupYAML" -> "t";
"looseItem" -> "skipopts";
"lowerRoman" -> "romanNumeral";
"ltSign" -> "guardDisabled";
"ltSign" -> "htmlTag";
"ltSign" -> "isBlockTag";
"ltSign" -> "notFollowedByHtmlCloser";
"ltSign" -> "notFollowedBy\'";
"macro" -> "buildSpan";
"macro" -> "enclosed";
"macro" -> "inline";
"macro" -> "lookupMacro";
"macro" -> "macroName";
"macro" -> "macroWithParameters";
"macro" -> "manyChar";
"macro" -> "newline";
"macro" -> "oneOfStringsCI";
"macro" -> "parseFromString";
"macro" -> "spaceChar";
"macro" -> "specialChars";
"macro" -> "try";
"macroArg" -> "backslash";
"macroArg" -> "countChar";
"macroArg" -> "escapeArg";
"macroArg" -> "report";
"macroArg" -> "safeRead";
"macroArg" -> "try";
"macroArg" -> "x";
"macroAttr" -> "try";
"macroAttrs" -> "macroAttr";
"macroAttrs" -> "spaces";
"macroAttrs" -> "try";
"macroDef" -> "_";
"macroDef" -> "defmacro";
"macroDef" -> "guardDisabled";
"macroDef" -> "letmacro";
"macroDef" -> "newcommand";
"macroDef" -> "newenvironment";
"macroDef" -> "untokenize";
"macroDef" -> "withRaw";
"macroDefinition" -> "a";
"macroDefinition" -> "activeTodoMarkers";
"macroDefinition" -> "addLogMessage";
"macroDefinition" -> "askF";
"macroDefinition" -> "asksF";
"macroDefinition" -> "defaultOrgParserState";
"macroDefinition" -> "lookupMacro";
"macroDefinition" -> "macroName";
"macroDefinition" -> "many1Char";
"macroDefinition" -> "manyChar";
"macroDefinition" -> "nonspaceChar";
"macroDefinition" -> "optionsToParserState";
"macroDefinition" -> "placeholder";
"macroDefinition" -> "registerMacro";
"macroDefinition" -> "registerTodoSequence";
"macroDefinition" -> "returnF";
"macroDefinition" -> "runF";
"macroDefinition" -> "safeRead";
"macroDefinition" -> "skipSpaces";
"macroDefinition" -> "trimInlinesF";
"macroDefinition" -> "try";
"macroDefinition" -> "x";
"macroWithParameters" -> "attributes";
"macroWithParameters" -> "buildSpan";
"macroWithParameters" -> "macroName";
"macroWithParameters" -> "try";
"makeAttr" -> "nameValue";
"makeAttr" -> "splitTextBy";
"makeAttr" -> "syntax";
"makeCanonical" -> "a";
"makeCanonical" -> "x";
"makeCodeBold" -> "x";
"makeContent" -> "empty";
"makeContent" -> "inTagsSimple";
"makeContent" -> "makeLinkDest";
"makeDataURI" -> "encode";
"makeDataURI" -> "isOk";
"makeDataURI" -> "raw";
"makeDataURI" -> "toString";
"makeDataURI" -> "toText";
"makeDest" -> "escapeColons";
"makeDest" -> "escapeStringForXML";
"makeDest" -> "literal";
"makeDest" -> "txt";
"makeEndNotesSlideBlocks" -> "lookupMetaInlines";
"makeEndNotesSlideBlocks" -> "makeNoteEntry";
"makeEndNotesSlideBlocks" -> "meta";
"makeEndNotesSlideBlocks" -> "title";
"makeExample" -> "expression";
"makeExample" -> "prefix";
"makeExample" -> "trim";
"makeHeaderAnchor" -> "makeHeaderAnchor\'";
"makeHeaderAnchor\'" -> "_";
"makeHeaderAnchor\'" -> "isAnchorSpan";
"makeHeaderAnchor\'" -> "makeHeaderAnchor\'";
"makeHeaderAnchor\'" -> "uniqueIdent";
"makeId" -> "stringify";
"makeId" -> "toList";
"makeLink" -> "anchor";
"makeLink" -> "inline";
"makeLink" -> "parseFromString";
"makeLink" -> "title";
"makeLink" -> "try";
"makeLink" -> "url";
"makeLink" -> "wikiLinkText";
"makeLinkDest" -> "inTagsSimple";
"makeLinkDest" -> "makeDestName";
"makeLinkDest" -> "selfClosingTag";
"makeLinkDest" -> "vcat";
"makeListMarkerSpan" -> "_";
"makeListMarkerSpan" -> "x";
"makeLowercase" -> "alterStr";
"makeLowercase" -> "fromList";
"makeLowercase" -> "toList";
"makeMatcherC" -> "_";
"makeMatcherC" -> "a";
"makeMatcherC" -> "elemNameIs";
"makeMatcherC" -> "executeThere";
"makeMatcherC" -> "failEmpty";
"makeMatcherC" -> "recover";
"makeMatcherC" -> "returnV";
"makeMatcherC" -> "succeedWith";
"makeMathPlainer" -> "x";
"makeMediaEntries" -> "makeMediaEntry";
"makeMediaEntry" -> "_";
"makeMenuLine" -> "_";
"makeMenuLine" -> "inlineListForNode";
"makeMenuLine" -> "txt";
"makeMeta" -> "addMetaField";
"makeMeta" -> "authors";
"makeMeta" -> "title";
"makeNoteEntry" -> "_";
"makeNoteEntry" -> "a";
"makeNoteEntry" -> "tshow";
"makePDF" -> "_";
"makePDF" -> "changePathSeparators";
"makePDF" -> "context2pdf";
"makePDF" -> "generic2pdf";
"makePDF" -> "getVerbosity";
"makePDF" -> "handleImages";
"makePDF" -> "html2pdf";
"makePDF" -> "isSpace";
"makePDF" -> "makeWithWkhtmltopdf";
"makePDF" -> "runIOorExplode";
"makePDF" -> "source";
"makePDF" -> "tectonic2pdf";
"makePDF" -> "tex2pdf";
"makePDF" -> "uname";
"makePicElements" -> "_";
"makePicElements" -> "captionHeight";
"makePicElements" -> "createCaption";
"makePicElements" -> "elemToNameSpaces";
"makePicElements" -> "getContentShapeSize";
"makePicElements" -> "getMaster";
"makePicElements" -> "imageSize";
"makePicElements" -> "link";
"makePicElements" -> "mknode";
"makePicElements" -> "registerLink";
"makePicElements" -> "sizeInPixels";
"makePicElements" -> "x";
"makeSections" -> "_";
"makeSections" -> "attr";
"makeSections" -> "headerLtEq";
"makeSections" -> "ordNub";
"makeSections" -> "tshow";
"makeSections" -> "x";
"makeSelfContained" -> "addMetaField";
"makeSelfContained" -> "backslashEscapes";
"makeSelfContained" -> "blocksToInlines";
"makeSelfContained" -> "blocksToInlinesWithSep";
"makeSelfContained" -> "blocksToInlines\'";
"makeSelfContained" -> "camelCaseStrToHyphenated";
"makeSelfContained" -> "camelCaseToHyphenated";
"makeSelfContained" -> "capitalize";
"makeSelfContained" -> "collapseFilePath";
"makeSelfContained" -> "compactify";
"makeSelfContained" -> "compactifyDL";
"makeSelfContained" -> "convertTags";
"makeSelfContained" -> "crFilter";
"makeSelfContained" -> "deLink";
"makeSelfContained" -> "deNote";
"makeSelfContained" -> "defaultBlocksSeparator";
"makeSelfContained" -> "defaultUserDataDirs";
"makeSelfContained" -> "eastAsianLineBreakFilter";
"makeSelfContained" -> "elemText";
"makeSelfContained" -> "escapeStringUsing";
"makeSelfContained" -> "escapeURI";
"makeSelfContained" -> "extractSpaces";
"makeSelfContained" -> "filterIpynbOutput";
"makeSelfContained" -> "filteredFilesFromArchive";
"makeSelfContained" -> "findM";
"makeSelfContained" -> "headerShift";
"makeSelfContained" -> "htmlSpanLikeElements";
"makeSelfContained" -> "inDirectory";
"makeSelfContained" -> "inlineListToIdentifier";
"makeSelfContained" -> "isHeaderBlock";
"makeSelfContained" -> "isTightList";
"makeSelfContained" -> "isURI";
"makeSelfContained" -> "linesToPara";
"makeSelfContained" -> "makeMeta";
"makeSelfContained" -> "makeSections";
"makeSelfContained" -> "mapLeft";
"makeSelfContained" -> "normalizeDate";
"makeSelfContained" -> "notElemText";
"makeSelfContained" -> "onlySimpleTableCells";
"makeSelfContained" -> "ordNub";
"makeSelfContained" -> "orderedListMarkers";
"makeSelfContained" -> "pandocVersion";
"makeSelfContained" -> "removeFormatting";
"makeSelfContained" -> "renderTags\'";
"makeSelfContained" -> "safeRead";
"makeSelfContained" -> "safeStrRead";
"makeSelfContained" -> "schemes";
"makeSelfContained" -> "splitBy";
"makeSelfContained" -> "splitByIndices";
"makeSelfContained" -> "splitSentences";
"makeSelfContained" -> "splitStringByIndices";
"makeSelfContained" -> "splitTextBy";
"makeSelfContained" -> "splitTextByIndices";
"makeSelfContained" -> "stringify";
"makeSelfContained" -> "stripEmptyParagraphs";
"makeSelfContained" -> "stripFirstAndLast";
"makeSelfContained" -> "stripTrailingNewlines";
"makeSelfContained" -> "substitute";
"makeSelfContained" -> "tabFilter";
"makeSelfContained" -> "taskListItemFromAscii";
"makeSelfContained" -> "taskListItemToAscii";
"makeSelfContained" -> "toRomanNumeral";
"makeSelfContained" -> "trim";
"makeSelfContained" -> "trimMath";
"makeSelfContained" -> "triml";
"makeSelfContained" -> "trimr";
"makeSelfContained" -> "tshow";
"makeSelfContained" -> "underlineSpan";
"makeSelfContained" -> "uniqueIdent";
"makeSelfContained" -> "uriPathToPath";
"makeSlideIdMap" -> "_";
"makeSpeakerNotesMap" -> "_";
"makeTOC" -> "blocksToOpenXML";
"makeTOC" -> "mknode";
"makeTOC" -> "pStyleM";
"makeTOC" -> "title";
"makeTOC" -> "withParaPropM";
"makeTOCSlide" -> "blocksToSlide";
"makeTOCSlide" -> "env";
"makeTOCSlide" -> "lookupMetaInlines";
"makeTOCSlide" -> "meta";
"makeTOCSlide" -> "toTableOfContents";
"makeTOCSlide" -> "tocSlideId";
"makeTagSpan" -> "makeTagSpan\'";
"makeUppercase" -> "alterStr";
"makeUppercase" -> "fromList";
"makeUppercase" -> "toList";
"makeViewPropsEntry" -> "elemToEntry";
"makeViewPropsEntry" -> "viewPropsElement";
"makeWithWkhtmltopdf" -> "_";
"makeWithWkhtmltopdf" -> "getField";
"makeWithWkhtmltopdf" -> "getVerbosity";
"makeWithWkhtmltopdf" -> "html2pdf";
"makeWithWkhtmltopdf" -> "literal";
"makeWithWkhtmltopdf" -> "meta";
"makeWithWkhtmltopdf" -> "metaToContext";
"makeWithWkhtmltopdf" -> "source";
"makeWithWkhtmltopdf" -> "stringify";
"manToken" -> "lexComment";
"manToken" -> "lexEmptyLine";
"manToken" -> "lexLine";
"manToken" -> "lexMacro";
"many1Char" -> "t";
"many1Till" -> "a";
"many1Till" -> "notFollowedBy\'";
"many1Till" -> "t";
"many1TillChar" -> "a";
"many1TillChar" -> "many1Till";
"many1TillNOrLessNewlines" -> "_";
"many1TillNOrLessNewlines" -> "a";
"many1TillNOrLessNewlines" -> "newline";
"many1TillNOrLessNewlines" -> "try";
"many1TillNOrLessNewlines" -> "x";
"manyChar" -> "t";
"manyTillChar" -> "a";
"manyTillChar" -> "t";
"manyUntil" -> "a";
"manyUntil" -> "x";
"manyUntilChar" -> "a";
"manyUntilChar" -> "manyUntil";
"manyUntilChar" -> "x";
"mapAlignment" -> "_";
"mapAlignment" -> "a";
"mapD" -> "_";
"mapD" -> "concatMapM";
"mapD" -> "x";
"mapNested" -> "dropInlineParent";
"mapNested" -> "setInlineChildren";
"mark" -> "copy";
"mark" -> "reg";
"mark" -> "tm";
"mark" -> "try";
"matchChildContent" -> "matchContent";
"matchChildContent" -> "returnV";
"matchChildContent\'" -> "matchContent\'";
"matchChildContent\'" -> "returnV";
"matchContent" -> "a";
"matchContent" -> "elContent";
"matchContent" -> "iterateSL";
"matchContent" -> "keepingTheValue";
"matchContent" -> "prepareMatchersC";
"matchContent" -> "reverseComposition";
"matchContent" -> "swap";
"matchContent\'" -> "a";
"matchContent\'" -> "matchContent";
"matchTagClose" -> "t";
"matchTagOpen" -> "t";
"matchingElement" -> "a";
"matchingElement" -> "keepingTheValue";
"matchingElement" -> "liftAsSuccess";
"math" -> "apostrophe";
"math" -> "applyMacros";
"math" -> "guardEnabled";
"math" -> "manyTillChar";
"math" -> "math1CharBetween";
"math" -> "mathDisplay";
"math" -> "mathInline";
"math" -> "mathTextBetween";
"math" -> "rawMathBetween";
"math" -> "space";
"math" -> "textInTags";
"math" -> "trim";
"math" -> "try";
"math1CharBetween" -> "mathPostChars";
"math1CharBetween" -> "try";
"mathDisplay" -> "displayMath";
"mathDisplay" -> "guardEnabled";
"mathDisplay" -> "mathDisplayWith";
"mathDisplay" -> "trimMath";
"mathDisplayWith" -> "blankline";
"mathDisplayWith" -> "many1Till";
"mathDisplayWith" -> "newline";
"mathDisplayWith" -> "notFollowedBy\'";
"mathDisplayWith" -> "textStr";
"mathDisplayWith" -> "try";
"mathEnd" -> "a";
"mathEnd" -> "mathPostChars";
"mathEnd" -> "try";
"mathEnv" -> "anyTok";
"mathEnv" -> "blankline";
"mathEnv" -> "end_";
"mathEnv" -> "skipopts";
"mathEnv" -> "stripTrailingNewlines";
"mathEnv" -> "untokenize";
"mathEnvWith" -> "a";
"mathEnvWith" -> "mathDisplay";
"mathEnvWith" -> "mathEnv";
"mathEnvWith" -> "x";
"mathInline" -> "guardEnabled";
"mathInline" -> "math";
"mathInline" -> "mathInlineWith";
"mathInline" -> "trimMath";
"mathInlineWith" -> "_";
"mathInlineWith" -> "blankline";
"mathInlineWith" -> "isSpaceChar";
"mathInlineWith" -> "many1Till";
"mathInlineWith" -> "notFollowedBy\'";
"mathInlineWith" -> "space";
"mathInlineWith" -> "spaceChar";
"mathInlineWith" -> "textStr";
"mathInlineWith" -> "trimMath";
"mathInlineWith" -> "try";
"mathInlineWith" -> "when";
"mathMLNamespace" -> "a";
"mathStart" -> "notFollowedBy\'";
"mathStart" -> "try";
"mathTag" -> "closeTag";
"mathTag" -> "manyTillChar";
"mathTag" -> "openTag";
"mathTagLaTeX" -> "_";
"mathTagParser" -> "characterCodes";
"mathTagParser" -> "combiningAccents";
"mathTagParser" -> "manyTillChar";
"mathTagParser" -> "mathTagLaTeX";
"mathTagParser" -> "space";
"mathTagParser" -> "spaceChars";
"mathTagParser" -> "standardEscapes";
"mathTagParser" -> "textStr";
"mathTagParser" -> "try";
"mathTextBetween" -> "many1TillNOrLessNewlines";
"mathTextBetween" -> "mathAllowedNewlines";
"mathTextBetween" -> "mathEnd";
"mathTextBetween" -> "mathStart";
"mathTextBetween" -> "try";
"mathToJira" -> "texMathToInlines";
"mathToJira" -> "toJiraInlines";
"maybeAddAnchorFrom" -> "_";
"maybeAddAnchorFrom" -> "findAnchorName";
"maybeAddAnchorFrom" -> "inlines";
"maybeAddAnchorFrom" -> "keepingTheValue";
"maybeAttrValue" -> "attr";
"maybeAttrValue" -> "x";
"maybeExplicitBlock" -> "explicitBlockStart";
"maybeExplicitBlock" -> "try";
"maybeFromAttrib" -> "_";
"maybeInAnchorRef" -> "_";
"maybeInAnchorRef" -> "anchor";
"maybeInAnchorRef" -> "findAnchorRef";
"maybeInAnchorRef" -> "inlines";
"maybeInAnchorRef" -> "link";
"maybeToChoice" -> "a";
"maybeToChoice" -> "maybeToEither";
"maybeToChoice" -> "x";
"maybeToD" -> "a";
"maybeToEither" -> "a";
"mbBraced" -> "x";
"mediaCategory" -> "getMimeType";
"mediaContentType" -> "t";
"mediaDirectoryFn" -> "getMediaBag";
"mediaDirectoryFn" -> "liftPandocLua";
"mediaFileContentType" -> "_";
"mediaFileContentType" -> "getMimeType";
"mediaItems" -> "a";
"mediaItems" -> "defaultAbbrevs";
"mediaItems" -> "defaultKaTeXURL";
"mediaItems" -> "defaultMathJaxURL";
"mediaItems" -> "emptyExtensions";
"mediaItems" -> "isEnabled";
"mediaRelElement" -> "mknode";
"mediaTypeOf" -> "_";
"mediaTypeOf" -> "getMimeType";
"mediaTypeOf" -> "x";
"memptyLine" -> "_";
"memptyLine" -> "msatisfy";
"mergeStrings" -> "_";
"mergeStrings" -> "x";
"messageVerbosity" -> "_";
"messageVerbosity" -> "errorConversion";
"messageVerbosity" -> "runFilterFile";
"messageVerbosity" -> "runLua";
"messageVerbosity" -> "setGlobals";
"meta" -> "metaExport";
"meta" -> "runF";
"metaExport" -> "removeMeta";
"metaExportSnippet" -> "anyLine";
"metaFromDefList" -> "_";
"metaFromDefList" -> "fromList";
"metaFromDefList" -> "isSp";
"metaFromDefList" -> "meta";
"metaFromDefList" -> "splitBy";
"metaFromDefList" -> "stringify";
"metaFromDefList" -> "x";
"metaKey" -> "many1Char";
"metaKey" -> "skipSpaces";
"metaLine" -> "keywordLine";
"metaLine" -> "metaLineStart";
"metaLine" -> "try";
"metaLineStart" -> "skipSpaces";
"metaLineStart" -> "try";
"metaToContext" -> "_";
"metaToContext" -> "a";
"metaToContext" -> "addVariablesToContext";
"metaToContext" -> "meta";
"metaToContext" -> "metaToContext\'";
"metaToContext\'" -> "a";
"metaToContext\'" -> "metaValueToVal";
"metaToDocProps" -> "_";
"metaToDocProps" -> "authors";
"metaToDocProps" -> "description";
"metaToDocProps" -> "lookupMetaBlocks";
"metaToDocProps" -> "lookupMetaString";
"metaToDocProps" -> "meta";
"metaValueToBool" -> "_";
"metaValueToBool" -> "metaValueToBool";
"metaValueToBool" -> "stringify";
"metaValueToDate" -> "_";
"metaValueToDate" -> "emptyDate";
"metaValueToDate" -> "literal";
"metaValueToDate" -> "metaValueToBool";
"metaValueToDate" -> "metaValueToDateParts";
"metaValueToDate" -> "metaValueToInt";
"metaValueToDate" -> "metaValueToText";
"metaValueToDate" -> "x";
"metaValueToDateParts" -> "_";
"metaValueToDateParts" -> "metaValueToInt";
"metaValueToInt" -> "metaValueToText";
"metaValueToInt" -> "x";
"metaValueToName" -> "lit";
"metaValueToName" -> "literal";
"metaValueToName" -> "metaValueToBool";
"metaValueToName" -> "metaValueToText";
"metaValueToName" -> "suffix";
"metaValueToName" -> "x";
"metaValueToNames" -> "metaValueToName";
"metaValueToNames" -> "x";
"metaValueToPath" -> "metaValueToText";
"metaValueToPaths" -> "a";
"metaValueToPaths" -> "metaValueToString";
"metaValueToPaths" -> "x";
"metaValueToReference" -> "_";
"metaValueToReference" -> "metaValueToText";
"metaValueToReference" -> "metaValueToVal";
"metaValueToReference" -> "normalizeKey";
"metaValueToString" -> "_";
"metaValueToString" -> "stringify";
"metaValueToText" -> "_";
"metaValueToText" -> "metaValueToText";
"metaValueToText" -> "stringify";
"metaValueToText" -> "t";
"metaValueToVal" -> "_";
"metaValueToVal" -> "a";
"metaValueToVal" -> "dateVariables";
"metaValueToVal" -> "metaValueToDate";
"metaValueToVal" -> "metaValueToNames";
"metaValueToVal" -> "metaValueToText";
"metaValueToVal" -> "metaValueToVal";
"metaValueToVal" -> "nameVariables";
"metaValueToVal" -> "t";
"metadataElement" -> "_";
"metadataElement" -> "dcNode";
"metadataElement" -> "showDateTimeISO8601";
"metadataElement" -> "title";
"metadataElement" -> "toId";
"metadataElement" -> "toRelator";
"metadataElement" -> "txt";
"metadataElement" -> "x";
"metadataFromMeta" -> "_";
"metadataFromMeta" -> "description";
"metadataFromMeta" -> "getCreator";
"metadataFromMeta" -> "getDate";
"metadataFromMeta" -> "getIdentifier";
"metadataFromMeta" -> "getTitle";
"metadataFromMeta" -> "meta";
"metadataFromMeta" -> "metaValueToPaths";
"metadataFromMeta" -> "metaValueToString";
"metadataFromMeta" -> "simpleList";
"metadataFromMeta" -> "source";
"metadataFromMeta" -> "x";
"metadataToElement" -> "_";
"metadataToElement" -> "buildSpTree";
"metadataToElement" -> "elemName";
"metadataToElement" -> "elemToNameSpaces";
"metadataToElement" -> "findChild";
"metadataToElement" -> "mknode";
"metadataToElement" -> "nonBodyTextToElement";
"mimeTypes" -> "mimeTypesList";
"mimeTypesList" -> "deleteMedia";
"mimeTypesList" -> "insertMedia";
"mimeTypesList" -> "lookupMedia";
"mimeTypesList" -> "mediaDirectory";
"mimeTypesList" -> "mediaItems";
"minted" -> "attr";
"minted" -> "mintedAttr";
"minted" -> "verbEnv";
"mintedAttr" -> "braced";
"mintedAttr" -> "keyvals";
"mintedAttr" -> "options";
"mintedAttr" -> "untokenize";
"missingCharacterWarnings" -> "l";
"missingCharacterWarnings" -> "report";
"missingCharacterWarnings" -> "setVerbosity";
"missingCharacterWarnings" -> "utf8ToString";
"mixedList" -> "_";
"mixedList" -> "fixListNesting";
"mixedList" -> "items";
"mixedList" -> "listItem";
"mixedList" -> "mixedList\'";
"mixedList" -> "spanFoldUpList";
"mixedList" -> "try";
"mixedList\'" -> "combineList";
"mixedList\'" -> "listItemContent";
"mixedList\'" -> "listStart";
"mixedList\'" -> "mixedList\'";
"mkAbstractNum" -> "listMarkerToId";
"mkAbstractNum" -> "mkLvl";
"mkAbstractNum" -> "mknode";
"mkAttr" -> "attr";
"mkFallback" -> "str";
"mkImage" -> "_";
"mkImage" -> "attr";
"mkImage" -> "fileExists";
"mkImage" -> "numUnit";
"mkImage" -> "options";
"mkImage" -> "showFl";
"mkImage" -> "str";
"mkLink" -> "_";
"mkLink" -> "inSpanTags";
"mkLink" -> "inTags";
"mkLink" -> "isEnabled";
"mkLink" -> "link";
"mkLink" -> "selfClosingTag";
"mkLink" -> "t";
"mkLvl" -> "_";
"mkLvl" -> "mknode";
"mkLvl" -> "x";
"mkNum" -> "_";
"mkNum" -> "listMarkerToId";
"mkNum" -> "mknode";
"mkNumbering" -> "mkAbstractNum";
"mkNumbering" -> "mkNum";
"mkNumbering" -> "ordNub";
"mkitem" -> "blockToXml";
"mkitem" -> "cMapM";
"mkitem" -> "indentBlocks";
"mkitem" -> "item";
"mkitem" -> "plainToPara";
"mknode" -> "nodename";
"mktnode" -> "mknode";
"mline" -> "_";
"mline" -> "msatisfy";
"mmacro" -> "_";
"mmacro" -> "msatisfy";
"mmacroAny" -> "_";
"mmacroAny" -> "msatisfy";
"mmdHeaderIdentifier" -> "_";
"mmdHeaderIdentifier" -> "attr";
"mmdHeaderIdentifier" -> "guardDisabled";
"mmdHeaderIdentifier" -> "raw";
"mmdHeaderIdentifier" -> "reference";
"mmdHeaderIdentifier" -> "registerImplicitHeader";
"mmdHeaderIdentifier" -> "skipSpaces";
"mmdHeaderIdentifier" -> "stripFirstAndLast";
"mmdHeaderIdentifier" -> "trim";
"mmdTitleBlock" -> "_";
"mmdTitleBlock" -> "blanklines";
"mmdTitleBlock" -> "empty";
"mmdTitleBlock" -> "guardEnabled";
"mmdTitleBlock" -> "kvPair";
"mmdTitleBlock" -> "space";
"mmdTitleBlock" -> "try";
"mmdTitleBlock" -> "vcat";
"mmdTitleBlock" -> "x";
"modifierFromStyleDiff" -> "_";
"modifierFromStyleDiff" -> "composition";
"modifierFromStyleDiff" -> "emph";
"modifierFromStyleDiff" -> "extendedStylePropertyChain";
"modifierFromStyleDiff" -> "findBy";
"modifierFromStyleDiff" -> "ignore";
"modifierFromStyleDiff" -> "lookupDefaultStyle\'";
"modifierFromStyleDiff" -> "strikeout";
"modifierFromStyleDiff" -> "strong";
"modifierFromStyleDiff" -> "subscript";
"modifierFromStyleDiff" -> "superscript";
"modifierFromStyleDiff" -> "swing";
"modifierFromStyleDiff" -> "underline";
"modifyExtraState" -> "x";
"modifyMediaRef" -> "extensionFromMimeType";
"modifyMediaRef" -> "getMediaNextNewName";
"modifyMediaRef" -> "mkEntry";
"modifyMediaRef" -> "report";
"modifyMediaRef" -> "tshow";
"modifyState" -> "a";
"monospaced" -> "enclosed";
"monospaced" -> "nestedInlines";
"monospaced" -> "stringify";
"monospaced" -> "try";
"monospacedFont" -> "inTags";
"msFormatter" -> "literal";
"msFormatter" -> "tok";
"msFormatter" -> "tshow";
"msatisfy" -> "_";
"msatisfy" -> "t";
"mtoken" -> "msatisfy";
"multiParBullet" -> "blockToParagraphs";
"multiParBullet" -> "concatMapM";
"multiParBullet" -> "env";
"multicolumnCell" -> "_";
"multicolumnCell" -> "blocks";
"multicolumnCell" -> "braced";
"multicolumnCell" -> "cellAlignment";
"multicolumnCell" -> "controlSeq";
"multicolumnCell" -> "fromList";
"multicolumnCell" -> "multirowCell";
"multicolumnCell" -> "plainify";
"multicolumnCell" -> "safeRead";
"multicolumnCell" -> "symbol";
"multicolumnCell" -> "untokenize";
"multilineRow" -> "parseFromString\'";
"multilineRow" -> "plain";
"multilineRow" -> "rawTableLine";
"multilineTable" -> "blanklines";
"multilineTable" -> "multilineRow";
"multilineTable" -> "multilineTableHeader";
"multilineTable" -> "tableFooter";
"multilineTable" -> "tableWith";
"multilineTableHeader" -> "alignType";
"multilineTableHeader" -> "anyLine";
"multilineTableHeader" -> "blankline";
"multilineTableHeader" -> "dashedLine";
"multilineTableHeader" -> "newline";
"multilineTableHeader" -> "nonindentSpaces";
"multilineTableHeader" -> "parseFromString\'";
"multilineTableHeader" -> "splitTextByIndices";
"multilineTableHeader" -> "tableSep";
"multilineTableHeader" -> "trim";
"multilineTableHeader" -> "try";
"multimarkdownExtensions" -> "extensionsFromList";
"multirowCell" -> "_";
"multirowCell" -> "anyTok";
"multirowCell" -> "blocks";
"multirowCell" -> "braced";
"multirowCell" -> "cellAlignment";
"multirowCell" -> "controlSeq";
"multirowCell" -> "plainify";
"multirowCell" -> "safeRead";
"multirowCell" -> "symbol";
"multirowCell" -> "untokenize";
"museAppendElement" -> "inlines";
"museGridPart" -> "try";
"museGridTable" -> "getIndent";
"museGridTable" -> "indent";
"museGridTable" -> "museGridTableHeader";
"museGridTable" -> "museGridTableRow";
"museGridTable" -> "rowsToTable";
"museGridTable" -> "toRow";
"museGridTable" -> "try";
"museGridTableHeader" -> "eol";
"museGridTableHeader" -> "museGridPart";
"museGridTableHeader" -> "spaceChar";
"museGridTableHeader" -> "try";
"museGridTableRawLine" -> "countChar";
"museGridTableRawLine" -> "eol";
"museGridTableRawLine" -> "spaceChar";
"museGridTableRow" -> "indent";
"museGridTableRow" -> "indentWith";
"museGridTableRow" -> "museGridTableHeader";
"museGridTableRow" -> "museGridTableRawLine";
"museGridTableRow" -> "parseBlocks";
"museGridTableRow" -> "parseFromString\'";
"museGridTableRow" -> "trimr";
"museGridTableRow" -> "try";
"museOrderedListMarker" -> "_";
"museOrderedListMarker" -> "decimal";
"museOrderedListMarker" -> "lowerAlpha";
"museOrderedListMarker" -> "lowerRoman";
"museOrderedListMarker" -> "upperAlpha";
"museOrderedListMarker" -> "upperRoman";
"museToPandocTable" -> "l";
"museToPandocTable" -> "toHeaderRow";
"museToPandocTable" -> "toRow";
"must_be_at_least" -> "pushModule";
"must_be_at_least" -> "setMediaBag";
"must_be_at_least" -> "versionTooOldMessage";
"mvPunct" -> "_";
"mvPunct" -> "endWithPunct";
"mvPunct" -> "isNote";
"mvPunct" -> "isSpacy";
"mvPunct" -> "mvPunct";
"mvPunct" -> "startWithPunct";
"mvPunct" -> "stringify";
"mvPunct" -> "x";
"nFBTTBSB" -> "displayMath";
"nFBTTBSB" -> "hasDefMarker";
"nFBTTBSB" -> "header";
"nFBTTBSB" -> "hrule";
"nFBTTBSB" -> "listStart";
"nFBTTBSB" -> "newline";
"nFBTTBSB" -> "preformatted";
"nFBTTBSB" -> "tableRow";
"nameValue" -> "a";
"nameValue" -> "splitTextBy";
"nameValue" -> "stripFirstAndLast";
"nameValue" -> "t";
"named" -> "a";
"named" -> "elName";
"namespaces" -> "mathMLNamespace";
"namespaces" -> "pMath";
"nbsp" -> "try";
"needsEscaping" -> "_";
"needsEscaping" -> "beginsWithOrderedListMarker";
"needsEscaping" -> "defaultParserState";
"needsEscaping" -> "olMarker";
"needsEscaping" -> "str";
"needsEscaping" -> "t";
"needsVariationSelector" -> "_";
"nested" -> "a";
"nestedInlines" -> "a";
"nestedInlines" -> "inline";
"nestedInlines" -> "nested";
"nestedInlines" -> "try";
"nestedInlines" -> "whitespace";
"nestedString" -> "a";
"nestedString" -> "countChar";
"nestedString" -> "many1Char";
"nestedString" -> "nonspaceChar";
"nestedString" -> "spaceChar";
"nestedString" -> "try";
"nestedText" -> "a";
"nestedText" -> "countChar";
"nestedText" -> "many1Char";
"nestedText" -> "nonspaceChar";
"nestedText" -> "spaceChar";
"nestedText" -> "try";
"newOrderedListStyle" -> "a";
"newOrderedListStyle" -> "inTightList";
"newOrderedListStyle" -> "orderedListLevelStyle";
"newOrderedListStyle" -> "paraListStyle";
"newParaPropToOpenXml" -> "isSpace";
"newParaPropToOpenXml" -> "mknode";
"newTextPropToOpenXml" -> "isSpace";
"newTextPropToOpenXml" -> "mknode";
"newToggle" -> "a";
"newToggle" -> "untokenize";
"newcommand" -> "_";
"newcommand" -> "anyControlSeq";
"newcommand" -> "bracedOrToken";
"newcommand" -> "bracketedNum";
"newcommand" -> "bracketedToks";
"newcommand" -> "controlSeq";
"newcommand" -> "macro";
"newcommand" -> "report";
"newcommand" -> "spaces";
"newcommand" -> "symbol";
"newcommand" -> "try";
"newcommand" -> "txt";
"newcommand" -> "withVerbatimMode";
"newenvironment" -> "_";
"newenvironment" -> "braced";
"newenvironment" -> "bracedOrToken";
"newenvironment" -> "bracketedNum";
"newenvironment" -> "bracketedToks";
"newenvironment" -> "controlSeq";
"newenvironment" -> "report";
"newenvironment" -> "spaces";
"newenvironment" -> "symbol";
"newenvironment" -> "try";
"newenvironment" -> "untokenize";
"newenvironment" -> "withVerbatimMode";
"newline" -> "updateLastForbiddenCharPos";
"newline" -> "updateLastPreCharPos";
"newlineTok" -> "isNewlineTok";
"newlineTok" -> "satisfyTok";
"newtheorem" -> "braced";
"newtheorem" -> "bracketedToks";
"newtheorem" -> "sp";
"newtheorem" -> "symbol";
"newtheorem" -> "tok";
"newtheorem" -> "untokenize";
"nextItem" -> "_";
"nextItem" -> "items";
"nextItem" -> "peekPandocError";
"nextItem" -> "pushPandocError";
"nlToSpace" -> "x";
"noHtmlPh" -> "newline";
"noHtmlPh" -> "spaceChar";
"noHtmlPh" -> "try";
"noautolink" -> "_";
"noautolink" -> "block";
"noautolink" -> "blocks";
"noautolink" -> "htmlElement";
"noautolink" -> "parseFromString\'";
"noautolink" -> "try";
"nocache" -> "try";
"nodeToKey" -> "_";
"nodeToKey" -> "t";
"nodename" -> "prefix";
"nonBodyTextToElement" -> "elemName";
"nonBodyTextToElement" -> "elemToNameSpaces";
"nonBodyTextToElement" -> "findChild";
"nonBodyTextToElement" -> "getShapeByPlaceHolderTypes";
"nonBodyTextToElement" -> "mknode";
"nonBodyTextToElement" -> "paragraphToElement";
"nonBodyTextToElement" -> "replaceNamedChildren";
"nonBodyTextToElement" -> "sp";
"nonindentSpaces" -> "skipNonindentSpaces";
"nonspaceChar" -> "isSpaceChar";
"nop" -> "fromEntities";
"nop" -> "many1Char";
"nop" -> "nonspaceChar";
"nop" -> "stringAnyCase";
"nop" -> "try";
"noparse" -> "try";
"normalCite" -> "citeList";
"normalCite" -> "spnl";
"normalCite" -> "try";
"normalDefinitionList" -> "definitionListItem";
"normalDefinitionList" -> "guardEnabled";
"normalDefinitionList" -> "items";
"normalOrgRefCite" -> "orgRefCiteKey";
"normalOrgRefCite" -> "orgRefCiteMode";
"normalOrgRefCite" -> "returnF";
"normalOrgRefCite" -> "try";
"normalize" -> "_";
"normalize" -> "bodyRows";
"normalize" -> "calculateAlignments";
"normalize" -> "footRows";
"normalize" -> "headRows";
"normalize" -> "normalizeColWidths";
"normalize" -> "rowCells";
"normalize" -> "tableType";
"normalizeDate" -> "normalizeDate\'";
"normalizeDate\'" -> "_";
"normalizeDate\'" -> "normalizeDate";
"normalizeDate\'" -> "trim";
"normalizeDots" -> "_";
"normalizeInlineList" -> "_";
"normalizeInlineList" -> "normalizeInlineList";
"normalizeInlineList" -> "x";
"normalizeInternalPath" -> "_";
"normalizeInternalPath" -> "isAbsolutePath";
"normalizeInternalPath" -> "normalizeDots";
"normalizeKey" -> "toIETF";
"normalizeKey" -> "x";
"normalizeMetaValue" -> "_";
"normalizeMetaValue" -> "isSpaceChar";
"normalizeMetaValue" -> "parseFromString\'";
"normalizeMetaValue" -> "x";
"normalizePath" -> "formatFromFilePaths";
"normalizePath" -> "isExternalLink";
"normalizePath" -> "normalizeInternalPath";
"normalizeTable" -> "_";
"normalizeToClassName" -> "isSpace";
"normalizeTree" -> "_";
"normalizeTree" -> "convertEntity";
"notExternalLink" -> "try";
"notFollowedByDivCloser" -> "divFenceEnd";
"notFollowedByDivCloser" -> "guardDisabled";
"notFollowedByHtmlCloser" -> "htmlTag";
"notFollowedByHtmlCloser" -> "notFollowedBy\'";
"notFollowedByHtmlCloser" -> "t";
"notFollowedBy\'" -> "a";
"notFollowedBy\'" -> "try";
"note" -> "askF";
"note" -> "asksF";
"note" -> "guardEnabled";
"note" -> "logMessage";
"note" -> "noteMarker";
"note" -> "parseBlocks";
"note" -> "parseFromString\'";
"note" -> "raw";
"note" -> "runF";
"note" -> "try";
"note" -> "whitespace";
"note" -> "x";
"noteBlock" -> "_";
"noteBlock" -> "addToNotesTable";
"noteBlock" -> "anyLine";
"noteBlock" -> "blankline";
"noteBlock" -> "blanklines";
"noteBlock" -> "block";
"noteBlock" -> "guardEnabled";
"noteBlock" -> "headerStart";
"noteBlock" -> "indentSpaces";
"noteBlock" -> "logMessage";
"noteBlock" -> "many1Till";
"noteBlock" -> "noteBlock";
"noteBlock" -> "noteBlock\'";
"noteBlock" -> "noteMarker";
"noteBlock" -> "parseBlocks";
"noteBlock" -> "parseFromString\'";
"noteBlock" -> "raw";
"noteBlock" -> "rawLines";
"noteBlock" -> "skipNonindentSpaces";
"noteBlock" -> "skipSpaces";
"noteBlock" -> "try";
"noteBlock" -> "updateLastPreCharPos";
"noteBlock\'" -> "anyLine";
"noteBlock\'" -> "blanklines";
"noteBlock\'" -> "indentedBlock";
"noteBlock\'" -> "newline";
"noteBlock\'" -> "raw";
"noteBlock\'" -> "spaceChar";
"noteBlock\'" -> "try";
"noteMarker" -> "countChar";
"noteMarker" -> "isBlank";
"noteMarker" -> "many1Char";
"noteMarker" -> "many1TillChar";
"noteMarker" -> "noteMarker\'";
"noteMarker" -> "simpleReferenceName";
"noteMarker" -> "spaceChar";
"noteMarker" -> "textStr";
"noteMarker" -> "try";
"noteMarker\'" -> "l";
"noteMarker\'" -> "try";
"noteMarker\'" -> "x";
"noteToMan" -> "blockListToMan";
"noteToMan" -> "note";
"noteToMarkdown" -> "_";
"noteToMarkdown" -> "blockListToMarkdown";
"noteToMarkdown" -> "blocks";
"noteToMarkdown" -> "isEnabled";
"noteToMarkdown" -> "literal";
"noteToMarkdown" -> "tshow";
"noteToMuse" -> "blankline";
"noteToMuse" -> "blockListToMuse";
"noteToMuse" -> "env";
"noteToMuse" -> "literal";
"noteToMuse" -> "note";
"noteToMuse" -> "tshow";
"noteToOrg" -> "blockListToOrg";
"noteToOrg" -> "note";
"noteToRST" -> "blockListToRST";
"noteToRST" -> "note";
"notebookToPandoc" -> "_";
"notebookToPandoc" -> "a";
"notebookToPandoc" -> "blocks";
"notebookToPandoc" -> "cellToBlocks";
"notebookToPandoc" -> "jsonMetaToMeta";
"notebookToPandoc" -> "l";
"notebookToPandoc" -> "tshow";
"notesAndRefs" -> "blankline";
"notesAndRefs" -> "empty";
"notesAndRefs" -> "notesToMarkdown";
"notesAndRefs" -> "refsToMarkdown";
"notesToHaddock" -> "blankline";
"notesToHaddock" -> "blockToHaddock";
"notesToHaddock" -> "empty";
"notesToLaTeX" -> "empty";
"notesToLaTeX" -> "literal";
"notesToLaTeX" -> "tableToLaTeX";
"notesToLaTeX" -> "vcat";
"notesToLaTeX" -> "x";
"notesToMan" -> "empty";
"notesToMan" -> "noteToMan";
"notesToMan" -> "vcat";
"notesToMarkdown" -> "noteToMarkdown";
"notesToMuse" -> "noteToMuse";
"notesToOrg" -> "noteToOrg";
"notesToRST" -> "noteToRST";
"notoc" -> "try";
"nowiki" -> "eol";
"nowiki" -> "linebreak";
"nowiki" -> "manyChar";
"nowiki" -> "manyTillChar";
"nowiki" -> "newline";
"nowiki" -> "spaceChar";
"nowiki" -> "textStr";
"nowiki" -> "try";
"nsIDmap" -> "nsIDs";
"nsIDs" -> "extendedStylePropertyChain";
"nsIDs" -> "getListLevelStyle";
"nsIDs" -> "getStyleFamily";
"nsIDs" -> "lookupDefaultStyle\'";
"nsIDs" -> "lookupListStyleByName";
"nsIDs" -> "lookupStyle";
"nsIDs" -> "readStylesAt";
"numElemToNum" -> "_";
"numElemToNum" -> "findAttrTextByName";
"numElemToNum" -> "findChildByName";
"numElemToNum" -> "findChildrenByName";
"numElemToNum" -> "isElem";
"numElemToNum" -> "loElemToLevelOverride";
"numUnit" -> "safeRead";
"numberedCaption" -> "_";
"numberedCaption" -> "inParagraphTagsWithStyle";
"numberedCaption" -> "inTags";
"numberedCaption" -> "t";
"numberedCaption" -> "tshow";
"numberedFigureCaption" -> "numberedCaption";
"numberedFigureCaption" -> "translateTerm";
"numberedItem" -> "listItemLine";
"numberedItem" -> "prefix";
"numberedItem" -> "try";
"numberedTableCaption" -> "numberedCaption";
"numberedTableCaption" -> "translateTerm";
"obeylines" -> "_";
"obeylines" -> "env";
"obeylines" -> "fromList";
"obeylines" -> "inlines";
"obeylines" -> "isLineBreak";
"obeylines" -> "para";
"obeylines" -> "toList";
"obeylines" -> "x";
"obfuscateLink" -> "_";
"obfuscateLink" -> "addAttrs";
"obfuscateLink" -> "attr";
"obfuscateLink" -> "linkText";
"obfuscateLink" -> "obfuscateChar";
"obfuscateLink" -> "obfuscateString";
"obfuscateLink" -> "parseMailto";
"obfuscateLink" -> "tshow";
"obfuscateLink" -> "txt";
"obfuscateString" -> "fromEntities";
"obfuscateString" -> "obfuscateChar";
"olMarker" -> "anyOrderedListMarker";
"olMarker" -> "spaceChar";
"one" -> "ender";
"one" -> "inline";
"one" -> "try";
"one" -> "two";
"one" -> "updateLastStrPos";
"oneOfStrings" -> "oneOfStrings\'";
"oneOfStringsCI" -> "oneOfStrings\'";
"oneOfStringsCI" -> "x";
"oneOfStrings\'" -> "oneOfStrings\'\'";
"oneOfStrings\'\'" -> "_";
"oneOfStrings\'\'" -> "oneOfStrings\'\'";
"oneOfStrings\'\'" -> "try";
"oneOfStrings\'\'" -> "x";
"onlySimpleTableCells" -> "_";
"onlySimpleTableCells" -> "isLineBreak";
"openTag" -> "attr";
"openTag" -> "many1Char";
"openTag" -> "manyTillChar";
"openTag" -> "spaceChar";
"openTag" -> "tag";
"openTag" -> "textStr";
"openTag" -> "try";
"openURL" -> "_";
"openURL" -> "report";
"openURL" -> "toChunks";
"openURL" -> "x";
"opt" -> "bracketedToks";
"opt" -> "inline";
"opt" -> "sp";
"opt" -> "try";
"opt" -> "untokenize";
"optToOutputSettings" -> "_";
"optToOutputSettings" -> "baseWriterName";
"optToOutputSettings" -> "compileDefaultTemplate";
"optToOutputSettings" -> "fetchItem";
"optToOutputSettings" -> "formatFromFilePaths";
"optToOutputSettings" -> "getTemplate";
"optToOutputSettings" -> "getWriter";
"optToOutputSettings" -> "isTextFormat";
"optToOutputSettings" -> "lookupHighlightStyle";
"optToOutputSettings" -> "pdfWriterAndProg";
"optToOutputSettings" -> "readDataFile";
"optToOutputSettings" -> "readUtf8File";
"optToOutputSettings" -> "report";
"optToOutputSettings" -> "setVariable";
"optToOutputSettings" -> "t";
"optToOutputSettings" -> "when";
"optToOutputSettings" -> "writeCustom";
"optToOutputSettings" -> "x";
"optionSet" -> "_";
"optionString" -> "_";
"optionString" -> "addToNotesTable";
"optionString" -> "exportsCode";
"optionString" -> "inline";
"optionString" -> "inlines";
"optionString" -> "linkTarget";
"optionString" -> "newline";
"optionString" -> "originalLang";
"optionString" -> "spaceChar";
"optionString" -> "translateLang";
"optionString" -> "try";
"options" -> "_";
"options" -> "addMeta";
"options" -> "applyDefaults";
"options" -> "compileInfo";
"options" -> "defaultKaTeXURL";
"options" -> "defaultMathJaxURL";
"options" -> "defaultUserDataDirs";
"options" -> "deprecatedOption";
"options" -> "extensionEnabled";
"options" -> "extensionsFromList";
"options" -> "getAllExtensions";
"options" -> "getDataFileNames";
"options" -> "getDefaultExtensions";
"options" -> "getDefaultTemplate";
"options" -> "highlightingStyles";
"options" -> "lookupHighlightStyle";
"options" -> "normalizePath";
"options" -> "opt";
"options" -> "options";
"options" -> "pandocVersion";
"options" -> "pdfEngines";
"options" -> "readDefaultDataFile";
"options" -> "readersNames";
"options" -> "runIO";
"options" -> "runIOorExplode";
"options" -> "safeStrRead";
"options" -> "setUserDataDir";
"options" -> "setVariable";
"options" -> "splitField";
"options" -> "t";
"options" -> "usageMessage";
"options" -> "writersNames";
"options" -> "x";
"ordList" -> "toList";
"ordList" -> "toListItems";
"ordNub" -> "_";
"ordNub" -> "a";
"ordNub" -> "l";
"ordNub" -> "t";
"ordNub" -> "x";
"orderedItemToOpenDocument" -> "a";
"orderedItemToOpenDocument" -> "blockToOpenDocument";
"orderedItemToOpenDocument" -> "inParagraphTagsWithStyle";
"orderedItemToOpenDocument" -> "inTagsIndented";
"orderedItemToOpenDocument" -> "inlinesToOpenDocument";
"orderedItemToOpenDocument" -> "l";
"orderedItemToOpenDocument" -> "orderedListLevelStyle";
"orderedItemToOpenDocument" -> "orderedListToOpenDocument";
"orderedItemToOpenDocument" -> "tshow";
"orderedItemToOpenDocument" -> "vcat";
"orderedList" -> "anyOrderedListMarker";
"orderedList" -> "compactify";
"orderedList" -> "guardEnabled";
"orderedList" -> "htmlTag";
"orderedList" -> "indent";
"orderedList" -> "indented";
"orderedList" -> "items";
"orderedList" -> "li";
"orderedList" -> "list";
"orderedList" -> "listItem";
"orderedList" -> "orderedListStart";
"orderedList" -> "parseBlocks";
"orderedList" -> "parseList";
"orderedList" -> "prefix";
"orderedList" -> "safeRead";
"orderedList" -> "spaceChar";
"orderedList" -> "spaces";
"orderedList" -> "tag";
"orderedList" -> "try";
"orderedList" -> "tryMsg";
"orderedList" -> "when";
"orderedListAtDepth" -> "items";
"orderedListAtDepth" -> "orderedListItemAtDepth";
"orderedListAtDepth" -> "try";
"orderedListItemAtDepth" -> "genericListItemAtDepth";
"orderedListItemToAsciiDoc" -> "addBlock";
"orderedListItemToAsciiDoc" -> "blocks";
"orderedListItemToAsciiDoc" -> "empty";
"orderedListItemToAsciiDoc" -> "listBegin";
"orderedListItemToDokuWiki" -> "blockListToDokuWiki";
"orderedListItemToDokuWiki" -> "indent";
"orderedListItemToDokuWiki" -> "items";
"orderedListItemToHaddock" -> "_";
"orderedListItemToHaddock" -> "blankline";
"orderedListItemToHaddock" -> "blockListToHaddock";
"orderedListItemToHaddock" -> "endsWithPlain";
"orderedListItemToHaddock" -> "items";
"orderedListItemToHaddock" -> "literal";
"orderedListItemToMan" -> "_";
"orderedListItemToMan" -> "blockListToMan";
"orderedListItemToMan" -> "blockToMan";
"orderedListItemToMan" -> "empty";
"orderedListItemToMan" -> "indent";
"orderedListItemToMan" -> "literal";
"orderedListItemToMan" -> "orderedListItemToMan";
"orderedListItemToMan" -> "tshow";
"orderedListItemToMarkdown" -> "_";
"orderedListItemToMarkdown" -> "blockListToMarkdown";
"orderedListItemToMarkdown" -> "isEnabled";
"orderedListItemToMarkdown" -> "itemEndsWithTightList";
"orderedListItemToMarkdown" -> "literal";
"orderedListItemToMarkdown" -> "taskListItemToAscii";
"orderedListItemToMs" -> "_";
"orderedListItemToMs" -> "blockListToMs";
"orderedListItemToMs" -> "blockToMs";
"orderedListItemToMs" -> "empty";
"orderedListItemToMs" -> "indent";
"orderedListItemToMs" -> "literal";
"orderedListItemToMs" -> "orderedListItemToMs";
"orderedListItemToMs" -> "tshow";
"orderedListItemToOrg" -> "blankline";
"orderedListItemToOrg" -> "blockListToOrg";
"orderedListItemToOrg" -> "endsWithPlain";
"orderedListItemToOrg" -> "items";
"orderedListItemToOrg" -> "literal";
"orderedListItemToOrg" -> "space";
"orderedListItemToRST" -> "blankline";
"orderedListItemToRST" -> "blockListToRST";
"orderedListItemToRST" -> "endsWithPlain";
"orderedListItemToRST" -> "items";
"orderedListItemToRST" -> "literal";
"orderedListItemToZimWiki" -> "blockListToZimWiki";
"orderedListItemToZimWiki" -> "indent";
"orderedListItemToZimWiki" -> "items";
"orderedListItemsUntil" -> "a";
"orderedListItemsUntil" -> "allowPara";
"orderedListItemsUntil" -> "blankline";
"orderedListItemsUntil" -> "continuation";
"orderedListItemsUntil" -> "eol";
"orderedListItemsUntil" -> "indent";
"orderedListItemsUntil" -> "indentWith";
"orderedListItemsUntil" -> "listItemContentsUntil";
"orderedListItemsUntil" -> "museOrderedListMarker";
"orderedListItemsUntil" -> "spaceChar";
"orderedListItemsUntil" -> "try";
"orderedListItemsUntil" -> "x";
"orderedListLevelStyle" -> "_";
"orderedListLevelStyle" -> "inTags";
"orderedListLevelStyle" -> "l";
"orderedListLevelStyle" -> "listLevelStyle";
"orderedListLevelStyle" -> "suffix";
"orderedListLevelStyle" -> "tshow";
"orderedListMarker" -> "_";
"orderedListMarker" -> "decimal";
"orderedListMarker" -> "defaultNum";
"orderedListMarker" -> "exampleNum";
"orderedListMarker" -> "inOneParen";
"orderedListMarker" -> "inPeriod";
"orderedListMarker" -> "inTwoParens";
"orderedListMarker" -> "lowerAlpha";
"orderedListMarker" -> "lowerRoman";
"orderedListMarker" -> "upperAlpha";
"orderedListMarker" -> "upperRoman";
"orderedListMarkers" -> "orderedListMarker";
"orderedListMarkers" -> "str";
"orderedListMarkers" -> "toRomanNumeral";
"orderedListMarkers" -> "tshow";
"orderedListStart" -> "_";
"orderedListStart" -> "anyOrderedListMarker";
"orderedListStart" -> "genericListStart";
"orderedListStart" -> "gobbleAtMostSpaces";
"orderedListStart" -> "gobbleSpaces";
"orderedListStart" -> "guardDisabled";
"orderedListStart" -> "many1Char";
"orderedListStart" -> "newline";
"orderedListStart" -> "orderedListMarker";
"orderedListStart" -> "safeRead";
"orderedListStart" -> "skipNonindentSpaces";
"orderedListStart" -> "spaceChar";
"orderedListStart" -> "try";
"orderedListStart" -> "when";
"orderedListStart" -> "withHorizDisplacement";
"orderedListToOpenDocument" -> "inTagsIndented";
"orderedListToOpenDocument" -> "orderedItemToOpenDocument";
"orderedListToOpenDocument" -> "plainToPara";
"orderedListToOpenDocument" -> "vcat";
"orderedListUntil" -> "a";
"orderedListUntil" -> "decimal";
"orderedListUntil" -> "getIndent";
"orderedListUntil" -> "indent";
"orderedListUntil" -> "lowerAlpha";
"orderedListUntil" -> "lowerRoman";
"orderedListUntil" -> "orderedListItemsUntil";
"orderedListUntil" -> "try";
"orderedListUntil" -> "upperAlpha";
"orderedListUntil" -> "upperRoman";
"orderedList\'" -> "_";
"orderedList\'" -> "anyOrderedListMarker";
"orderedList\'" -> "anyTok";
"orderedList\'" -> "braced";
"orderedList\'" -> "controlSeq";
"orderedList\'" -> "grouped";
"orderedList\'" -> "item";
"orderedList\'" -> "listenv";
"orderedList\'" -> "report";
"orderedList\'" -> "safeRead";
"orderedList\'" -> "sp";
"orderedList\'" -> "spaces";
"orderedList\'" -> "symbol";
"orderedList\'" -> "try";
"orderedList\'" -> "untokenize";
"orderedMarkers" -> "_";
"orderedMarkers" -> "indent";
"orderedMarkers" -> "orderedListMarkers";
"ordinalize" -> "_";
"ordinalize" -> "t";
"orgArgKey" -> "many1Char";
"orgArgKey" -> "orgArgWordChar";
"orgArgKey" -> "skipSpaces";
"orgArgKey" -> "try";
"orgArgWord" -> "many1Char";
"orgArgWord" -> "orgArgWordChar";
"orgBlock" -> "_";
"orgBlock" -> "attrFromBlockAttributes";
"orgBlock" -> "blockAttributes";
"orgBlock" -> "codeBlock";
"orgBlock" -> "exampleBlock";
"orgBlock" -> "exportBlock";
"orgBlock" -> "orgArgWord";
"orgBlock" -> "parseBlockLines";
"orgBlock" -> "rawBlockLines";
"orgBlock" -> "skipSpaces";
"orgBlock" -> "stringAnyCase";
"orgBlock" -> "try";
"orgBlock" -> "verseBlock";
"orgParamValue" -> "many1Till";
"orgParamValue" -> "orgArgKey";
"orgParamValue" -> "skipSpaces";
"orgParamValue" -> "skipSpaces1";
"orgParamValue" -> "try";
"orgPath" -> "_";
"orgPath" -> "elemText";
"orgRefCite" -> "linkLikeOrgRefCite";
"orgRefCite" -> "normalOrgRefCite";
"orgRefCite" -> "try";
"orgRefCiteKey" -> "many1TillChar";
"orgRefCiteKey" -> "try";
"orgRefCiteMode" -> "try";
"orgTable" -> "blockAttributes";
"orgTable" -> "normalizeTable";
"orgTable" -> "orgToPandocTable";
"orgTable" -> "rowsToTable";
"orgTable" -> "tableRows";
"orgTable" -> "tableStart";
"orgTable" -> "try";
"orgTable" -> "wrap";
"orgTagWord" -> "many1Char";
"orgTagWord" -> "orgTagWordChar";
"orgTagWordChar" -> "cleanLinkText";
"orgTagWordChar" -> "exportsCode";
"orgTagWordChar" -> "isImageFilename";
"orgTagWordChar" -> "originalLang";
"orgTagWordChar" -> "translateLang";
"orgToPandocTable" -> "l";
"orgToPandocTable" -> "t";
"orgToPandocTable" -> "toHeaderRow";
"orgToPandocTable" -> "toRow";
"originalLang" -> "translateLang";
"outputToBlock" -> "handleData";
"outputToBlock" -> "tshow";
"overlaySpecification" -> "overlayTok";
"overlaySpecification" -> "symbol";
"overlaySpecification" -> "t";
"overlaySpecification" -> "try";
"overlaySpecification" -> "untokenize";
"overlayTok" -> "_";
"overlayTok" -> "satisfyTok";
"overrideContentTypeToElem" -> "mknode";
"pAny" -> "pSatisfy";
"pBad" -> "_";
"pBad" -> "isBad";
"pBalancedBraces" -> "a";
"pBalancedBraces" -> "anyWereDigitLike";
"pBalancedBraces" -> "between";
"pBalancedBraces" -> "pMatchChar";
"pBalancedBraces" -> "stringify";
"pBalancedBraces" -> "try";
"pBdo" -> "_";
"pBdo" -> "attr";
"pBdo" -> "inline";
"pBdo" -> "pInTags";
"pBdo" -> "pSatisfy";
"pBdo" -> "toStringAttr";
"pBdo" -> "try";
"pBlank" -> "isSpace";
"pBlank" -> "pSatisfy";
"pBlank" -> "str";
"pBlank" -> "try";
"pBlockQuote" -> "block";
"pBlockQuote" -> "fixPlains";
"pBlockQuote" -> "pInTags";
"pBody" -> "attr";
"pBody" -> "block";
"pBody" -> "pAny";
"pBody" -> "pInTags";
"pBulletList" -> "a";
"pBulletList" -> "fixPlains";
"pBulletList" -> "items";
"pBulletList" -> "matchTagClose";
"pBulletList" -> "matchTagOpen";
"pBulletList" -> "pCloses";
"pBulletList" -> "pListItem";
"pBulletList" -> "pSatisfy";
"pBulletList" -> "t";
"pBulletList" -> "try";
"pCSSImport" -> "_";
"pCSSImport" -> "handleCSSUrl";
"pCSSImport" -> "pQuoted";
"pCSSImport" -> "pUrl";
"pCSSUrl" -> "fromText";
"pCSSUrl" -> "handleCSSUrl";
"pCSSUrl" -> "makeDataURI";
"pCSSUrl" -> "pUrl";
"pCSV" -> "endline";
"pCSV" -> "pCSVRow";
"pCSV" -> "spaces";
"pCSVCell" -> "pCSVQuotedCell";
"pCSVCell" -> "pCSVUnquotedCell";
"pCSVQuotedCell" -> "escaped";
"pCSVRow" -> "pCSVCell";
"pCSVRow" -> "pCSVDelim";
"pCSVRow" -> "x";
"pCell" -> "_";
"pCell" -> "block";
"pCell" -> "cssAttributes";
"pCell" -> "matchTagOpen";
"pCell" -> "pBlank";
"pCell" -> "pInTags";
"pCell" -> "pSatisfy";
"pCell" -> "safeRead";
"pCell" -> "toAttr";
"pCell" -> "toStyleString";
"pCell" -> "try";
"pCloses" -> "_";
"pCloses" -> "blockHtmlTags";
"pCloses" -> "closes";
"pCloses" -> "pAny";
"pCloses" -> "pSatisfy";
"pCloses" -> "t";
"pCloses" -> "tag";
"pCloses" -> "try";
"pCode" -> "attr";
"pCode" -> "pAny";
"pCode" -> "pCloses";
"pCode" -> "pSatisfy";
"pCode" -> "toAttr";
"pCode" -> "try";
"pCodeBlock" -> "_";
"pCodeBlock" -> "attr";
"pCodeBlock" -> "matchTagOpen";
"pCodeBlock" -> "pAny";
"pCodeBlock" -> "pCloses";
"pCodeBlock" -> "pSatisfy";
"pCodeBlock" -> "tagToText";
"pCodeBlock" -> "toAttr";
"pCodeBlock" -> "try";
"pCodeWithClass" -> "pAny";
"pCodeWithClass" -> "pCloses";
"pCodeWithClass" -> "pSatisfy";
"pCodeWithClass" -> "toAttr";
"pCodeWithClass" -> "try";
"pCol" -> "_";
"pCol" -> "matchTagClose";
"pCol" -> "matchTagOpen";
"pCol" -> "pBlank";
"pCol" -> "pSatisfy";
"pCol" -> "safeRead";
"pCol" -> "toStringAttr";
"pCol" -> "try";
"pColgroup" -> "matchTagOpen";
"pColgroup" -> "pBlank";
"pColgroup" -> "pCloses";
"pColgroup" -> "pCol";
"pColgroup" -> "pSatisfy";
"pColgroup" -> "try";
"pDefListItem" -> "block";
"pDefListItem" -> "fixPlains";
"pDefListItem" -> "inline";
"pDefListItem" -> "matchTagClose";
"pDefListItem" -> "matchTagOpen";
"pDefListItem" -> "pInTags";
"pDefListItem" -> "pSatisfy";
"pDefListItem" -> "t";
"pDefListItem" -> "try";
"pDefListItem" -> "x";
"pDefinitionList" -> "items";
"pDefinitionList" -> "matchTagOpen";
"pDefinitionList" -> "pCloses";
"pDefinitionList" -> "pDefListItem";
"pDefinitionList" -> "pSatisfy";
"pDefinitionList" -> "try";
"pDiv" -> "_";
"pDiv" -> "block";
"pDiv" -> "guardEnabled";
"pDiv" -> "pInTags";
"pDiv" -> "pSatisfy";
"pDiv" -> "tag";
"pDiv" -> "toAttr";
"pDiv" -> "try";
"pDollarsMath" -> "_";
"pDollarsMath" -> "anyTok";
"pDollarsMath" -> "pDollarsMath";
"pDollarsMath" -> "t";
"pEmph" -> "pInlinesInTags";
"pFigure" -> "_";
"pFigure" -> "attr";
"pFigure" -> "block";
"pFigure" -> "blocksToInlines\'";
"pFigure" -> "matchTagClose";
"pFigure" -> "matchTagOpen";
"pFigure" -> "pBlank";
"pFigure" -> "pImage";
"pFigure" -> "pInTag";
"pFigure" -> "pInTags";
"pFigure" -> "pSatisfy";
"pFigure" -> "try";
"pFigure" -> "url";
"pFigure" -> "x";
"pHead" -> "addMetaField";
"pHead" -> "inline";
"pHead" -> "matchTagOpen";
"pHead" -> "pAny";
"pHead" -> "pInTags";
"pHead" -> "pSatisfy";
"pHead" -> "t";
"pHeader" -> "attr";
"pHeader" -> "headerLevel";
"pHeader" -> "inline";
"pHeader" -> "keyvals";
"pHeader" -> "pCloses";
"pHeader" -> "pSatisfy";
"pHeader" -> "registerHeader";
"pHeader" -> "toStringAttr";
"pHeader" -> "try";
"pHeaderRow" -> "block";
"pHeaderRow" -> "pBlank";
"pHeaderRow" -> "pCell";
"pHeaderRow" -> "pInTagWithAttribs";
"pHeaderRow" -> "toAttr";
"pHeaderRow" -> "try";
"pHeading" -> "getParStyleField";
"pHrule" -> "pSelfClosing";
"pHtml" -> "attr";
"pHtml" -> "block";
"pHtml" -> "pAny";
"pHtml" -> "pInTags";
"pHtmlBlock" -> "matchTagClose";
"pHtmlBlock" -> "matchTagOpen";
"pHtmlBlock" -> "pAny";
"pHtmlBlock" -> "pSatisfy";
"pHtmlBlock" -> "renderTags\'";
"pHtmlBlock" -> "t";
"pHtmlBlock" -> "try";
"pIframe" -> "_";
"pIframe" -> "canonicalizeUrl";
"pIframe" -> "guardDisabled";
"pIframe" -> "openURL";
"pIframe" -> "pCloses";
"pIframe" -> "pSatisfy";
"pIframe" -> "readHtml";
"pIframe" -> "tag";
"pIframe" -> "try";
"pIframe" -> "url";
"pImage" -> "canonicalizeUrl";
"pImage" -> "escapeURI";
"pImage" -> "pSelfClosing";
"pImage" -> "tag";
"pImage" -> "title";
"pImage" -> "url";
"pInTag" -> "a";
"pInTag" -> "pInTagWithAttribs";
"pInTagWithAttribs" -> "_";
"pInTagWithAttribs" -> "a";
"pInTagWithAttribs" -> "matchTagClose";
"pInTagWithAttribs" -> "matchTagOpen";
"pInTagWithAttribs" -> "pBlank";
"pInTagWithAttribs" -> "pSatisfy";
"pInTagWithAttribs" -> "try";
"pInTagWithAttribs" -> "x";
"pInTags" -> "a";
"pInTags" -> "pInTags\'";
"pInTags\'" -> "a";
"pInTags\'" -> "matchTagOpen";
"pInTags\'" -> "pCloses";
"pInTags\'" -> "pSatisfy";
"pInTags\'" -> "t";
"pInTags\'" -> "try";
"pInlinesInTags" -> "extractSpaces";
"pInlinesInTags" -> "inline";
"pInlinesInTags" -> "pInTags";
"pLineBlock" -> "_";
"pLineBlock" -> "guardEnabled";
"pLineBlock" -> "inline";
"pLineBlock" -> "pSatisfy";
"pLineBlock" -> "try";
"pLineBreak" -> "pSelfClosing";
"pLink" -> "canonicalizeUrl";
"pLink" -> "escapeURI";
"pLink" -> "extractSpaces";
"pLink" -> "inline";
"pLink" -> "maybeFromAttrib";
"pLink" -> "pCloses";
"pLink" -> "pSatisfy";
"pLink" -> "tag";
"pLink" -> "title";
"pLink" -> "try";
"pLink" -> "url";
"pList" -> "pBulletList";
"pList" -> "pDefinitionList";
"pList" -> "pOrderedList";
"pListItem" -> "_";
"pListItem" -> "attr";
"pListItem" -> "block";
"pListItem" -> "matchTagOpen";
"pListItem" -> "pInTags";
"pListItem" -> "pSatisfy";
"pListItem" -> "toStringAttr";
"pLocation" -> "pSat";
"pLocatorDelimited" -> "_";
"pLocatorDelimited" -> "pBalancedBraces";
"pLocatorDelimited" -> "pLocatorLabelDelimited";
"pLocatorDelimited" -> "pMatchChar";
"pLocatorDelimited" -> "pSpace";
"pLocatorDelimited" -> "stringify";
"pLocatorDelimited" -> "t";
"pLocatorDelimited" -> "try";
"pLocatorIntegrated" -> "pLocatorLabelIntegrated";
"pLocatorIntegrated" -> "pLocatorWordIntegrated";
"pLocatorIntegrated" -> "requireDigits";
"pLocatorIntegrated" -> "requireRomansOrDigits";
"pLocatorIntegrated" -> "try";
"pLocatorLabelDelimited" -> "pLocatorLabel\'";
"pLocatorLabelDelimited" -> "stringify";
"pLocatorLabelIntegrated" -> "pLocatorLabel\'";
"pLocatorLabelIntegrated" -> "pLocatorWordIntegrated";
"pLocatorLabelIntegrated" -> "requireDigits";
"pLocatorLabelIntegrated" -> "requireRomansOrDigits";
"pLocatorLabelIntegrated" -> "try";
"pLocatorLabel\'" -> "l";
"pLocatorLabel\'" -> "stringify";
"pLocatorLabel\'" -> "t";
"pLocatorLabel\'" -> "try";
"pLocatorPunct" -> "isLocatorPunct";
"pLocatorPunct" -> "pMatchChar";
"pLocatorSep" -> "isLocatorSep";
"pLocatorSep" -> "pMatchChar";
"pLocatorWordIntegrated" -> "pBalancedBraces";
"pLocatorWordIntegrated" -> "pLocatorSep";
"pLocatorWordIntegrated" -> "pPageSeq";
"pLocatorWordIntegrated" -> "pSpace";
"pLocatorWordIntegrated" -> "sp";
"pLocatorWordIntegrated" -> "stringify";
"pLocatorWordIntegrated" -> "try";
"pLocatorWords" -> "pLocatorDelimited";
"pLocatorWords" -> "pLocatorIntegrated";
"pLocatorWords" -> "pMatchChar";
"pLocatorWords" -> "pSpace";
"pMatchChar" -> "_";
"pMatchChar" -> "satisfyTok";
"pMath" -> "_";
"pMath" -> "attr";
"pMath" -> "matchTagClose";
"pMath" -> "mathMLNamespace";
"pMath" -> "mathMLToTeXMath";
"pMath" -> "pAny";
"pMath" -> "pSatisfy";
"pMath" -> "toStringAttr";
"pMath" -> "try";
"pMath" -> "x";
"pNumInfo" -> "getParStyleField";
"pOrderedList" -> "_";
"pOrderedList" -> "fixPlains";
"pOrderedList" -> "items";
"pOrderedList" -> "matchTagClose";
"pOrderedList" -> "matchTagOpen";
"pOrderedList" -> "pCloses";
"pOrderedList" -> "pListItem";
"pOrderedList" -> "pSatisfy";
"pOrderedList" -> "parseListStyleType";
"pOrderedList" -> "parseTypeAttr";
"pOrderedList" -> "pickStyleAttrProps";
"pOrderedList" -> "safeRead";
"pOrderedList" -> "t";
"pOrderedList" -> "toStringAttr";
"pOrderedList" -> "try";
"pPageSeq" -> "anyWereDigitLike";
"pPageSeq" -> "pMatchChar";
"pPageSeq" -> "pPageUnit";
"pPageSeq" -> "stringify";
"pPageSeq" -> "try";
"pPageUnit" -> "pLocatorPunct";
"pPageUnit" -> "pRoman";
"pPageUnit" -> "pSpace";
"pPageUnit" -> "stringify";
"pPara" -> "guardDisabled";
"pPara" -> "inline";
"pPara" -> "pInTags";
"pPdfSize" -> "pPdfSize";
"pPdfSize" -> "raw";
"pPdfSize" -> "safeRead";
"pPlain" -> "inline";
"pPlain" -> "setInPlain";
"pQ" -> "_";
"pQ" -> "canonicalizeUrl";
"pQ" -> "escapeURI";
"pQ" -> "extractSpaces";
"pQ" -> "inline";
"pQ" -> "maybeFromAttrib";
"pQ" -> "pCloses";
"pQ" -> "pSatisfy";
"pQ" -> "tag";
"pQ" -> "try";
"pQ" -> "url";
"pQuoted" -> "fromText";
"pQuoted" -> "quote";
"pQuoted" -> "trim";
"pQuoted" -> "url";
"pRawHtmlBlock" -> "a";
"pRawHtmlBlock" -> "extensionEnabled";
"pRawHtmlBlock" -> "ignore";
"pRawHtmlBlock" -> "pHtmlBlock";
"pRawHtmlBlock" -> "pRawTag";
"pRawHtmlBlock" -> "raw";
"pRawHtmlInline" -> "extensionEnabled";
"pRawHtmlInline" -> "ignore";
"pRawHtmlInline" -> "isBlockTag";
"pRawHtmlInline" -> "isInlineTag";
"pRawHtmlInline" -> "pSatisfy";
"pRawHtmlInline" -> "raw";
"pRawHtmlInline" -> "renderTags\'";
"pRawTag" -> "pAny";
"pRawTag" -> "renderTags\'";
"pRawTag" -> "tag";
"pRawTag" -> "x";
"pRawTeX" -> "_";
"pRawTeX" -> "guardEnabled";
"pRawTeX" -> "raw";
"pRawTeX" -> "rawLaTeXInline";
"pRawTeX" -> "try";
"pRawTeX" -> "withRaw";
"pRoman" -> "_";
"pRoman" -> "romanNumeral";
"pRoman" -> "t";
"pRoman" -> "tok";
"pRoman" -> "try";
"pRow" -> "_";
"pRow" -> "block";
"pRow" -> "matchTagClose";
"pRow" -> "matchTagOpen";
"pRow" -> "pBlank";
"pRow" -> "pCell";
"pRow" -> "pSatisfy";
"pRow" -> "toAttr";
"pRow" -> "try";
"pSat" -> "token";
"pSat" -> "tshow";
"pSat" -> "x";
"pSatisfy" -> "pLocation";
"pSatisfy" -> "pSat";
"pSatisfy" -> "try";
"pScriptMath" -> "_";
"pScriptMath" -> "matchTagClose";
"pScriptMath" -> "pAny";
"pScriptMath" -> "pSatisfy";
"pScriptMath" -> "try";
"pScriptMath" -> "x";
"pSelfClosing" -> "pSatisfy";
"pSmall" -> "pInlinesInTags";
"pSpace" -> "_";
"pSpace" -> "a";
"pSpace" -> "isSpace";
"pSpace" -> "isSpacey";
"pSpace" -> "satisfyTok";
"pSpace" -> "t";
"pSpan" -> "_";
"pSpan" -> "attr";
"pSpan" -> "guardEnabled";
"pSpan" -> "inline";
"pSpan" -> "isSmallCaps";
"pSpan" -> "pInTags";
"pSpan" -> "pSatisfy";
"pSpan" -> "pickStyleAttrProps";
"pSpan" -> "styleAttr";
"pSpan" -> "tag";
"pSpan" -> "toAttr";
"pSpan" -> "try";
"pSpanLike" -> "_";
"pSpanLike" -> "htmlSpanLikeElements";
"pSpanLike" -> "inline";
"pSpanLike" -> "pCloses";
"pSpanLike" -> "pSatisfy";
"pSpanLike" -> "toAttr";
"pStr" -> "isBad";
"pStr" -> "isSpace";
"pStr" -> "isSpecial";
"pStr" -> "updateLastStrPos";
"pStrikeout" -> "inline";
"pStrikeout" -> "matchTagOpen";
"pStrikeout" -> "pCloses";
"pStrikeout" -> "pInlinesInTags";
"pStrikeout" -> "pSatisfy";
"pStrikeout" -> "try";
"pStrong" -> "pInlinesInTags";
"pStyleM" -> "getStyleIdFromName";
"pStyleM" -> "mknode";
"pSubscript" -> "pInlinesInTags";
"pSuperscript" -> "pInlinesInTags";
"pSvg" -> "_";
"pSvg" -> "encode";
"pSvg" -> "guardDisabled";
"pSvg" -> "matchTagOpen";
"pSvg" -> "pAny";
"pSvg" -> "pCloses";
"pSvg" -> "pSatisfy";
"pSvg" -> "renderTags\'";
"pSvg" -> "toAttr";
"pSymbol" -> "isSpecial";
"pTable" -> "_";
"pTable" -> "block";
"pTable" -> "err";
"pTable" -> "matchTagClose";
"pTable" -> "matchTagOpen";
"pTable" -> "normalize";
"pTable" -> "pBlank";
"pTable" -> "pCol";
"pTable" -> "pColgroup";
"pTable" -> "pInTags";
"pTable" -> "pSatisfy";
"pTable" -> "pTableBody";
"pTable" -> "pTableFoot";
"pTable" -> "pTableHead";
"pTable" -> "toAttr";
"pTable" -> "try";
"pTableBody" -> "_";
"pTableBody" -> "block";
"pTableBody" -> "matchTagClose";
"pTableBody" -> "matchTagOpen";
"pTableBody" -> "pBlank";
"pTableBody" -> "pHeaderRow";
"pTableBody" -> "pRow";
"pTableBody" -> "pSatisfy";
"pTableBody" -> "toAttr";
"pTableBody" -> "try";
"pTableFoot" -> "_";
"pTableFoot" -> "block";
"pTableFoot" -> "matchTagClose";
"pTableFoot" -> "matchTagOpen";
"pTableFoot" -> "pBlank";
"pTableFoot" -> "pRow";
"pTableFoot" -> "pSatisfy";
"pTableFoot" -> "toAttr";
"pTableFoot" -> "try";
"pTableHead" -> "_";
"pTableHead" -> "block";
"pTableHead" -> "pBlank";
"pTableHead" -> "pHeaderRow";
"pTableHead" -> "pInTagWithAttribs";
"pTableHead" -> "pRow";
"pTableHead" -> "toAttr";
"pTableHead" -> "try";
"pTagContents" -> "mathDisplay";
"pTagContents" -> "mathInline";
"pTagContents" -> "pBad";
"pTagContents" -> "pRawTeX";
"pTagContents" -> "pSpace";
"pTagContents" -> "pStr";
"pTagContents" -> "pSymbol";
"pTagContents" -> "pTagContents";
"pTagContents" -> "smartPunctuation";
"pTagText" -> "_";
"pTagText" -> "pSatisfy";
"pTagText" -> "pTagContents";
"pTagText" -> "str";
"pTagText" -> "try";
"pUnderline" -> "pInlinesInTags";
"pUrl" -> "fromText";
"pUrl" -> "quote";
"pUrl" -> "trim";
"pUrl" -> "url";
"pagebreak" -> "eol";
"pagebreak" -> "spaceChar";
"pagebreak" -> "try";
"pairsCommonState" -> "_";
"pairsCommonState" -> "commonStateFields";
"pandocExtensions" -> "extensionsFromList";
"pandocFilterNames" -> "a";
"pandocLangToOrg" -> "_";
"pandocOrgCite" -> "citeList";
"pandocOrgCite" -> "skipSpaces";
"pandocOrgCite" -> "try";
"pandocPackageSearcher" -> "_";
"pandocPackageSearcher" -> "liftPandocLua";
"pandocPackageSearcher" -> "loadStringAsPackage";
"pandocPackageSearcher" -> "readDataFile";
"pandocPackageSearcher" -> "try";
"pandocTable" -> "blankline";
"pandocTable" -> "empty";
"pandocTable" -> "literal";
"pandocTable" -> "underline";
"pandocTable" -> "vcat";
"pandocTitleBlock" -> "author";
"pandocTitleBlock" -> "authorsLine";
"pandocTitleBlock" -> "blanklines";
"pandocTitleBlock" -> "dateLine";
"pandocTitleBlock" -> "guardEnabled";
"pandocTitleBlock" -> "title";
"pandocTitleBlock" -> "titleLine";
"pandocTitleBlock" -> "try";
"pandocTitleBlock" -> "vcat";
"pandocToAsciiDoc" -> "blockListToAsciiDoc";
"pandocToAsciiDoc" -> "blocks";
"pandocToAsciiDoc" -> "defField";
"pandocToAsciiDoc" -> "inlineListToAsciiDoc";
"pandocToAsciiDoc" -> "makeSections";
"pandocToAsciiDoc" -> "meta";
"pandocToAsciiDoc" -> "metaToContext";
"pandocToConTeXt" -> "_";
"pandocToConTeXt" -> "blockListToConTeXt";
"pandocToConTeXt" -> "blocks";
"pandocToConTeXt" -> "defField";
"pandocToConTeXt" -> "fromBCP47";
"pandocToConTeXt" -> "getField";
"pandocToConTeXt" -> "getLang";
"pandocToConTeXt" -> "inlineListToConTeXt";
"pandocToConTeXt" -> "l";
"pandocToConTeXt" -> "literal";
"pandocToConTeXt" -> "lookupMetaString";
"pandocToConTeXt" -> "makeSections";
"pandocToConTeXt" -> "meta";
"pandocToConTeXt" -> "metaToContext";
"pandocToConTeXt" -> "options";
"pandocToConTeXt" -> "resetField";
"pandocToConTeXt" -> "toContextDir";
"pandocToConTeXt" -> "x";
"pandocToDokuWiki" -> "blockListToDokuWiki";
"pandocToDokuWiki" -> "blocks";
"pandocToDokuWiki" -> "defField";
"pandocToDokuWiki" -> "inlineListToDokuWiki";
"pandocToDokuWiki" -> "literal";
"pandocToDokuWiki" -> "meta";
"pandocToDokuWiki" -> "metaToContext";
"pandocToDokuWiki" -> "trimr";
"pandocToEPUB" -> "_";
"pandocToEPUB" -> "addIdentifiers";
"pandocToEPUB" -> "attr";
"pandocToEPUB" -> "blocks";
"pandocToEPUB" -> "docTitle\'";
"pandocToEPUB" -> "escapeStringForXML";
"pandocToEPUB" -> "fixInternalReferences";
"pandocToEPUB" -> "fromList";
"pandocToEPUB" -> "getEPUBMetadata";
"pandocToEPUB" -> "getMimeType";
"pandocToEPUB" -> "imageSize";
"pandocToEPUB" -> "makeSections";
"pandocToEPUB" -> "mediaTypeOf";
"pandocToEPUB" -> "meta";
"pandocToEPUB" -> "metaValueToString";
"pandocToEPUB" -> "metadataElement";
"pandocToEPUB" -> "mkEntry";
"pandocToEPUB" -> "ppTopElement";
"pandocToEPUB" -> "removeNote";
"pandocToEPUB" -> "report";
"pandocToEPUB" -> "showChapter";
"pandocToEPUB" -> "sizeInPixels";
"pandocToEPUB" -> "stringify";
"pandocToEPUB" -> "toId";
"pandocToEPUB" -> "toVal\'";
"pandocToEPUB" -> "transformBlock";
"pandocToEPUB" -> "transformInline";
"pandocToEPUB" -> "when";
"pandocToEPUB" -> "writeHtmlStringForEPUB";
"pandocToEPUB" -> "x";
"pandocToFB2" -> "attr";
"pandocToFB2" -> "blocks";
"pandocToFB2" -> "cMapM";
"pandocToFB2" -> "description";
"pandocToFB2" -> "el";
"pandocToFB2" -> "fetchImages";
"pandocToFB2" -> "meta";
"pandocToFB2" -> "renderFootnotes";
"pandocToFB2" -> "renderSections";
"pandocToFB2" -> "replaceImagesWithAlt";
"pandocToFB2" -> "title";
"pandocToFB2" -> "toXml";
"pandocToFB2" -> "uattr";
"pandocToHaddock" -> "blankline";
"pandocToHaddock" -> "blockListToHaddock";
"pandocToHaddock" -> "blocks";
"pandocToHaddock" -> "defField";
"pandocToHaddock" -> "empty";
"pandocToHaddock" -> "inlineListToHaddock";
"pandocToHaddock" -> "meta";
"pandocToHaddock" -> "metaToContext";
"pandocToHaddock" -> "notesToHaddock";
"pandocToHtml" -> "_";
"pandocToHtml" -> "adjustNumbers";
"pandocToHtml" -> "blockListToHtml";
"pandocToHtml" -> "blocks";
"pandocToHtml" -> "defField";
"pandocToHtml" -> "escapeStringForXML";
"pandocToHtml" -> "footnoteSection";
"pandocToHtml" -> "getSlideLevel";
"pandocToHtml" -> "inlineListToHtml";
"pandocToHtml" -> "literal";
"pandocToHtml" -> "makeSections";
"pandocToHtml" -> "math";
"pandocToHtml" -> "meta";
"pandocToHtml" -> "metaToContext";
"pandocToHtml" -> "nl";
"pandocToHtml" -> "normalizeDate";
"pandocToHtml" -> "prepSlides";
"pandocToHtml" -> "renderHtml\'";
"pandocToHtml" -> "stringify";
"pandocToHtml" -> "tableOfContents";
"pandocToHtml" -> "tshow";
"pandocToHtml" -> "url";
"pandocToJira" -> "blockListToJira";
"pandocToJira" -> "blocks";
"pandocToJira" -> "defField";
"pandocToJira" -> "inlineListToJira";
"pandocToJira" -> "literal";
"pandocToJira" -> "meta";
"pandocToJira" -> "metaToContext";
"pandocToJira" -> "runDefaultConverter";
"pandocToJira" -> "wrap";
"pandocToLaTeX" -> "_";
"pandocToLaTeX" -> "a";
"pandocToLaTeX" -> "blockListToLaTeX";
"pandocToLaTeX" -> "blocks";
"pandocToLaTeX" -> "defField";
"pandocToLaTeX" -> "extract";
"pandocToLaTeX" -> "getField";
"pandocToLaTeX" -> "getLang";
"pandocToLaTeX" -> "inlineListToLaTeX";
"pandocToLaTeX" -> "l";
"pandocToLaTeX" -> "literal";
"pandocToLaTeX" -> "makeSections";
"pandocToLaTeX" -> "meta";
"pandocToLaTeX" -> "metaToContext";
"pandocToLaTeX" -> "options";
"pandocToLaTeX" -> "ordNub";
"pandocToLaTeX" -> "renderLang";
"pandocToLaTeX" -> "resetField";
"pandocToLaTeX" -> "stringToLaTeX";
"pandocToLaTeX" -> "stringify";
"pandocToLaTeX" -> "toBabel";
"pandocToLaTeX" -> "toLang";
"pandocToLaTeX" -> "toPolyglossia";
"pandocToLaTeX" -> "toSlides";
"pandocToLaTeX" -> "tshow";
"pandocToLaTeX" -> "vcat";
"pandocToLaTeX" -> "when";
"pandocToLaTeX" -> "x";
"pandocToMan" -> "_";
"pandocToMan" -> "blockListToMan";
"pandocToMan" -> "blocks";
"pandocToMan" -> "defField";
"pandocToMan" -> "inlineListToMan";
"pandocToMan" -> "meta";
"pandocToMan" -> "metaToContext";
"pandocToMan" -> "notesToMan";
"pandocToMan" -> "pandocVersion";
"pandocToMarkdown" -> "_";
"pandocToMarkdown" -> "addVariablesToContext";
"pandocToMarkdown" -> "blockListToMarkdown";
"pandocToMarkdown" -> "blockToMarkdown";
"pandocToMarkdown" -> "blocks";
"pandocToMarkdown" -> "defField";
"pandocToMarkdown" -> "empty";
"pandocToMarkdown" -> "getField";
"pandocToMarkdown" -> "inlineListToMarkdown";
"pandocToMarkdown" -> "isEnabled";
"pandocToMarkdown" -> "meta";
"pandocToMarkdown" -> "metaToContext\'";
"pandocToMarkdown" -> "mmdTitleBlock";
"pandocToMarkdown" -> "notesAndRefs";
"pandocToMarkdown" -> "pandocTitleBlock";
"pandocToMarkdown" -> "plainTitleBlock";
"pandocToMarkdown" -> "toTableOfContents";
"pandocToMarkdown" -> "yamlMetadataBlock";
"pandocToMediaWiki" -> "blockListToMediaWiki";
"pandocToMediaWiki" -> "blocks";
"pandocToMediaWiki" -> "defField";
"pandocToMediaWiki" -> "inlineListToMediaWiki";
"pandocToMediaWiki" -> "literal";
"pandocToMediaWiki" -> "meta";
"pandocToMediaWiki" -> "metaToContext";
"pandocToMediaWiki" -> "options";
"pandocToMediaWiki" -> "trimr";
"pandocToMs" -> "blockListToMs";
"pandocToMs" -> "blocks";
"pandocToMs" -> "defField";
"pandocToMs" -> "escapeStr";
"pandocToMs" -> "inlineListToMs\'";
"pandocToMs" -> "meta";
"pandocToMs" -> "metaToContext";
"pandocToMs" -> "pandocVersion";
"pandocToMs" -> "stringify";
"pandocToMs" -> "styleToMs";
"pandocToMuse" -> "blockListToMuse";
"pandocToMuse" -> "blocks";
"pandocToMuse" -> "currentNotesToMuse";
"pandocToMuse" -> "defField";
"pandocToMuse" -> "inlineListToMuse";
"pandocToMuse" -> "meta";
"pandocToMuse" -> "metaToContext";
"pandocToNotebook" -> "_";
"pandocToNotebook" -> "blocks";
"pandocToNotebook" -> "extractCells";
"pandocToNotebook" -> "literal";
"pandocToNotebook" -> "meta";
"pandocToNotebook" -> "metaToContext\'";
"pandocToNotebook" -> "safeRead";
"pandocToNotebook" -> "writeMarkdown";
"pandocToNotebook" -> "x";
"pandocToODT" -> "_";
"pandocToODT" -> "a";
"pandocToODT" -> "authors";
"pandocToODT" -> "empty";
"pandocToODT" -> "escapeStringForXML";
"pandocToODT" -> "fixDisplayMath";
"pandocToODT" -> "fromStringLazy";
"pandocToODT" -> "fromTextLazy";
"pandocToODT" -> "getLang";
"pandocToODT" -> "getMimeType";
"pandocToODT" -> "inTags";
"pandocToODT" -> "inTagsSimple";
"pandocToODT" -> "l";
"pandocToODT" -> "lookupMetaBlocks";
"pandocToODT" -> "lookupMetaString";
"pandocToODT" -> "meta";
"pandocToODT" -> "pandocVersion";
"pandocToODT" -> "renderLang";
"pandocToODT" -> "selfClosingTag";
"pandocToODT" -> "stringify";
"pandocToODT" -> "title";
"pandocToODT" -> "toLang";
"pandocToODT" -> "transformPicMath";
"pandocToODT" -> "updateStyleWithLang";
"pandocToODT" -> "vcat";
"pandocToODT" -> "writeOpenDocument";
"pandocToOrg" -> "blockListToOrg";
"pandocToOrg" -> "blocks";
"pandocToOrg" -> "defField";
"pandocToOrg" -> "inlineListToOrg";
"pandocToOrg" -> "meta";
"pandocToOrg" -> "metaToContext";
"pandocToOrg" -> "notesToOrg";
"pandocToRST" -> "_";
"pandocToRST" -> "a";
"pandocToRST" -> "blockListToRST";
"pandocToRST" -> "blockListToRST\'";
"pandocToRST" -> "blocks";
"pandocToRST" -> "defField";
"pandocToRST" -> "headerLtEq";
"pandocToRST" -> "inlineListToRST";
"pandocToRST" -> "l";
"pandocToRST" -> "lookupMetaInlines";
"pandocToRST" -> "meta";
"pandocToRST" -> "metaToContext";
"pandocToRST" -> "notesToRST";
"pandocToRST" -> "pictRefsToRST";
"pandocToRST" -> "refsToRST";
"pandocToRST" -> "title";
"pandocToRST" -> "titleToRST";
"pandocToRST" -> "tshow";
"pandocToTexinfo" -> "blockListToTexinfo";
"pandocToTexinfo" -> "blocks";
"pandocToTexinfo" -> "defField";
"pandocToTexinfo" -> "inlineListToTexinfo";
"pandocToTexinfo" -> "meta";
"pandocToTexinfo" -> "metaToContext";
"pandocToTexinfo" -> "options";
"pandocToTextile" -> "a";
"pandocToTextile" -> "blockListToTextile";
"pandocToTextile" -> "blocks";
"pandocToTextile" -> "defField";
"pandocToTextile" -> "inlineListToTextile";
"pandocToTextile" -> "literal";
"pandocToTextile" -> "meta";
"pandocToTextile" -> "metaToContext";
"pandocToZimWiki" -> "blockListToZimWiki";
"pandocToZimWiki" -> "blocks";
"pandocToZimWiki" -> "defField";
"pandocToZimWiki" -> "inlineListToZimWiki";
"pandocToZimWiki" -> "literal";
"pandocToZimWiki" -> "meta";
"pandocToZimWiki" -> "metaToContext";
"pandocToZimWiki" -> "trimr";
"pandocVersion" -> "a";
"parPartToInlines" -> "_";
"parPartToInlines" -> "anchor";
"parPartToInlines" -> "dummyAnchors";
"parPartToInlines" -> "parPartToInlines\'";
"parPartToInlines\'" -> "_";
"parPartToInlines\'" -> "addAuthorAndDate";
"parPartToInlines\'" -> "anchor";
"parPartToInlines\'" -> "attr";
"parPartToInlines\'" -> "author";
"parPartToInlines\'" -> "blocksToInlinesWarn";
"parPartToInlines\'" -> "bodyPartToBlocks";
"parPartToInlines\'" -> "dummyAnchors";
"parPartToInlines\'" -> "extentToAttr";
"parPartToInlines\'" -> "link";
"parPartToInlines\'" -> "math";
"parPartToInlines\'" -> "parPartToInlines\'";
"parPartToInlines\'" -> "runToInlines";
"parPartToInlines\'" -> "smushBlocks";
"parPartToInlines\'" -> "smushInlines";
"parPartToInlines\'" -> "title";
"parPartToInlines\'" -> "uniqueIdent";
"parPartToInlines\'" -> "url";
"parPartToText" -> "_";
"parPartToText" -> "runToText";
"parStyle" -> "beginsWithName";
"parStyle" -> "firstListItemName";
"parStyle" -> "inTags";
"parStyle" -> "inlinesToICML";
"parStyle" -> "x";
"parStyleToTransform" -> "a";
"parStyleToTransform" -> "blockQuote";
"parStyleToTransform" -> "divsToKeep";
"parStyleToTransform" -> "extraAttr";
"parStyleToTransform" -> "isBlockQuote";
"parStyleToTransform" -> "isEnabled";
"parStyleToTransform" -> "listParagraphStyles";
"parStyleToTransform" -> "normalizeToClassName";
"parStyleToTransform" -> "parStyleToTransform";
"parStylesToDoc" -> "alignCenterName";
"parStylesToDoc" -> "alignLeftName";
"parStylesToDoc" -> "alignRightName";
"parStylesToDoc" -> "blockQuoteName";
"parStylesToDoc" -> "bulletListName";
"parStylesToDoc" -> "codeBlockName";
"parStylesToDoc" -> "contains";
"parStylesToDoc" -> "countSubStrs";
"parStylesToDoc" -> "defListDefName";
"parStylesToDoc" -> "defListTermName";
"parStylesToDoc" -> "defaultListIndent";
"parStylesToDoc" -> "empty";
"parStylesToDoc" -> "headerName";
"parStylesToDoc" -> "inTags";
"parStylesToDoc" -> "indent";
"parStylesToDoc" -> "lowerAlphaName";
"parStylesToDoc" -> "lowerRomanName";
"parStylesToDoc" -> "monospacedFont";
"parStylesToDoc" -> "orderedListName";
"parStylesToDoc" -> "selfClosingTag";
"parStylesToDoc" -> "splitTextBy";
"parStylesToDoc" -> "str";
"parStylesToDoc" -> "subListParName";
"parStylesToDoc" -> "tableHeaderName";
"parStylesToDoc" -> "tshow";
"parStylesToDoc" -> "upperAlphaName";
"parStylesToDoc" -> "upperRomanName";
"parStylesToDoc" -> "vcat";
"parStylesToDoc" -> "x";
"para" -> "_";
"para" -> "attr";
"para" -> "blankline";
"para" -> "blanklines";
"para" -> "blockElements";
"para" -> "blockQuote";
"para" -> "bulletListStart";
"para" -> "codeBlockBody";
"para" -> "codeBlockFenced";
"para" -> "divFenceEnd";
"para" -> "endOfParaElement";
"para" -> "extensionEnabled";
"para" -> "guardDisabled";
"para" -> "guardEnabled";
"para" -> "header";
"para" -> "htmlTag";
"para" -> "inList";
"para" -> "inline";
"para" -> "inlines1";
"para" -> "listStart";
"para" -> "many1Till";
"para" -> "newline";
"para" -> "nl";
"para" -> "notFollowedBy\'";
"para" -> "orderedListStart";
"para" -> "parseInlines";
"para" -> "raw";
"para" -> "readEPUB";
"para" -> "skip";
"para" -> "skipSpaces";
"para" -> "toList";
"para" -> "trimInlinesF";
"para" -> "try";
"para" -> "x";
"paraContentsUntil" -> "a";
"paraContentsUntil" -> "eol";
"paraContentsUntil" -> "inline";
"paraContentsUntil" -> "manyUntil";
"paraContentsUntil" -> "spaceChar";
"paraContentsUntil" -> "trimInlinesF";
"paraContentsUntil" -> "try";
"paraElemToElements" -> "_";
"paraElemToElements" -> "addMathInfo";
"paraElemToElements" -> "convertMath";
"paraElemToElements" -> "fontSizeAttributes";
"paraElemToElements" -> "link";
"paraElemToElements" -> "mknode";
"paraElemToElements" -> "monospaceFont";
"paraElemToElements" -> "paraElemToElements";
"paraElemToElements" -> "registerLink";
"paraElemToElements" -> "str";
"paraElemToElements" -> "x";
"paraListStyle" -> "l";
"paraListStyle" -> "paraStyle";
"paraListStyle" -> "tshow";
"paraOrPlain" -> "bulletListStart";
"paraOrPlain" -> "headerStart";
"paraOrPlain" -> "inList";
"paraOrPlain" -> "inlines";
"paraOrPlain" -> "newline";
"paraOrPlain" -> "nl";
"paraOrPlain" -> "notFollowedBy\'";
"paraOrPlain" -> "orderedListStart";
"paraOrPlain" -> "try";
"paraStyle" -> "addParaStyle";
"paraStyle" -> "attributes";
"paraStyle" -> "inTags";
"paraStyle" -> "indent";
"paraStyle" -> "selfClosingTag";
"paraStyle" -> "styleAttr";
"paraStyle" -> "t";
"paraStyle" -> "tshow";
"paraStyleFromParent" -> "addParaStyle";
"paraStyleFromParent" -> "inTags";
"paraStyleFromParent" -> "selfClosingTag";
"paraStyleFromParent" -> "styleAttr";
"paraStyleFromParent" -> "tshow";
"paraTableStyles" -> "_";
"paraTableStyles" -> "a";
"paraTableStyles" -> "empty";
"paraTableStyles" -> "inTags";
"paraTableStyles" -> "paraTableStyles";
"paraTableStyles" -> "selfClosingTag";
"paraTableStyles" -> "t";
"paraTableStyles" -> "tshow";
"paraTableStyles" -> "x";
"paraUntil" -> "a";
"paraUntil" -> "paraContentsUntil";
"paragraph" -> "inline";
"paragraph" -> "para";
"paragraph" -> "x";
"paragraphToElement" -> "autoNumAttrs";
"paragraphToElement" -> "mknode";
"paragraphToElement" -> "paraElemToElements";
"paragraphToElement" -> "pixelsToEmu";
"parbox" -> "block";
"parbox" -> "braced";
"parbox" -> "grouped";
"parbox" -> "skipopts";
"parbox" -> "try";
"parenWrapped" -> "symbol";
"parenWrapped" -> "try";
"parenthesizedChars" -> "charsInBalanced";
"parenthesizedChars" -> "litChar";
"parents" -> "duplicate";
"parents" -> "lookupStyle";
"paropt" -> "inline";
"paropt" -> "parenWrapped";
"parseAligns" -> "_";
"parseAligns" -> "anyTok";
"parseAligns" -> "bgroup";
"parseAligns" -> "braced";
"parseAligns" -> "controlSeq";
"parseAligns" -> "egroup";
"parseAligns" -> "report";
"parseAligns" -> "safeRead";
"parseAligns" -> "sp";
"parseAligns" -> "spaces";
"parseAligns" -> "splitWordTok";
"parseAligns" -> "symbol";
"parseAligns" -> "trim";
"parseAligns" -> "try";
"parseAligns" -> "untokenize";
"parseAligns" -> "x";
"parseAlternatingFonts" -> "linePartsToInlines";
"parseAmuseDirective" -> "blankline";
"parseAmuseDirective" -> "inline";
"parseAmuseDirective" -> "many1Till";
"parseAmuseDirective" -> "newline";
"parseAmuseDirective" -> "parseDirectiveKey";
"parseAmuseDirective" -> "spaceChar";
"parseAmuseDirective" -> "trimInlinesF";
"parseAmuseDirective" -> "try";
"parseAnchor" -> "firstColumn";
"parseAnchor" -> "manyChar";
"parseAnchor" -> "try";
"parseAnnotation" -> "parseAnnotationChild";
"parseAnnotationChild" -> "elName";
"parseAnnotationChild" -> "horizontalRule";
"parseAnnotationChild" -> "para";
"parseAnnotationChild" -> "parseCite";
"parseAnnotationChild" -> "parsePType";
"parseAnnotationChild" -> "parsePoem";
"parseAnnotationChild" -> "parseSubtitle";
"parseAnnotationChild" -> "parseTable";
"parseAnnotationChild" -> "report";
"parseAttr" -> "isSpace";
"parseAttr" -> "many1Char";
"parseAttr" -> "spaceChar";
"parseAttr" -> "try";
"parseAttrs" -> "parseAttr";
"parseAuthor" -> "parseAuthorChild";
"parseAuthorChild" -> "elName";
"parseAuthorChild" -> "report";
"parseBCP47" -> "cssAttributes";
"parseBCP47" -> "pickStyleAttrProps";
"parseBCP47" -> "pickStylesToKVs";
"parseBCP47" -> "x";
"parseBinaryElement" -> "_";
"parseBinaryElement" -> "findAttr";
"parseBinaryElement" -> "insertMedia";
"parseBinaryElement" -> "report";
"parseBlock" -> "_";
"parseBlock" -> "addMetadataFromElement";
"parseBlock" -> "addToStart";
"parseBlock" -> "admonitionTags";
"parseBlock" -> "asHtml";
"parseBlock" -> "asMarkdown";
"parseBlock" -> "attr";
"parseBlock" -> "attrValue";
"parseBlock" -> "blockElements";
"parseBlock" -> "blockQuote";
"parseBlock" -> "bulletList";
"parseBlock" -> "definitionList";
"parseBlock" -> "displayMath";
"parseBlock" -> "elContent";
"parseBlock" -> "elName";
"parseBlock" -> "equation";
"parseBlock" -> "findAttr";
"parseBlock" -> "findAttrText";
"parseBlock" -> "getBlocks";
"parseBlock" -> "getFigure";
"parseBlock" -> "getGraphic";
"parseBlock" -> "getInlines";
"parseBlock" -> "getMediaobject";
"parseBlock" -> "header";
"parseBlock" -> "isBlockElement";
"parseBlock" -> "isSpace";
"parseBlock" -> "items";
"parseBlock" -> "l";
"parseBlock" -> "label";
"parseBlock" -> "lineBlock";
"parseBlock" -> "linebreak";
"parseBlock" -> "link";
"parseBlock" -> "named";
"parseBlock" -> "para";
"parseBlock" -> "paraUntil";
"parseBlock" -> "parseBlock";
"parseBlock" -> "parseBlockQuote";
"parseBlock" -> "parseCodeBlock";
"parseBlock" -> "parseDefinitionList";
"parseBlock" -> "parseHeader";
"parseBlock" -> "parseInline";
"parseBlock" -> "parseList";
"parseBlock" -> "parseListStyleType";
"parseBlock" -> "parseMetadata";
"parseBlock" -> "parseMixed";
"parseBlock" -> "parseNewParagraph";
"parseBlock" -> "parsePara";
"parseBlock" -> "parseRefList";
"parseBlock" -> "parseRow";
"parseBlock" -> "parseTable";
"parseBlock" -> "parseTitle";
"parseBlock" -> "parseWidth";
"parseBlock" -> "plain";
"parseBlock" -> "report";
"parseBlock" -> "runF";
"parseBlock" -> "safeRead";
"parseBlock" -> "skip";
"parseBlock" -> "skipUnknownMacro";
"parseBlock" -> "space";
"parseBlock" -> "str";
"parseBlock" -> "strContentRecursive";
"parseBlock" -> "strong";
"parseBlock" -> "t";
"parseBlock" -> "table";
"parseBlock" -> "textContent";
"parseBlock" -> "textContentRecursive";
"parseBlock" -> "title";
"parseBlock" -> "toAlignment";
"parseBlock" -> "toHeaderRow";
"parseBlock" -> "toRow";
"parseBlock" -> "trimNl";
"parseBlock" -> "try";
"parseBlock" -> "tshow";
"parseBlock" -> "x";
"parseBlockLines" -> "blocks";
"parseBlockLines" -> "ignHeaders";
"parseBlockLines" -> "parseFromString";
"parseBlockLines" -> "raw";
"parseBlockLines" -> "rawBlockContent";
"parseBlockLines" -> "try";
"parseBlockQuote" -> "blockQuote";
"parseBlockQuote" -> "continuation";
"parseBlocks" -> "allowPara";
"parseBlocks" -> "amuseNoteBlockUntil";
"parseBlocks" -> "anyListUntil";
"parseBlocks" -> "block";
"parseBlocks" -> "blockElements";
"parseBlocks" -> "emacsNoteBlock";
"parseBlocks" -> "headingStart";
"parseBlocks" -> "indent";
"parseBlocks" -> "listStart";
"parseBlocks" -> "paraUntil";
"parseBlocks" -> "parseBlocks";
"parseBlocks" -> "spaceChar";
"parseBlocks" -> "try";
"parseBlocksTill" -> "a";
"parseBlocksTill" -> "allowPara";
"parseBlocksTill" -> "anyListUntil";
"parseBlocksTill" -> "blockElements";
"parseBlocksTill" -> "continuation";
"parseBlocksTill" -> "listStart";
"parseBlocksTill" -> "paraUntil";
"parseBlocksTill" -> "try";
"parseBodyChild" -> "elContent";
"parseBodyChild" -> "elName";
"parseBodyChild" -> "header";
"parseBodyChild" -> "parseEpigraph";
"parseBodyChild" -> "parseImageElement";
"parseBodyChild" -> "parseSection";
"parseBodyChild" -> "parseTitleType";
"parseBodyChild" -> "report";
"parseBold" -> "linePartsToInlines";
"parseBold" -> "mline";
"parseBold" -> "strong";
"parseCSSUrls" -> "pCSSComment";
"parseCSSUrls" -> "pCSSImport";
"parseCSSUrls" -> "pCSSOther";
"parseCSSUrls" -> "pCSSUrl";
"parseCSSUrls" -> "pCSSWhite";
"parseCSV" -> "pCSV";
"parseCSV" -> "t";
"parseCharHtmlContentWithAttrs" -> "a";
"parseCharHtmlContentWithAttrs" -> "parseHtmlContentWithAttrs";
"parseCharHtmlContentWithAttrs" -> "tag";
"parseCharHtmlContentWithAttrs" -> "x";
"parseCitation" -> "parseBlocks";
"parseCitation" -> "parseFromString\'";
"parseCitation" -> "raw";
"parseCite" -> "blockQuote";
"parseCite" -> "parseCiteChild";
"parseCiteChild" -> "elName";
"parseCiteChild" -> "horizontalRule";
"parseCiteChild" -> "para";
"parseCiteChild" -> "parsePType";
"parseCiteChild" -> "parsePoem";
"parseCiteChild" -> "parseSubtitle";
"parseCiteChild" -> "parseTable";
"parseCiteChild" -> "report";
"parseCodeBlock" -> "_";
"parseCodeBlock" -> "bareIP";
"parseCodeBlock" -> "codeBlock";
"parseCodeBlock" -> "endmacro";
"parseCodeBlock" -> "getText";
"parseCodeBlock" -> "handleInlineMacro";
"parseCodeBlock" -> "linePartsToText";
"parseCodeBlock" -> "mmacro";
"parseCodeBlock" -> "mtoken";
"parseCodeBlock" -> "report";
"parseCodeBlock" -> "tok";
"parseCodeBlock" -> "try";
"parseCoverPage" -> "findAttr";
"parseCoverPage" -> "findChild";
"parseCoverPage" -> "removeHash";
"parseCreole" -> "block";
"parseCreole" -> "spaces";
"parseDate" -> "tableToJATS";
"parseDefinitionList" -> "definitionList";
"parseDefinitionList" -> "definitionListItem";
"parseDescriptionChild" -> "elName";
"parseDescriptionChild" -> "parseTitleInfoChild";
"parseDescriptionChild" -> "report";
"parseDirectiveKey" -> "manyChar";
"parseDokuWiki" -> "block";
"parseDokuWiki" -> "spaces";
"parseEmacsDirective" -> "eol";
"parseEmacsDirective" -> "inline\'";
"parseEmacsDirective" -> "parseDirectiveKey";
"parseEmacsDirective" -> "spaceChar";
"parseEmacsDirective" -> "trimInlinesF";
"parseEmailLink" -> "_";
"parseEmailLink" -> "lineInl";
"parseEmailLink" -> "linePartsToInlines";
"parseEmailLink" -> "linePartsToText";
"parseEmailLink" -> "link";
"parseEmailLink" -> "mmacro";
"parseEmailLink" -> "url";
"parseEmailLink" -> "x";
"parseEntry" -> "_";
"parseEntry" -> "el";
"parseEntry" -> "elContent";
"parseEntry" -> "findAttr";
"parseEntry" -> "parseMixed";
"parseEntry" -> "plain";
"parseEntry" -> "toAlignment";
"parseEpigraph" -> "findAttr";
"parseEpigraph" -> "parseEpigraphChild";
"parseEpigraphChild" -> "elName";
"parseEpigraphChild" -> "horizontalRule";
"parseEpigraphChild" -> "para";
"parseEpigraphChild" -> "parseCite";
"parseEpigraphChild" -> "parsePType";
"parseEpigraphChild" -> "parsePoem";
"parseEpigraphChild" -> "report";
"parseFictionBookChild" -> "elName";
"parseFictionBookChild" -> "isNotesBody";
"parseFictionBookChild" -> "parseBinaryElement";
"parseFictionBookChild" -> "parseBodyChild";
"parseFictionBookChild" -> "parseDescriptionChild";
"parseFictionBookChild" -> "report";
"parseFieldInfo" -> "fieldInfo";
"parseFormat" -> "manyTillChar";
"parseFormat" -> "try";
"parseFormat" -> "x";
"parseFormatSpec" -> "_";
"parseFormatSpec" -> "applyFilters";
"parseFormatSpec" -> "t";
"parseFromString" -> "fromString";
"parseFromString" -> "spaces";
"parseFromString" -> "str";
"parseFromString\'" -> "a";
"parseFromString\'" -> "parseFromString";
"parseFromString\'" -> "str";
"parseHeader" -> "_";
"parseHeader" -> "blankline";
"parseHeader" -> "blanklines";
"parseHeader" -> "header";
"parseHeader" -> "lineInl";
"parseHeader" -> "linePartsToInlines";
"parseHeader" -> "meta";
"parseHeader" -> "mmacro";
"parseHeader" -> "setting";
"parseHeader" -> "try";
"parseHtmlContent" -> "allowPara";
"parseHtmlContent" -> "closeTag";
"parseHtmlContent" -> "eol";
"parseHtmlContent" -> "getIndent";
"parseHtmlContent" -> "htmlAttrToPandoc";
"parseHtmlContent" -> "indent";
"parseHtmlContent" -> "indentWith";
"parseHtmlContent" -> "openTag";
"parseHtmlContent" -> "parseBlocksTill";
"parseHtmlContent" -> "parseHtmlContentWithAttrs";
"parseHtmlContent" -> "spaceChar";
"parseHtmlContent" -> "tag";
"parseHtmlContent" -> "try";
"parseHtmlContentWithAttrs" -> "a";
"parseHtmlContentWithAttrs" -> "attr";
"parseHtmlContentWithAttrs" -> "blankline";
"parseHtmlContentWithAttrs" -> "htmlElement";
"parseHtmlContentWithAttrs" -> "nested";
"parseHtmlContentWithAttrs" -> "parseFromString\'";
"parseHtmlContentWithAttrs" -> "skipSpaces";
"parseHtmlContentWithAttrs" -> "tag";
"parseHtmlContentWithAttrs" -> "try";
"parseImageElement" -> "findAttr";
"parseImageElement" -> "para";
"parseImageElement" -> "removeHash";
"parseImageElement" -> "report";
"parseImageElement" -> "str";
"parseImageElement" -> "title";
"parseInline" -> "_";
"parseInline" -> "attr";
"parseInline" -> "attrValue";
"parseInline" -> "cite";
"parseInline" -> "code";
"parseInline" -> "convertEntity";
"parseInline" -> "displayMath";
"parseInline" -> "doubleQuoted";
"parseInline" -> "el";
"parseInline" -> "elContent";
"parseInline" -> "elName";
"parseInline" -> "emph";
"parseInline" -> "equation";
"parseInline" -> "extractSpaces";
"parseInline" -> "findAttr";
"parseInline" -> "findAttrText";
"parseInline" -> "getGraphic";
"parseInline" -> "getInlines";
"parseInline" -> "getMediaobject";
"parseInline" -> "handleInlineMacro";
"parseInline" -> "isMathML";
"parseInline" -> "l";
"parseInline" -> "linePartsToInlines";
"parseInline" -> "linebreak";
"parseInline" -> "link";
"parseInline" -> "math";
"parseInline" -> "maybeAttrValue";
"parseInline" -> "mtoken";
"parseInline" -> "named";
"parseInline" -> "note";
"parseInline" -> "parseBlock";
"parseInline" -> "parseInline";
"parseInline" -> "parseInlineImageElement";
"parseInline" -> "parseLinkType";
"parseInline" -> "parseNamedStyle";
"parseInline" -> "parseStyleType";
"parseInline" -> "removePrefix";
"parseInline" -> "report";
"parseInline" -> "simpleList";
"parseInline" -> "singleQuoted";
"parseInline" -> "skip";
"parseInline" -> "space";
"parseInline" -> "str";
"parseInline" -> "strContentRecursive";
"parseInline" -> "strikeout";
"parseInline" -> "strong";
"parseInline" -> "subscript";
"parseInline" -> "superscript";
"parseInline" -> "textContent";
"parseInline" -> "textContentRecursive";
"parseInline" -> "title";
"parseInline" -> "tok";
"parseInline" -> "try";
"parseInline" -> "underline";
"parseInline" -> "x";
"parseInlineFromText" -> "inline";
"parseInlineFromText" -> "parseFromString\'";
"parseInlineImageElement" -> "extensionEnabled";
"parseInlineImageElement" -> "extractSpaces";
"parseInlineImageElement" -> "findAttr";
"parseInlineImageElement" -> "htmlInBalanced";
"parseInlineImageElement" -> "htmlSpanLikeElements";
"parseInlineImageElement" -> "htmlTag";
"parseInlineImageElement" -> "isBlockTag";
"parseInlineImageElement" -> "isCommentTag";
"parseInlineImageElement" -> "isInlineTag";
"parseInlineImageElement" -> "isTextTag";
"parseInlineImageElement" -> "removeHash";
"parseInlineImageElement" -> "report";
"parseInlineImageElement" -> "safeRead";
"parseInlineImageElement" -> "str";
"parseInlineImageElement" -> "tshow";
"parseInlines" -> "inline";
"parseInlines" -> "parseInline";
"parseItalic" -> "emph";
"parseItalic" -> "linePartsToInlines";
"parseItalic" -> "mline";
"parseLaTeX" -> "_";
"parseLaTeX" -> "adjustSpans";
"parseLaTeX" -> "attr";
"parseLaTeX" -> "blocks";
"parseLaTeX" -> "extensionsFromList";
"parseLaTeX" -> "headerLevel";
"parseLaTeX" -> "meta";
"parseLaTeX" -> "readLaTeX";
"parseLaTeX" -> "resolveRefs";
"parseLaTeX" -> "runPure";
"parseLaTeX" -> "t";
"parseLaTeX" -> "x";
"parseLink" -> "_";
"parseLink" -> "inline";
"parseLink" -> "l";
"parseLink" -> "lineInl";
"parseLink" -> "linePartsToInlines";
"parseLink" -> "linePartsToText";
"parseLink" -> "link";
"parseLink" -> "many1TillChar";
"parseLink" -> "mmacro";
"parseLink" -> "textStr";
"parseLink" -> "try";
"parseLink" -> "url";
"parseLink" -> "x";
"parseLinkType" -> "_";
"parseLinkType" -> "elContent";
"parseLinkType" -> "findAttr";
"parseLinkType" -> "link";
"parseLinkType" -> "note";
"parseLinkType" -> "parseStyleLinkType";
"parseLinkType" -> "report";
"parseList" -> "_";
"parseList" -> "a";
"parseList" -> "blocks";
"parseList" -> "bulletList";
"parseList" -> "continuation";
"parseList" -> "definitionList";
"parseList" -> "eol";
"parseList" -> "indent";
"parseList" -> "inline\'";
"parseList" -> "item";
"parseList" -> "list";
"parseList" -> "listItem";
"parseList" -> "many1Till";
"parseList" -> "parseListItem";
"parseList" -> "prefix";
"parseList" -> "t";
"parseList" -> "textStr";
"parseList" -> "try";
"parseListItem" -> "a";
"parseListItem" -> "listItemLine";
"parseListItem" -> "prefix";
"parseListItem" -> "textStr";
"parseListStyleType" -> "_";
"parseListingsOptions" -> "listingsLanguage";
"parseListingsOptions" -> "options";
"parseLocator" -> "_";
"parseLocator" -> "pLocatorWords";
"parseLocator" -> "splitInp";
"parseLocator" -> "toLocatorMap";
"parseMailto" -> "_";
"parseMan" -> "_";
"parseMan" -> "blocks";
"parseMan" -> "meta";
"parseMan" -> "parseBlock";
"parseManifest" -> "dfName";
"parseManifest" -> "emptyName";
"parseManifest" -> "findAttr";
"parseManifest" -> "findAttrE";
"parseManifest" -> "findChildren";
"parseManifest" -> "findElementE";
"parseManifest" -> "items";
"parseMarkdown" -> "_";
"parseMarkdown" -> "blocks";
"parseMarkdown" -> "meta";
"parseMarkdown" -> "parseBlocks";
"parseMarkdown" -> "report";
"parseMarkdown" -> "reportLogMessages";
"parseMarkdown" -> "runF";
"parseMarkdown" -> "titleBlock";
"parseMediaWiki" -> "block";
"parseMediaWiki" -> "reportLogMessages";
"parseMediaWiki" -> "spaces";
"parseMeta" -> "_";
"parseMeta" -> "dfName";
"parseMeta" -> "emptyName";
"parseMeta" -> "findAttr";
"parseMeta" -> "findElementE";
"parseMeta" -> "meta";
"parseMeta" -> "parseMetaItem";
"parseMetaItem" -> "addMetaField";
"parseMetaItem" -> "elName";
"parseMetaItem" -> "meta";
"parseMetaItem" -> "renameMeta";
"parseMetadata" -> "getAbstract";
"parseMetadata" -> "getAffiliations";
"parseMetadata" -> "getAuthors";
"parseMetadata" -> "getTitle";
"parseMixed" -> "isBlockElement";
"parseMixed" -> "parseBlock";
"parseMixed" -> "parseInline";
"parseMixed" -> "parseMixed";
"parseMixed" -> "x";
"parseMonth" -> "_";
"parseMonth" -> "a";
"parseMuse" -> "blocks";
"parseMuse" -> "directive";
"parseMuse" -> "parseBlocks";
"parseMuse" -> "parseSection";
"parseMuse" -> "reportLogMessages";
"parseMuse" -> "runF";
"parseNamedStyle" -> "elContent";
"parseNamedStyle" -> "findAttr";
"parseNamedStyle" -> "parseNamedStyleChild";
"parseNamedStyle" -> "report";
"parseNamedStyleChild" -> "code";
"parseNamedStyleChild" -> "elName";
"parseNamedStyleChild" -> "emph";
"parseNamedStyleChild" -> "parseInline";
"parseNamedStyleChild" -> "parseInlineImageElement";
"parseNamedStyleChild" -> "parseLinkType";
"parseNamedStyleChild" -> "parseNamedStyle";
"parseNamedStyleChild" -> "parseStyleType";
"parseNamedStyleChild" -> "report";
"parseNamedStyleChild" -> "strikeout";
"parseNamedStyleChild" -> "strong";
"parseNamedStyleChild" -> "subscript";
"parseNamedStyleChild" -> "superscript";
"parseNamedStyleChild" -> "x";
"parseNewParagraph" -> "memptyLine";
"parseNewParagraph" -> "mmacro";
"parseNote" -> "elName";
"parseNote" -> "findAttr";
"parseNote" -> "parseSectionChild";
"parseNote" -> "x";
"parseNotesBody" -> "parseNotesBodyChild";
"parseNotesBodyChild" -> "_";
"parseNotesBodyChild" -> "elName";
"parseNotesBodyChild" -> "parseNote";
"parseNum" -> "parseNumPart";
"parseNumPart" -> "str";
"parseNumPart" -> "superscript";
"parseNumPart" -> "t";
"parseNumPart" -> "try";
"parseNumPart" -> "x";
"parseOptions" -> "handleUnrecognizedOption";
"parseOptions" -> "normalizePath";
"parseOptions" -> "x";
"parseOrg" -> "blockList";
"parseOrg" -> "bulletListStart";
"parseOrg" -> "commentLineStart";
"parseOrg" -> "drawerStart";
"parseOrg" -> "endOfBlock";
"parseOrg" -> "exampleLineStart";
"parseOrg" -> "headerStart";
"parseOrg" -> "hline";
"parseOrg" -> "latexEnvStart";
"parseOrg" -> "meta";
"parseOrg" -> "metaLineStart";
"parseOrg" -> "noteMarker";
"parseOrg" -> "orderedListStart";
"parseOrg" -> "reportLogMessages";
"parseOrg" -> "tableStart";
"parsePType" -> "parseStyleType";
"parsePara" -> "para";
"parsePara" -> "parseInlines";
"parsePoem" -> "parsePoemChild";
"parsePoemChild" -> "elName";
"parsePoemChild" -> "para";
"parsePoemChild" -> "parseEpigraph";
"parsePoemChild" -> "parsePType";
"parsePoemChild" -> "parseStanza";
"parsePoemChild" -> "parseSubtitle";
"parsePoemChild" -> "parseTitle";
"parsePoemChild" -> "report";
"parseRST" -> "anchorDef";
"parseRST" -> "blanklines";
"parseRST" -> "blocks";
"parseRST" -> "citationBlock";
"parseRST" -> "comment";
"parseRST" -> "headerBlock";
"parseRST" -> "lineClump";
"parseRST" -> "meta";
"parseRST" -> "noteBlock";
"parseRST" -> "parseBlocks";
"parseRST" -> "parseCitation";
"parseRST" -> "referenceKey";
"parseRST" -> "reportLogMessages";
"parseRST" -> "titleTransform";
"parseRST" -> "withRaw";
"parseRawLaTeX" -> "_";
"parseRawLaTeX" -> "parseLaTeX";
"parseRawLaTeX" -> "resolveKey\'";
"parseRawLaTeX" -> "t";
"parseRef" -> "attrValue";
"parseRef" -> "getInlines";
"parseRef" -> "named";
"parseRef" -> "refTitle";
"parseRef" -> "t";
"parseRef" -> "x";
"parseRefList" -> "addMeta";
"parseRefList" -> "named";
"parseRefList" -> "parseRef";
"parseRootElement" -> "elName";
"parseRootElement" -> "isNotesBody";
"parseRootElement" -> "parseFictionBookChild";
"parseRootElement" -> "parseNotesBody";
"parseRootElement" -> "report";
"parseRow" -> "named";
"parseRow" -> "parseEntry";
"parseRow" -> "x";
"parseSection" -> "amuseHeadingUntil";
"parseSection" -> "emacsHeading";
"parseSection" -> "findAttr";
"parseSection" -> "parseBlocks";
"parseSection" -> "parseSectionChild";
"parseSectionChild" -> "elName";
"parseSectionChild" -> "horizontalRule";
"parseSectionChild" -> "para";
"parseSectionChild" -> "parseAnnotation";
"parseSectionChild" -> "parseBodyChild";
"parseSectionChild" -> "parseCite";
"parseSectionChild" -> "parseEpigraph";
"parseSectionChild" -> "parseImageElement";
"parseSectionChild" -> "parsePType";
"parseSectionChild" -> "parsePoem";
"parseSectionChild" -> "parseSection";
"parseSectionChild" -> "parseSubtitle";
"parseSectionChild" -> "parseTable";
"parseSectionChild" -> "report";
"parseSimpleCell" -> "blocks";
"parseSimpleCell" -> "plainify";
"parseSpine" -> "dfName";
"parseSpine" -> "emptyName";
"parseSpine" -> "findAttr";
"parseSpine" -> "findChildren";
"parseSpine" -> "findElementE";
"parseSpine" -> "mkE";
"parseStanza" -> "fromList";
"parseStanza" -> "joinLineBlocks";
"parseStanza" -> "parseStanzaChild";
"parseStanza" -> "toList";
"parseStanzaChild" -> "elName";
"parseStanzaChild" -> "lineBlock";
"parseStanzaChild" -> "parsePType";
"parseStanzaChild" -> "parseSubtitle";
"parseStanzaChild" -> "parseTitle";
"parseStanzaChild" -> "report";
"parseStyleLinkType" -> "_";
"parseStyleLinkType" -> "elName";
"parseStyleLinkType" -> "parseInline";
"parseStyleLinkType" -> "report";
"parseStyleLinkType" -> "x";
"parseStyleType" -> "elContent";
"parseStyleType" -> "parseInline";
"parseSubtitle" -> "parsePType";
"parseT2T" -> "block";
"parseT2T" -> "parseHeader";
"parseT2T" -> "when";
"parseTWiki" -> "block";
"parseTWiki" -> "spaces";
"parseTable" -> "_";
"parseTable" -> "bodyRows";
"parseTable" -> "headerRow";
"parseTable" -> "l";
"parseTable" -> "memptyLine";
"parseTable" -> "modifyState";
"parseTable" -> "msatisfy";
"parseTable" -> "parseBlock";
"parseTable" -> "parseInlines";
"parseTable" -> "parseTableCell";
"parseTable" -> "plain";
"parseTable" -> "readWithMTokens";
"parseTable" -> "report";
"parseTable" -> "toHeaderRow";
"parseTable" -> "toRow";
"parseTable" -> "try";
"parseTable" -> "x";
"parseTableCell" -> "multicolumnCell";
"parseTableCell" -> "multirowCell";
"parseTableCell" -> "parseSimpleCell";
"parseTableCell" -> "spaces";
"parseTableRow" -> "amp";
"parseTableRow" -> "anyTok";
"parseTableRow" -> "controlSeq";
"parseTableRow" -> "dollarsMath";
"parseTableRow" -> "end_";
"parseTableRow" -> "inlineEnvironment";
"parseTableRow" -> "lbreak";
"parseTableRow" -> "parbox";
"parseTableRow" -> "parseTableCell";
"parseTableRow" -> "setpos";
"parseTableRow" -> "spaces";
"parseTableRow" -> "withRaw";
"parseTextile" -> "blankline";
"parseTextile" -> "lineClump";
"parseTextile" -> "noteBlock";
"parseTextile" -> "parseBlocks";
"parseThen" -> "a";
"parseThen" -> "meta";
"parseTikiWiki" -> "block";
"parseTikiWiki" -> "spaces";
"parseTitle" -> "_";
"parseTitle" -> "elContent";
"parseTitle" -> "header";
"parseTitle" -> "linePartsToInlines";
"parseTitle" -> "mmacro";
"parseTitle" -> "modifyState";
"parseTitle" -> "parseTitleType";
"parseTitle" -> "x";
"parseTitleContent" -> "_";
"parseTitleContent" -> "elName";
"parseTitleContent" -> "parsePType";
"parseTitleInfoChild" -> "author";
"parseTitleInfoChild" -> "elName";
"parseTitleInfoChild" -> "parseAnnotation";
"parseTitleInfoChild" -> "parseAuthor";
"parseTitleInfoChild" -> "parseCoverPage";
"parseTitleInfoChild" -> "report";
"parseTitleInfoChild" -> "trim";
"parseTitleType" -> "linebreak";
"parseTitleType" -> "parseTitleContent";
"parseTypeAttr" -> "_";
"parseURIReference\'" -> "_";
"parseURIReference\'" -> "uriScheme";
"parseVimwiki" -> "block";
"parseVimwiki" -> "meta";
"parseVimwiki" -> "spaces";
"parseVimwiki" -> "toList";
"parseWidth" -> "_";
"parseWidth" -> "safeRead";
"parseWidthHeight" -> "_";
"parseXMLDocE" -> "mkE";
"pathToOverride" -> "getContentType";
"patternsToFilePaths" -> "patternToFilePaths";
"pcallWithTraceback" -> "l";
"pdfEngines" -> "engines";
"pdfEngines" -> "ordNub";
"pdfSize" -> "_";
"pdfSize" -> "pPdfSize";
"pdfWriterAndProg" -> "_";
"pdfWriterAndProg" -> "baseWriterName";
"pdfWriterAndProg" -> "engines";
"pdfWriterAndProg" -> "err";
"peekBlock" -> "_";
"peekBlock" -> "a";
"peekBlock" -> "attr";
"peekBlock" -> "defineHowTo";
"peekBlock" -> "peekCaption";
"peekBlock" -> "pushCaption";
"peekBlock" -> "tag";
"peekBlock" -> "withAttr";
"peekCaption" -> "attr";
"peekCaption" -> "peekCell";
"peekCaption" -> "pushCell";
"peekCell" -> "attr";
"peekEither" -> "setGlobals";
"peekEither" -> "try";
"peekInline" -> "_";
"peekInline" -> "a";
"peekInline" -> "attr";
"peekInline" -> "defineHowTo";
"peekInline" -> "tag";
"peekInline" -> "withAttr";
"peekMediaItems" -> "mediaItemsTypeName";
"peekMetaValue" -> "_";
"peekMetaValue" -> "a";
"peekMetaValue" -> "defineHowTo";
"peekMetaValue" -> "t";
"peekMetaValue" -> "tag";
"peekMetaValue" -> "try";
"peekPandocError" -> "_";
"peekPandocError" -> "err";
"peekPandocError" -> "l";
"peekPandocError" -> "pandocErrorName";
"peekSimpleTable" -> "defineHowTo";
"peekSimpleTable" -> "peekVersion";
"peekSimpleTable" -> "pushVersion";
"peekSimpleTable" -> "rawField";
"peekVersion" -> "_";
"peekVersion" -> "peekVersion";
"peekVersion" -> "versionTypeName";
"percent" -> "a";
"percent" -> "enclosed";
"percent" -> "nestedText";
"percent" -> "try";
"ph" -> "inline";
"ph" -> "newline";
"ph" -> "spaceChar";
"ph" -> "textStr";
"ph" -> "try";
"phpMarkdownExtraExtensions" -> "extensionsFromList";
"pickStyleAttrProps" -> "defaultCSVOptions";
"pickStyleAttrProps" -> "parseCSV";
"pickStyleAttrProps" -> "styleAttr";
"pickStyleAttrProps" -> "styleAttrParser";
"pickStylesToKVs" -> "cssAttributes";
"pickStylesToKVs" -> "styleAttr";
"pictRefsToRST" -> "pictToRST";
"pictRefsToRST" -> "vcat";
"pictToRST" -> "_";
"pictToRST" -> "attr";
"pictToRST" -> "empty";
"pictToRST" -> "imageDimsToRST";
"pictToRST" -> "inlineListToRST";
"pictToRST" -> "label";
"pictToRST" -> "literal";
"pictToRST" -> "t";
"pipeBreak" -> "blankline";
"pipeBreak" -> "nonindentSpaces";
"pipeBreak" -> "pipeTableHeaderPart";
"pipeBreak" -> "sepPipe";
"pipeBreak" -> "try";
"pipeFn" -> "liftPandocLua";
"pipeFn" -> "pipeProcess";
"pipeFn" -> "pushModule";
"pipeFn" -> "when";
"pipeProcess" -> "_";
"pipeProcess" -> "a";
"pipeProcess" -> "env";
"pipeProcess" -> "ignoreSigPipe";
"pipeProcess" -> "withForkWait";
"pipeTable" -> "_";
"pipeTable" -> "a";
"pipeTable" -> "empty";
"pipeTable" -> "header";
"pipeTable" -> "literal";
"pipeTable" -> "nonindentSpaces";
"pipeTable" -> "nonspaceChar";
"pipeTable" -> "pipeBreak";
"pipeTable" -> "pipeTableRow";
"pipeTable" -> "runF";
"pipeTable" -> "sp";
"pipeTable" -> "stringify";
"pipeTable" -> "toHeaderRow";
"pipeTable" -> "toRow";
"pipeTable" -> "try";
"pipeTable" -> "vcat";
"pipeTable" -> "x";
"pipeTableCell" -> "inlines1";
"pipeTableHeaderPart" -> "_";
"pipeTableHeaderPart" -> "spaceChar";
"pipeTableHeaderPart" -> "try";
"pipeTableRow" -> "blankline";
"pipeTableRow" -> "code";
"pipeTableRow" -> "escapedChar";
"pipeTableRow" -> "math";
"pipeTableRow" -> "parseFromString\'";
"pipeTableRow" -> "pipeTableCell";
"pipeTableRow" -> "rawHtmlInline";
"pipeTableRow" -> "rawLaTeXInline\'";
"pipeTableRow" -> "scanForPipe";
"pipeTableRow" -> "spaceChar";
"pipeTableRow" -> "trim";
"pipeTableRow" -> "try";
"pipeTableRow" -> "withRaw";
"placeholder" -> "noHtmlPh";
"placeholder" -> "ph";
"placeholder" -> "templatePh";
"placeholder" -> "try";
"plain" -> "_";
"plain" -> "cMap";
"plain" -> "inline";
"plain" -> "inlines1";
"plain" -> "plain";
"plain" -> "t";
"plain" -> "trimInlinesF";
"plain" -> "url";
"plainExtensions" -> "extensionsFromList";
"plainInlineML" -> "listStart";
"plainInlineML" -> "plainInlineML\'";
"plainInlineML" -> "spaceChar";
"plainInlineML\'" -> "inlineML";
"plainInlineML\'" -> "newline";
"plainLink" -> "returnF";
"plainLink" -> "try";
"plainLink" -> "uri";
"plainParaInlines" -> "_";
"plainToPara" -> "inlines";
"plainToPara" -> "plainToPara";
"plainToPara" -> "x";
"plainify" -> "_";
"plainify" -> "fromList";
"plainify" -> "plain";
"plainify" -> "toList";
"planningInfo" -> "emptyPlanning";
"planningInfo" -> "newline";
"planningInfo" -> "skipSpaces";
"planningInfo" -> "timestamp";
"planningInfo" -> "try";
"planningToBlock" -> "getExportSetting";
"playTag" -> "guardEnabled";
"playTag" -> "parseHtmlContent";
"polyglossiaLangToBCP47" -> "_";
"popOption" -> "a";
"popStyle" -> "getExtraState";
"popStyle" -> "keepingTheValue";
"popStyle" -> "popStyle\'";
"popStyle" -> "setExtraState";
"popStyle\'" -> "_";
"possiblyEmptyLinkTarget" -> "linkTarget";
"possiblyEmptyLinkTarget" -> "try";
"post_process" -> "blocks";
"post_process" -> "post_process\'";
"post_process\'" -> "_";
"post_process\'" -> "attr";
"post_process\'" -> "post_process\'";
"ppTopElement" -> "safeRead";
"ppTopElement" -> "x";
"preamble" -> "anyTok";
"preamble" -> "begin_";
"preamble" -> "blockCommand";
"preamble" -> "braced";
"preamble" -> "macroDef";
"preamble" -> "rawBlock";
"preamble" -> "spaces1";
"prefix" -> "citeKey";
"prefix" -> "inline";
"prefix" -> "spnl";
"prefix" -> "trimInlinesF";
"prefix" -> "try";
"prefixedId" -> "_";
"preformatted" -> "_";
"preformatted" -> "encode";
"preformatted" -> "fromEntities";
"preformatted" -> "guardColumnOne";
"preformatted" -> "htmlTag";
"preformatted" -> "inline";
"preformatted" -> "inline\'";
"preformatted" -> "isSpace";
"preformatted" -> "makeAttr";
"preformatted" -> "many1Char";
"preformatted" -> "manyChar";
"preformatted" -> "manyTillChar";
"preformatted" -> "newline";
"preformatted" -> "spaceChar";
"preformatted" -> "try";
"preformatted" -> "whitespace\'";
"preformatted" -> "x";
"prepSlides" -> "_";
"prepSlides" -> "attr";
"prepSlides" -> "compileDefaultTemplate";
"prepSlides" -> "getDefaultTemplate";
"prepSlides" -> "getTemplate";
"prepSlides" -> "readDataFile";
"prepSlides" -> "x";
"prepareIteration" -> "distributeValue";
"prepareIteration" -> "findChildren";
"prepareIteration" -> "keepingTheValue";
"prepareMatchersC" -> "makeMatcherC";
"prepareMatchersC" -> "reverseComposition";
"prepareMatchersC" -> "uncurry3";
"prepareMatchersC" -> "x";
"prependHash" -> "_";
"prependHash" -> "attr";
"prependHash" -> "l";
"prependHash" -> "url";
"preprocessInlineList" -> "_";
"preprocessInlineList" -> "preprocessInlineList";
"preprocessInlineList" -> "str";
"preprocessInlineList" -> "t";
"preprocessInlineList" -> "texMathToInlines";
"preprocessInlineList" -> "x";
"presHasSpeakerNotes" -> "_";
"presentationToArchive" -> "env";
"presentationToArchive" -> "getPresentationSize";
"presentationToArchive" -> "initialGlobalIds";
"presentationToArchive" -> "makeSlideIdMap";
"presentationToArchive" -> "makeSpeakerNotesMap";
"presentationToArchive" -> "presentationToArchiveP";
"presentationToArchive" -> "runP";
"presentationToArchiveP" -> "contentTypesToEntry";
"presentationToArchiveP" -> "copyFileToArchive";
"presentationToArchiveP" -> "docCustomPropsToEntry";
"presentationToArchiveP" -> "docPropsToEntry";
"presentationToArchiveP" -> "inheritedPatterns";
"presentationToArchiveP" -> "makeMediaEntries";
"presentationToArchiveP" -> "makeViewPropsEntry";
"presentationToArchiveP" -> "patternsToFilePaths";
"presentationToArchiveP" -> "presentationToContentTypes";
"presentationToArchiveP" -> "presentationToPresEntry";
"presentationToArchiveP" -> "presentationToRelsEntry";
"presentationToArchiveP" -> "requiredFiles";
"presentationToArchiveP" -> "slideToEntry";
"presentationToArchiveP" -> "slideToSlideRelEntry";
"presentationToArchiveP" -> "slideToSpeakerNotesEntry";
"presentationToArchiveP" -> "slideToSpeakerNotesRelEntry";
"presentationToArchiveP" -> "topLevelRelsEntry";
"presentationToContentTypes" -> "_";
"presentationToContentTypes" -> "getSpeakerNotesFilePaths";
"presentationToContentTypes" -> "inheritedPatterns";
"presentationToContentTypes" -> "mediaContentType";
"presentationToContentTypes" -> "mediaFileContentType";
"presentationToContentTypes" -> "pathToOverride";
"presentationToContentTypes" -> "patternsToFilePaths";
"presentationToContentTypes" -> "slideToFilePath";
"presentationToPresEntry" -> "elemToEntry";
"presentationToPresEntry" -> "presentationToPresentationElement";
"presentationToPresentationElement" -> "_";
"presentationToPresentationElement" -> "elContent";
"presentationToPresentationElement" -> "elName";
"presentationToPresentationElement" -> "mknode";
"presentationToPresentationElement" -> "parseXml";
"presentationToPresentationElement" -> "presHasSpeakerNotes";
"presentationToPresentationElement" -> "presentationToSldIdLst";
"presentationToRels" -> "_";
"presentationToRels" -> "getRels";
"presentationToRels" -> "l";
"presentationToRels" -> "presHasSpeakerNotes";
"presentationToRels" -> "slideToPresRel";
"presentationToRelsEntry" -> "elemToEntry";
"presentationToRelsEntry" -> "presentationToRels";
"presentationToRelsEntry" -> "relsToElement";
"presentationToSldIdLst" -> "_";
"presentationToSldIdLst" -> "mknode";
"presentationToSldIdLst" -> "slideToSldIdElement";
"prettyBlock" -> "a";
"prettyBlock" -> "attr";
"prettyBlock" -> "block";
"prettyBlock" -> "blocks";
"prettyBlock" -> "items";
"prettyBlock" -> "prettyBlock";
"prettyBlock" -> "prettyList";
"prettyBlock" -> "space";
"primEscape" -> "_";
"primEscape" -> "safeRead";
"primEscape" -> "satisfyTok";
"primEscape" -> "t";
"primEscape" -> "tokTypeIn";
"primEscape" -> "x";
"procLink" -> "procLink\'";
"procLink" -> "x";
"processCitations" -> "_";
"processCitations" -> "bcp47LangToIETF";
"processCitations" -> "capitalizeNoteCitation";
"processCitations" -> "convertQuotes";
"processCitations" -> "deNote";
"processCitations" -> "err";
"processCitations" -> "extractText";
"processCitations" -> "fetchItem";
"processCitations" -> "fixLinks";
"processCitations" -> "getCitations";
"processCitations" -> "getRefsFromBib";
"processCitations" -> "getResourcePath";
"processCitations" -> "getUserDataDir";
"processCitations" -> "insertRefs";
"processCitations" -> "insertResolvedCitations";
"processCitations" -> "insertSpace";
"processCitations" -> "legacyDateRanges";
"processCitations" -> "linkifyVariables";
"processCitations" -> "meta";
"processCitations" -> "metaValueToReference";
"processCitations" -> "metaValueToText";
"processCitations" -> "mvPunct";
"processCitations" -> "readDataFile";
"processCitations" -> "report";
"processCitations" -> "setResourcePath";
"processCitations" -> "truish";
"processCitations" -> "url";
"processCitations" -> "x";
"processHBox" -> "x";
"producingExtraState" -> "a";
"producingExtraState" -> "convertingExtraState";
"producingExtraState" -> "returnV";
"producingExtraState" -> "x";
"promoteHeaders" -> "_";
"promoteHeaders" -> "attr";
"proof" -> "addQed";
"proof" -> "addTitle";
"proof" -> "blocks";
"proof" -> "env";
"proof" -> "opt";
"proof" -> "title";
"propertiesDrawer" -> "drawerEnd";
"propertiesDrawer" -> "drawerStart";
"propertiesDrawer" -> "exportSettings";
"propertiesDrawer" -> "literal";
"propertiesDrawer" -> "many1TillChar";
"propertiesDrawer" -> "manyTillChar";
"propertiesDrawer" -> "newline";
"propertiesDrawer" -> "nonspaceChar";
"propertiesDrawer" -> "skipSpaces";
"propertiesDrawer" -> "stringAnyCase";
"propertiesDrawer" -> "toPropertyKey";
"propertiesDrawer" -> "toPropertyValue";
"propertiesDrawer" -> "try";
"propertiesDrawer" -> "vcat";
"propertiesToAttr" -> "isNonNil";
"propertiesToAttr" -> "toPropertyKey";
"protectCase" -> "_";
"protectCase" -> "splitStrWhen";
"protectCase" -> "x";
"protectCode" -> "_";
"protectCode" -> "x";
"pushBlock" -> "attr";
"pushBlock" -> "code";
"pushBlock" -> "items";
"pushBlock" -> "list";
"pushBlock" -> "pushViaConstructor";
"pushCell" -> "attr";
"pushCloneTable" -> "addFunction";
"pushCloneTable" -> "cloneAttr";
"pushCloneTable" -> "cloneBlock";
"pushCloneTable" -> "cloneCitation";
"pushCloneTable" -> "cloneInline";
"pushCloneTable" -> "cloneListAttributes";
"pushCloneTable" -> "cloneMeta";
"pushCloneTable" -> "cloneMetaValue";
"pushCloneTable" -> "clonePandoc";
"pushFilterFunction" -> "a";
"pushInline" -> "attr";
"pushInline" -> "pushViaConstructor";
"pushInline" -> "str";
"pushIterator" -> "mediaItems";
"pushIterator" -> "nextItem";
"pushMediaItems" -> "mediaItemsTypeName";
"pushMetaValue" -> "pushViaConstructor";
"pushMetaValue" -> "str";
"pushModule" -> "a";
"pushModule" -> "addField";
"pushModule" -> "addFunction";
"pushModule" -> "blocksToInlines";
"pushModule" -> "delete";
"pushModule" -> "empty";
"pushModule" -> "env";
"pushModule" -> "equals";
"pushModule" -> "fetch";
"pushModule" -> "from_simple_table";
"pushModule" -> "insertMediaFn";
"pushModule" -> "items";
"pushModule" -> "liftPandocLua";
"pushModule" -> "loadScriptFromDataDir";
"pushModule" -> "lookupMediaFn";
"pushModule" -> "makeSections";
"pushModule" -> "mediaDirectoryFn";
"pushModule" -> "normalizeDate";
"pushModule" -> "pipeFn";
"pushModule" -> "pushCloneTable";
"pushModule" -> "pushModule";
"pushModule" -> "readDoc";
"pushModule" -> "runJSONFilter";
"pushModule" -> "sha1";
"pushModule" -> "stringify";
"pushModule" -> "toRomanNumeral";
"pushModule" -> "to_simple_table";
"pushModule" -> "walkBlock";
"pushModule" -> "walkInline";
"pushPandocError" -> "__tostring";
"pushPandocError" -> "pandocErrorName";
"pushSimpleTable" -> "pushViaConstructor";
"pushSimpleTable" -> "simpleTableHeader";
"pushStyle" -> "getExtraState";
"pushStyle" -> "keepingTheValue";
"pushStyle" -> "pushStyle\'";
"pushStyle" -> "setExtraState";
"pushStyle" -> "x";
"pushVersion" -> "__eq";
"pushVersion" -> "__index";
"pushVersion" -> "__le";
"pushVersion" -> "__len";
"pushVersion" -> "__lt";
"pushVersion" -> "__pairs";
"pushVersion" -> "__tostring";
"pushVersion" -> "pushVersion";
"pushVersion" -> "versionTypeName";
"pushViaCall" -> "a";
"pushViaConstructor" -> "pushViaCall";
"putConstructorsInRegistry" -> "a";
"putConstructorsInRegistry" -> "blocks";
"putConstructorsInRegistry" -> "defineHowTo";
"putConstructorsInRegistry" -> "liftPandocLua";
"putConstructorsInRegistry" -> "meta";
"putConstructorsInRegistry" -> "peekBlock";
"putConstructorsInRegistry" -> "peekInline";
"putConstructorsInRegistry" -> "peekMetaValue";
"putConstructorsInRegistry" -> "prefix";
"putConstructorsInRegistry" -> "pushBlock";
"putConstructorsInRegistry" -> "pushInline";
"putConstructorsInRegistry" -> "pushMetaValue";
"putConstructorsInRegistry" -> "pushViaConstructor";
"putConstructorsInRegistry" -> "suffix";
"putStr" -> "putStrWith";
"putStrLn" -> "putStrLnWith";
"putStrLnWith" -> "eol";
"putStrLnWith" -> "hPutStrLnWith";
"putStrWith" -> "eol";
"putStrWith" -> "hPutStrWith";
"qname" -> "a";
"qualifyName" -> "lookupNSiri";
"qualifyName" -> "lookupNSprefix";
"qualifyName" -> "x";
"querySingletonsList" -> "a";
"querySingletonsList" -> "extensionFromMimeType";
"querySingletonsList" -> "mediaCategory";
"querySingletonsList" -> "x";
"quote" -> "anyLine";
"quote" -> "eol";
"quote" -> "inline\'";
"quote" -> "many1Till";
"quote" -> "parseBlocks";
"quote" -> "parseFromString\'";
"quote" -> "prefix";
"quote" -> "spaces";
"quote" -> "tab";
"quote" -> "try";
"quoteArg" -> "manyTillChar";
"quoteTag" -> "parseHtmlContent";
"quoted" -> "doubleQuoted";
"quoted" -> "singleQuoted";
"quotedBlock" -> "anyLine";
"quotedBlock" -> "blanklines";
"quotedBlock" -> "quote";
"quotedBlock" -> "try";
"quotedReferenceName" -> "manyTillChar";
"quotedReferenceName" -> "try";
"quotedString" -> "inQuotes";
"quotedString" -> "try";
"quotedTitle" -> "countChar";
"quotedTitle" -> "litChar";
"quotedTitle" -> "many1Char";
"quotedTitle" -> "quotedTitle";
"quotedTitle" -> "spaces";
"quotedTitle" -> "try";
"quotedTitle" -> "x";
"quotedToJira" -> "quoteChar";
"quotedToJira" -> "toJiraInlines";
"quoted\'" -> "ender";
"quoted\'" -> "extensionEnabled";
"quoted\'" -> "inline";
"quoted\'" -> "lit";
"quoted\'" -> "smart";
"quoted\'" -> "untokenize";
"rStyleM" -> "getStyleIdFromName";
"rStyleM" -> "mknode";
"raw" -> "inlineMarkup";
"rawAttribute" -> "many1Char";
"rawAttribute" -> "spaceChar";
"rawBlock" -> "anyLineNewline";
"rawBlock" -> "genericBlock";
"rawBlockContent" -> "_";
"rawBlockContent" -> "anyLine";
"rawBlockContent" -> "blankline";
"rawBlockContent" -> "isSpace";
"rawBlockContent" -> "rawLine";
"rawBlockContent" -> "skipSpaces";
"rawBlockContent" -> "stringAnyCase";
"rawBlockContent" -> "t";
"rawBlockContent" -> "try";
"rawBlockLines" -> "ignHeaders";
"rawBlockLines" -> "rawBlockContent";
"rawBlockOr" -> "extensionEnabled";
"rawBlockOr" -> "getRawCommand";
"rawBlockOr" -> "rawBlock";
"rawBlockToJira" -> "singleton";
"rawBlockToJira" -> "toJiraRaw";
"rawConTeXtEnvironment" -> "countChar";
"rawConTeXtEnvironment" -> "inBrackets";
"rawConTeXtEnvironment" -> "many1Char";
"rawConTeXtEnvironment" -> "rawConTeXtEnvironment";
"rawConTeXtEnvironment" -> "spaceChar";
"rawConTeXtEnvironment" -> "textStr";
"rawConTeXtEnvironment" -> "try";
"rawEnv" -> "blocks";
"rawEnv" -> "env";
"rawEnv" -> "extensionEnabled";
"rawEnv" -> "raw";
"rawEnv" -> "rawBlock";
"rawEnv" -> "rawopt";
"rawEnv" -> "report";
"rawEnv" -> "untokenize";
"rawEnv" -> "withRaw";
"rawExportLine" -> "anyLine";
"rawExportLine" -> "metaKey";
"rawExportLine" -> "metaLineStart";
"rawExportLine" -> "try";
"rawField" -> "a";
"rawFieldListItem" -> "anyLine";
"rawFieldListItem" -> "indent";
"rawFieldListItem" -> "indentedBlock";
"rawFieldListItem" -> "many1TillChar";
"rawFieldListItem" -> "newline";
"rawFieldListItem" -> "raw";
"rawFieldListItem" -> "spaceChar";
"rawFieldListItem" -> "try";
"rawHtmlBlock" -> "blanklines";
"rawHtmlBlock" -> "htmlTag";
"rawHtmlBlock" -> "isBlockTag";
"rawHtmlBlock" -> "spaceChar";
"rawHtmlBlock" -> "try";
"rawHtmlBlocks" -> "_";
"rawHtmlBlocks" -> "blankline";
"rawHtmlBlocks" -> "block";
"rawHtmlBlocks" -> "gobbleAtMostSpaces";
"rawHtmlBlocks" -> "htmlTag";
"rawHtmlBlocks" -> "isBlockTag";
"rawHtmlBlocks" -> "notFollowedBy\'";
"rawHtmlBlocks" -> "raw";
"rawHtmlBlocks" -> "spaceChar";
"rawHtmlBlocks" -> "stripMarkdownAttribute";
"rawHtmlBlocks" -> "try";
"rawHtmlInline" -> "guardEnabled";
"rawHtmlInline" -> "htmlTag";
"rawHtmlInline" -> "isInlineTag";
"rawHtmlInline" -> "isTextTag";
"rawHtmlInline" -> "t";
"rawHtmlInline" -> "x";
"rawInlineOr" -> "extensionEnabled";
"rawInlineOr" -> "getRawCommand";
"rawLaTeXBlock" -> "beginOrEndCommand";
"rawLaTeXBlock" -> "block";
"rawLaTeXBlock" -> "blockCommand";
"rawLaTeXBlock" -> "blocks";
"rawLaTeXBlock" -> "braced";
"rawLaTeXBlock" -> "controlSeq";
"rawLaTeXBlock" -> "environment";
"rawLaTeXBlock" -> "macroDef";
"rawLaTeXBlock" -> "opt";
"rawLaTeXBlock" -> "rawLaTeXParser";
"rawLaTeXBlock" -> "tokenize";
"rawLaTeXBlock" -> "try";
"rawLaTeXBlock\'" -> "guardEnabled";
"rawLaTeXBlock\'" -> "rawLaTeXBlock";
"rawLaTeXBlock\'" -> "spaces";
"rawLaTeXInline" -> "braced";
"rawLaTeXInline" -> "controlSeq";
"rawLaTeXInline" -> "inlineCommand\'";
"rawLaTeXInline" -> "inlineEnvironment";
"rawLaTeXInline" -> "inlines";
"rawLaTeXInline" -> "opt";
"rawLaTeXInline" -> "raw";
"rawLaTeXInline" -> "rawLaTeXParser";
"rawLaTeXInline" -> "tokenize";
"rawLaTeXInline" -> "try";
"rawLaTeXInline\'" -> "guardEnabled";
"rawLaTeXInline\'" -> "notFollowedBy\'";
"rawLaTeXInline\'" -> "rawConTeXtEnvironment";
"rawLaTeXInline\'" -> "rawLaTeXInline";
"rawLaTeXInline\'" -> "try";
"rawLaTeXParser" -> "_";
"rawLaTeXParser" -> "a";
"rawLaTeXParser" -> "doMacros";
"rawLaTeXParser" -> "raw";
"rawLaTeXParser" -> "satisfyTok";
"rawLaTeXParser" -> "t";
"rawLaTeXParser" -> "takeP";
"rawLaTeXParser" -> "untokenize";
"rawLaTeXParser" -> "when";
"rawLaTeXParser" -> "withRaw";
"rawLine" -> "anyLine";
"rawLine" -> "blankline";
"rawLine" -> "indentSpaces";
"rawLine" -> "notFollowedBy\'";
"rawLine" -> "noteMarker";
"rawLine" -> "skipNonindentSpaces";
"rawLine" -> "try";
"rawLines" -> "anyLine";
"rawLines" -> "rawLine";
"rawListItem" -> "a";
"rawListItem" -> "anyLineNewline";
"rawListItem" -> "blankline";
"rawListItem" -> "codeBlockFenced";
"rawListItem" -> "listLine";
"rawListItem" -> "listLineCommon";
"rawListItem" -> "listStart";
"rawListItem" -> "manyChar";
"rawListItem" -> "try";
"rawMathBetween" -> "manyTillChar";
"rawMathBetween" -> "textStr";
"rawMathBetween" -> "try";
"rawOrgLine" -> "anyLine";
"rawOrgLine" -> "metaLineStart";
"rawOrgLine" -> "returnF";
"rawTableLine" -> "blanklines\'";
"rawTableLine" -> "newline";
"rawTableLine" -> "notFollowedBy\'";
"rawTableLine" -> "splitTextByIndices";
"rawTableLine" -> "tableFooter";
"rawTableLine" -> "take1WhileP";
"rawTableLine" -> "trim";
"rawTeXBlock" -> "_";
"rawTeXBlock" -> "guardEnabled";
"rawTeXBlock" -> "rawConTeXtEnvironment";
"rawTeXBlock" -> "rawLaTeXBlock";
"rawTeXBlock" -> "spnl\'";
"rawTeXBlock" -> "trim";
"rawTitleBlockLine" -> "anyLine";
"rawTitleBlockLine" -> "blankline";
"rawTitleBlockLine" -> "skipSpaces";
"rawTitleBlockLine" -> "spaceChar";
"rawTitleBlockLine" -> "trim";
"rawTitleBlockLine" -> "try";
"rawVerbEnv" -> "_";
"rawVerbEnv" -> "extensionEnabled";
"rawVerbEnv" -> "raw";
"rawVerbEnv" -> "rawBlock";
"rawVerbEnv" -> "report";
"rawVerbEnv" -> "untokenize";
"rawVerbEnv" -> "verbEnv";
"rawVerbEnv" -> "withRaw";
"rawVerbatimBlock" -> "_";
"rawVerbatimBlock" -> "htmlInBalanced";
"rawWord" -> "take1WhileP";
"rawopt" -> "bracketedToks";
"rawopt" -> "sp";
"rawopt" -> "try";
"rawopt" -> "untokenize";
"rchop" -> "_";
"readAllStyles" -> "chooseMax";
"readAllStyles" -> "readAutomaticStyles";
"readAllStyles" -> "readFontPitches";
"readAllStyles" -> "readStyles";
"readAnchorAttr" -> "findAttrText";
"readAttr" -> "attrValue";
"readAttr" -> "maybeToChoice";
"readAttr" -> "readAttr\'";
"readAttr" -> "x";
"readAttrWithDefault" -> "attrValue";
"readAttrWithDefault" -> "findAttr\'";
"readAttrWithDefault" -> "tryToRead";
"readAttrWithDefault" -> "x";
"readAttr\'" -> "attrValue";
"readAttr\'" -> "findAttr\'";
"readAttr\'" -> "tryToRead";
"readAttr\'" -> "x";
"readAutomaticStyles" -> "executeInSub";
"readAutomaticStyles" -> "liftA3";
"readAutomaticStyles" -> "liftAsSuccess";
"readAutomaticStyles" -> "readListStyle";
"readAutomaticStyles" -> "readStyle";
"readAutomaticStyles" -> "returnV";
"readAutomaticStyles" -> "tryAll";
"readBibLaTeX" -> "readBibTeX\'";
"readBibTeX" -> "readBibTeX\'";
"readBibTeX\'" -> "_";
"readBibTeX\'" -> "cite";
"readBibTeX\'" -> "l";
"readBibTeX\'" -> "lookupEnv";
"readBibTeX\'" -> "referenceToMetaValue";
"readBibTeX\'" -> "str";
"readBibTeX\'" -> "t";
"readBibtexString" -> "bibEntries";
"readBibtexString" -> "defaultLang";
"readBibtexString" -> "err";
"readBibtexString" -> "identifier";
"readBibtexString" -> "item";
"readBibtexString" -> "itemToReference";
"readBibtexString" -> "resolveCrossRefs";
"readBlock" -> "readInlines";
"readBlock" -> "safeRead";
"readBlocks" -> "readBlock";
"readBlocks" -> "safeRead";
"readCSV" -> "crFilter";
"readCSV" -> "defaultCSVOptions";
"readCSV" -> "l";
"readCSV" -> "parseCSV";
"readCSV" -> "toHeaderRow";
"readCSV" -> "toRow";
"readCommonMark" -> "a";
"readCommonMark" -> "err";
"readCommonMark" -> "isEnabled";
"readCommonMark" -> "specFor";
"readCreole" -> "a";
"readCreole" -> "crFilter";
"readCreole" -> "parseCreole";
"readCreole" -> "readWithM";
"readCslJson" -> "cite";
"readCslJson" -> "cslJsonToReferences";
"readCslJson" -> "referenceToMetaValue";
"readCslJson" -> "str";
"readCslJson" -> "t";
"readDataFile" -> "fileExists";
"readDataFile" -> "getUserDataDir";
"readDataFile" -> "readDefaultDataFile";
"readDataFile" -> "readFileStrict";
"readDataURI" -> "isMimeType";
"readDataURI" -> "meta";
"readDataURI" -> "str";
"readDataURI" -> "uri";
"readDefaultDataFile" -> "checkExistence";
"readDefaultDataFile" -> "dataFiles";
"readDefaultDataFile" -> "getDataFileName";
"readDefaultDataFile" -> "getDefaultReferenceDocx";
"readDefaultDataFile" -> "getDefaultReferenceODT";
"readDefaultDataFile" -> "getDefaultReferencePptx";
"readDefaultDataFile" -> "makeCanonical";
"readDefaultDataFile" -> "readFileStrict";
"readDefaultStyle" -> "keepingTheValue";
"readDefaultStyle" -> "lookupAttr";
"readDefaultStyle" -> "readStyleProperties";
"readDoc" -> "_";
"readDoc" -> "getReader";
"readDoc" -> "liftPandocLua";
"readDoc" -> "runIO";
"readDocBook" -> "_";
"readDocBook" -> "crFilter";
"readDocBook" -> "handleInstructions";
"readDocBook" -> "normalizeTree";
"readDocBook" -> "parseBlock";
"readDocBook" -> "toList";
"readDocx" -> "a";
"readDocx" -> "archiveToDocxWithWarnings";
"readDocx" -> "docxToOutput";
"readDocx" -> "err";
"readDocx" -> "meta";
"readDokuWiki" -> "crFilter";
"readDokuWiki" -> "parseDokuWiki";
"readEPUB" -> "_";
"readEPUB" -> "archiveToEPUB";
"readFB2" -> "_";
"readFB2" -> "authors";
"readFB2" -> "crFilter";
"readFB2" -> "parseRootElement";
"readFB2" -> "toList";
"readFile" -> "encodePath";
"readFile" -> "hGetContents";
"readFileFromDirs" -> "_";
"readFileFromDirs" -> "readFileFromDirs";
"readFileFromDirs" -> "readFileLazy";
"readFileLazy" -> "liftIOError";
"readFileStrict" -> "liftIOError";
"readFontPitches" -> "fontPitchReader";
"readFontPitches" -> "producingExtraState";
"readHaddock" -> "crFilter";
"readHaddock" -> "readHaddockEither";
"readHaddockEither" -> "docHToBlocks";
"readHtml" -> "block";
"readHtml" -> "blocks";
"readHtml" -> "crFilter";
"readHtml" -> "err";
"readHtml" -> "fixPlains";
"readHtml" -> "meta";
"readHtml" -> "parseOptions";
"readHtml" -> "replaceNotes";
"readHtml" -> "reportLogMessages";
"readHtml" -> "stripPrefixes";
"readInline" -> "safeRead";
"readInlines" -> "readInline";
"readInlines" -> "safeRead";
"readIpynb" -> "_";
"readIpynb" -> "err";
"readIpynb" -> "notebookToPandoc";
"readIpynb" -> "t";
"readJATS" -> "_";
"readJATS" -> "crFilter";
"readJATS" -> "normalizeTree";
"readJATS" -> "parseBlock";
"readJATS" -> "toList";
"readJSON" -> "_";
"readJSON" -> "readBibLaTeX";
"readJSON" -> "readBibTeX";
"readJSON" -> "t";
"readJira" -> "jiraToPandoc";
"readLaTeX" -> "crFilter";
"readLaTeX" -> "parseLaTeX";
"readLaTeX" -> "tokenize";
"readLineMode" -> "lookupAttr\'";
"readLineMode" -> "searchAttr";
"readLineMode" -> "styleAttr";
"readLineMode" -> "x";
"readListLevelStyle" -> "_";
"readListLevelStyle" -> "findAttrText\'";
"readListLevelStyle" -> "findAttr\'";
"readListLevelStyle" -> "getAttr";
"readListLevelStyle" -> "keepingTheValue";
"readListLevelStyle" -> "liftA5";
"readListLevelStyle" -> "readAttr";
"readListLevelStyle" -> "returnV";
"readListLevelStyle" -> "safeRead";
"readListLevelStyle" -> "t";
"readListLevelStyles" -> "readListLevelStyle";
"readListLevelStyles" -> "tryAll";
"readListStyle" -> "chooseMostSpecificListLevelStyle";
"readListStyle" -> "findAttr";
"readListStyle" -> "keepingTheValue";
"readListStyle" -> "liftA";
"readListStyle" -> "liftA3";
"readListStyle" -> "readListLevelStyles";
"readLookupables" -> "a";
"readLookupables" -> "word";
"readMan" -> "crFilter";
"readMan" -> "lexRoff";
"readMan" -> "parseMan";
"readMan" -> "readWithMTokens";
"readMan" -> "txt";
"readMarkdown" -> "crFilter";
"readMarkdown" -> "parseMarkdown";
"readMarkdown" -> "readWithM";
"readMediaWiki" -> "a";
"readMediaWiki" -> "addLogMessage";
"readMediaWiki" -> "crFilter";
"readMediaWiki" -> "parseMediaWiki";
"readMediaWiki" -> "readWithM";
"readMetaValue" -> "camelCaseStrToHyphenated";
"readMetaValue" -> "optToOutputSettings";
"readMetaValue" -> "setVariable";
"readMuse" -> "addLogMessage";
"readMuse" -> "crFilter";
"readMuse" -> "parseMuse";
"readNSattributes" -> "_";
"readNSattributes" -> "currentElement";
"readNSattributes" -> "failEmpty";
"readNSattributes" -> "fromState";
"readNSattributes" -> "prefix";
"readNSattributes" -> "startState";
"readNSattributes" -> "succeedWith";
"readNSattributes" -> "x";
"readNative" -> "_";
"readNative" -> "readBlocks";
"readNative" -> "safeRead";
"readOPML" -> "crFilter";
"readOPML" -> "normalizeTree";
"readOPML" -> "parseBlock";
"readOdt" -> "readOdt\'";
"readOdt\'" -> "_";
"readOdt\'" -> "bytesToOdt";
"readOrg" -> "crFilter";
"readOrg" -> "optionsToParserState";
"readOrg" -> "parseOrg";
"readOrg" -> "readWithM";
"readParaProperties" -> "_";
"readParaProperties" -> "executeInSub";
"readParaProperties" -> "getAttr";
"readParaProperties" -> "indent";
"readParaProperties" -> "isSetWithDefault";
"readParaProperties" -> "isSet\'";
"readParaProperties" -> "liftA2";
"readParaProperties" -> "liftA3";
"readParaProperties" -> "liftAsSuccess";
"readParaProperties" -> "readAttr\'";
"readPercent" -> "a";
"readRST" -> "crFilter";
"readRST" -> "parseRST";
"readRST" -> "readWithM";
"readSource" -> "_";
"readSource" -> "readURI";
"readSource" -> "tshow";
"readSource" -> "uriPathToPath";
"readSource" -> "uriScheme";
"readStrikeThroughMode" -> "readLineMode";
"readStyle" -> "findAttr";
"readStyle" -> "findAttr\'";
"readStyle" -> "keepingTheValue";
"readStyle" -> "liftA4";
"readStyle" -> "lookupAttr\'";
"readStyle" -> "readStyleProperties";
"readStyleByName" -> "_";
"readStyleByName" -> "findAttr";
"readStyleByName" -> "getStyleByName";
"readStyleByName" -> "keepingTheValue";
"readStyleProperties" -> "choiceToMaybe";
"readStyleProperties" -> "liftA2";
"readStyleProperties" -> "readParaProperties";
"readStyleProperties" -> "readTextProperties";
"readStyles" -> "executeInSub";
"readStyles" -> "liftA3";
"readStyles" -> "liftAsSuccess";
"readStyles" -> "readDefaultStyle";
"readStyles" -> "readListStyle";
"readStyles" -> "readStyle";
"readStyles" -> "tryAll";
"readStylesAt" -> "readAllStyles";
"readStylesAt" -> "runConverter\'";
"readTWiki" -> "a";
"readTWiki" -> "crFilter";
"readTWiki" -> "parseTWiki";
"readTWiki" -> "readWithM";
"readTextProperties" -> "executeInSub";
"readTextProperties" -> "findPitch";
"readTextProperties" -> "getAttr";
"readTextProperties" -> "liftA6";
"readTextProperties" -> "liftAsSuccess";
"readTextProperties" -> "readStrikeThroughMode";
"readTextProperties" -> "readUnderlineMode";
"readTextProperties" -> "searchAttr";
"readTextile" -> "crFilter";
"readTextile" -> "parseTextile";
"readTextile" -> "readWithM";
"readTikiWiki" -> "a";
"readTikiWiki" -> "crFilter";
"readTikiWiki" -> "parseTikiWiki";
"readTikiWiki" -> "readWithM";
"readTranslations" -> "decodeArg";
"readTranslations" -> "encodePath";
"readTranslations" -> "fromString";
"readTranslations" -> "fromStringLazy";
"readTranslations" -> "fromText";
"readTranslations" -> "fromTextLazy";
"readTranslations" -> "getContents";
"readTranslations" -> "hGetContents";
"readTranslations" -> "hPutStr";
"readTranslations" -> "hPutStrLn";
"readTranslations" -> "hPutStrLnWith";
"readTranslations" -> "hPutStrWith";
"readTranslations" -> "putStr";
"readTranslations" -> "putStrLn";
"readTranslations" -> "putStrLnWith";
"readTranslations" -> "putStrWith";
"readTranslations" -> "readFile";
"readTranslations" -> "t";
"readTranslations" -> "toString";
"readTranslations" -> "toStringLazy";
"readTranslations" -> "toText";
"readTranslations" -> "toTextLazy";
"readTranslations" -> "writeFile";
"readTranslations" -> "writeFileWith";
"readTxt2Tags" -> "crFilter";
"readTxt2Tags" -> "getT2TMeta";
"readTxt2Tags" -> "meta";
"readTxt2Tags" -> "parseT2T";
"readTxt2Tags" -> "readWithM";
"readURI" -> "openURL";
"readUnderlineMode" -> "readLineMode";
"readUnicodeChar" -> "_";
"readUnicodeChar" -> "safeRead";
"readUnicodeChar" -> "t";
"readUtf8File" -> "readFileStrict";
"readVimwiki" -> "crFilter";
"readVimwiki" -> "parseVimwiki";
"readVimwiki" -> "readWithM";
"readWith" -> "a";
"readWith" -> "readWithM";
"readWith" -> "t";
"readWithM" -> "a";
"readWithM" -> "mapLeft";
"readWithM" -> "toText";
"readWithMTokens" -> "a";
"readWithMTokens" -> "mapLeft";
"read_body" -> "a";
"read_body" -> "executeInSub";
"read_body" -> "getExtraState";
"read_body" -> "getMediaBag";
"read_body" -> "inlines";
"read_body" -> "liftAsSuccess";
"read_body" -> "post_process";
"read_body" -> "read_text";
"read_body" -> "txt";
"read_bookmark" -> "_ANCHOR_PREFIX_";
"read_bookmark" -> "liftAsSuccess";
"read_bookmark" -> "matchingElement";
"read_bookmark" -> "maybeAddAnchorFrom";
"read_bookmark" -> "returnV";
"read_bookmark_ref" -> "matchChildContent";
"read_bookmark_ref" -> "matchingElement";
"read_bookmark_ref" -> "maybeInAnchorRef";
"read_bookmark_ref" -> "read_plain_text";
"read_bookmark_start" -> "_ANCHOR_PREFIX_";
"read_bookmark_start" -> "liftAsSuccess";
"read_bookmark_start" -> "matchingElement";
"read_bookmark_start" -> "maybeAddAnchorFrom";
"read_bookmark_start" -> "returnV";
"read_citation" -> "cite";
"read_citation" -> "findAttrTextWithDefault";
"read_citation" -> "liftA2";
"read_citation" -> "matchChildContent";
"read_citation" -> "matchingElement";
"read_citation" -> "readAttrWithDefault";
"read_citation" -> "read_plain_text";
"read_frame" -> "filterChildrenName\'";
"read_frame" -> "foldS";
"read_frame" -> "matchingElement";
"read_frame" -> "read_frame_child";
"read_frame_child" -> "_";
"read_frame_child" -> "elName";
"read_frame_child" -> "read_frame_img";
"read_frame_child" -> "read_frame_mathml";
"read_frame_child" -> "read_frame_text_box";
"read_frame_child" -> "returnV";
"read_frame_img" -> "_";
"read_frame_img" -> "executeIn";
"read_frame_img" -> "extensionsFromList";
"read_frame_img" -> "findAttrText\'";
"read_frame_img" -> "findAttr\'";
"read_frame_img" -> "firstMatch";
"read_frame_img" -> "image_attributes";
"read_frame_img" -> "inlineListToIdentifier";
"read_frame_img" -> "lookupResource";
"read_frame_img" -> "matchChildContent";
"read_frame_img" -> "matchChildContent\'";
"read_frame_img" -> "read_frame_title";
"read_frame_img" -> "read_plain_text";
"read_frame_img" -> "returnV";
"read_frame_img" -> "toList";
"read_frame_img" -> "uncurry4";
"read_frame_img" -> "updateMediaWithResource";
"read_frame_mathml" -> "_";
"read_frame_mathml" -> "displayMath";
"read_frame_mathml" -> "executeIn";
"read_frame_mathml" -> "findAttr\'";
"read_frame_mathml" -> "firstMatch";
"read_frame_mathml" -> "lookupResource";
"read_frame_mathml" -> "returnV";
"read_frame_mathml" -> "stripPrefix";
"read_frame_text_box" -> "executeIn";
"read_frame_text_box" -> "matchChildContent\'";
"read_frame_text_box" -> "read_img_with_caption";
"read_frame_text_box" -> "read_paragraph";
"read_frame_text_box" -> "toList";
"read_frame_title" -> "matchChildContent";
"read_frame_title" -> "matchingElement";
"read_frame_title" -> "read_plain_text";
"read_header" -> "anchor";
"read_header" -> "blocks";
"read_header" -> "getHeaderAnchor";
"read_header" -> "matchChildContent";
"read_header" -> "matchingElement";
"read_header" -> "readAttrWithDefault";
"read_header" -> "read_bookmark";
"read_header" -> "read_bookmark_ref";
"read_header" -> "read_bookmark_start";
"read_header" -> "read_citation";
"read_header" -> "read_frame";
"read_header" -> "read_line_break";
"read_header" -> "read_link";
"read_header" -> "read_note";
"read_header" -> "read_plain_text";
"read_header" -> "read_reference_ref";
"read_header" -> "read_reference_start";
"read_header" -> "read_spaces";
"read_header" -> "read_span";
"read_header" -> "uncurry3";
"read_img_with_caption" -> "_";
"read_img_with_caption" -> "attr";
"read_img_with_caption" -> "firstMatch";
"read_img_with_caption" -> "read_img_with_caption";
"read_img_with_caption" -> "singleton";
"read_img_with_caption" -> "title";
"read_img_with_caption" -> "txt";
"read_line_break" -> "linebreak";
"read_line_break" -> "matchingElement";
"read_line_break" -> "returnV";
"read_link" -> "findAttrTextWithDefault";
"read_link" -> "liftA3";
"read_link" -> "link";
"read_link" -> "matchChildContent";
"read_link" -> "matchingElement";
"read_link" -> "read_bookmark";
"read_link" -> "read_bookmark_ref";
"read_link" -> "read_bookmark_start";
"read_link" -> "read_citation";
"read_link" -> "read_note";
"read_link" -> "read_plain_text";
"read_link" -> "read_reference_ref";
"read_link" -> "read_reference_start";
"read_link" -> "read_span";
"read_list" -> "constructList";
"read_list" -> "matchChildContent\'";
"read_list" -> "matchingElement";
"read_list" -> "read_list_item";
"read_list_item" -> "compactify";
"read_list_item" -> "liftA";
"read_list_item" -> "matchChildContent\'";
"read_list_item" -> "matchingElement";
"read_list_item" -> "read_header";
"read_list_item" -> "read_list";
"read_list_item" -> "read_paragraph";
"read_note" -> "liftA";
"read_note" -> "matchChildContent\'";
"read_note" -> "matchingElement";
"read_note" -> "note";
"read_note" -> "read_note_body";
"read_note_body" -> "matchChildContent\'";
"read_note_body" -> "matchingElement";
"read_note_body" -> "read_paragraph";
"read_paragraph" -> "constructPara";
"read_paragraph" -> "liftA";
"read_paragraph" -> "matchChildContent";
"read_paragraph" -> "matchingElement";
"read_paragraph" -> "para";
"read_paragraph" -> "read_bookmark";
"read_paragraph" -> "read_bookmark_ref";
"read_paragraph" -> "read_bookmark_start";
"read_paragraph" -> "read_citation";
"read_paragraph" -> "read_frame";
"read_paragraph" -> "read_line_break";
"read_paragraph" -> "read_link";
"read_paragraph" -> "read_note";
"read_paragraph" -> "read_plain_text";
"read_paragraph" -> "read_reference_ref";
"read_paragraph" -> "read_reference_start";
"read_paragraph" -> "read_spaces";
"read_paragraph" -> "read_span";
"read_paragraph" -> "read_text_seq";
"read_paragraph" -> "withNewStyle";
"read_plain_text" -> "_";
"read_plain_text" -> "extractText";
"read_plain_text" -> "failEmpty";
"read_plain_text" -> "recover";
"read_plain_text" -> "succeedWith";
"read_reference_ref" -> "matchChildContent";
"read_reference_ref" -> "matchingElement";
"read_reference_ref" -> "maybeInAnchorRef";
"read_reference_ref" -> "read_plain_text";
"read_reference_start" -> "matchingElement";
"read_reference_start" -> "maybeAddAnchorFrom";
"read_reference_start" -> "readAnchorAttr";
"read_spaces" -> "matchingElement";
"read_spaces" -> "readAttrWithDefault";
"read_span" -> "matchChildContent";
"read_span" -> "matchingElement";
"read_span" -> "read_bookmark";
"read_span" -> "read_bookmark_ref";
"read_span" -> "read_bookmark_start";
"read_span" -> "read_citation";
"read_span" -> "read_line_break";
"read_span" -> "read_link";
"read_span" -> "read_note";
"read_span" -> "read_plain_text";
"read_span" -> "read_reference_ref";
"read_span" -> "read_reference_start";
"read_span" -> "read_spaces";
"read_span" -> "read_span";
"read_span" -> "withNewStyle";
"read_table" -> "liftA";
"read_table" -> "matchChildContent\'";
"read_table" -> "matchingElement";
"read_table" -> "read_table_row";
"read_table" -> "simpleTable\'";
"read_table_cell" -> "compactify";
"read_table_cell" -> "liftA";
"read_table_cell" -> "matchChildContent\'";
"read_table_cell" -> "matchingElement";
"read_table_cell" -> "read_paragraph";
"read_table_row" -> "liftA";
"read_table_row" -> "matchChildContent\'";
"read_table_row" -> "matchingElement";
"read_table_row" -> "read_table_cell";
"read_text" -> "matchChildContent\'";
"read_text" -> "read_header";
"read_text" -> "read_list";
"read_text" -> "read_paragraph";
"read_text" -> "read_table";
"read_text_seq" -> "matchChildContent";
"read_text_seq" -> "matchingElement";
"read_text_seq" -> "read_plain_text";
"readers" -> "readBibLaTeX";
"readers" -> "readBibTeX";
"readers" -> "readCSV";
"readers" -> "readCommonMark";
"readers" -> "readCreole";
"readers" -> "readCslJson";
"readers" -> "readDocBook";
"readers" -> "readDocx";
"readers" -> "readDokuWiki";
"readers" -> "readEPUB";
"readers" -> "readFB2";
"readers" -> "readHaddock";
"readers" -> "readHtml";
"readers" -> "readIpynb";
"readers" -> "readJATS";
"readers" -> "readJSON";
"readers" -> "readJira";
"readers" -> "readLaTeX";
"readers" -> "readMan";
"readers" -> "readMarkdown";
"readers" -> "readMediaWiki";
"readers" -> "readMuse";
"readers" -> "readNative";
"readers" -> "readOPML";
"readers" -> "readOdt";
"readers" -> "readOrg";
"readers" -> "readRST";
"readers" -> "readTWiki";
"readers" -> "readTextile";
"readers" -> "readTikiWiki";
"readers" -> "readTxt2Tags";
"readers" -> "readVimwiki";
"readersNames" -> "readers";
"recover" -> "_";
"recover" -> "a";
"recurseOnList" -> "_";
"recurseOnList" -> "fixListNesting";
"recurseOnList" -> "items";
"refTitle" -> "_";
"refTitle" -> "meta";
"reference" -> "guardDisabled";
"reference" -> "inlinesInBalancedBrackets";
"reference" -> "notFollowedBy\'";
"reference" -> "trimInlinesF";
"reference" -> "withRaw";
"referenceKey" -> "_";
"referenceKey" -> "a";
"referenceKey" -> "anonymousKey";
"referenceKey" -> "attr";
"referenceKey" -> "attributes";
"referenceKey" -> "blanklines";
"referenceKey" -> "escapeURI";
"referenceKey" -> "extractIdClass";
"referenceKey" -> "guardEnabled";
"referenceKey" -> "keyValAttr";
"referenceKey" -> "litChar";
"referenceKey" -> "logMessage";
"referenceKey" -> "many1Char";
"referenceKey" -> "manyTillChar";
"referenceKey" -> "newline";
"referenceKey" -> "notFollowedBy\'";
"referenceKey" -> "raw";
"referenceKey" -> "reference";
"referenceKey" -> "referenceTitle";
"referenceKey" -> "regularKey";
"referenceKey" -> "skipNonindentSpaces";
"referenceKey" -> "skipSpaces";
"referenceKey" -> "space";
"referenceKey" -> "spaceChar";
"referenceKey" -> "spnl";
"referenceKey" -> "substKey";
"referenceKey" -> "t";
"referenceKey" -> "toKey";
"referenceKey" -> "trimr";
"referenceKey" -> "try";
"referenceKey" -> "x";
"referenceLink" -> "_";
"referenceLink" -> "asksF";
"referenceLink" -> "attr";
"referenceLink" -> "citationName";
"referenceLink" -> "dropBrackets";
"referenceLink" -> "guardDisabled";
"referenceLink" -> "guardEnabled";
"referenceLink" -> "inlines";
"referenceLink" -> "lookupKey";
"referenceLink" -> "normalCite";
"referenceLink" -> "parseFromString\'";
"referenceLink" -> "raw";
"referenceLink" -> "reference";
"referenceLink" -> "referenceName";
"referenceLink" -> "sp";
"referenceLink" -> "spnl";
"referenceLink" -> "toKey";
"referenceLink" -> "try";
"referenceLink" -> "when";
"referenceName" -> "quotedReferenceName";
"referenceName" -> "simpleReferenceName";
"referenceNames" -> "blankline";
"referenceNames" -> "blanklines";
"referenceNames" -> "manyChar";
"referenceNames" -> "quotedReferenceName";
"referenceNames" -> "try";
"referenceTitle" -> "newline";
"referenceTitle" -> "quotedTitle";
"referenceTitle" -> "skipSpaces";
"referenceTitle" -> "try";
"referenceToMetaValue" -> "valToMetaValue";
"referencedNote" -> "askF";
"referencedNote" -> "asksF";
"referencedNote" -> "noteMarker";
"referencedNote" -> "runF";
"referencedNote" -> "try";
"refsToMarkdown" -> "keyToMarkdown";
"refsToMarkdown" -> "vcat";
"refsToRST" -> "keyToRST";
"refsToRST" -> "vcat";
"regLink" -> "attr";
"regLink" -> "attributes";
"regLink" -> "guardEnabled";
"regLink" -> "source";
"regLink" -> "try";
"registerAnchorId" -> "anchor";
"registerHeader" -> "extensionEnabled";
"registerHeader" -> "logMessage";
"registerHeader" -> "toAsciiChar";
"registerHeader" -> "uniqueIdent";
"registerHeader" -> "when";
"registerImage" -> "attr";
"registerImage" -> "inlineListToRST";
"registerImage" -> "tshow";
"registerImage" -> "txt";
"registerImplicitHeader" -> "_";
"registerImplicitHeader" -> "attr";
"registerImplicitHeader" -> "raw";
"registerImplicitHeader" -> "toKey";
"registerLink" -> "curSlideHasSpeakerNotes";
"registerLink" -> "link";
"registerMacro" -> "defaultExportSettings";
"registerMedia" -> "curSlideHasSpeakerNotes";
"registerMedia" -> "extensionFromMimeType";
"registerMedia" -> "imageType";
"registerMedia" -> "x";
"registerNotes" -> "blockListToJira";
"registerNotes" -> "singleton";
"regularKey" -> "referenceNames";
"regularKey" -> "targetURI";
"regularKey" -> "toKey";
"regularKey" -> "try";
"regularSymbol" -> "_";
"regularSymbol" -> "isSpecial";
"regularSymbol" -> "satisfyTok";
"regularSymbol" -> "specialChars";
"regularSymbol" -> "str";
"regularSymbol" -> "t";
"regularSymbol" -> "untoken";
"regularText" -> "many1Char";
"relElemToRelationship" -> "_";
"relElemToRelationship" -> "elName";
"relElemToRelationship" -> "findAttrText";
"relToElement" -> "mknode";
"relators" -> "relatorMap";
"relsToElement" -> "mknode";
"relsToElement" -> "relToElement";
"removeDoubleQuotes" -> "t";
"removeEPUBAttrs" -> "a";
"removeEPUBAttrs" -> "isEPUBAttr";
"removeExplicitlyExcludedNodes" -> "headlineContainsExcludeTags";
"removeExplicitlyExcludedNodes" -> "removeExplicitlyExcludedNodes";
"removeFinalPeriod" -> "_";
"removeFinalPeriod" -> "attr";
"removeFinalPeriod" -> "removeFinalPeriod";
"removeFinalPeriod" -> "t";
"removeFormatting" -> "_";
"removeFormatting" -> "deNote";
"removeFormatting" -> "deQuote";
"removeFormatting" -> "x";
"removeHash" -> "_";
"removeHash" -> "t";
"removeKeyValues" -> "_";
"removeKeyValues" -> "x";
"removeListDivs" -> "removeListDivs\'";
"removeListDivs\'" -> "delete";
"removeListDivs\'" -> "listParagraphDivs";
"removeNote" -> "_";
"removeNote" -> "x";
"removeOneLeadingSpace" -> "_";
"removeOneLeadingSpace" -> "startsWithSpace";
"removeOneLeadingSpace" -> "t";
"removeOrphanAnchors" -> "removeOrphanAnchors\'";
"removeOrphanAnchors\'" -> "removeOrphanAnchors\'\'";
"removeOrphanAnchors\'\'" -> "_";
"removeParaLinks" -> "paragraph";
"removePrefix" -> "readDocx";
"renameImages" -> "_";
"renameImages" -> "a";
"renameImages" -> "attr";
"renameImages" -> "collapseFilePath";
"renameImages" -> "url";
"renameImages" -> "x";
"renderFootnotes" -> "el";
"renderFootnotes" -> "list";
"renderFootnotes" -> "uattr";
"renderInlineList" -> "env";
"renderInlineList" -> "fixOrEscape";
"renderInlineList" -> "inlineListStartsWithAlnum";
"renderInlineList" -> "inlineToMuse";
"renderInlineList" -> "literal";
"renderInlineList" -> "renderInlineList";
"renderInlineList" -> "x";
"renderRole" -> "attr";
"renderRole" -> "renderRole";
"renderRole" -> "t";
"renderRole" -> "x";
"renderSection" -> "_";
"renderSection" -> "blockToXml";
"renderSection" -> "cMapM";
"renderSection" -> "el";
"renderSection" -> "formatTitle";
"renderSection" -> "list";
"renderSection" -> "renderSection";
"renderSection" -> "title";
"renderSection" -> "uattr";
"renderSections" -> "_";
"renderSections" -> "blocks";
"renderSections" -> "cMapM";
"renderSections" -> "makeSections";
"renderSections" -> "renderSection";
"renderTags\'" -> "a";
"renderTags\'" -> "isSpace";
"renderTags\'" -> "matchTagClose";
"renderTags\'" -> "matchTagOpen";
"renderTags\'" -> "maybeFromAttrib";
"renderTags\'" -> "pAny";
"renderTags\'" -> "pBlank";
"renderTags\'" -> "pCloses";
"renderTags\'" -> "pInTag";
"renderTags\'" -> "pInTagWithAttribs";
"renderTags\'" -> "pInTags";
"renderTags\'" -> "pInTags\'";
"renderTags\'" -> "pSatisfy";
"renderTags\'" -> "toAttr";
"renderTags\'" -> "toStringAttr";
"renderTags\'" -> "token";
"renderTags\'" -> "try";
"renumId" -> "replaceAttr";
"renumIdMap" -> "_";
"renumIdMap" -> "findAttr";
"renumIdMap" -> "renumIdMap";
"renumIds" -> "renumId";
"replaceAnchor" -> "_";
"replaceAnchor" -> "anchor";
"replaceAttr" -> "a";
"replaceExtraState" -> "x";
"replaceImagesWithAlt" -> "_";
"replaceImagesWithAlt" -> "a";
"replaceImagesWithAlt" -> "attr";
"replaceImagesWithAlt" -> "el";
"replaceImagesWithAlt" -> "elName";
"replaceImagesWithAlt" -> "isImage";
"replaceImagesWithAlt" -> "qname";
"replaceImagesWithAlt" -> "txt";
"replaceImagesWithAlt" -> "uname";
"replaceNamedChildren" -> "_";
"replaceNamedChildren" -> "elContent";
"replaceNamedChildren" -> "isElem";
"replaceNamedChildren" -> "prefix";
"replaceNamedChildren" -> "switch";
"replaceNotes" -> "replaceNotes\'";
"replaceNotes\'" -> "_";
"replaceNotes\'" -> "a";
"replaceNotes\'" -> "x";
"replaceSmallCaps" -> "x";
"report" -> "logOutput";
"report" -> "messageVerbosity";
"report" -> "when";
"reportLogMessages" -> "a";
"reportLogMessages" -> "report";
"requireDigits" -> "_";
"reservedSlideIds" -> "endNotesSlideId";
"reservedSlideIds" -> "metadataSlideId";
"reservedSlideIds" -> "tocSlideId";
"resetField" -> "a";
"resetIndent" -> "a";
"resolveCrossRef" -> "getXrefFields";
"resolveCrossRefs" -> "resolveCrossRef";
"resolveDependentRunStyle" -> "blacklistedCharStyles";
"resolveDependentRunStyle" -> "isEnabled";
"resolveDependentRunStyle" -> "leftBiasedMergeRunStyle";
"resolveDependentRunStyle" -> "resolveDependentRunStyle";
"resolveGlyph" -> "_";
"resolveGlyph" -> "a";
"resolveGlyph" -> "characterCodeMap";
"resolveGlyph" -> "combiningAccentsMap";
"resolveGlyph" -> "escUnknown";
"resolveGlyph" -> "readUnicodeChar";
"resolveGlyph" -> "x";
"resolveKey" -> "resolveKey\'";
"resolveKey" -> "x";
"resolveKey\'" -> "_";
"resolveKey\'" -> "biblatexStringMap";
"resolveKey\'" -> "l";
"resolveKey\'" -> "parseLaTeX";
"resolveKey\'" -> "stringify";
"resolveKey\'" -> "x";
"resolveMacro" -> "macroName";
"resolveMacro" -> "singleTok";
"resolveMacro" -> "x";
"resolveRefs" -> "_";
"resolveRefs" -> "txt";
"resolveRefs" -> "x";
"resolveText" -> "_";
"resolveText" -> "report";
"resolveText" -> "resolveMacro";
"retokenizeComment" -> "isCommentTok";
"retokenizeComment" -> "satisfyTok";
"retokenizeComment" -> "tokenize";
"retokenizeComment" -> "txt";
"returnV" -> "a";
"reverseComposition" -> "a";
"reverseMimeTypes" -> "mimeTypesList";
"reverseMimeTypes" -> "swap";
"rewriteLink\'" -> "attr";
"rewriteLink\'" -> "l";
"rewriteLink\'" -> "title";
"rewriteLinks" -> "rewriteLink\'";
"rightTag" -> "parseHtmlContent";
"roleAfter" -> "roleMarker";
"roleAfter" -> "try";
"roleAfter" -> "unmarkedInterpretedText";
"roleBefore" -> "roleMarker";
"roleBefore" -> "try";
"roleBefore" -> "unmarkedInterpretedText";
"roleMarker" -> "roleName";
"roleName" -> "many1Char";
"romanNumeral" -> "one";
"romanNumeral" -> "try";
"romanNumeralArg" -> "_";
"romanNumeralArg" -> "a";
"romanNumeralArg" -> "inBraces";
"romanNumeralArg" -> "isWordTok";
"romanNumeralArg" -> "safeRead";
"romanNumeralArg" -> "satisfyTok";
"romanNumeralArg" -> "spaces";
"romanNumeralArg" -> "symbol";
"romanNumeralLower" -> "romanNumeralArg";
"romanNumeralLower" -> "str";
"romanNumeralLower" -> "toRomanNumeral";
"romanNumeralUpper" -> "romanNumeralArg";
"romanNumeralUpper" -> "str";
"romanNumeralUpper" -> "toRomanNumeral";
"rowCells" -> "_";
"rowCells" -> "blockDocBookTags";
"rowCells" -> "blockHtmlTags";
"rowCells" -> "blockTags";
"rowCells" -> "eitherBlockOrInline";
"rowCells" -> "epubTags";
"rowCells" -> "groupingContent";
"rowCells" -> "sectioningContent";
"rowListToHtml" -> "nl";
"rowListToHtml" -> "tableRowToHtml";
"rowListToHtml" -> "x";
"rowListToJats" -> "tableRowToJats";
"rowListToJats" -> "vcat";
"rowToBlocksList" -> "cellToBlocks";
"rowToBlocksList" -> "jiraToPandocBlocks";
"rowToBlocksList" -> "singleParaToPlain";
"rowToBlocksList" -> "x";
"rowToContent" -> "_";
"rowToParagraphs" -> "cellToParagraphs";
"rowsToTable" -> "rowToContent";
"rowsep" -> "blanklines";
"rowsep" -> "guardColumnOne";
"rowsep" -> "parseAttrs";
"rowsep" -> "skipSpaces";
"rowsep" -> "sym";
"rowsep" -> "try";
"rowspanAttrib" -> "tshow";
"rtfCompact" -> "rtfParSpaced";
"rtfEmbedImage" -> "_";
"rtfEmbedImage" -> "attr";
"rtfEmbedImage" -> "desiredSizeInPoints";
"rtfEmbedImage" -> "imageSize";
"rtfEmbedImage" -> "raw";
"rtfEmbedImage" -> "report";
"rtfEmbedImage" -> "sizeInPixels";
"rtfEmbedImage" -> "tshow";
"rtfEmbedImage" -> "x";
"rtfPar" -> "rtfParSpaced";
"rtfParSpaced" -> "indent";
"rtfParSpaced" -> "tshow";
"rule" -> "_";
"rule" -> "horizontalRule";
"rule" -> "safeRead";
"rule" -> "skipopts";
"rule" -> "stringify";
"rule" -> "tok";
"ruleParser" -> "spaces";
"ruleParser" -> "trim";
"runAll" -> "blockElementNames";
"runAll" -> "inlineElementNames";
"runAll" -> "listOfBlocksFilterName";
"runAll" -> "listOfInlinesFilterName";
"runAll" -> "metaFilterName";
"runAll" -> "pandocFilterNames";
"runAll" -> "registerFilterFunction";
"runAll" -> "walkMWithLuaFilter";
"runConverter\'" -> "createStartState";
"runConverter\'" -> "readNSattributes";
"runConverter\'" -> "runConverter";
"runConverter\'" -> "x";
"runD" -> "a";
"runDefaultConverter" -> "a";
"runDefaultConverter" -> "startState";
"runDefaultConverter" -> "wrap";
"runDefaultConverter" -> "x";
"runElemToInlines" -> "linebreak";
"runElemToInlines" -> "space";
"runFilterFile" -> "runAll";
"runFilterFunction" -> "pushFilterFunction";
"runFilterFunction" -> "x";
"runIO" -> "a";
"runIOorExplode" -> "a";
"runIOorExplode" -> "fileExists";
"runIOorExplode" -> "getCurrentTime";
"runIOorExplode" -> "getCurrentTimeZone";
"runIOorExplode" -> "getDataFileName";
"runIOorExplode" -> "getModificationTime";
"runIOorExplode" -> "glob";
"runIOorExplode" -> "handleError";
"runIOorExplode" -> "logOutput";
"runIOorExplode" -> "lookupEnv";
"runIOorExplode" -> "newStdGen";
"runIOorExplode" -> "newUniqueHash";
"runIOorExplode" -> "openURL";
"runIOorExplode" -> "readFileLazy";
"runIOorExplode" -> "readFileStrict";
"runIOorExplode" -> "runIO";
"runJSONFilter" -> "liftPandocLua";
"runJSONFilter" -> "x";
"runLua" -> "initLuaState";
"runLua" -> "liftPandocLua";
"runLua" -> "runPandocLua";
"runLua" -> "try";
"runOnSequence" -> "a";
"runOnSequence" -> "elementOrList";
"runOnSequence" -> "mconcatMapM";
"runOnSequence" -> "runFilterFunction";
"runOnSequence" -> "x";
"runOnValue" -> "a";
"runOnValue" -> "popOption";
"runOnValue" -> "runFilterFunction";
"runOnValue" -> "x";
"runP" -> "env";
"runPandocLua" -> "a";
"runPandocLua" -> "defaultGlobals";
"runPandocLua" -> "errorConversion";
"runPandocLua" -> "liftPandocLua";
"runPandocLua" -> "setGlobals";
"runPandocLua" -> "x";
"runPres" -> "a";
"runPres" -> "env";
"runPure" -> "_";
"runPure" -> "env";
"runPure" -> "fileExists";
"runPure" -> "getCurrentTime";
"runPure" -> "getCurrentTimeZone";
"runPure" -> "getDataFileName";
"runPure" -> "getFileInfo";
"runPure" -> "getModificationTime";
"runPure" -> "getsPureState";
"runPure" -> "glob";
"runPure" -> "logOutput";
"runPure" -> "lookupEnv";
"runPure" -> "modifyPureState";
"runPure" -> "newStdGen";
"runPure" -> "newUniqueHash";
"runPure" -> "openURL";
"runPure" -> "readFileLazy";
"runPure" -> "readFileStrict";
"runPure" -> "split";
"runPure" -> "tm";
"runPure" -> "x";
"runStyleToTransform" -> "bold";
"runStyleToTransform" -> "emph";
"runStyleToTransform" -> "extraAttr";
"runStyleToTransform" -> "isEnabled";
"runStyleToTransform" -> "isSmallCaps";
"runStyleToTransform" -> "italic";
"runStyleToTransform" -> "normalizeToClassName";
"runStyleToTransform" -> "spansToKeep";
"runStyleToTransform" -> "strikeout";
"runStyleToTransform" -> "strong";
"runStyleToTransform" -> "subscript";
"runStyleToTransform" -> "superscript";
"runTeXProgram" -> "getResultingPDF";
"runTeXProgram" -> "handlePDFProgramNotFound";
"runTeXProgram" -> "pipeProcess";
"runTeXProgram" -> "showVerboseInfo";
"runTeXProgram" -> "source";
"runTeXProgram" -> "when";
"runTeXProgram" -> "x";
"runTectonic" -> "_";
"runTectonic" -> "a";
"runTectonic" -> "env";
"runTectonic" -> "getResultingPDF";
"runTectonic" -> "handlePDFProgramNotFound";
"runTectonic" -> "pipeProcess";
"runTectonic" -> "showVerboseInfo";
"runTectonic" -> "source";
"runTectonic" -> "utf8ToString";
"runTectonic" -> "when";
"runToInlines" -> "_";
"runToInlines" -> "bodyPartToBlocks";
"runToInlines" -> "code";
"runToInlines" -> "extentToAttr";
"runToInlines" -> "isCodeCharStyle";
"runToInlines" -> "note";
"runToInlines" -> "resolveDependentRunStyle";
"runToInlines" -> "runElemToInlines";
"runToInlines" -> "runElemToText";
"runToInlines" -> "runStyleToTransform";
"runToInlines" -> "smushBlocks";
"runToInlines" -> "smushInlines";
"runToInlines" -> "subscript";
"runToInlines" -> "superscript";
"runToInlines" -> "title";
"runToText" -> "_";
"runToText" -> "runElemToText";
"runUniqueSlideId" -> "uniqueSlideId";
"safeRead" -> "a";
"safeRead" -> "safeStrRead";
"safeStrRead" -> "_";
"safeStrRead" -> "isSpace";
"safeStrRead" -> "x";
"satisfyTok" -> "_";
"satisfyTok" -> "doMacros";
"satisfyTok" -> "sp";
"satisfyTok" -> "t";
"satisfyTok" -> "tok";
"satisfyTok" -> "untoken";
"scaleDimension" -> "x";
"scanForPipe" -> "_";
"searchAttr" -> "a";
"searchAttr" -> "searchAttrIn";
"searchAttr" -> "x";
"searchAttrIn" -> "a";
"searchAttrIn" -> "findAttr";
"searchAttrIn" -> "x";
"section" -> "braced";
"section" -> "controlSeq";
"section" -> "grouped";
"section" -> "incrementDottedNum";
"section" -> "inline";
"section" -> "registerHeader";
"section" -> "renderDottedNum";
"section" -> "skipopts";
"section" -> "spaces";
"section" -> "try";
"section" -> "untokenize";
"section" -> "when";
"sectionFooter" -> "attr";
"sectionFooter" -> "blankline";
"sectionFooter" -> "empty";
"sectionFooter" -> "sectionLevelToText";
"sectionHeader" -> "_";
"sectionHeader" -> "blankline";
"sectionHeader" -> "empty";
"sectionHeader" -> "hypertarget";
"sectionHeader" -> "inlineListToConTeXt";
"sectionHeader" -> "inlineListToLaTeX";
"sectionHeader" -> "labelFor";
"sectionHeader" -> "literal";
"sectionHeader" -> "options";
"sectionHeader" -> "plain";
"sectionHeader" -> "prefix";
"sectionHeader" -> "sectionLevelToText";
"sectionHeader" -> "stringToLaTeX";
"sectionHeader" -> "stringify";
"sectionHeader" -> "toLabel";
"sectionHeader" -> "txt";
"sectionHeader" -> "x";
"sectionLevelToText" -> "_";
"sectionLevelToText" -> "empty";
"sectionLevelToText" -> "literal";
"sectionLevelToText" -> "section";
"sectionToListItem" -> "_";
"sectionToListItem" -> "deLink";
"sectionToListItem" -> "deNote";
"sectionToListItem" -> "sectionToListItem";
"selfClosingBookmark" -> "selfClosingTag";
"selfClosingTag" -> "a";
"selfClosingTag" -> "attributeList";
"selflinkOrImage" -> "_";
"selflinkOrImage" -> "cleanLinkText";
"selflinkOrImage" -> "internalLink";
"selflinkOrImage" -> "isImageFilename";
"selflinkOrImage" -> "linkTarget";
"selflinkOrImage" -> "returnF";
"selflinkOrImage" -> "try";
"sepBodyParts" -> "isEmptyPar";
"sepBodyParts" -> "isMetaPar";
"sepBy1\'" -> "a";
"sepBy1\'" -> "try";
"sepPipe" -> "blankline";
"sepPipe" -> "try";
"separateBlocks" -> "separateBlocks\'";
"separateBlocks\'" -> "_";
"separateBlocks\'" -> "getText";
"separateBlocks\'" -> "trim";
"separateTables" -> "separateTables";
"separateTables" -> "x";
"separator" -> "eol";
"separator" -> "newline";
"separator" -> "spaceChar";
"separator" -> "try";
"separator" -> "tryMsg";
"setCaption" -> "label";
"setCaption" -> "skipopts";
"setCaption" -> "spaces";
"setCaption" -> "tok";
"setCaption" -> "try";
"setDefaultLanguage" -> "babelLangToBCP47";
"setDefaultLanguage" -> "braced";
"setDefaultLanguage" -> "l";
"setDefaultLanguage" -> "polyglossiaLangToBCP47";
"setDefaultLanguage" -> "rawopt";
"setDefaultLanguage" -> "renderLang";
"setDefaultLanguage" -> "setTranslations";
"setDefaultLanguage" -> "str";
"setDefaultLanguage" -> "untokenize";
"setEmphasisPostChar" -> "defaultOrgParserState";
"setEmphasisPreChar" -> "defaultOrgParserState";
"setExtraState" -> "replaceExtraState";
"setExtraState" -> "withState";
"setField" -> "a";
"setField" -> "x";
"setFont" -> "a";
"setFont" -> "archiveToStyles\'";
"setFont" -> "checkOnOff";
"setFont" -> "defaultRunStyle";
"setFont" -> "elemToRunStyle";
"setFont" -> "getNumInfo";
"setFont" -> "isSmallCaps";
"setFont" -> "stringToInteger";
"setGlobal" -> "addFunction";
"setGlobal" -> "indexLazyPandoc";
"setGlobals" -> "setGlobal";
"setInChapter" -> "a";
"setInlineChildren" -> "_";
"setInlineChildren" -> "a";
"setInlineChildren" -> "t";
"setInputFiles" -> "_";
"setInputFiles" -> "uriScheme";
"setInputFiles" -> "x";
"setIntraword" -> "a";
"setToggle" -> "untokenize";
"setVariable" -> "x";
"setextHeader" -> "anyLine";
"setextHeader" -> "attr";
"setextHeader" -> "blankline";
"setextHeader" -> "blanklines";
"setextHeader" -> "defaultParserState";
"setextHeader" -> "guardDisabled";
"setextHeader" -> "inline";
"setextHeader" -> "raw";
"setextHeader" -> "registerHeader";
"setextHeader" -> "registerImplicitHeader";
"setextHeader" -> "runF";
"setextHeader" -> "setextHChars";
"setextHeader" -> "setextHeaderEnd";
"setextHeader" -> "skipSpaces";
"setextHeader" -> "trimInlinesF";
"setextHeader" -> "try";
"setextHeader" -> "withRaw";
"setextHeaderEnd" -> "attr";
"setextHeaderEnd" -> "attributes";
"setextHeaderEnd" -> "blanklines";
"setextHeaderEnd" -> "guardEnabled";
"setextHeaderEnd" -> "mmdHeaderIdentifier";
"setextHeaderEnd" -> "try";
"setpos" -> "_";
"setpos" -> "txt";
"setting" -> "ignoreSpacesCap";
"setting" -> "many1Char";
"setting" -> "manyTillChar";
"setting" -> "newline";
"shapeHasId" -> "elemName";
"shapeHasId" -> "findAttrText";
"shapeHasId" -> "findChild";
"shapeToElement" -> "_";
"shapeToElement" -> "elemName";
"shapeToElement" -> "elemToNameSpaces";
"shapeToElement" -> "findChild";
"shapeToElement" -> "getContentShape";
"shapeToElement" -> "mknode";
"shapeToElement" -> "paragraphToElement";
"shapeToElement" -> "replaceNamedChildren";
"shapeToElement" -> "sp";
"shapeToElement" -> "surroundWithMathAlternate";
"shapeToElements" -> "_";
"shapeToElements" -> "graphicFrameToElements";
"shapeToElements" -> "makePicElements";
"shapeToElements" -> "registerMedia";
"shapeToElements" -> "shapeToElement";
"shapeToElements" -> "shapeToElements";
"shapeToElements" -> "str";
"shapeToElements" -> "x";
"shapesToElements" -> "shapeToElements";
"shiftListLevel" -> "modifyListLevel";
"shouldEscapeText" -> "containsNotes";
"showFl" -> "a";
"showFl" -> "removeExtra0s";
"showInInch" -> "_";
"showInInch" -> "inInch";
"showInInch" -> "showFl";
"showInPixel" -> "_";
"showInPixel" -> "inPixel";
"showLogMessage" -> "showPos";
"showLogMessage" -> "t";
"showVerbatimCData" -> "_";
"showVerboseInfo" -> "a";
"showVerboseInfo" -> "env";
"showVerboseInfo" -> "source";
"siUnit" -> "_";
"siUnit" -> "anyControlSeq";
"siUnit" -> "anyTok";
"siUnit" -> "controlSeq";
"siUnit" -> "isWordTok";
"siUnit" -> "satisfyTok";
"siUnit" -> "siUnit";
"siUnit" -> "siUnitMap";
"siUnit" -> "str";
"siUnit" -> "subscript";
"siUnit" -> "superscript";
"siUnit" -> "symbol";
"siUnit" -> "t";
"siUnit" -> "tok";
"siUnit" -> "try";
"siUnitMap" -> "emph";
"siUnitMap" -> "str";
"siUnitMap" -> "subscript";
"signedNumber" -> "many1Char";
"signedNumber" -> "try";
"simpTable" -> "controlSeq";
"simpTable" -> "fixTableBody";
"simpTable" -> "fixTableHead";
"simpTable" -> "hline";
"simpTable" -> "label";
"simpTable" -> "lbreak";
"simpTable" -> "parseAligns";
"simpTable" -> "parseTableRow";
"simpTable" -> "setCaption";
"simpTable" -> "skipopts";
"simpTable" -> "spaces";
"simpTable" -> "table";
"simpTable" -> "tok";
"simpTable" -> "try";
"simpTable" -> "when";
"simpleCiteArgs" -> "_";
"simpleCiteArgs" -> "addPrefix";
"simpleCiteArgs" -> "addSuffix";
"simpleCiteArgs" -> "bgroup";
"simpleCiteArgs" -> "citationLabel";
"simpleCiteArgs" -> "egroup";
"simpleCiteArgs" -> "opt";
"simpleCiteArgs" -> "t";
"simpleCiteArgs" -> "toList";
"simpleCiteArgs" -> "try";
"simpleDashedLines" -> "dashedLine";
"simpleDashedLines" -> "try";
"simpleInline" -> "attr";
"simpleInline" -> "attributes";
"simpleInline" -> "inline";
"simpleInline" -> "newline";
"simpleInline" -> "notAfterString";
"simpleInline" -> "t";
"simpleInline" -> "try";
"simpleList" -> "meta";
"simpleList" -> "metaValueToString";
"simpleList" -> "x";
"simpleReferenceName" -> "try";
"simpleReferenceName" -> "x";
"simpleSubOrSuperText" -> "many1Char";
"simpleSubOrSuperText" -> "textStr";
"simpleSubOrSuperText" -> "try";
"simpleTable" -> "_";
"simpleTable" -> "a";
"simpleTable" -> "attr";
"simpleTable" -> "blankline";
"simpleTable" -> "blanklines\'";
"simpleTable" -> "blockListToMuse";
"simpleTable" -> "blocks";
"simpleTable" -> "empty";
"simpleTable" -> "hline";
"simpleTable" -> "inlineListToMuse";
"simpleTable" -> "literal";
"simpleTable" -> "simpleTableFooter";
"simpleTable" -> "simpleTableHeader";
"simpleTable" -> "simpleTableRow";
"simpleTable" -> "tableFooter";
"simpleTable" -> "tableLine";
"simpleTable" -> "tableWith";
"simpleTable" -> "toRow";
"simpleTable" -> "vcat";
"simpleTableFooter" -> "blanklines";
"simpleTableFooter" -> "simpleTableSep";
"simpleTableFooter" -> "try";
"simpleTableHeader" -> "alignType";
"simpleTableHeader" -> "anyLine";
"simpleTableHeader" -> "blanklines";
"simpleTableHeader" -> "dashedLine";
"simpleTableHeader" -> "newline";
"simpleTableHeader" -> "nonindentSpaces";
"simpleTableHeader" -> "parseFromString\'";
"simpleTableHeader" -> "plain";
"simpleTableHeader" -> "simpleDashedLines";
"simpleTableHeader" -> "simpleTableSep";
"simpleTableHeader" -> "simpleTableSplitLine";
"simpleTableHeader" -> "splitTextByIndices";
"simpleTableHeader" -> "trim";
"simpleTableHeader" -> "try";
"simpleTableRawLine" -> "anyLine";
"simpleTableRawLine" -> "simpleTableSplitLine";
"simpleTableRawLineWithEmptyCell" -> "simpleTableRawLine";
"simpleTableRawLineWithEmptyCell" -> "try";
"simpleTableRow" -> "notFollowedBy\'";
"simpleTableRow" -> "parseBlocks";
"simpleTableRow" -> "parseFromString\'";
"simpleTableRow" -> "simpleTableFooter";
"simpleTableRow" -> "simpleTableRawLine";
"simpleTableRow" -> "simpleTableRawLineWithEmptyCell";
"simpleTableSep" -> "newline";
"simpleTableSep" -> "simpleDashedLines";
"simpleTableSep" -> "try";
"simpleTableSplitLine" -> "splitTextByIndices";
"simpleTableSplitLine" -> "trimr";
"simpleTable\'" -> "fromList";
"simpleTable\'" -> "simpleTable";
"simpleTable\'" -> "x";
"singleChar" -> "satisfyTok";
"singleChar" -> "specialChars";
"singleChar" -> "t";
"singleChar" -> "t1";
"singleChar" -> "tokTypeIn";
"singleChar" -> "try";
"singleElement" -> "a";
"singleElement" -> "err";
"singleElement" -> "peekEither";
"singleElement" -> "x";
"singleHeader" -> "attr";
"singleHeader" -> "registerHeader";
"singleHeader" -> "singleHeader\'";
"singleHeader" -> "txt";
"singleHeader\'" -> "anyLine";
"singleHeader\'" -> "blankline";
"singleHeader\'" -> "blanklines";
"singleHeader\'" -> "inline";
"singleHeader\'" -> "notFollowedBy\'";
"singleHeader\'" -> "try";
"singleHeader\'" -> "txt";
"singleHeader\'" -> "underlineChars";
"singleHeader\'" -> "whitespace";
"singleItemHeaderToHeader" -> "_";
"singleParaToPlain" -> "singleton";
"singleQuote" -> "_";
"singleQuote" -> "quoted\'";
"singleQuote" -> "satisfyTok";
"singleQuote" -> "singleQuoted";
"singleQuote" -> "symbol";
"singleQuote" -> "t";
"singleQuote" -> "try";
"singleQuoteEnd" -> "charOrRef";
"singleQuoteEnd" -> "try";
"singleQuoteStart" -> "charOrRef";
"singleQuoteStart" -> "failIfInQuoteContext";
"singleQuoteStart" -> "notAfterString";
"singleQuoteStart" -> "try";
"singleQuoted" -> "getExportSetting";
"singleQuoted" -> "guardOrSmartEnabled";
"singleQuoted" -> "inline";
"singleQuoted" -> "many1Till";
"singleQuoted" -> "singleQuoteEnd";
"singleQuoted" -> "singleQuoteStart";
"singleQuoted" -> "trimInlinesF";
"singleQuoted" -> "try";
"singleQuoted" -> "updatePositions";
"singleTok" -> "defaultFontSpec";
"singleTok" -> "singleTok";
"singleTok" -> "t";
"skip" -> "a";
"skipNonindentSpaces" -> "gobbleAtMostSpaces";
"skipNonindentSpaces" -> "spaceChar";
"skipSpaces" -> "spaceChar";
"skipSpaces1" -> "spaceChar";
"skipUnknownMacro" -> "_";
"skipUnknownMacro" -> "isCommentTag";
"skipUnknownMacro" -> "isInlineTag";
"skipUnknownMacro" -> "isTextTag";
"skipUnknownMacro" -> "mmacroAny";
"skipUnknownMacro" -> "readMarkdown";
"skipUnknownMacro" -> "report";
"skipUnknownMacro" -> "tok";
"skipUnknownMacro" -> "yamlToMeta";
"skipUnknownMacro" -> "yamlToRefs";
"skipopts" -> "overlaySpecification";
"skipopts" -> "rawopt";
"slideNum" -> "getSlideIdNum";
"slideToElement" -> "_";
"slideToElement" -> "contentToElement";
"slideToElement" -> "env";
"slideToElement" -> "getLayout";
"slideToElement" -> "l";
"slideToElement" -> "metadataToElement";
"slideToElement" -> "mknode";
"slideToElement" -> "titleToElement";
"slideToElement" -> "twoColumnToElement";
"slideToEntry" -> "elemToEntry";
"slideToEntry" -> "env";
"slideToEntry" -> "idNumToFilePath";
"slideToEntry" -> "slideNum";
"slideToEntry" -> "slideToElement";
"slideToFilePath" -> "slideNum";
"slideToPresRel" -> "idNumToFilePath";
"slideToPresRel" -> "slideNum";
"slideToRelId" -> "slideNum";
"slideToSldIdElement" -> "mknode";
"slideToSldIdElement" -> "slideNum";
"slideToSldIdElement" -> "slideToRelId";
"slideToSlideRelElement" -> "_";
"slideToSlideRelElement" -> "linkRelElements";
"slideToSlideRelElement" -> "mediaRelElement";
"slideToSlideRelElement" -> "mknode";
"slideToSlideRelElement" -> "slideNum";
"slideToSlideRelElement" -> "speakerNotesSlideRelElement";
"slideToSlideRelEntry" -> "elemToEntry";
"slideToSlideRelEntry" -> "idNumToFilePath";
"slideToSlideRelEntry" -> "slideNum";
"slideToSlideRelEntry" -> "slideToSlideRelElement";
"slideToSpeakerNotesElement" -> "_";
"slideToSpeakerNotesElement" -> "getNotesMaster";
"slideToSpeakerNotesElement" -> "getSlideNumberFieldId";
"slideToSpeakerNotesElement" -> "mknode";
"slideToSpeakerNotesElement" -> "slideNum";
"slideToSpeakerNotesElement" -> "speakerNotesBody";
"slideToSpeakerNotesElement" -> "speakerNotesSlideImage";
"slideToSpeakerNotesElement" -> "speakerNotesSlideNumber";
"slideToSpeakerNotesEntry" -> "_";
"slideToSpeakerNotesEntry" -> "elemToEntry";
"slideToSpeakerNotesEntry" -> "env";
"slideToSpeakerNotesEntry" -> "slideNum";
"slideToSpeakerNotesEntry" -> "slideToSpeakerNotesElement";
"slideToSpeakerNotesRelElement" -> "_";
"slideToSpeakerNotesRelElement" -> "mknode";
"slideToSpeakerNotesRelElement" -> "slideNum";
"slideToSpeakerNotesRelEntry" -> "_";
"slideToSpeakerNotesRelEntry" -> "elemToEntry";
"slideToSpeakerNotesRelEntry" -> "slideNum";
"slideToSpeakerNotesRelEntry" -> "slideToSpeakerNotesRelElement";
"smart" -> "apostrophe";
"smart" -> "dash";
"smart" -> "doubleQuoted";
"smart" -> "ellipses";
"smart" -> "getExportSetting";
"smart" -> "guardEnabled";
"smart" -> "guardOrSmartEnabled";
"smart" -> "returnF";
"smart" -> "singleQuoted";
"smart" -> "updateLastForbiddenCharPos";
"smart" -> "updateLastPreCharPos";
"smart" -> "updatePositions";
"smartPunctuation" -> "apostrophe";
"smartPunctuation" -> "dash";
"smartPunctuation" -> "ellipses";
"smartPunctuation" -> "guardEnabled";
"smartPunctuation" -> "quoted";
"smushBlocks" -> "combineBlocks";
"smushBlocks" -> "parseFieldInfo";
"smushInlines" -> "combineInlines";
"source" -> "countChar";
"source" -> "escapeURI";
"source" -> "linkTitle";
"source" -> "litChar";
"source" -> "many1Char";
"source" -> "manyTillChar";
"source" -> "parenthesizedChars";
"source" -> "skipSpaces";
"source" -> "spaceChar";
"source" -> "spnl";
"source" -> "trimr";
"source" -> "try";
"sp" -> "comment";
"sp" -> "endline";
"sp" -> "whitespace";
"spaceAtEnd" -> "str";
"spaceBeforeAfter" -> "el";
"spaceOutInlines" -> "isSpace";
"spaceOutInlines" -> "unstackInlines";
"spaceOutInlinesL" -> "l";
"spaceOutInlinesL" -> "spaceOutInlines";
"spaceOutInlinesL" -> "stackInlines";
"spaceOutInlinesR" -> "l";
"spaceOutInlinesR" -> "spaceOutInlines";
"spaceOutInlinesR" -> "stackInlines";
"spaceTabChar" -> "spacetab";
"spaces" -> "manyChar";
"spaces" -> "satisfyTok";
"spaces" -> "space";
"spaces" -> "tokTypeIn";
"spaces1" -> "satisfyTok";
"spaces1" -> "tokTypeIn";
"spanFoldUpList" -> "_";
"spanFoldUpList" -> "listWrap";
"spanFoldUpList" -> "spanFoldUpList";
"spanFoldUpList" -> "splitListNesting";
"spanHtml" -> "_";
"spanHtml" -> "guardEnabled";
"spanHtml" -> "htmlTag";
"spanHtml" -> "inline";
"spanHtml" -> "isSmallCaps";
"spanHtml" -> "isUnderline";
"spanHtml" -> "keyvals";
"spanHtml" -> "try";
"spanToJira" -> "_";
"spanToJira" -> "toJiraInlines";
"speakerNotesBody" -> "env";
"speakerNotesBody" -> "mknode";
"speakerNotesBody" -> "paragraphToElement";
"speakerNotesBody" -> "removeParaLinks";
"speakerNotesBody" -> "spaceParas";
"speakerNotesSlideImage" -> "mknode";
"speakerNotesSlideNumber" -> "mknode";
"speakerNotesSlideRelElement" -> "mknode";
"speakerNotesSlideRelElement" -> "slideNum";
"specFor" -> "a";
"specFor" -> "isEnabled";
"special" -> "countChar";
"special" -> "htmlTag";
"special" -> "isBlockTag\'";
"special" -> "notFollowedBy\'";
"special" -> "specialChars";
"specialAttribute" -> "addStyle";
"specialAttribute" -> "spaceChar";
"specialAttribute" -> "try";
"specialLine" -> "commentLine";
"specialLine" -> "metaLine";
"specialLine" -> "rawExportLine";
"specialLine" -> "try";
"split" -> "_";
"split" -> "a";
"splitAt\'" -> "_";
"splitAt\'" -> "a";
"splitAt\'" -> "splitAt\'";
"splitAt\'" -> "x";
"splitBibs" -> "splitTextBy";
"splitBibs" -> "str";
"splitBibs" -> "trim";
"splitBlocks" -> "splitBlocks\'";
"splitBlocks\'" -> "_";
"splitBlocks\'" -> "isImage";
"splitBlocks\'" -> "isNotesDiv";
"splitBlocks\'" -> "splitBlocks\'";
"splitBy" -> "_";
"splitByIndices" -> "x";
"splitCellHang" -> "l";
"splitField" -> "elemText";
"splitInp" -> "isSpace";
"splitInp" -> "splitStrWhen";
"splitInterwiki" -> "_";
"splitInterwiki" -> "l";
"splitListNesting" -> "_";
"splitSentences" -> "breakSentence";
"splitSentences" -> "splitSentences";
"splitStrWhen" -> "_";
"splitStrWhen" -> "splitStrWhen";
"splitStrWhen" -> "x";
"splitStringByIndices" -> "splitAt\'";
"splitStringByIndices" -> "splitStringByIndices";
"splitStringByIndices" -> "x";
"splitTextBy" -> "a";
"splitTextBy" -> "splitTextBy";
"splitTextBy" -> "t";
"splitTextByIndices" -> "splitStringByIndices";
"splitWordTok" -> "_";
"splitWordTok" -> "t";
"spnl" -> "newline";
"spnl" -> "skipSpaces";
"spnl" -> "try";
"spnl\'" -> "newline";
"spnl\'" -> "spaceChar";
"spnl\'" -> "try";
"stackInlines" -> "attr";
"stackInlines" -> "stackInlines";
"standardTrans" -> "_";
"startWithPunct" -> "stringify";
"startingState" -> "_";
"startingState" -> "options";
"startsWithMarker" -> "_";
"startsWithMarker" -> "isSpace";
"startsWithMarker" -> "t";
"startsWithSpace" -> "_";
"startsWithSpace" -> "stringStartsWithSpace";
"stopLine" -> "blankline";
"stopLine" -> "try";
"str" -> "_";
"str" -> "anyChar\'";
"str" -> "characterReference";
"str" -> "cite";
"str" -> "countChar";
"str" -> "enclosed";
"str" -> "guardEnabled";
"str" -> "hyphenedWords";
"str" -> "many1Char";
"str" -> "note";
"str" -> "spaceChars";
"str" -> "specialChars";
"str" -> "take1WhileP";
"str" -> "try";
"str" -> "updateLastStrPos";
"str" -> "whitespace";
"strContentRecursive" -> "elContent";
"strContentRecursive" -> "elementToStr";
"strToHtml" -> "_";
"strToHtml" -> "needsVariationSelector";
"strToHtml" -> "x";
"strictExtensions" -> "extensionsFromList";
"strictHtmlBlock" -> "htmlInBalanced";
"strictHtmlBlock" -> "isInlineTag";
"strike" -> "inline";
"strike" -> "inlineMarkup";
"strikeout" -> "a";
"strikeout" -> "emphasisBetween";
"strikeout" -> "enclosed";
"strikeout" -> "guardEnabled";
"strikeout" -> "inline\'";
"strikeout" -> "inlinesBetween";
"strikeout" -> "many1Till";
"strikeout" -> "nestedInlines";
"strikeout" -> "nonspaceChar";
"strikeout" -> "try";
"strikeoutTag" -> "inlineTag";
"stringAnyCase" -> "stringAnyCase\'";
"stringAnyCase\'" -> "stringAnyCase\'";
"stringAnyCase\'" -> "x";
"stringEndsWithSpace" -> "isSpace";
"stringStartsWithSpace" -> "isSpace";
"stringToBool\'" -> "a";
"stringToConTeXt" -> "escapeCharForConTeXt";
"stringToLaTeX" -> "_";
"stringToLaTeX" -> "accents";
"stringToLaTeX" -> "isEnabled";
"stringToLaTeX" -> "isSpace";
"stringToLaTeX" -> "x";
"stringToRTF" -> "escapeSpecial";
"stringToRTF" -> "handleUnicode";
"stringToTexinfo" -> "escapeStringUsing";
"stringify" -> "_";
"stringify" -> "a";
"stringify" -> "deNote";
"stringify" -> "deQuote";
"stringify" -> "el";
"stringify" -> "stringifyMetaValue";
"stringify" -> "x";
"stringifyMetaValue" -> "_";
"stringyMetaAttribute" -> "anyLine";
"stringyMetaAttribute" -> "attrValue";
"stringyMetaAttribute" -> "many1TillChar";
"stringyMetaAttribute" -> "metaLineStart";
"stringyMetaAttribute" -> "newline";
"stringyMetaAttribute" -> "nonspaceChar";
"stringyMetaAttribute" -> "skipSpaces";
"stringyMetaAttribute" -> "try";
"stripEmptyParagraphs" -> "_";
"stripFirstAndLast" -> "_";
"stripFirstAndLast" -> "t";
"stripInvalidChars" -> "isValidChar";
"stripLocatorBraces" -> "x";
"stripMarkdownAttribute" -> "renderTags\'";
"stripMarkdownAttribute" -> "t";
"stripMarkdownAttribute" -> "x";
"stripNamespace" -> "_";
"stripPrefix" -> "x";
"stripPrefixes" -> "stripPrefix";
"stripTrailingNewline" -> "t";
"strong" -> "atStart";
"strong" -> "between";
"strong" -> "emphasisBetween";
"strong" -> "enclosed";
"strong" -> "inlineContent";
"strong" -> "inline\'";
"strong" -> "inlinesBetween";
"strong" -> "makeId";
"strong" -> "nested";
"strong" -> "nestedInlines";
"strong" -> "nonspaceChar";
"strong" -> "spaceChars";
"strong" -> "sym";
"strong" -> "try";
"strongAndEmph" -> "enclosed";
"strongAndEmph" -> "nestedInlines";
"strongAndEmph" -> "try";
"strongEmph" -> "emphasisBetween";
"strongHtml" -> "inline";
"strongHtml" -> "parseHtmlContent";
"strongOrEmph" -> "enclosure";
"strongTag" -> "inlineTag";
"styleAttr" -> "addStyle";
"styleAttr" -> "anyChar\'";
"styleAttr" -> "enclosed";
"styleAttr" -> "try";
"styleAttrParser" -> "ruleParser";
"stylePropertyChain" -> "parents";
"styleToMs" -> "hexColor";
"styleToMs" -> "literal";
"styleToMs" -> "ordNub";
"styleToMs" -> "toMacro";
"styleToMs" -> "vcat";
"styleToOpenXml" -> "fromString";
"styleToOpenXml" -> "hasStyleName";
"styleToOpenXml" -> "mknode";
"styleToOpenXml" -> "parStyle";
"styled" -> "singleton";
"styled" -> "toJiraInlines";
"subMacro" -> "try";
"subOrSuperExpr" -> "charsInBalanced";
"subOrSuperExpr" -> "inline";
"subOrSuperExpr" -> "parseFromString";
"subOrSuperExpr" -> "simpleSubOrSuperText";
"subOrSuperExpr" -> "try";
"subTag" -> "between";
"subTag" -> "fromEntities";
"subTag" -> "nestedString";
"subTag" -> "try";
"subscript" -> "between";
"subscript" -> "guardEnabled";
"subscript" -> "inline";
"subscript" -> "inline\'";
"subscript" -> "many1Till";
"subscript" -> "nestedInlines";
"subscript" -> "newline";
"subscript" -> "spaceChar";
"subscript" -> "subOrSuperExpr";
"subscript" -> "try";
"subscriptTag" -> "inlineTag";
"subst" -> "enclosed";
"subst" -> "inline";
"subst" -> "logMessage";
"subst" -> "stripFirstAndLast";
"subst" -> "toKey";
"subst" -> "try";
"subst" -> "tshow";
"subst" -> "withRaw";
"substKey" -> "_";
"substKey" -> "attr";
"substKey" -> "directive\'";
"substKey" -> "enclosed";
"substKey" -> "inline";
"substKey" -> "spaceChar";
"substKey" -> "stripFirstAndLast";
"substKey" -> "toKey";
"substKey" -> "try";
"substKey" -> "withRaw";
"substitute" -> "_";
"substitute" -> "a";
"substitute" -> "stripPrefix";
"substitute" -> "substitute";
"substitute" -> "x";
"succeedWith" -> "x";
"suffix" -> "inline";
"suffix" -> "nonspaceChar";
"suffix" -> "spnl";
"suffix" -> "trimInlinesF";
"suffix" -> "try";
"superMacro" -> "try";
"superTag" -> "between";
"superTag" -> "fromEntities";
"superTag" -> "nestedString";
"superTag" -> "try";
"superscript" -> "between";
"superscript" -> "guardEnabled";
"superscript" -> "inline";
"superscript" -> "inline\'";
"superscript" -> "many1Till";
"superscript" -> "nestedInlines";
"superscript" -> "newline";
"superscript" -> "spaceChar";
"superscript" -> "subOrSuperExpr";
"superscript" -> "try";
"superscriptTag" -> "inlineTag";
"surroundWithMathAlternate" -> "_";
"surroundWithMathAlternate" -> "mknode";
"surrounded" -> "a";
"surrounded" -> "enclosed";
"surrounded" -> "t";
"surrounded" -> "try";
"svgSize" -> "inPixel";
"svgSize" -> "lengthToDim";
"svgToPng" -> "a";
"svgToPng" -> "desiredSizeInPoints";
"svgToPng" -> "dimension";
"svgToPng" -> "imageSize";
"svgToPng" -> "imageType";
"svgToPng" -> "inEm";
"svgToPng" -> "inInch";
"svgToPng" -> "inPixel";
"svgToPng" -> "inPoints";
"svgToPng" -> "lengthToDim";
"svgToPng" -> "numUnit";
"svgToPng" -> "pipeProcess";
"svgToPng" -> "scaleDimension";
"svgToPng" -> "showFl";
"svgToPng" -> "showInInch";
"svgToPng" -> "showInPixel";
"svgToPng" -> "sizeInPixels";
"svgToPng" -> "sizeInPoints";
"svgToPng" -> "tshow";
"swap" -> "a";
"swapStack" -> "swapStack\'";
"swapStack" -> "withState";
"switch" -> "genericSwitch";
"switch" -> "lineNumberSwitch";
"switch" -> "switchPolarity";
"switch" -> "try";
"switch" -> "whitespaceSwitch";
"switchCurrentListStyle" -> "getExtraState";
"switchCurrentListStyle" -> "keepingTheValue";
"switchCurrentListStyle" -> "setExtraState";
"switchCurrentListStyle" -> "swapCurrentListStyle";
"switchesAsAttributes" -> "_";
"switchesAsAttributes" -> "skipSpaces";
"switchesAsAttributes" -> "spaceChar";
"switchesAsAttributes" -> "switch";
"switchesAsAttributes" -> "try";
"switchesAsAttributes" -> "x";
"switchingTheStack" -> "a";
"switchingTheStack" -> "swapStack";
"sym" -> "try";
"symbol" -> "_";
"symbol" -> "countChar";
"symbol" -> "newline";
"symbol" -> "nonspaceChar";
"symbol" -> "notFollowedBy\'";
"symbol" -> "rawHtmlBlock";
"symbol" -> "rawTeXBlock";
"symbol" -> "satisfyTok";
"symbol" -> "specialChars";
"symbol" -> "try";
"symbol" -> "updatePositions";
"symbol" -> "wordBoundaries";
"symbolIn" -> "_";
"symbolIn" -> "satisfyTok";
"syntax" -> "_";
"syntaxhighlight" -> "tag";
"syntaxhighlight" -> "textInTags";
"syntaxhighlight" -> "trimCode";
"syntaxhighlight" -> "try";
"syntaxhighlight" -> "x";
"t" -> "closes";
"t" -> "t";
"t1" -> "_";
"t1" -> "blockTags";
"t1" -> "closes";
"t1" -> "eitherBlockOrInline";
"t1" -> "t1";
"t2tURI" -> "anchor";
"t2tURI" -> "many1Char";
"t2tURI" -> "manyChar";
"t2tURI" -> "oneOfStrings";
"t2tURI" -> "stringAnyCase";
"t2tURI" -> "textStr";
"t2tURI" -> "try";
"t2tURI" -> "x";
"table" -> "_";
"table" -> "a";
"table" -> "anyLine";
"table" -> "attributes";
"table" -> "blanklines";
"table" -> "blocks";
"table" -> "commentLine";
"table" -> "elementsToTable";
"table" -> "findAlign";
"table" -> "getExportSetting";
"table" -> "gridTable";
"table" -> "gridTableWith";
"table" -> "guardEnabled";
"table" -> "headerRow";
"table" -> "ignorableRow";
"table" -> "indent";
"table" -> "inline";
"table" -> "l";
"table" -> "many1Till";
"table" -> "multilineTable";
"table" -> "museToPandocTable";
"table" -> "newline";
"table" -> "orgTable";
"table" -> "pad";
"table" -> "parseAttrs";
"table" -> "parseFromString\'";
"table" -> "parseWidth";
"table" -> "pipeTable";
"table" -> "rowsep";
"table" -> "scanForPipe";
"table" -> "simpleTable";
"table" -> "skipSpaces";
"table" -> "spaceChar";
"table" -> "tab";
"table" -> "table1";
"table" -> "table2";
"table" -> "tableCaption";
"table" -> "tableCellSeparator";
"table" -> "tableElements";
"table" -> "tableEnd";
"table" -> "tableParseHeader";
"table" -> "tableParseRow";
"table" -> "tableRow";
"table" -> "tableRows";
"table" -> "tableStart";
"table" -> "template";
"table" -> "toHeaderRow";
"table" -> "toRow";
"table" -> "trim";
"table" -> "try";
"table1" -> "tableHeaderSeparator";
"table1" -> "tableRow";
"table1" -> "try";
"table2" -> "tableRow";
"table2" -> "try";
"tableAlignFromChar" -> "try";
"tableAlignRow" -> "columnPropertyCell";
"tableAlignRow" -> "many1Till";
"tableAlignRow" -> "newline";
"tableAlignRow" -> "tableStart";
"tableAlignRow" -> "try";
"tableAnyRowToTexinfo" -> "alignedBlock";
"tableAnyRowToTexinfo" -> "empty";
"tableAnyRowToTexinfo" -> "item";
"tableAnyRowToTexinfo" -> "literal";
"tableBodyToHtml" -> "addAttrs";
"tableBodyToHtml" -> "attr";
"tableBodyToHtml" -> "bodyRows";
"tableBodyToHtml" -> "bodyRowsToHtml";
"tableBodyToHtml" -> "headerRowsToHtml";
"tableBodyToJats" -> "attr";
"tableBodyToJats" -> "bodyRows";
"tableBodyToJats" -> "bodyRowsToJats";
"tableBodyToJats" -> "headerRowsToJats";
"tableBodyToJats" -> "inTags";
"tableBodyToJats" -> "toAttribs";
"tableBodyToJats" -> "validTablePartAttribs";
"tableBodyToOpenDocument" -> "_";
"tableBodyToOpenDocument" -> "tableRowToOpenDocument";
"tableBodyToOpenDocument" -> "vcat";
"tableCaption" -> "blanklines";
"tableCaption" -> "cellsep";
"tableCaption" -> "guardColumnOne";
"tableCaption" -> "guardEnabled";
"tableCaption" -> "inline";
"tableCaption" -> "inlines1";
"tableCaption" -> "parseAttrs";
"tableCaption" -> "rowsep";
"tableCaption" -> "skipNonindentSpaces";
"tableCaption" -> "skipSpaces";
"tableCaption" -> "sym";
"tableCaption" -> "trimInlinesF";
"tableCaption" -> "try";
"tableCell" -> "_";
"tableCell" -> "blankline";
"tableCell" -> "block";
"tableCell" -> "cellAttributes";
"tableCell" -> "cellsep";
"tableCell" -> "countChar";
"tableCell" -> "endOfCell";
"tableCell" -> "inline";
"tableCell" -> "inline\'";
"tableCell" -> "isHeader";
"tableCell" -> "lexRoff";
"tableCell" -> "newline";
"tableCell" -> "parseAttrs";
"tableCell" -> "parseFromString";
"tableCell" -> "parseFromString\'";
"tableCell" -> "parseWidth";
"tableCell" -> "raw";
"tableCell" -> "rowsep";
"tableCell" -> "skipSpaces";
"tableCell" -> "space";
"tableCell" -> "spaceChar";
"tableCell" -> "table";
"tableCell" -> "tableCellSeparator";
"tableCell" -> "tableEnd";
"tableCell" -> "trim";
"tableCell" -> "try";
"tableCell" -> "withRaw";
"tableCellToConTeXt" -> "options";
"tableCellToHtml" -> "_";
"tableCellToHtml" -> "alignmentToString";
"tableCellToHtml" -> "attr";
"tableCellToHtml" -> "attrsToHtml";
"tableCellToHtml" -> "blockListToHtml";
"tableCellToHtml" -> "colspanAttrib";
"tableCellToHtml" -> "item";
"tableCellToHtml" -> "nl";
"tableCellToHtml" -> "rowspanAttrib";
"tableCellToJats" -> "_";
"tableCellToJats" -> "alignmentAttrib";
"tableCellToJats" -> "attr";
"tableCellToJats" -> "blocks";
"tableCellToJats" -> "colspanAttrib";
"tableCellToJats" -> "inTags";
"tableCellToJats" -> "inlines";
"tableCellToJats" -> "item";
"tableCellToJats" -> "rowspanAttrib";
"tableCellToJats" -> "toAttribs";
"tableCellToJats" -> "vcat";
"tableCellToLaTeX" -> "_";
"tableCellToLaTeX" -> "blockListToLaTeX";
"tableCellToLaTeX" -> "blocks";
"tableCellToLaTeX" -> "displayMathToInline";
"tableCellToLaTeX" -> "fixLineBreaks";
"tableCellToLaTeX" -> "header";
"tableCellToLaTeX" -> "isPlainOrPara";
"tableCellToLaTeX" -> "startingState";
"tableCellToMediaWiki" -> "_";
"tableCellToMediaWiki" -> "alignmentToText";
"tableCellToMediaWiki" -> "attr";
"tableCellToMediaWiki" -> "blockListToMediaWiki";
"tableCellToMediaWiki" -> "percent";
"tableCellToMediaWiki" -> "trimr";
"tableCellToMediaWiki" -> "tshow";
"tableCellXWiki" -> "blockListToXWiki";
"tableCellXWiki" -> "isHeader";
"tableCellXWiki" -> "split";
"tableColFormat" -> "_";
"tableColFormat" -> "countChar";
"tableColFormat" -> "spacetab";
"tableColFormat" -> "try";
"tableColFormat" -> "x";
"tableColToConTeXt" -> "alignToConTeXt";
"tableColToConTeXt" -> "blockListToConTeXt";
"tableColToConTeXt" -> "blocks";
"tableColToConTeXt" -> "empty";
"tableColToConTeXt" -> "options";
"tableColToConTeXt" -> "space";
"tableColToConTeXt" -> "tableCellToConTeXt";
"tableColumnContent" -> "continuation";
"tableColumnContent" -> "inline";
"tableColumnContent" -> "newline";
"tableColumnContent" -> "try";
"tableContentCell" -> "endOfCell";
"tableContentCell" -> "inline";
"tableContentCell" -> "trimInlinesF";
"tableContentCell" -> "try";
"tableContentRow" -> "many1Till";
"tableContentRow" -> "newline";
"tableContentRow" -> "tableContentCell";
"tableContentRow" -> "tableStart";
"tableContentRow" -> "try";
"tableDirective" -> "_";
"tableDirective" -> "attr";
"tableDirective" -> "inline";
"tableDirective" -> "parseBlocks";
"tableDirective" -> "parseFromString\'";
"tableDirective" -> "safeRead";
"tableDirective" -> "splitTextBy";
"tableDirective" -> "title";
"tableDirective" -> "trim";
"tableElements" -> "tableParseElement";
"tableEnd" -> "guardColumnOne";
"tableEnd" -> "skipSpaces";
"tableEnd" -> "sym";
"tableEnd" -> "try";
"tableEndOfRow" -> "a";
"tableEndOfRow" -> "try";
"tableFootToHtml" -> "attr";
"tableFootToHtml" -> "tablePartToHtml";
"tableFootToJats" -> "attr";
"tableFootToJats" -> "tablePartToJats";
"tableFooter" -> "blanklines\'";
"tableFooter" -> "dashedLine";
"tableFooter" -> "skipNonindentSpaces";
"tableFooter" -> "try";
"tableFormatSpec" -> "newline";
"tableFormatSpec" -> "spaces";
"tableFormatSpec" -> "tableFormatSpecLine";
"tableFormatSpec" -> "try";
"tableFormatSpecLine" -> "spacetab";
"tableFormatSpecLine" -> "tableColFormat";
"tableHeadToHtml" -> "attr";
"tableHeadToHtml" -> "tablePartToHtml";
"tableHeadToJats" -> "attr";
"tableHeadToJats" -> "tablePartToJats";
"tableHeadToTexinfo" -> "tableAnyRowToTexinfo";
"tableHeaderSeparator" -> "newline";
"tableHeaderSeparator" -> "spaceChar";
"tableHeaderSeparator" -> "try";
"tableHeadersToTEI" -> "inTags";
"tableHeadersToTEI" -> "tableItemToTEI";
"tableHeadersToTEI" -> "vcat";
"tableHline" -> "anyLine";
"tableHline" -> "tableStart";
"tableHline" -> "try";
"tableItemToDocbook" -> "blockToDocbook";
"tableItemToDocbook" -> "inTags";
"tableItemToDocbook" -> "item";
"tableItemToDocbook" -> "vcat";
"tableItemToDokuWiki" -> "blockListToDokuWiki";
"tableItemToDokuWiki" -> "item";
"tableItemToDokuWiki" -> "x";
"tableItemToOpenDocument" -> "_";
"tableItemToOpenDocument" -> "a";
"tableItemToOpenDocument" -> "alignAttrib";
"tableItemToOpenDocument" -> "colspanAttrib";
"tableItemToOpenDocument" -> "inTags";
"tableItemToOpenDocument" -> "paraStyleFromParent";
"tableItemToOpenDocument" -> "plainToPara";
"tableItemToOpenDocument" -> "rowspanAttrib";
"tableItemToOpenDocument" -> "tshow";
"tableItemToOpenDocument" -> "withParagraphStyle";
"tableItemToOpenDocument" -> "x";
"tableItemToRTF" -> "blocksToRTF";
"tableItemToRTF" -> "indent";
"tableItemToRTF" -> "item";
"tableItemToTEI" -> "blockToTEI";
"tableItemToTEI" -> "inTags";
"tableItemToTEI" -> "item";
"tableItemToTEI" -> "vcat";
"tableItemToTextile" -> "blockListToTextile";
"tableItemToTextile" -> "item";
"tableItemToTextile" -> "x";
"tableItemToZimWiki" -> "blockListToZimWiki";
"tableItemToZimWiki" -> "item";
"tableItemToZimWiki" -> "x";
"tableLine" -> "parseFromString\'";
"tableLine" -> "plain";
"tableLine" -> "rawTableLine";
"tableOfContents" -> "_";
"tableOfContents" -> "blockToHtml";
"tableOfContents" -> "toTableOfContents";
"tableOption" -> "many1Char";
"tableOption" -> "manyTillChar";
"tableOption" -> "spacetab";
"tableOption" -> "try";
"tableOptions" -> "spaces";
"tableOptions" -> "tableOption";
"tableParseBody" -> "tableParseRow";
"tableParseCaption" -> "eol";
"tableParseCaption" -> "inline";
"tableParseCaption" -> "many1Till";
"tableParseCaption" -> "spaceChar";
"tableParseCaption" -> "trimInlinesF";
"tableParseCaption" -> "try";
"tableParseColumn" -> "skipSpaces";
"tableParseColumn" -> "tableColumnContent";
"tableParseColumn" -> "tableEndOfRow";
"tableParseElement" -> "tableParseBody";
"tableParseElement" -> "tableParseCaption";
"tableParseElement" -> "tableParseFooter";
"tableParseElement" -> "tableParseHeader";
"tableParseFooter" -> "tableParseRow";
"tableParseHeader" -> "skipSpaces";
"tableParseHeader" -> "spaceChar";
"tableParseHeader" -> "tableColumnContent";
"tableParseHeader" -> "tableEndOfRow";
"tableParseHeader" -> "tableParseRow";
"tableParseHeader" -> "try";
"tableParseRow" -> "eol";
"tableParseRow" -> "inline\'";
"tableParseRow" -> "many1Till";
"tableParseRow" -> "newline";
"tableParseRow" -> "spaceChar";
"tableParseRow" -> "tableCell";
"tableParseRow" -> "tableParseColumn";
"tableParseRow" -> "trimInlinesF";
"tableParseRow" -> "try";
"tablePartToHtml" -> "addAttrs";
"tablePartToHtml" -> "attr";
"tablePartToHtml" -> "headerRowsToHtml";
"tablePartToHtml" -> "nl";
"tablePartToJats" -> "attr";
"tablePartToJats" -> "headerRowsToJats";
"tablePartToJats" -> "inTags";
"tablePartToJats" -> "toAttribs";
"tablePartToJats" -> "validTablePartAttribs";
"tableRow" -> "_";
"tableRow" -> "a";
"tableRow" -> "attributes";
"tableRow" -> "blankline";
"tableRow" -> "eofline";
"tableRow" -> "genericRow";
"tableRow" -> "htmlComment";
"tableRow" -> "inline";
"tableRow" -> "lexComment";
"tableRow" -> "many1Till";
"tableRow" -> "newline";
"tableRow" -> "parseFromString";
"tableRow" -> "spaceChar";
"tableRow" -> "spacetab";
"tableRow" -> "tableCell";
"tableRow" -> "tableRowEnd";
"tableRow" -> "try";
"tableRow" -> "x";
"tableRowEnd" -> "eol";
"tableRowEnd" -> "spaceChar";
"tableRowEnd" -> "tableCellSeparator";
"tableRowEnd" -> "try";
"tableRowToConTeXt" -> "tableColToConTeXt";
"tableRowToConTeXt" -> "vcat";
"tableRowToDocbook" -> "inTagsIndented";
"tableRowToDocbook" -> "tableItemToDocbook";
"tableRowToDocbook" -> "vcat";
"tableRowToHtml" -> "_";
"tableRowToHtml" -> "addAttrs";
"tableRowToHtml" -> "attr";
"tableRowToHtml" -> "cellToHtml";
"tableRowToHtml" -> "nl";
"tableRowToHtml" -> "x";
"tableRowToJats" -> "_";
"tableRowToJats" -> "attr";
"tableRowToJats" -> "cellToJats";
"tableRowToJats" -> "inTags";
"tableRowToJats" -> "toAttribs";
"tableRowToJats" -> "vcat";
"tableRowToLaTeX" -> "blockListToLaTeX";
"tableRowToLaTeX" -> "header";
"tableRowToLaTeX" -> "tableCellToLaTeX";
"tableRowToMediaWiki" -> "tableCellToMediaWiki";
"tableRowToOpenDocument" -> "_";
"tableRowToOpenDocument" -> "inTagsIndented";
"tableRowToOpenDocument" -> "tableItemToOpenDocument";
"tableRowToOpenDocument" -> "vcat";
"tableRowToRTF" -> "header";
"tableRowToRTF" -> "indent";
"tableRowToRTF" -> "tableItemToRTF";
"tableRowToRTF" -> "tshow";
"tableRowToTEI" -> "inTagsIndented";
"tableRowToTEI" -> "tableItemToTEI";
"tableRowToTEI" -> "vcat";
"tableRowToTexinfo" -> "tableAnyRowToTexinfo";
"tableRowToTextile" -> "_";
"tableRowToTextile" -> "item";
"tableRowToTextile" -> "tableItemToTextile";
"tableRowToTextile" -> "x";
"tableRows" -> "tableAlignRow";
"tableRows" -> "tableContentRow";
"tableRows" -> "tableHline";
"tableRows" -> "tableRow";
"tableRows" -> "try";
"tableSep" -> "dashedLine";
"tableSep" -> "skipNonindentSpaces";
"tableSep" -> "try";
"tableStart" -> "guardColumnOne";
"tableStart" -> "skipSpaces";
"tableStart" -> "sym";
"tableStart" -> "try";
"tableStyle" -> "empty";
"tableStyle" -> "inTags";
"tableStyle" -> "selfClosingTag";
"tableStyle" -> "table";
"tableStyle" -> "tshow";
"tableStyle" -> "vcat";
"tableToConTeXt" -> "empty";
"tableToConTeXt" -> "vcat";
"tableToHtml" -> "_";
"tableToHtml" -> "addAttrs";
"tableToHtml" -> "attr";
"tableToHtml" -> "blockListToHtml";
"tableToHtml" -> "colSpecListToHtml";
"tableToHtml" -> "nl";
"tableToHtml" -> "tableBodyToHtml";
"tableToHtml" -> "tableFootToHtml";
"tableToHtml" -> "tableHeadToHtml";
"tableToJATS" -> "attr";
"tableToJATS" -> "blockToJATS";
"tableToJATS" -> "captionlessTable";
"tableToJATS" -> "empty";
"tableToJATS" -> "inTags";
"tableToJATS" -> "inTagsIndented";
"tableToJATS" -> "vcat";
"tableToLaTeX" -> "_";
"tableToLaTeX" -> "empty";
"tableToLaTeX" -> "getCaption";
"tableToLaTeX" -> "literal";
"tableToLaTeX" -> "notesToLaTeX";
"tableToLaTeX" -> "removeNote";
"tableToLaTeX" -> "tableRowToLaTeX";
"tableToLaTeX" -> "toColDescriptor";
"tableToLaTeX" -> "toLegacyTable";
"tableToLaTeX" -> "vcat";
"tableToLaTeX" -> "x";
"tableType" -> "_";
"tableType" -> "onlySimpleTableCells";
"tableWith" -> "tableWith\'";
"tableWith" -> "toHeaderRow";
"tableWith" -> "toRow";
"tableWith" -> "try";
"tableWith" -> "widthsFromIndices";
"tableWith\'" -> "l";
"tableWith\'" -> "toHeaderRow";
"tableWith\'" -> "toRow";
"tableWith\'" -> "try";
"tableWith\'" -> "widthsFromIndices";
"tag" -> "makeTagSpan\'";
"tag" -> "manyTillChar";
"tag" -> "space";
"tag" -> "spaceChars";
"tag" -> "splitTextBy";
"tag" -> "try";
"tagList" -> "newline";
"tagList" -> "orgTagWord";
"tagList" -> "skipSpaces";
"tagSpan" -> "t";
"tagToText" -> "_";
"tagWithAttributes" -> "_";
"tagWithAttributes" -> "addAttrs";
"tagWithAttributes" -> "attr";
"tagWithAttributes" -> "defaultWriterState";
"tagWithAttributes" -> "runPure";
"tagWithAttributes" -> "t";
"tagWithAttrs" -> "doubleQuotes";
"tagWithAttrs" -> "empty";
"tagWithAttrs" -> "escapeStringForXML";
"tagWithAttrs" -> "tag";
"tagged" -> "a";
"tagged" -> "getTarget";
"tagged" -> "inlineMarkup";
"taggedBlock" -> "a";
"taggedBlock" -> "anyLineNewline";
"taggedBlock" -> "genericBlock";
"taggedBlock" -> "getTarget";
"tagsToInlines" -> "t";
"tagsToInlines" -> "tagSpan";
"take1WhileP" -> "t";
"targetURI" -> "_";
"targetURI" -> "blankline";
"targetURI" -> "blanklines";
"targetURI" -> "escapeURI";
"targetURI" -> "many1Char";
"targetURI" -> "newline";
"targetURI" -> "skipSpaces";
"targetURI" -> "spaceChar";
"targetURI" -> "t";
"targetURI" -> "trim";
"targetURI" -> "try";
"taskListItemFromAscii" -> "handleTaskListItem";
"taskListItemToAscii" -> "handleTaskListItem";
"tectonic2pdf" -> "_";
"tectonic2pdf" -> "extractMsg";
"tectonic2pdf" -> "missingCharacterWarnings";
"tectonic2pdf" -> "runTectonic";
"tectonic2pdf" -> "source";
"template" -> "countChar";
"template" -> "many1Char";
"template" -> "template";
"template" -> "try";
"template" -> "variable";
"templatePh" -> "newline";
"templatePh" -> "spaceChar";
"templatePh" -> "try";
"testBitMask" -> "_";
"testStringWith" -> "a";
"testStringWith" -> "addLogMessage";
"testStringWith" -> "defaultParserState";
"testStringWith" -> "readWith";
"testStringWith" -> "str";
"testStringWith" -> "t";
"tex2pdf" -> "_";
"tex2pdf" -> "extractMsg";
"tex2pdf" -> "missingCharacterWarnings";
"tex2pdf" -> "runTeXProgram";
"tex2pdf" -> "source";
"tex2pdf" -> "x";
"texMathToInlines" -> "convertMath";
"texMathToInlines" -> "mkFallback";
"texMathToInlines" -> "report";
"texSetting" -> "elispBoolean";
"texSetting" -> "genericExportSetting";
"texSetting" -> "optionString";
"texSetting" -> "try";
"textContentRecursive" -> "strContentRecursive";
"textInTags" -> "htmlTag";
"textInTags" -> "raw";
"textInTags" -> "tag";
"textInTags" -> "try";
"textStr" -> "t";
"textStyleAttr" -> "a";
"textualCite" -> "_";
"textualCite" -> "askF";
"textualCite" -> "bareloc";
"textualCite" -> "citeKey";
"textualCite" -> "dropBrackets";
"textualCite" -> "inlines";
"textualCite" -> "isSpace";
"textualCite" -> "normalCite";
"textualCite" -> "parseFromString\'";
"textualCite" -> "raw";
"textualCite" -> "referenceLink";
"textualCite" -> "spnl";
"textualCite" -> "try";
"textualCite" -> "tshow";
"textualCite" -> "withRaw";
"theoremEnvironment" -> "_";
"theoremEnvironment" -> "addTitle";
"theoremEnvironment" -> "blocks";
"theoremEnvironment" -> "braced";
"theoremEnvironment" -> "controlSeq";
"theoremEnvironment" -> "env";
"theoremEnvironment" -> "getNextNumber";
"theoremEnvironment" -> "italicize";
"theoremEnvironment" -> "opt";
"theoremEnvironment" -> "renderDottedNum";
"theoremEnvironment" -> "space";
"theoremEnvironment" -> "spaces";
"theoremEnvironment" -> "str";
"theoremEnvironment" -> "title";
"theoremEnvironment" -> "try";
"theoremEnvironment" -> "untokenize";
"theoremEnvironment" -> "x";
"theoremstyle" -> "_";
"theoremstyle" -> "braced";
"theoremstyle" -> "untokenize";
"three" -> "ender";
"three" -> "inline";
"three" -> "one";
"three" -> "two";
"three" -> "updateLastStrPos";
"throwTopMessageAsError\'" -> "a";
"timestamp" -> "many1TillChar";
"timestamp" -> "try";
"title" -> "balancedTitle";
"title" -> "try";
"titleBlock" -> "mmdTitleBlock";
"titleBlock" -> "pandocTitleBlock";
"titleLine" -> "inlines";
"titleLine" -> "parseFromString\'";
"titleLine" -> "raw";
"titleLine" -> "rawTitleBlockLine";
"titleLine" -> "trimInlinesF";
"titleLine" -> "try";
"titleLink" -> "manyChar";
"titleLink" -> "space";
"titleLink" -> "try";
"titleToElement" -> "_";
"titleToElement" -> "buildSpTree";
"titleToElement" -> "elemName";
"titleToElement" -> "elemToNameSpaces";
"titleToElement" -> "findChild";
"titleToElement" -> "mknode";
"titleToElement" -> "nonBodyTextToElement";
"titleToRST" -> "_";
"titleToRST" -> "bordered";
"titleToRST" -> "empty";
"titleToRST" -> "inlineListToRST";
"titleToRST" -> "title";
"titleTransform" -> "_";
"titleTransform" -> "fromList";
"titleTransform" -> "isHeader";
"titleTransform" -> "meta";
"titleTransform" -> "metaFromDefList";
"titleTransform" -> "promoteHeaders";
"titleline" -> "headerline";
"titleline" -> "inline";
"titleline" -> "newline";
"toAlignment" -> "_";
"toAlignment" -> "findAttr";
"toAscii" -> "a";
"toAscii" -> "toAsciiChar";
"toAscii" -> "tshow";
"toAsciiChar" -> "asciiMap";
"toAttr" -> "mkAttr";
"toAttr" -> "toStringAttr";
"toAttr" -> "try";
"toAttrs" -> "html4Attributes";
"toAttrs" -> "html5Attributes";
"toAttrs" -> "rdfaAttributes";
"toAttrs" -> "x";
"toBabel" -> "_";
"toBabel" -> "commonFromBcp47";
"toBabel" -> "x";
"toBookmarkName" -> "_";
"toBookmarkName" -> "fromTextLazy";
"toBookmarkName" -> "getStyleIdFromName";
"toBookmarkName" -> "getStyleMaps";
"toBookmarkName" -> "hasStyleName";
"toBookmarkName" -> "sha1";
"toChunks" -> "_";
"toChunks" -> "inTextStyle";
"toChunks" -> "inlineToOpenDocument";
"toChunks" -> "isChunkable";
"toChunks" -> "splitBy";
"toChunks" -> "toChunks";
"toChunks" -> "trim";
"toChunks" -> "x";
"toContextDir" -> "_";
"toContextDir" -> "t";
"toCslJson" -> "fromInline";
"toHeaderRow" -> "l";
"toHeaderRow" -> "splitTextBy";
"toHeaderRow" -> "toRow";
"toHeaderRow" -> "trim";
"toHeaderRow" -> "tshow";
"toHtml5Entities" -> "html5EntityMap";
"toHtml5Entities" -> "t";
"toIETF" -> "defaultCommonState";
"toIETF" -> "x";
"toId" -> "x";
"toJiraBlocks" -> "_";
"toJiraBlocks" -> "attr";
"toJiraBlocks" -> "blocks";
"toJiraBlocks" -> "bodyRows";
"toJiraBlocks" -> "header";
"toJiraBlocks" -> "headerRow";
"toJiraBlocks" -> "items";
"toJiraBlocks" -> "linesToPara";
"toJiraBlocks" -> "rawBlockToJira";
"toJiraBlocks" -> "singleton";
"toJiraBlocks" -> "toJiraBlocks";
"toJiraBlocks" -> "toJiraCode";
"toJiraBlocks" -> "toJiraDefinitionList";
"toJiraBlocks" -> "toJiraHeader";
"toJiraBlocks" -> "toJiraInlines";
"toJiraBlocks" -> "toJiraItems";
"toJiraBlocks" -> "toJiraPanel";
"toJiraBlocks" -> "toLegacyTable";
"toJiraBlocks" -> "toRow";
"toJiraCode" -> "code";
"toJiraCode" -> "knownLanguages";
"toJiraCode" -> "l";
"toJiraCode" -> "singleton";
"toJiraDefinitionList" -> "singleton";
"toJiraDefinitionList" -> "styled";
"toJiraDefinitionList" -> "toJiraBlocks";
"toJiraHeader" -> "_";
"toJiraHeader" -> "anchor";
"toJiraHeader" -> "inlines";
"toJiraHeader" -> "singleton";
"toJiraHeader" -> "toJiraInlines";
"toJiraInlines" -> "_";
"toJiraInlines" -> "a";
"toJiraInlines" -> "attr";
"toJiraInlines" -> "escapeSpecialChars";
"toJiraInlines" -> "imageToJira";
"toJiraInlines" -> "inlines";
"toJiraInlines" -> "mathToJira";
"toJiraInlines" -> "quotedToJira";
"toJiraInlines" -> "registerNotes";
"toJiraInlines" -> "singleton";
"toJiraInlines" -> "spanToJira";
"toJiraInlines" -> "styled";
"toJiraInlines" -> "toJiraInlines";
"toJiraInlines" -> "toJiraLink";
"toJiraInlines" -> "toJiraRaw";
"toJiraItems" -> "toJiraBlocks";
"toJiraLink" -> "_";
"toJiraLink" -> "description";
"toJiraLink" -> "singleton";
"toJiraLink" -> "stringify";
"toJiraLink" -> "toJiraInlines";
"toJiraLink" -> "txt";
"toJiraLink" -> "url";
"toJiraPanel" -> "attr";
"toJiraPanel" -> "blocks";
"toJiraPanel" -> "singleton";
"toJiraPanel" -> "toJiraBlocks";
"toJiraRaw" -> "_";
"toJiraRaw" -> "singleton";
"toKey" -> "a";
"toKey" -> "t";
"toLabel" -> "_";
"toLabel" -> "elemText";
"toLabel" -> "stringToLaTeX";
"toLabel" -> "x";
"toLang" -> "_";
"toLang" -> "l";
"toLang" -> "parseBCP47";
"toLang" -> "report";
"toLanguageId" -> "x";
"toLegacyTable" -> "_";
"toLegacyTable" -> "blocksToInlines";
"toLegacyTable" -> "x";
"toList" -> "items";
"toListItem" -> "item";
"toListItem" -> "nl";
"toListItems" -> "items";
"toListItems" -> "nl";
"toListItems" -> "toListItem";
"toListingsLanguage" -> "langToListingsMap";
"toLiteralList" -> "_";
"toLiteralList" -> "splitByAnd";
"toLiteralList" -> "toLiteralList";
"toLocatorMap" -> "locatorTerms";
"toLocatorMap" -> "x";
"toMacro" -> "empty";
"toMacro" -> "hexColor";
"toMacro" -> "literal";
"toMacro" -> "tshow";
"toName" -> "_";
"toName" -> "emptyName";
"toName" -> "isCapitalized";
"toName" -> "optionSet";
"toName" -> "prefix";
"toName" -> "splitStrWhen";
"toName" -> "stringify";
"toName" -> "suffix";
"toName" -> "t";
"toName" -> "x";
"toNameList" -> "_";
"toNameList" -> "addSpaceAfterPeriod";
"toNameList" -> "emptyName";
"toNameList" -> "splitByAnd";
"toNameList" -> "toName";
"toNameList" -> "toNameList";
"toPandocCodeBlocks" -> "paramToPair";
"toPandocCodeBlocks" -> "txt";
"toPandocDiv" -> "jiraToPandocBlocks";
"toPandocDiv" -> "paramToPair";
"toPandocList" -> "bulletList";
"toPandocList" -> "items";
"toPandocList" -> "jiraToPandocBlocks";
"toPandocList" -> "orderedList";
"toPandocTable" -> "bodyRows";
"toPandocTable" -> "headerRow";
"toPandocTable" -> "rowToBlocksList";
"toPandocTable" -> "simpleTable";
"toPandocTable" -> "splitIntoHeaderAndBody";
"toPolyglossia" -> "_";
"toPolyglossia" -> "commonFromBcp47";
"toPolyglossia" -> "x";
"toPolyglossiaEnv" -> "l";
"toPolyglossiaEnv" -> "toPolyglossia";
"toPolyglossiaEnv" -> "x";
"toRelator" -> "relatorMap";
"toRelator" -> "relators";
"toRelator" -> "x";
"toRomanNumeral" -> "installPandocPackageSearcher";
"toRomanNumeral" -> "toRomanNumeral";
"toRomanNumeral" -> "x";
"toRow" -> "toJiraBlocks";
"toSlides" -> "elementToBeamer";
"toSlides" -> "getSlideLevel";
"toSlides" -> "makeSections";
"toSlides" -> "prepSlides";
"toSmallCaps" -> "escapeStr";
"toSmallCaps" -> "toSmallCaps";
"toString" -> "toText";
"toStringAttr" -> "_";
"toStringAttr" -> "html4Attributes";
"toStringAttr" -> "html5Attributes";
"toStringAttr" -> "rdfaAttributes";
"toStringAttr" -> "x";
"toStringLazy" -> "toTextLazy";
"toSubscript" -> "isSpace";
"toSubscriptInline" -> "_";
"toSubscriptInline" -> "attr";
"toSubscriptInline" -> "toSubscript";
"toSubscriptInline" -> "toSubscriptInline";
"toSuperscript" -> "isSpace";
"toSuperscriptInline" -> "_";
"toSuperscriptInline" -> "attr";
"toSuperscriptInline" -> "convertMath";
"toSuperscriptInline" -> "defaultKaTeXURL";
"toSuperscriptInline" -> "defaultMathJaxURL";
"toSuperscriptInline" -> "texMathToInlines";
"toSuperscriptInline" -> "toSuperscript";
"toSuperscriptInline" -> "toSuperscriptInline";
"toTable" -> "annotateTable";
"toTable" -> "attr";
"toTableOfContents" -> "makeSections";
"toTableOfContents" -> "sectionToListItem";
"toXml" -> "_";
"toXml" -> "attr";
"toXml" -> "blockToXml";
"toXml" -> "cMapM";
"toXml" -> "capitalize";
"toXml" -> "el";
"toXml" -> "footnoteID";
"toXml" -> "insertImage";
"toXml" -> "insertMath";
"toXml" -> "list";
"toXml" -> "report";
"toXml" -> "toXml";
"toXml" -> "tshow";
"toXml" -> "txt";
"toXml" -> "uattr";
"toXml" -> "url";
"toXml" -> "wrap";
"to_simple_table" -> "pushSimpleTable";
"todoKeyword" -> "activeTodoMarkers";
"todoKeyword" -> "spaceChar";
"todoKeyword" -> "textStr";
"todoKeyword" -> "try";
"todoKeyword" -> "updateLastPreCharPos";
"todoMark" -> "try";
"todoSequence" -> "many1Char";
"todoSequence" -> "newline";
"todoSequence" -> "nonspaceChar";
"todoSequence" -> "skipSpaces";
"todoSequence" -> "skipSpaces1";
"todoSequence" -> "try";
"todoSequence" -> "x";
"tok" -> "_";
"tok" -> "grouped";
"tok" -> "inline";
"tok" -> "inlineCommand\'";
"tok" -> "singleChar";
"tok" -> "spaces";
"tok" -> "str";
"tok" -> "t";
"tok" -> "try";
"tokTypeIn" -> "_";
"token" -> "_";
"token" -> "a";
"token" -> "t";
"tokenize" -> "totoks";
"toksToString" -> "untokenize";
"tonum" -> "_";
"tonum" -> "parseNum";
"topLevelRelsEntry" -> "elemToEntry";
"topLevelRelsEntry" -> "relsToElement";
"topLevelRelsEntry" -> "topLevelRels";
"tostringLogMessage" -> "defineHowTo";
"tostringLogMessage" -> "fromList";
"tostringLogMessage" -> "peekMediaItems";
"tostringLogMessage" -> "pushMediaItems";
"tostringLogMessage" -> "pushViaConstructor";
"tostringLogMessage" -> "showLogMessage";
"totoks" -> "_";
"totoks" -> "isLetterOrAt";
"totoks" -> "isLowerHex";
"totoks" -> "isSpaceOrTab";
"totoks" -> "safeRead";
"totoks" -> "t";
"totoks" -> "t1";
"totoks" -> "totoks";
"transformBlock" -> "raw";
"transformBlock" -> "renderTags\'";
"transformBlock" -> "transformTag";
"transformInline" -> "_";
"transformInline" -> "attr";
"transformInline" -> "modifyMediaRef";
"transformInline" -> "raw";
"transformInline" -> "renderTags\'";
"transformInline" -> "t";
"transformInline" -> "transformTag";
"transformInline" -> "url";
"transformInline" -> "x";
"transformInlines" -> "_";
"transformInlines" -> "elemText";
"transformInlines" -> "flatten";
"transformInlines" -> "isSpace";
"transformInlines" -> "mapNested";
"transformInlines" -> "stripLeadingTrailingSpace";
"transformInlines" -> "x";
"transformKey" -> "_";
"transformKey" -> "bookTrans";
"transformKey" -> "standardTrans";
"transformKey" -> "x";
"transformPicMath" -> "_";
"transformPicMath" -> "attr";
"transformPicMath" -> "dimension";
"transformPicMath" -> "documentSettings";
"transformPicMath" -> "extensionFromMimeType";
"transformPicMath" -> "fromStringLazy";
"transformPicMath" -> "imageSize";
"transformPicMath" -> "inInch";
"transformPicMath" -> "inTags";
"transformPicMath" -> "math";
"transformPicMath" -> "report";
"transformPicMath" -> "selfClosingTag";
"transformPicMath" -> "sizeInPoints";
"transformPicMath" -> "t";
"transformPicMath" -> "toLazy";
"transformPicMath" -> "tshow";
"transformPicMath" -> "x";
"transformTag" -> "attr";
"transformTag" -> "modifyMediaRef";
"transformTag" -> "tag";
"transformTag" -> "x";
"translateLang" -> "_";
"translateTerm" -> "getTranslations";
"translateTerm" -> "lookupTerm";
"translateTerm" -> "report";
"trim" -> "elemText";
"trimCode" -> "_";
"trimCode" -> "stripTrailingNewlines";
"trimCode" -> "t";
"trimMath" -> "_";
"trimMath" -> "elemText";
"trimMath" -> "t";
"trimMath" -> "triml";
"trimSps" -> "_";
"trimSps" -> "a";
"trimSps" -> "isSp";
"triml" -> "elemText";
"trimr" -> "elemText";
"truish" -> "_";
"truish" -> "isYesValue";
"truish" -> "stringify";
"truish" -> "t";
"try" -> "a";
"tryAll" -> "a";
"tryAll" -> "iterateS";
"tryAll" -> "prepareIteration";
"tryAll" -> "switchingTheStack";
"tryAll" -> "x";
"tryModifyState" -> "a";
"tryModifyState" -> "ignoringState";
"tryModifyState" -> "l";
"tryModifyState" -> "x";
"tryMsg" -> "a";
"tryMsg" -> "try";
"ttfamily" -> "code";
"ttfamily" -> "stringify";
"ttfamily" -> "toList";
"ttfamily" -> "tok";
"two" -> "ender";
"two" -> "inline";
"two" -> "try";
"two" -> "updateLastStrPos";
"twoColumnToElement" -> "_";
"twoColumnToElement" -> "buildSpTree";
"twoColumnToElement" -> "elemName";
"twoColumnToElement" -> "elemToNameSpaces";
"twoColumnToElement" -> "env";
"twoColumnToElement" -> "findChild";
"twoColumnToElement" -> "mknode";
"twoColumnToElement" -> "nonBodyTextToElement";
"twoColumnToElement" -> "shapesToElements";
"uattr" -> "uname";
"unNumberedCaption" -> "inParagraphTagsWithStyle";
"unPlain" -> "inlines";
"unPlain" -> "x";
"unTitlecase" -> "protectCase";
"uncurry3" -> "a";
"uncurry4" -> "a";
"uncurry5" -> "a";
"uncurry6" -> "a";
"underline" -> "emphasisBetween";
"underline" -> "inline";
"underline" -> "inlineMarkup";
"underlined" -> "emphasisBetween";
"underlined" -> "enclosed";
"underlined" -> "guardDisabled";
"underlined" -> "nestedInlines";
"underlined" -> "try";
"underlined" -> "underline";
"unescapeURL" -> "_";
"unescapeURL" -> "elemText";
"unescapeURL" -> "t";
"unescapeURL" -> "x";
"unicodeTransform" -> "extractUnicodeChar";
"unicodeTransform" -> "t";
"unicodeTransform" -> "unicodeTransform";
"unicodeTransform" -> "x";
"unindent" -> "dropSpacePrefix";
"unindent" -> "lchop";
"unindent" -> "rchop";
"union3" -> "a";
"union3" -> "composition";
"union3" -> "findBy";
"union3" -> "readLookupable";
"union3" -> "readLookupables";
"union3" -> "readPercent";
"union3" -> "reverseComposition";
"union3" -> "swap";
"union3" -> "swing";
"union3" -> "tryToRead";
"union3" -> "uncurry3";
"union3" -> "uncurry4";
"union3" -> "uncurry5";
"union3" -> "uncurry6";
"uniqueIdent" -> "inlineListToIdentifier";
"uniqueIdent" -> "tshow";
"uniqueIdent" -> "x";
"uniqueIdentFrom" -> "x";
"uniqueSlideId" -> "uniqueSlideId\'";
"uniqueSlideId\'" -> "tshow";
"uniqueSlideId\'" -> "uniqueSlideId\'";
"unmarkedInterpretedText" -> "atStart";
"unmarkedInterpretedText" -> "blankline";
"unmarkedInterpretedText" -> "roleMarker";
"unmarkedInterpretedText" -> "try";
"unordList" -> "toList";
"unordList" -> "toListItems";
"unorderedList" -> "list";
"unprunedHeadlineToBlocks" -> "docContainsSelectTags";
"unprunedHeadlineToBlocks" -> "headlineToBlocks";
"unprunedHeadlineToBlocks" -> "includeRootAndSelected";
"unprunedHeadlineToBlocks" -> "removeExplicitlyExcludedNodes";
"unquotedString" -> "space";
"unquotedString" -> "try";
"unsmartify" -> "_";
"unsmartify" -> "a";
"unsmartify" -> "isEnabled";
"unstackInlines" -> "ilModifierAndInnards";
"unstackInlines" -> "unstackInlines";
"untoken" -> "t";
"untoken" -> "untokenAccum";
"untokenAccum" -> "_";
"untokenAccum" -> "t";
"untokenize" -> "untokenAccum";
"unwrap" -> "_";
"unwrap" -> "findChildByName";
"unwrap" -> "isElem";
"unwrap" -> "unwrap";
"unwrapChild" -> "_";
"unwrapChild" -> "elContent";
"unwrapChild" -> "unwrap";
"updateLastStrPos" -> "a";
"updateMediaWithResource" -> "getExtraState";
"updateMediaWithResource" -> "insertMedia\'";
"updateMediaWithResource" -> "keepingTheValue";
"updateMediaWithResource" -> "setExtraState";
"updatePositions" -> "emphasisForbiddenBorderChars";
"updatePositions" -> "updateLastForbiddenCharPos";
"updatePositions" -> "updateLastPreCharPos";
"updatePositions" -> "when";
"updateStyleWithLang" -> "addLang";
"updateStyleWithLang" -> "fromStringLazy";
"updateStyleWithLang" -> "ppTopElement";
"updateStyleWithLang" -> "toStringLazy";
"upperRoman" -> "romanNumeral";
"uri" -> "between";
"uri" -> "characterReference";
"uri" -> "escapeURI";
"uri" -> "fromEntities";
"uri" -> "isSpace";
"uri" -> "l";
"uri" -> "str";
"uri" -> "t2tURI";
"uri" -> "try";
"uri" -> "uriScheme";
"uriScheme" -> "oneOfStringsCI";
"uriScheme" -> "schemes";
"url" -> "a";
"url" -> "emailAddress";
"url" -> "try";
"url" -> "uri";
"urlEscapeBrackets" -> "_";
"urlToText" -> "isExternalLink";
"urlToText" -> "url";
"utf8ToString" -> "_";
"utf8ToString" -> "a";
"utf8ToString" -> "anyLine";
"utf8ToString" -> "anyLineNewline";
"utf8ToString" -> "anyOrderedListMarker";
"utf8ToString" -> "apostrophe";
"utf8ToString" -> "askF";
"utf8ToString" -> "asksF";
"utf8ToString" -> "blankline";
"utf8ToString" -> "blanklines";
"utf8ToString" -> "charRef";
"utf8ToString" -> "characterReference";
"utf8ToString" -> "charsInBalanced";
"utf8ToString" -> "citeKey";
"utf8ToString" -> "countChar";
"utf8ToString" -> "dash";
"utf8ToString" -> "decimal";
"utf8ToString" -> "defaultParserState";
"utf8ToString" -> "doubleQuoteEnd";
"utf8ToString" -> "doubleQuoteStart";
"utf8ToString" -> "ellipses";
"utf8ToString" -> "emailAddress";
"utf8ToString" -> "enclosed";
"utf8ToString" -> "escaped";
"utf8ToString" -> "extractIdClass";
"utf8ToString" -> "gobbleAtMostSpaces";
"utf8ToString" -> "gobbleSpaces";
"utf8ToString" -> "gridTableWith";
"utf8ToString" -> "gridTableWith\'";
"utf8ToString" -> "guardDisabled";
"utf8ToString" -> "guardEnabled";
"utf8ToString" -> "indentWith";
"utf8ToString" -> "insertIncludedFile";
"utf8ToString" -> "insertIncludedFileF";
"utf8ToString" -> "isSpace";
"utf8ToString" -> "lineBlockLines";
"utf8ToString" -> "lineClump";
"utf8ToString" -> "logMessage";
"utf8ToString" -> "lowerAlpha";
"utf8ToString" -> "lowerRoman";
"utf8ToString" -> "many1Char";
"utf8ToString" -> "many1Till";
"utf8ToString" -> "many1TillChar";
"utf8ToString" -> "manyChar";
"utf8ToString" -> "manyTillChar";
"utf8ToString" -> "manyUntil";
"utf8ToString" -> "manyUntilChar";
"utf8ToString" -> "mathDisplay";
"utf8ToString" -> "mathInline";
"utf8ToString" -> "nested";
"utf8ToString" -> "newline";
"utf8ToString" -> "nonspaceChar";
"utf8ToString" -> "notAfterString";
"utf8ToString" -> "notFollowedBy\'";
"utf8ToString" -> "oneOfStrings";
"utf8ToString" -> "oneOfStringsCI";
"utf8ToString" -> "orderedListMarker";
"utf8ToString" -> "parseFromString";
"utf8ToString" -> "parseFromString\'";
"utf8ToString" -> "readWith";
"utf8ToString" -> "readWithM";
"utf8ToString" -> "registerHeader";
"utf8ToString" -> "reportLogMessages";
"utf8ToString" -> "returnF";
"utf8ToString" -> "romanNumeral";
"utf8ToString" -> "runF";
"utf8ToString" -> "sepBy1\'";
"utf8ToString" -> "singleQuoteEnd";
"utf8ToString" -> "singleQuoteStart";
"utf8ToString" -> "skipSpaces";
"utf8ToString" -> "smartPunctuation";
"utf8ToString" -> "space";
"utf8ToString" -> "spaceChar";
"utf8ToString" -> "spaces";
"utf8ToString" -> "stringAnyCase";
"utf8ToString" -> "t";
"utf8ToString" -> "tableWith";
"utf8ToString" -> "takeP";
"utf8ToString" -> "testStringWith";
"utf8ToString" -> "textStr";
"utf8ToString" -> "toKey";
"utf8ToString" -> "token";
"utf8ToString" -> "trimInlinesF";
"utf8ToString" -> "try";
"utf8ToString" -> "updateLastStrPos";
"utf8ToString" -> "upperAlpha";
"utf8ToString" -> "upperRoman";
"utf8ToString" -> "uri";
"utf8ToString" -> "widthsFromIndices";
"utf8ToString" -> "withHorizDisplacement";
"utf8ToString" -> "withRaw";
"valToMetaValue" -> "dateToMetaValue";
"valToMetaValue" -> "nameToMetaValue";
"valToMetaValue" -> "t";
"valToYaml" -> "_";
"valToYaml" -> "contextToYaml";
"valToYaml" -> "empty";
"valToYaml" -> "t";
"valToYaml" -> "valToYaml";
"valToYaml" -> "vcat";
"valToYaml" -> "x";
"variable" -> "manyTillChar";
"variable" -> "try";
"verbEnv" -> "anyTok";
"verbEnv" -> "blankline";
"verbEnv" -> "end_";
"verbEnv" -> "stripTrailingNewline";
"verbEnv" -> "untokenize";
"verbEnv" -> "withVerbatimMode";
"verbTok" -> "anyTok";
"verbTok" -> "t";
"verbTok" -> "t1";
"verbTok" -> "totoks";
"verbTok" -> "txt";
"verbatim" -> "anyLineNewline";
"verbatim" -> "genericBlock";
"verbatim" -> "htmlElement";
"verbatim" -> "verbatimBetween";
"verbatimBetween" -> "emphasisEnd";
"verbatimBetween" -> "emphasisStart";
"verbatimBetween" -> "many1TillNOrLessNewlines";
"verbatimBetween" -> "try";
"verbatimBetween" -> "updatePositions";
"verbatimTag" -> "closeTag";
"verbatimTag" -> "manyTillChar";
"verbatimTag" -> "openTag";
"verseBlock" -> "ignHeaders";
"verseBlock" -> "indentedLine";
"verseBlock" -> "inlines";
"verseBlock" -> "isSpace";
"verseBlock" -> "parseFromString";
"verseBlock" -> "rawBlockContent";
"verseBlock" -> "trimInlinesF";
"verseBlock" -> "try";
"verseLine" -> "eol";
"verseLine" -> "inline\'";
"verseLine" -> "many1Char";
"verseLine" -> "trimInlinesF";
"verseTag" -> "closeTag";
"verseTag" -> "eol";
"verseTag" -> "getIndent";
"verseTag" -> "indent";
"verseTag" -> "indentWith";
"verseTag" -> "openTag";
"verseTag" -> "spaceChar";
"verseTag" -> "try";
"verseTag" -> "verseLine";
"viewPropsElement" -> "attr";
"viewPropsElement" -> "parseXml";
"walkBlock" -> "walkElement";
"walkBlockLists" -> "contains";
"walkBlockLists" -> "listOfBlocksFilterName";
"walkBlockLists" -> "runOnValue";
"walkBlocks" -> "a";
"walkBlocks" -> "blockElementNames";
"walkBlocks" -> "hasOneOf";
"walkBlocks" -> "runOnSequence";
"walkDocument" -> "_";
"walkDocument" -> "walkDocument\'";
"walkDocument\'" -> "unwrapChild";
"walkDocument\'" -> "walkDocument\'";
"walkElement" -> "a";
"walkElement" -> "liftPandocLua";
"walkElement" -> "walkBlocks";
"walkElement" -> "walkInlines";
"walkElement" -> "x";
"walkInline" -> "walkElement";
"walkInlineLists" -> "a";
"walkInlineLists" -> "contains";
"walkInlineLists" -> "listOfInlinesFilterName";
"walkInlineLists" -> "runOnValue";
"walkInlines" -> "a";
"walkInlines" -> "hasOneOf";
"walkInlines" -> "inlineElementNames";
"walkInlines" -> "runOnSequence";
"walkMWithLuaFilter" -> "a";
"walkMWithLuaFilter" -> "walkBlockLists";
"walkMWithLuaFilter" -> "walkBlocks";
"walkMWithLuaFilter" -> "walkInlineLists";
"walkMWithLuaFilter" -> "walkInlines";
"walkMWithLuaFilter" -> "walkMeta";
"walkMWithLuaFilter" -> "walkPandoc";
"walkMeta" -> "runOnValue";
"walkPandoc" -> "pandocFilterNames";
"walkPandoc" -> "runFilterFunction";
"walkPandoc" -> "singleElement";
"walkPandoc" -> "x";
"walkSingletonsListM" -> "a";
"when" -> "a";
"when" -> "empty";
"whitespace" -> "comment";
"whitespace" -> "endline";
"whitespace" -> "htmlComment";
"whitespace" -> "isSpaceTok";
"whitespace" -> "linebreak";
"whitespace" -> "newline";
"whitespace" -> "placeholder";
"whitespace" -> "satisfyTok";
"whitespace" -> "spaceChar";
"whitespace" -> "try";
"whitespace" -> "updateLastForbiddenCharPos";
"whitespace" -> "updateLastPreCharPos";
"whitespace" -> "updateLastSpacePos";
"whitespace\'" -> "spaceChar";
"widthsFromIndices" -> "_";
"widthsFromIndices" -> "l";
"widthsFromIndices" -> "x";
"wikiLink" -> "getT2TMeta";
"wikiLink" -> "makeLink";
"wikiLinkText" -> "linkContent";
"wikiLinkText" -> "url";
"withAttr" -> "_";
"withAttr" -> "attr";
"withAttr" -> "attributes";
"withAttr" -> "defineHowTo";
"withAttr" -> "dimension";
"withAttr" -> "pushViaConstructor";
"withAttr" -> "sp";
"withAttr" -> "url";
"withAttr" -> "x";
"withContext" -> "a";
"withDirection" -> "elName";
"withDirection" -> "env";
"withDirection" -> "mknode";
"withDirection" -> "paraStyle";
"withDirection" -> "x";
"withEvery" -> "a";
"withEvery" -> "iterateS\'";
"withEvery" -> "prepareIteration";
"withEvery" -> "switchingTheStack";
"withEveryL" -> "a";
"withEveryL" -> "withEvery";
"withFontFeature" -> "a";
"withFontFeature" -> "addVariablesToContext";
"withFontFeature" -> "defField";
"withFontFeature" -> "endsWithPlain";
"withFontFeature" -> "fixDisplayMath";
"withFontFeature" -> "fontChange";
"withFontFeature" -> "getField";
"withFontFeature" -> "gridTable";
"withFontFeature" -> "isDisplayMath";
"withFontFeature" -> "lookupMetaBlocks";
"withFontFeature" -> "lookupMetaBool";
"withFontFeature" -> "lookupMetaInlines";
"withFontFeature" -> "lookupMetaString";
"withFontFeature" -> "metaToContext";
"withFontFeature" -> "metaToContext\'";
"withFontFeature" -> "resetField";
"withFontFeature" -> "setField";
"withFontFeature" -> "stripLeadingTrailingSpace";
"withFontFeature" -> "tagWithAttrs";
"withFontFeature" -> "toLegacyTable";
"withFontFeature" -> "toSubscript";
"withFontFeature" -> "toSuperscript";
"withFontFeature" -> "toTableOfContents";
"withFontFeature" -> "unsmartify";
"withHorizDisplacement" -> "a";
"withIntraword" -> "setIntraword";
"withLangFromAttr" -> "_";
"withLangFromAttr" -> "l";
"withLangFromAttr" -> "parseBCP47";
"withLangFromAttr" -> "report";
"withLangFromAttr" -> "withTextStyle";
"withNewStyle" -> "_";
"withNewStyle" -> "a";
"withNewStyle" -> "code";
"withNewStyle" -> "getExtraState";
"withNewStyle" -> "inlineCode";
"withNewStyle" -> "inlines";
"withNewStyle" -> "isStyleToTrace";
"withNewStyle" -> "maybeToChoice";
"withNewStyle" -> "modifierFromStyleDiff";
"withNewStyle" -> "popStyle";
"withNewStyle" -> "pushStyle";
"withNewStyle" -> "readStyleByName";
"withNewStyle" -> "stringify";
"withNewStyle" -> "toList";
"withNewStyle" -> "x";
"withNumId" -> "a";
"withNumId" -> "env";
"withParaProp" -> "a";
"withParaProp" -> "env";
"withParaProp" -> "isStyle";
"withParaPropM" -> "withParaProp";
"withParagraphStyle" -> "_";
"withParagraphStyle" -> "blockToOpenDocument";
"withParagraphStyle" -> "empty";
"withParagraphStyle" -> "inParagraphTagsWithStyle";
"withParagraphStyle" -> "inlinesToOpenDocument";
"withParagraphStyle" -> "l";
"withParagraphStyle" -> "withParagraphStyle";
"withPaths" -> "_";
"withPaths" -> "withPaths";
"withRaw" -> "_";
"withRaw" -> "a";
"withRaw" -> "anyTok";
"withRaw" -> "l";
"withRaw" -> "raw";
"withState" -> "a";
"withSubStateF" -> "a";
"withSubStateF" -> "keepingTheValue";
"withSubStateF" -> "withSubStateF\'";
"withSubStateF" -> "x";
"withSubStateF\'" -> "_";
"withSubStateF\'" -> "a";
"withSubStateF\'" -> "x";
"withTextProp" -> "a";
"withTextProp" -> "env";
"withTextProp" -> "isStyle";
"withTextPropM" -> "withTextProp";
"withTextStyle" -> "addTextStyleAttr";
"word" -> "isWordTok";
"word" -> "satisfyTok";
"word" -> "str";
"word" -> "untoken";
"wordBoundaries" -> "markupChars";
"wordBoundaries" -> "stringBreakers";
"wordChunk" -> "markupChars";
"wordChunk" -> "notFollowedBy\'";
"wordChunk" -> "note";
"wordChunk" -> "try";
"wordChunk" -> "wordBoundaries";
"wrap" -> "a";
"wrap" -> "cMapM";
"wrap" -> "el";
"wrap" -> "inlines";
"wrap" -> "toXml";
"wrapBookmark" -> "getUniqueId";
"wrapBookmark" -> "mknode";
"wrapBookmark" -> "toBookmarkName";
"wrapDiv" -> "_";
"wrapDiv" -> "blankline";
"wrapDiv" -> "inCmd";
"wrapDiv" -> "l";
"wrapDiv" -> "literal";
"wrapDiv" -> "mapAlignment";
"wrapDiv" -> "options";
"wrapDiv" -> "safeRead";
"wrapDiv" -> "showFl";
"wrapDiv" -> "t";
"wrapDiv" -> "toLang";
"wrapDiv" -> "toPolyglossiaEnv";
"wrapDiv" -> "txt";
"wrapDiv" -> "x";
"wrapTop" -> "blocks";
"wrapTop" -> "meta";
"wrappedBlocksToJATS" -> "blockToJATS";
"wrappedBlocksToJATS" -> "inTags";
"wrappedBlocksToJATS" -> "vcat";
"writeAsciiDoc" -> "defaultWriterState";
"writeAsciiDoc" -> "pandocToAsciiDoc";
"writeAsciiDoctor" -> "defaultWriterState";
"writeAsciiDoctor" -> "pandocToAsciiDoc";
"writeBeamer" -> "options";
"writeBeamer" -> "pandocToLaTeX";
"writeBeamer" -> "startingState";
"writeCommonMark" -> "evalMD";
"writeCommonMark" -> "pandocToMarkdown";
"writeConTeXt" -> "defaultWriterState";
"writeConTeXt" -> "options";
"writeConTeXt" -> "pandocToConTeXt";
"writeCslJson" -> "_";
"writeCslJson" -> "l";
"writeCslJson" -> "meta";
"writeCslJson" -> "metaValueToReference";
"writeCslJson" -> "metaValueToText";
"writeCslJson" -> "toCslJson";
"writeCustom" -> "_";
"writeCustom" -> "blockListToCustom";
"writeCustom" -> "docToCustom";
"writeCustom" -> "dofileWithTraceback";
"writeCustom" -> "inlineListToCustom";
"writeCustom" -> "literal";
"writeCustom" -> "meta";
"writeCustom" -> "metaToContext";
"writeCustom" -> "runLua";
"writeCustom" -> "setField";
"writeCustom" -> "setGlobals";
"writeCustom" -> "when";
"writeDZSlides" -> "writeHtmlSlideShow\'";
"writeDocbook" -> "_";
"writeDocbook" -> "authorToDocbook";
"writeDocbook" -> "blocks";
"writeDocbook" -> "blocksToDocbook";
"writeDocbook" -> "defField";
"writeDocbook" -> "getStartLvl";
"writeDocbook" -> "inlinesToDocbook";
"writeDocbook" -> "makeSections";
"writeDocbook" -> "meta";
"writeDocbook" -> "metaToContext";
"writeDocbook" -> "toEntities";
"writeDocbook4" -> "writeDocbook";
"writeDocbook5" -> "writeDocbook";
"writeDocx" -> "_";
"writeDocx" -> "addLang";
"writeDocx" -> "blocks";
"writeDocx" -> "copyChildren";
"writeDocx" -> "defaultWriterEnv";
"writeDocx" -> "defaultWriterState";
"writeDocx" -> "elContent";
"writeDocx" -> "elName";
"writeDocx" -> "env";
"writeDocx" -> "findAttr";
"writeDocx" -> "findAttrTextBy";
"writeDocx" -> "fixDisplayMath";
"writeDocx" -> "getLang";
"writeDocx" -> "getMimeTypeDef";
"writeDocx" -> "getStyleMaps";
"writeDocx" -> "hasStyleName";
"writeDocx" -> "l";
"writeDocx" -> "lookupAttrTextBy";
"writeDocx" -> "lookupMetaBlocks";
"writeDocx" -> "lookupMetaInlines";
"writeDocx" -> "lookupMetaString";
"writeDocx" -> "makeSections";
"writeDocx" -> "meta";
"writeDocx" -> "mkNumbering";
"writeDocx" -> "mknode";
"writeDocx" -> "mktnode";
"writeDocx" -> "newParaPropToOpenXml";
"writeDocx" -> "newTextPropToOpenXml";
"writeDocx" -> "parseXml";
"writeDocx" -> "renderLang";
"writeDocx" -> "renderXml";
"writeDocx" -> "renumIdMap";
"writeDocx" -> "renumIds";
"writeDocx" -> "safeRead";
"writeDocx" -> "stringify";
"writeDocx" -> "styleToOpenXml";
"writeDocx" -> "t";
"writeDocx" -> "toLang";
"writeDocx" -> "toLazy";
"writeDocx" -> "writeOpenXML";
"writeDocx" -> "x";
"writeDokuWiki" -> "a";
"writeDokuWiki" -> "pandocToDokuWiki";
"writeDokuWiki" -> "runDokuWiki";
"writeEPUB" -> "pandocToEPUB";
"writeEPUB2" -> "writeEPUB";
"writeEPUB3" -> "writeEPUB";
"writeFB2" -> "newFB";
"writeFB2" -> "pandocToFB2";
"writeFile" -> "writeFileWith";
"writeFileWith" -> "encodePath";
"writeFileWith" -> "eol";
"writeFileWith" -> "hPutStrWith";
"writeHaddock" -> "pandocToHaddock";
"writeHtml4" -> "defaultWriterState";
"writeHtml4" -> "writeHtml\'";
"writeHtml4String" -> "defaultWriterState";
"writeHtml4String" -> "writeHtmlString\'";
"writeHtml5" -> "defaultWriterState";
"writeHtml5" -> "writeHtml\'";
"writeHtml5String" -> "defaultWriterState";
"writeHtml5String" -> "writeHtmlString\'";
"writeHtmlInlines" -> "writeHtml5String";
"writeHtmlSlideShow\'" -> "defaultWriterState";
"writeHtmlSlideShow\'" -> "writeHtmlString\'";
"writeHtmlStringForEPUB" -> "defaultWriterState";
"writeHtmlStringForEPUB" -> "writeHtmlString\'";
"writeHtmlString\'" -> "_";
"writeHtmlString\'" -> "defField";
"writeHtmlString\'" -> "getField";
"writeHtmlString\'" -> "pandocToHtml";
"writeHtmlString\'" -> "renderHtml\'";
"writeHtmlString\'" -> "report";
"writeHtmlString\'" -> "resetField";
"writeHtmlString\'" -> "toEntities";
"writeHtmlString\'" -> "when";
"writeHtmlString\'" -> "x";
"writeHtml\'" -> "_";
"writeHtml\'" -> "pandocToHtml";
"writeHtml\'" -> "writeHtmlString\'";
"writeICML" -> "blocks";
"writeICML" -> "blocksToICML";
"writeICML" -> "charStylesToDoc";
"writeICML" -> "defField";
"writeICML" -> "defaultWriterState";
"writeICML" -> "hyperlinksToDoc";
"writeICML" -> "inlinesToICML";
"writeICML" -> "meta";
"writeICML" -> "metaToContext";
"writeICML" -> "parStylesToDoc";
"writeICML" -> "toEntities";
"writeInlines" -> "inlineToRST";
"writeIpynb" -> "pandocToNotebook";
"writeJATS" -> "writeJatsArchiving";
"writeJSON" -> "_";
"writeJSON" -> "encode";
"writeJSON" -> "fromTable";
"writeJSON" -> "toTable";
"writeJats" -> "blockToJATS";
"writeJats" -> "docToJATS";
"writeJats" -> "environment";
"writeJats" -> "inlinesToJATS";
"writeJatsArchiving" -> "writeJats";
"writeJatsArticleAuthoring" -> "writeJats";
"writeJatsPublishing" -> "writeJats";
"writeJira" -> "pandocToJira";
"writeJira" -> "runDefaultConverter";
"writeLaTeX" -> "options";
"writeLaTeX" -> "pandocToLaTeX";
"writeLaTeX" -> "startingState";
"writeMan" -> "defaultWriterState";
"writeMan" -> "pandocToMan";
"writeMarkdown" -> "evalMD";
"writeMarkdown" -> "isEnabled";
"writeMarkdown" -> "pandocToMarkdown";
"writeMedia" -> "_";
"writeMedia" -> "liftIOError";
"writeMedia" -> "logIOError";
"writeMedia" -> "lookupMedia";
"writeMedia" -> "report";
"writeMediaWiki" -> "env";
"writeMediaWiki" -> "options";
"writeMediaWiki" -> "pandocToMediaWiki";
"writeMs" -> "defaultWriterState";
"writeMs" -> "pandocToMs";
"writeMuse" -> "env";
"writeMuse" -> "evalMuse";
"writeMuse" -> "pandocToMuse";
"writeNative" -> "_";
"writeNative" -> "blocks";
"writeNative" -> "fixDisplayMath";
"writeNative" -> "meta";
"writeNative" -> "prettyBlock";
"writeNative" -> "prettyList";
"writeODT" -> "pandocToODT";
"writeOPML" -> "blockToOPML";
"writeOPML" -> "blocks";
"writeOPML" -> "convertDate";
"writeOPML" -> "defField";
"writeOPML" -> "literal";
"writeOPML" -> "makeSections";
"writeOPML" -> "meta";
"writeOPML" -> "metaToContext";
"writeOPML" -> "toEntities";
"writeOPML" -> "vcat";
"writeOPML" -> "writeMarkdown";
"writeOpenDocument" -> "_";
"writeOpenDocument" -> "blocks";
"writeOpenDocument" -> "blocksToOpenDocument";
"writeOpenDocument" -> "defField";
"writeOpenDocument" -> "defaultWriterState";
"writeOpenDocument" -> "formulaStyles";
"writeOpenDocument" -> "inTags";
"writeOpenDocument" -> "inlinesToOpenDocument";
"writeOpenDocument" -> "l";
"writeOpenDocument" -> "lookupMetaBlocks";
"writeOpenDocument" -> "lookupMetaString";
"writeOpenDocument" -> "meta";
"writeOpenDocument" -> "metaToContext";
"writeOpenDocument" -> "nl";
"writeOpenDocument" -> "setTranslations";
"writeOpenDocument" -> "toLang";
"writeOpenDocument" -> "tshow";
"writeOpenDocument" -> "vcat";
"writeOpenXML" -> "authors";
"writeOpenXML" -> "blocks";
"writeOpenXML" -> "blocksToOpenXML";
"writeOpenXML" -> "inlinesToOpenXML";
"writeOpenXML" -> "lookupMetaBlocks";
"writeOpenXML" -> "lookupMetaBool";
"writeOpenXML" -> "lookupMetaInlines";
"writeOpenXML" -> "makeTOC";
"writeOpenXML" -> "meta";
"writeOpenXML" -> "mknode";
"writeOpenXML" -> "pStyleM";
"writeOpenXML" -> "setFirstPara";
"writeOpenXML" -> "title";
"writeOpenXML" -> "withParaPropM";
"writeOpenXML" -> "x";
"writeOrg" -> "pandocToOrg";
"writePlain" -> "evalMD";
"writePlain" -> "pandocToMarkdown";
"writePowerpoint" -> "documentToPresentation";
"writePowerpoint" -> "fixDisplayMath";
"writePowerpoint" -> "meta";
"writePowerpoint" -> "presentationToArchive";
"writePowerpoint" -> "report";
"writeRST" -> "pandocToRST";
"writeRTF" -> "_";
"writeRTF" -> "blockToRTF";
"writeRTF" -> "blocks";
"writeRTF" -> "blocksToRTF";
"writeRTF" -> "defField";
"writeRTF" -> "inlinesToRTF";
"writeRTF" -> "literal";
"writeRTF" -> "meta";
"writeRTF" -> "metaToContext";
"writeRTF" -> "options";
"writeRTF" -> "rtfEmbedImage";
"writeRTF" -> "toTableOfContents";
"writeRTF" -> "x";
"writeRevealJs" -> "writeHtmlSlideShow\'";
"writeS5" -> "writeHtmlSlideShow\'";
"writeSlideous" -> "writeHtmlSlideShow\'";
"writeSlidy" -> "writeHtmlSlideShow\'";
"writeTEI" -> "_";
"writeTEI" -> "blocks";
"writeTEI" -> "blocksToTEI";
"writeTEI" -> "defField";
"writeTEI" -> "inlinesToTEI";
"writeTEI" -> "makeSections";
"writeTEI" -> "meta";
"writeTEI" -> "metaToContext";
"writeTexinfo" -> "options";
"writeTexinfo" -> "pandocToTexinfo";
"writeTexinfo" -> "wrapTop";
"writeTextile" -> "pandocToTextile";
"writeXWiki" -> "_";
"writeXWiki" -> "blockListToXWiki";
"writeXWiki" -> "blocks";
"writeXWiki" -> "env";
"writeZimWiki" -> "pandocToZimWiki";
"writerFn" -> "engines";
"writerFn" -> "eol";
"writerFn" -> "lookupHighlightStyle";
"writerFn" -> "options";
"writerFn" -> "parseOptions";
"writerFn" -> "setVariable";
"writers" -> "writeAsciiDoc";
"writers" -> "writeAsciiDoctor";
"writers" -> "writeBeamer";
"writers" -> "writeCommonMark";
"writers" -> "writeConTeXt";
"writers" -> "writeCslJson";
"writers" -> "writeDZSlides";
"writers" -> "writeDocbook4";
"writers" -> "writeDocbook5";
"writers" -> "writeDocx";
"writers" -> "writeDokuWiki";
"writers" -> "writeEPUB2";
"writers" -> "writeEPUB3";
"writers" -> "writeFB2";
"writers" -> "writeHaddock";
"writers" -> "writeHtml4String";
"writers" -> "writeHtml5String";
"writers" -> "writeICML";
"writers" -> "writeIpynb";
"writers" -> "writeJSON";
"writers" -> "writeJatsArchiving";
"writers" -> "writeJatsArticleAuthoring";
"writers" -> "writeJatsPublishing";
"writers" -> "writeJira";
"writers" -> "writeLaTeX";
"writers" -> "writeMan";
"writers" -> "writeMarkdown";
"writers" -> "writeMediaWiki";
"writers" -> "writeMs";
"writers" -> "writeMuse";
"writers" -> "writeNative";
"writers" -> "writeODT";
"writers" -> "writeOPML";
"writers" -> "writeOpenDocument";
"writers" -> "writeOrg";
"writers" -> "writePlain";
"writers" -> "writePowerpoint";
"writers" -> "writeRST";
"writers" -> "writeRTF";
"writers" -> "writeRevealJs";
"writers" -> "writeS5";
"writers" -> "writeSlideous";
"writers" -> "writeSlidy";
"writers" -> "writeTEI";
"writers" -> "writeTexinfo";
"writers" -> "writeTextile";
"writers" -> "writeXWiki";
"writers" -> "writeZimWiki";
"writersNames" -> "writers";
"x" -> "closes";
"yamlBsToMeta" -> "_";
"yamlBsToMeta" -> "yamlMap";
"yamlBsToRefs" -> "_";
"yamlBsToRefs" -> "lookupYAML";
"yamlBsToRefs" -> "nodeToKey";
"yamlBsToRefs" -> "t";
"yamlBsToRefs" -> "yamlToMetaValue";
"yamlMap" -> "nodeToKey";
"yamlMap" -> "t";
"yamlMap" -> "yamlToMetaValue";
"yamlMetaBlock" -> "anyLine";
"yamlMetaBlock" -> "blankline";
"yamlMetaBlock" -> "blanklines";
"yamlMetaBlock" -> "guardEnabled";
"yamlMetaBlock" -> "parseBlocks";
"yamlMetaBlock" -> "stopLine";
"yamlMetaBlock" -> "try";
"yamlMetaBlock" -> "yamlBsToMeta";
"yamlMetadataBlock" -> "contextToYaml";
"yamlToMeta" -> "_";
"yamlToMeta" -> "defaultParserState";
"yamlToMeta" -> "meta";
"yamlToMeta" -> "parseBlocks";
"yamlToMeta" -> "readWithM";
"yamlToMeta" -> "runF";
"yamlToMeta" -> "runPure";
"yamlToMeta" -> "yamlBsToMeta";
"yamlToMeta" -> "yamlMap";
"yamlToMetaValue" -> "_";
"yamlToMetaValue" -> "checkBoolean";
"yamlToMetaValue" -> "normalizeMetaValue";
"yamlToMetaValue" -> "t";
"yamlToMetaValue" -> "tshow";
"yamlToMetaValue" -> "x";
"yamlToMetaValue" -> "yamlMap";
"yamlToMetaValue" -> "yamlToMetaValue";
"yamlToRefs" -> "defaultParserState";
"yamlToRefs" -> "parseBlocks";
"yamlToRefs" -> "readWithM";
"yamlToRefs" -> "runF";
"yamlToRefs" -> "yamlBsToRefs";
}
