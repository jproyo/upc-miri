strict digraph deps {
"_bind" [style=solid];
"all" [style=solid];
"and" [style=solid];
"any" [style=solid];
"catchError" [style=solid];
"chain" [style=solid];
"closed" [style=solid];
"concat" [style=solid];
"distribute" [style=solid];
"drain" [style=solid];
"drop" [style=solid];
"dropWhile" [style=solid];
"elem" [style=solid];
"elemIndices" [style=solid];
"evalRWSP" [style=solid];
"evalStateP" [style=solid];
"exceptP" [style=solid];
"execRWSP" [style=solid];
"execStateP" [style=solid];
"execWriterP" [style=solid];
"f" [style=solid];
"fb\'" [style=solid];
"filter" [style=solid];
"filterM" [style=solid];
"find" [style=solid];
"findIndex" [style=solid];
"findIndices" [style=solid];
"fold" [style=solid];
"foldM" [style=solid];
"foldM\'" [style=solid];
"fold\'" [style=solid];
"fromHandle" [style=solid];
"generalize" [style=solid];
"head" [style=solid];
"index" [style=solid];
"infixl" [style=solid];
"infixr" [style=solid];
"k" [style=solid];
"last" [style=solid];
"length" [style=solid];
"liftCatchError" [style=solid];
"loop" [style=solid];
"map" [style=solid];
"mapFoldable" [style=solid];
"mapM" [style=solid];
"mapM_" [style=solid];
"mapMaybe" [style=solid];
"maximum" [style=solid];
"maybeP" [style=solid];
"minimum" [style=solid];
"notElem" [style=solid];
"null" [style=solid];
"observe" [style=solid];
"or" [style=solid];
"p" [style=solid];
"p0" [style=solid];
"p1" [style=solid];
"print" [style=solid];
"product" [style=solid];
"pull" [style=solid];
"push" [style=solid];
"read" [style=solid];
"readLn" [style=solid];
"readerP" [style=solid];
"reflect" [style=solid];
"repeatM" [style=solid];
"replicateM" [style=solid];
"request" [style=solid];
"respond" [style=solid];
"runEffect" [style=solid];
"runExceptP" [style=solid];
"runMaybeP" [style=solid];
"runRWSP" [style=solid];
"runReaderP" [style=solid];
"runStateP" [style=solid];
"runWriterP" [style=solid];
"rwsP" [style=solid];
"scan" [style=solid];
"scanM" [style=solid];
"seq" [style=solid];
"sequence" [style=solid];
"show" [style=solid];
"stateP" [style=solid];
"stdinLn" [style=solid];
"stdoutLn" [style=solid];
"stdoutLn\'" [style=solid];
"sum" [style=solid];
"take" [style=solid];
"takeWhile" [style=solid];
"takeWhile\'" [style=solid];
"tee" [style=solid];
"toHandle" [style=solid];
"toList" [style=solid];
"toListM" [style=solid];
"toListM\'" [style=solid];
"unfoldr" [style=solid];
"unsafeHoist" [style=solid];
"wither" [style=solid];
"writerP" [style=solid];
"zip" [style=solid];
"zipWith" [style=solid];
"" -> "closed";
"" -> "pull";
"" -> "push";
"" -> "reflect";
"" -> "request";
"" -> "respond";
"" -> "runEffect";
"_bind" -> "_bind";
"_bind" -> "f";
"_bind" -> "p0";
"all" -> "filter";
"all" -> "null";
"all" -> "p";
"and" -> "all";
"any" -> "filter";
"any" -> "null";
"any" -> "p";
"catchError" -> "distribute";
"catchError" -> "exceptP";
"chain" -> "f";
"closed" -> "catchError";
"closed" -> "distribute";
"closed" -> "evalRWSP";
"closed" -> "evalStateP";
"closed" -> "exceptP";
"closed" -> "execRWSP";
"closed" -> "execStateP";
"closed" -> "execWriterP";
"closed" -> "liftCatchError";
"closed" -> "maybeP";
"closed" -> "readerP";
"closed" -> "runExceptP";
"closed" -> "runMaybeP";
"closed" -> "runRWSP";
"closed" -> "runReaderP";
"closed" -> "runStateP";
"closed" -> "runWriterP";
"closed" -> "rwsP";
"closed" -> "stateP";
"closed" -> "writerP";
"distribute" -> "p";
"distribute" -> "request";
"distribute" -> "respond";
"distribute" -> "runEffect";
"distribute" -> "unsafeHoist";
"dropWhile" -> "f";
"elem" -> "any";
"elemIndices" -> "findIndices";
"evalRWSP" -> "f";
"evalRWSP" -> "p";
"evalRWSP" -> "runRWSP";
"evalStateP" -> "p";
"evalStateP" -> "runStateP";
"exceptP" -> "p";
"exceptP" -> "unsafeHoist";
"execRWSP" -> "all";
"execRWSP" -> "and";
"execRWSP" -> "any";
"execRWSP" -> "chain";
"execRWSP" -> "concat";
"execRWSP" -> "drain";
"execRWSP" -> "drop";
"execRWSP" -> "dropWhile";
"execRWSP" -> "elem";
"execRWSP" -> "elemIndices";
"execRWSP" -> "f";
"execRWSP" -> "filter";
"execRWSP" -> "filterM";
"execRWSP" -> "find";
"execRWSP" -> "findIndex";
"execRWSP" -> "findIndices";
"execRWSP" -> "fold";
"execRWSP" -> "foldM";
"execRWSP" -> "foldM\'";
"execRWSP" -> "fold\'";
"execRWSP" -> "fromHandle";
"execRWSP" -> "generalize";
"execRWSP" -> "head";
"execRWSP" -> "index";
"execRWSP" -> "last";
"execRWSP" -> "length";
"execRWSP" -> "loop";
"execRWSP" -> "map";
"execRWSP" -> "mapFoldable";
"execRWSP" -> "mapM";
"execRWSP" -> "mapM_";
"execRWSP" -> "mapMaybe";
"execRWSP" -> "maximum";
"execRWSP" -> "minimum";
"execRWSP" -> "notElem";
"execRWSP" -> "null";
"execRWSP" -> "or";
"execRWSP" -> "p";
"execRWSP" -> "print";
"execRWSP" -> "product";
"execRWSP" -> "read";
"execRWSP" -> "readLn";
"execRWSP" -> "repeatM";
"execRWSP" -> "replicateM";
"execRWSP" -> "runRWSP";
"execRWSP" -> "scan";
"execRWSP" -> "scanM";
"execRWSP" -> "seq";
"execRWSP" -> "sequence";
"execRWSP" -> "show";
"execRWSP" -> "stdinLn";
"execRWSP" -> "stdoutLn";
"execRWSP" -> "stdoutLn\'";
"execRWSP" -> "sum";
"execRWSP" -> "take";
"execRWSP" -> "takeWhile";
"execRWSP" -> "takeWhile\'";
"execRWSP" -> "tee";
"execRWSP" -> "toHandle";
"execRWSP" -> "toList";
"execRWSP" -> "toListM";
"execRWSP" -> "toListM\'";
"execRWSP" -> "unfoldr";
"execRWSP" -> "wither";
"execRWSP" -> "zip";
"execRWSP" -> "zipWith";
"execStateP" -> "p";
"execStateP" -> "runStateP";
"execWriterP" -> "p";
"execWriterP" -> "runWriterP";
"f" -> "f";
"f" -> "p";
"fb\'" -> "fb\'";
"fb\'" -> "p";
"find" -> "filter";
"find" -> "head";
"find" -> "p";
"findIndex" -> "findIndices";
"findIndex" -> "head";
"findIndex" -> "p";
"fold" -> "closed";
"fold" -> "p";
"fold" -> "p0";
"foldM" -> "closed";
"foldM" -> "p";
"foldM" -> "p0";
"foldM\'" -> "closed";
"foldM\'" -> "p";
"foldM\'" -> "p0";
"fold\'" -> "closed";
"fold\'" -> "p";
"fold\'" -> "p0";
"generalize" -> "evalStateP";
"generalize" -> "p";
"generalize" -> "request";
"generalize" -> "respond";
"head" -> "p";
"index" -> "drop";
"index" -> "head";
"index" -> "p";
"k" -> "_bind";
"k" -> "closed";
"k" -> "f";
"k" -> "fb\'";
"k" -> "k";
"k" -> "observe";
"k" -> "p";
"k" -> "p0";
"k" -> "unsafeHoist";
"last" -> "p";
"last" -> "p0";
"length" -> "fold";
"liftCatchError" -> "f";
"liftCatchError" -> "fb\'";
"liftCatchError" -> "p";
"liftCatchError" -> "p0";
"loop" -> "k";
"map" -> "f";
"mapFoldable" -> "f";
"mapM" -> "f";
"mapM_" -> "f";
"mapMaybe" -> "f";
"maximum" -> "fold";
"maybeP" -> "p";
"maybeP" -> "unsafeHoist";
"minimum" -> "fold";
"notElem" -> "all";
"null" -> "p";
"observe" -> "fb\'";
"observe" -> "observe";
"observe" -> "p";
"observe" -> "p0";
"or" -> "any";
"p" -> "fb\'";
"p" -> "k";
"p" -> "p";
"p0" -> "f";
"p0" -> "fb\'";
"p0" -> "p";
"p0" -> "p1";
"p1" -> "f";
"p1" -> "p";
"p1" -> "p1";
"product" -> "fold";
"pull" -> "fb\'";
"pull" -> "p";
"push" -> "p";
"readLn" -> "read";
"readLn" -> "stdinLn";
"readerP" -> "k";
"readerP" -> "unsafeHoist";
"reflect" -> "fb\'";
"reflect" -> "p";
"reflect" -> "p1";
"replicateM" -> "take";
"request" -> "fb\'";
"request" -> "p0";
"respond" -> "p0";
"runEffect" -> "closed";
"runEffect" -> "p";
"runExceptP" -> "distribute";
"runMaybeP" -> "distribute";
"runMaybeP" -> "p";
"runRWSP" -> "distribute";
"runRWSP" -> "p";
"runReaderP" -> "distribute";
"runReaderP" -> "p";
"runStateP" -> "distribute";
"runStateP" -> "p";
"runWriterP" -> "distribute";
"runWriterP" -> "p";
"rwsP" -> "k";
"rwsP" -> "unsafeHoist";
"sequence" -> "mapM";
"show" -> "map";
"stateP" -> "k";
"stateP" -> "unsafeHoist";
"stdinLn" -> "fromHandle";
"sum" -> "fold";
"tee" -> "closed";
"tee" -> "evalStateP";
"tee" -> "p";
"toList" -> "closed";
"toListM" -> "fold";
"toListM\'" -> "fold\'";
"unsafeHoist" -> "catchError";
"unsafeHoist" -> "f";
"unsafeHoist" -> "fb\'";
"unsafeHoist" -> "observe";
"unsafeHoist" -> "p";
"unsafeHoist" -> "p0";
"wither" -> "f";
"writerP" -> "p";
"writerP" -> "unsafeHoist";
"zip" -> "zipWith";
"zipWith" -> "f";
"zipWith" -> "p1";
}
