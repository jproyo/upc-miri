strict digraph deps {
"action" [style=solid];
"added" [style=solid];
"agile" [style=solid];
"alpha" [style=solid];
"alphaNum" [style=solid];
"animals" [style=solid];
"annotate" [style=solid];
"annotateShow" [style=solid];
"annotateSummary" [style=solid];
"arbitrary" [style=solid];
"ascii" [style=solid];
"assert" [style=solid];
"atLeast" [style=solid];
"binit" [style=solid];
"boats" [style=solid];
"bool" [style=solid];
"bool_" [style=solid];
"bounds" [style=solid];
"boundsForLabel" [style=solid];
"bracketLog" [style=solid];
"bytes" [style=solid];
"callbackEnsure" [style=solid];
"callbackEnsure1" [style=solid];
"callbackRequire" [style=solid];
"callbackRequire1" [style=solid];
"callbackUpdate" [style=solid];
"callbackUpdate1" [style=solid];
"catMaybes" [style=solid];
"cats" [style=solid];
"cheap" [style=solid];
"check" [style=solid];
"checkActions" [style=solid];
"checkGroup" [style=solid];
"checkGroupWith" [style=solid];
"checkNamed" [style=solid];
"checkParallel" [style=solid];
"checkRegion" [style=solid];
"checkReport" [style=solid];
"checkSequential" [style=solid];
"choice" [style=solid];
"clamp" [style=solid];
"classified" [style=solid];
"classify" [style=solid];
"collapseOpen" [style=solid];
"collect" [style=solid];
"colours" [style=solid];
"commandGenOK" [style=solid];
"concrete" [style=solid];
"confidenceFailure" [style=solid];
"confidenceSuccess" [style=solid];
"consNub" [style=solid];
"constant" [style=solid];
"constantBounded" [style=solid];
"constantFrom" [style=solid];
"contextNewVar" [style=solid];
"contextUpdate" [style=solid];
"cooking" [style=solid];
"cover" [style=solid];
"coverPercentage" [style=solid];
"coverageFailures" [style=solid];
"coverageSuccess" [style=solid];
"coverageWidth" [style=solid];
"declarations" [style=solid];
"defaultConfidence" [style=solid];
"defaultConfig" [style=solid];
"defaultMain" [style=solid];
"defaultMinTests" [style=solid];
"defaultStyle" [style=solid];
"depth" [style=solid];
"dequeueMVar" [style=solid];
"detectColor" [style=solid];
"detectMark" [style=solid];
"detectVerbosity" [style=solid];
"detectWorkers" [style=solid];
"diff" [style=solid];
"digit" [style=solid];
"discard" [style=solid];
"discover" [style=solid];
"discoverPrefix" [style=solid];
"displayRegion" [style=solid];
"displayRegions" [style=solid];
"distributeGenT" [style=solid];
"distributeNodeT" [style=solid];
"distributeTreeT" [style=solid];
"double" [style=solid];
"dropInvalid" [style=solid];
"dropLeadingSep" [style=solid];
"dropSome" [style=solid];
"either" [style=solid];
"either_" [style=solid];
"element" [style=solid];
"embedGenT" [style=solid];
"embedMaybeT" [style=solid];
"embedNodeT" [style=solid];
"embedTreeMaybeT" [style=solid];
"embedTreeT" [style=solid];
"emptyEnvironment" [style=solid];
"ensure" [style=solid];
"enum" [style=solid];
"enumBounded" [style=solid];
"eval" [style=solid];
"evalEither" [style=solid];
"evalEitherM" [style=solid];
"evalExceptT" [style=solid];
"evalExp" [style=solid];
"evalGen" [style=solid];
"evalGenT" [style=solid];
"evalIO" [style=solid];
"evalM" [style=solid];
"evalMaybe" [style=solid];
"evalMaybeM" [style=solid];
"evalNF" [style=solid];
"evaluate" [style=solid];
"execute" [style=solid];
"executeParallel" [style=solid];
"executeSequential" [style=solid];
"executeUpdateEnsure" [style=solid];
"expand" [style=solid];
"expensive" [style=solid];
"exponential" [style=solid];
"exponentialBounded" [style=solid];
"exponentialFloat" [style=solid];
"exponentialFloatFrom" [style=solid];
"exponentialFrom" [style=solid];
"failDiff" [style=solid];
"failException" [style=solid];
"failExceptionWith" [style=solid];
"failWith" [style=solid];
"failure" [style=solid];
"filter" [style=solid];
"filterMaybeT" [style=solid];
"filterT" [style=solid];
"finalizeTask" [style=solid];
"findDeclarations" [style=solid];
"findM" [style=solid];
"findProperties" [style=solid];
"finishRegion" [style=solid];
"flattenTree" [style=solid];
"float" [style=solid];
"foo" [style=solid];
"footnote" [style=solid];
"footnoteShow" [style=solid];
"forAll" [style=solid];
"forAllT" [style=solid];
"forAllWith" [style=solid];
"forAllWithT" [style=solid];
"forget" [style=solid];
"free" [style=solid];
"free\'" [style=solid];
"freeze" [style=solid];
"frequency" [style=solid];
"from" [style=solid];
"fromLabel" [style=solid];
"fromNodeT" [style=solid];
"fromPred" [style=solid];
"fromResult" [style=solid];
"fromSubterms" [style=solid];
"fromTree" [style=solid];
"fromTreeMaybeT" [style=solid];
"fromTreeT" [style=solid];
"fruits" [style=solid];
"genActions" [style=solid];
"genExp1" [style=solid];
"genExp2" [style=solid];
"genFoo" [style=solid];
"genIllTypedApp" [style=solid];
"genIllTypedExpr" [style=solid];
"genInt" [style=solid];
"genKnownTypeMaybe" [style=solid];
"genList" [style=solid];
"genName" [style=solid];
"genRecord" [style=solid];
"genSeed" [style=solid];
"genStateInt" [style=solid];
"genSubterms" [style=solid];
"genToGloop" [style=solid];
"genToken" [style=solid];
"genTokens" [style=solid];
"genType" [style=solid];
"genWellTypedApp" [style=solid];
"genWellTypedExpr" [style=solid];
"genWellTypedExpr\'" [style=solid];
"genWellTypedExpr\'\'" [style=solid];
"genWellTypedPath" [style=solid];
"genWriterInt" [style=solid];
"genWriterList" [style=solid];
"generalize" [style=solid];
"generate" [style=solid];
"getCaller" [style=solid];
"getCurrentFile" [style=solid];
"glass" [style=solid];
"global" [style=solid];
"gloopToGen" [style=solid];
"golden" [style=solid];
"goldenGamma" [style=solid];
"gutter" [style=solid];
"halves" [style=solid];
"handleErrorNodeT" [style=solid];
"handleErrorTreeT" [style=solid];
"handleNodeT" [style=solid];
"handleTreeT" [style=solid];
"hedgehog" [style=solid];
"hexit" [style=solid];
"icon" [style=solid];
"incRef" [style=solid];
"infix" [style=solid];
"infixr" [style=solid];
"initialState" [style=solid];
"insertConcrete" [style=solid];
"insertSymbolic" [style=solid];
"insertVar" [style=solid];
"int" [style=solid];
"int16" [style=solid];
"int32" [style=solid];
"int64" [style=solid];
"int8" [style=solid];
"integral" [style=solid];
"integral_" [style=solid];
"interleave" [style=solid];
"interleaveTreeT" [style=solid];
"ioRegister" [style=solid];
"ioReset" [style=solid];
"ioSpawn" [style=solid];
"ioUnregister" [style=solid];
"isDeclaration" [style=solid];
"isFailure" [style=solid];
"isNoncharacter" [style=solid];
"isSuccess" [style=solid];
"isSurrogate" [style=solid];
"isWhitespace" [style=solid];
"joinBlocks" [style=solid];
"journalCoverage" [style=solid];
"just" [style=solid];
"justT" [style=solid];
"label" [style=solid];
"labelCovered" [style=solid];
"labelWidth" [style=solid];
"lastLineSpan" [style=solid];
"latin1" [style=solid];
"lineDiff" [style=solid];
"lineSpan" [style=solid];
"linear" [style=solid];
"linearBounded" [style=solid];
"linearFrac" [style=solid];
"linearFracFrom" [style=solid];
"linearFrom" [style=solid];
"linearize" [style=solid];
"list" [style=solid];
"listTE" [style=solid];
"listenNodeT" [style=solid];
"listenTreeT" [style=solid];
"localNodeT" [style=solid];
"localTreeT" [style=solid];
"lookupBool" [style=solid];
"lower" [style=solid];
"lowerBound" [style=solid];
"map" [style=solid];
"mapConfig" [style=solid];
"mapGenT" [style=solid];
"mapMaybe" [style=solid];
"mapMaybeMaybeT" [style=solid];
"mapMaybeT" [style=solid];
"mapSource" [style=solid];
"mapTreeT" [style=solid];
"markup" [style=solid];
"maximum" [style=solid];
"maybe" [style=solid];
"merge" [style=solid];
"mergeDeclaration" [style=solid];
"mergeDeclarations" [style=solid];
"mergeLine" [style=solid];
"metasyntactic" [style=solid];
"mix32" [style=solid];
"mix64" [style=solid];
"mix64variant13" [style=solid];
"mixGamma" [style=solid];
"mkContext" [style=solid];
"mkDocDiff" [style=solid];
"mkFailure" [style=solid];
"mkLineDiff" [style=solid];
"mkNamedProperty" [style=solid];
"mkQQ" [style=solid];
"mkTest" [style=solid];
"mkTestT" [style=solid];
"mkValue" [style=solid];
"moduleName" [style=solid];
"moveToBottom" [style=solid];
"muppets" [style=solid];
"newEmptyRegion" [style=solid];
"newOpenRegion" [style=solid];
"newRef" [style=solid];
"next" [style=solid];
"nextDouble" [style=solid];
"nextInteger" [style=solid];
"nextWord32" [style=solid];
"nextWord64" [style=solid];
"nfl" [style=solid];
"nhl" [style=solid];
"nonEmpty" [style=solid];
"normalLog" [style=solid];
"octit" [style=solid];
"oneLiner" [style=solid];
"opaque" [style=solid];
"openRegion" [style=solid];
"order" [style=solid];
"origin" [style=solid];
"parallel" [style=solid];
"parse" [style=solid];
"parseDouble" [style=solid];
"parseInt" [style=solid];
"parseToken" [style=solid];
"parseTokens" [style=solid];
"parseVar" [style=solid];
"passNodeT" [style=solid];
"passTreeT" [style=solid];
"pattern" [style=solid];
"pidRef" [style=solid];
"positioned" [style=solid];
"ppCoverBar" [style=solid];
"ppCoverPercentage" [style=solid];
"ppCoverage" [style=solid];
"ppDeclaration" [style=solid];
"ppDiff" [style=solid];
"ppDiscardCount" [style=solid];
"ppFailedAtLocation" [style=solid];
"ppFailedInput" [style=solid];
"ppFailedInputDeclaration" [style=solid];
"ppFailedInputTypedArgument" [style=solid];
"ppFailureLocation" [style=solid];
"ppFailureReport" [style=solid];
"ppLabel" [style=solid];
"ppLabelName" [style=solid];
"ppLeftPad" [style=solid];
"ppLineDiff" [style=solid];
"ppName" [style=solid];
"ppProgress" [style=solid];
"ppRawPropertyCount" [style=solid];
"ppReproduce" [style=solid];
"ppResult" [style=solid];
"ppShow" [style=solid];
"ppShrinkCount" [style=solid];
"ppShrinkDiscard" [style=solid];
"ppSummary" [style=solid];
"ppTestCount" [style=solid];
"ppTextLines" [style=solid];
"ppWhenNonZero" [style=solid];
"ppWithDiscardCount" [style=solid];
"pretty" [style=solid];
"price" [style=solid];
"print" [style=solid];
"printTree" [style=solid];
"printTreeWith" [style=solid];
"printWith" [style=solid];
"procTable" [style=solid];
"prop_assert" [style=solid];
"prop_classify" [style=solid];
"prop_collect" [style=solid];
"prop_consistent" [style=solid];
"prop_cover_bool" [style=solid];
"prop_cover_number" [style=solid];
"prop_different_record" [style=solid];
"prop_discard" [style=solid];
"prop_discard_limit" [style=solid];
"prop_equals" [style=solid];
"prop_evalNF_failure" [style=solid];
"prop_evalNF_success" [style=solid];
"prop_failure" [style=solid];
"prop_foo" [style=solid];
"prop_hutton_1" [style=solid];
"prop_hutton_2" [style=solid];
"prop_idempotent" [style=solid];
"prop_idempotent1" [style=solid];
"prop_idempotent2" [style=solid];
"prop_idempotent3" [style=solid];
"prop_idempotent4" [style=solid];
"prop_idempotent5" [style=solid];
"prop_idempotent6" [style=solid];
"prop_illtyped" [style=solid];
"prop_label" [style=solid];
"prop_list" [style=solid];
"prop_logged_unix_sort" [style=solid];
"prop_logged_unix_sort_bracket" [style=solid];
"prop_occupy" [style=solid];
"prop_property_exception" [style=solid];
"prop_record" [style=solid];
"prop_references_parallel" [style=solid];
"prop_references_sequential" [style=solid];
"prop_registry_parallel" [style=solid];
"prop_registry_sequential" [style=solid];
"prop_reverse" [style=solid];
"prop_reverse_mixed" [style=solid];
"prop_shrink_limit" [style=solid];
"prop_state_list" [style=solid];
"prop_success" [style=solid];
"prop_takeEnd" [style=solid];
"prop_test_limit" [style=solid];
"prop_total" [style=solid];
"prop_trip" [style=solid];
"prop_unix_sort" [style=solid];
"prop_welltyped" [style=solid];
"prop_without_confidence" [style=solid];
"prop_world_cup_titles_2018" [style=solid];
"prop_writer_list" [style=solid];
"property" [style=solid];
"prune" [style=solid];
"quickcheck" [style=solid];
"random" [style=solid];
"readDeclaration" [style=solid];
"readFileSafe" [style=solid];
"readProperties" [style=solid];
"readRef" [style=solid];
"realFloat" [style=solid];
"realFrac_" [style=solid];
"recheck" [style=solid];
"recursive" [style=solid];
"register" [style=solid];
"reify" [style=solid];
"reifyDynamic" [style=solid];
"reifyEnvironment" [style=solid];
"removed" [style=solid];
"removes" [style=solid];
"render" [style=solid];
"renderAction" [style=solid];
"renderActionResult" [style=solid];
"renderCoverPercentage" [style=solid];
"renderDoc" [style=solid];
"renderForestLines" [style=solid];
"renderLineDiff" [style=solid];
"renderLog" [style=solid];
"renderNodeT" [style=solid];
"renderParallel" [style=solid];
"renderProgress" [style=solid];
"renderResult" [style=solid];
"renderSummary" [style=solid];
"renderT" [style=solid];
"renderToken" [style=solid];
"renderTree" [style=solid];
"renderTreeTLines" [style=solid];
"renderValue" [style=solid];
"renderValueDiff" [style=solid];
"resize" [style=solid];
"resolveColor" [style=solid];
"resolveVerbosity" [style=solid];
"resolveWorkers" [style=solid];
"return" [style=solid];
"round6" [style=solid];
"runActiveFinalizers" [style=solid];
"runDiscardEffect" [style=solid];
"runDiscardEffectT" [style=solid];
"runGenT" [style=solid];
"runTasks" [style=solid];
"runTest" [style=solid];
"runTestT" [style=solid];
"runTree" [style=solid];
"runTreeMaybeT" [style=solid];
"runTreeN" [style=solid];
"same" [style=solid];
"sample" [style=solid];
"scale" [style=solid];
"scaleExponential" [style=solid];
"scaleExponentialFloat" [style=solid];
"scaleLinear" [style=solid];
"scaleLinearFrac" [style=solid];
"seedQCGen" [style=solid];
"seq" [style=solid];
"sequential" [style=solid];
"set" [style=solid];
"setRegion" [style=solid];
"showPretty" [style=solid];
"shrink" [style=solid];
"shrinkExp2" [style=solid];
"shrinkExpr" [style=solid];
"shrinkOne" [style=solid];
"shrinkSubterms" [style=solid];
"shuffle" [style=solid];
"shuffleSeq" [style=solid];
"simpsons" [style=solid];
"singleton" [style=solid];
"sized" [style=solid];
"small" [style=solid];
"southpark" [style=solid];
"spaces" [style=solid];
"spawn" [style=solid];
"split" [style=solid];
"splits" [style=solid];
"string" [style=solid];
"subsequence" [style=solid];
"subst" [style=solid];
"subterm" [style=solid];
"subterm2" [style=solid];
"subterm3" [style=solid];
"subtermM" [style=solid];
"subtermM2" [style=solid];
"subtermM3" [style=solid];
"subtermMVec" [style=solid];
"success" [style=solid];
"successful" [style=solid];
"summaryCompleted" [style=solid];
"summaryTotal" [style=solid];
"tagWithName" [style=solid];
"takeAnnotation" [style=solid];
"takeFootnote" [style=solid];
"takeHead" [style=solid];
"takeLeft" [style=solid];
"takeLines" [style=solid];
"takeName" [style=solid];
"takeRight" [style=solid];
"takeSmallest" [style=solid];
"takeSymbolic" [style=solid];
"takeVariables" [style=solid];
"test" [style=solid];
"tests" [style=solid];
"text" [style=solid];
"toCoverCount" [style=solid];
"toLineDiff" [style=solid];
"toTree" [style=solid];
"toTreeMaybeT" [style=solid];
"total" [style=solid];
"towards" [style=solid];
"towardsFloat" [style=solid];
"treeChildren" [style=solid];
"treeValue" [style=solid];
"trimEnd" [style=solid];
"tripping" [style=solid];
"tryAll" [style=solid];
"tryEvaluate" [style=solid];
"typecheck" [style=solid];
"typecheck\'" [style=solid];
"unfold" [style=solid];
"unfoldForest" [style=solid];
"unicode" [style=solid];
"unicodeAll" [style=solid];
"unionsCoverage" [style=solid];
"unionsEnvironment" [style=solid];
"uniqueByKey" [style=solid];
"uniqueInsert" [style=solid];
"unixSort" [style=solid];
"unregister" [style=solid];
"unsafeProperty" [style=solid];
"updateNumCapabilities" [style=solid];
"updateSummary" [style=solid];
"upper" [style=solid];
"upperBound" [style=solid];
"utf8" [style=solid];
"valueDiff" [style=solid];
"variablesOK" [style=solid];
"vegetables" [style=solid];
"verifiedTermination" [style=solid];
"viruses" [style=solid];
"waters" [style=solid];
"weather" [style=solid];
"whitespace" [style=solid];
"wilsonBounds" [style=solid];
"withConfidence" [style=solid];
"withDiscards" [style=solid];
"withGenT" [style=solid];
"withRetries" [style=solid];
"withShrinks" [style=solid];
"withTests" [style=solid];
"word" [style=solid];
"word16" [style=solid];
"word32" [style=solid];
"word64" [style=solid];
"word8" [style=solid];
"writeLog" [style=solid];
"writeRef" [style=solid];
"zipTreeT" [style=solid];
"" -> "agile";
"" -> "animals";
"" -> "boats";
"" -> "cats";
"" -> "colours";
"" -> "cooking";
"" -> "fruits";
"" -> "glass";
"" -> "metasyntactic";
"" -> "muppets";
"" -> "nfl";
"" -> "nhl";
"" -> "simpsons";
"" -> "southpark";
"" -> "vegetables";
"" -> "viruses";
"" -> "waters";
"" -> "weather";
"action" -> "callbackEnsure";
"action" -> "callbackRequire";
"action" -> "callbackUpdate";
"action" -> "commandGenOK";
"action" -> "contextNewVar";
"action" -> "contextUpdate";
"action" -> "filter";
"added" -> "consNub";
"added" -> "halves";
"added" -> "list";
"added" -> "removes";
"added" -> "towards";
"added" -> "towardsFloat";
"alpha" -> "element";
"alphaNum" -> "element";
"annotate" -> "getCaller";
"annotate" -> "writeLog";
"annotateShow" -> "annotate";
"annotateShow" -> "showPretty";
"annotateSummary" -> "icon";
"arbitrary" -> "hedgehog";
"arbitrary" -> "quickcheck";
"ascii" -> "enum";
"assert" -> "eval";
"assert" -> "failure";
"assert" -> "success";
"binit" -> "enum";
"bool" -> "enumBounded";
"bool_" -> "generate";
"boundsForLabel" -> "tests";
"boundsForLabel" -> "wilsonBounds";
"bytes" -> "choice";
"bytes" -> "list";
"bytes" -> "word8";
"callbackEnsure" -> "callbackEnsure1";
"callbackEnsure1" -> "success";
"callbackRequire" -> "callbackRequire1";
"callbackUpdate" -> "callbackUpdate1";
"catMaybes" -> "catMaybes";
"catMaybes" -> "runTree";
"check" -> "checkNamed";
"check" -> "detectColor";
"check" -> "displayRegion";
"checkActions" -> "checkActions";
"checkGroup" -> "checkGroupWith";
"checkGroup" -> "resolveColor";
"checkGroup" -> "resolveVerbosity";
"checkGroup" -> "resolveWorkers";
"checkGroup" -> "updateNumCapabilities";
"checkGroup" -> "utf8";
"checkGroupWith" -> "checkNamed";
"checkGroupWith" -> "displayRegion";
"checkGroupWith" -> "finishRegion";
"checkGroupWith" -> "fromResult";
"checkGroupWith" -> "moveToBottom";
"checkGroupWith" -> "newEmptyRegion";
"checkGroupWith" -> "newOpenRegion";
"checkGroupWith" -> "runTasks";
"checkGroupWith" -> "updateSummary";
"checkNamed" -> "checkRegion";
"checkParallel" -> "checkGroup";
"checkParallel" -> "from";
"checkParallel" -> "goldenGamma";
"checkParallel" -> "mix32";
"checkParallel" -> "mix64";
"checkParallel" -> "mix64variant13";
"checkParallel" -> "mixGamma";
"checkParallel" -> "nextDouble";
"checkParallel" -> "nextInteger";
"checkParallel" -> "nextWord32";
"checkParallel" -> "nextWord64";
"checkParallel" -> "random";
"checkParallel" -> "split";
"checkRegion" -> "checkReport";
"checkRegion" -> "openRegion";
"checkRegion" -> "renderProgress";
"checkRegion" -> "renderResult";
"checkRegion" -> "setRegion";
"checkReport" -> "confidenceFailure";
"checkReport" -> "confidenceSuccess";
"checkReport" -> "coverageSuccess";
"checkReport" -> "defaultMinTests";
"checkReport" -> "evalGenT";
"checkReport" -> "journalCoverage";
"checkReport" -> "maybe";
"checkReport" -> "mkFailure";
"checkReport" -> "runTestT";
"checkReport" -> "takeSmallest";
"checkReport" -> "test";
"checkReport" -> "tests";
"checkSequential" -> "checkGroup";
"choice" -> "integral";
"classify" -> "cover";
"collapseOpen" -> "collapseOpen";
"collect" -> "cover";
"collect" -> "dequeueMVar";
"collect" -> "finalizeTask";
"collect" -> "runActiveFinalizers";
"collect" -> "runTasks";
"collect" -> "updateNumCapabilities";
"confidenceFailure" -> "boundsForLabel";
"confidenceFailure" -> "tests";
"confidenceSuccess" -> "boundsForLabel";
"confidenceSuccess" -> "tests";
"consNub" -> "getCaller";
"constant" -> "constantFrom";
"constantBounded" -> "constantFrom";
"contextNewVar" -> "insertSymbolic";
"cover" -> "getCaller";
"cover" -> "writeLog";
"coverPercentage" -> "tests";
"coverageFailures" -> "labelCovered";
"coverageFailures" -> "tests";
"coverageSuccess" -> "coverageFailures";
"coverageSuccess" -> "tests";
"coverageWidth" -> "labelWidth";
"coverageWidth" -> "tests";
"declarations" -> "forget";
"declarations" -> "isDeclaration";
"declarations" -> "tagWithName";
"declarations" -> "trimEnd";
"defaultConfig" -> "defaultMinTests";
"defaultMain" -> "bounds";
"defaultMain" -> "constant";
"defaultMain" -> "constantBounded";
"defaultMain" -> "constantFrom";
"defaultMain" -> "exponential";
"defaultMain" -> "exponentialBounded";
"defaultMain" -> "exponentialFloat";
"defaultMain" -> "exponentialFloatFrom";
"defaultMain" -> "exponentialFrom";
"defaultMain" -> "linear";
"defaultMain" -> "linearBounded";
"defaultMain" -> "linearFrac";
"defaultMain" -> "linearFracFrom";
"defaultMain" -> "linearFrom";
"defaultMain" -> "lowerBound";
"defaultMain" -> "origin";
"defaultMain" -> "singleton";
"defaultMain" -> "tests";
"defaultMain" -> "upperBound";
"depth" -> "depth";
"depth" -> "maximum";
"depth" -> "runTree";
"detectColor" -> "detectMark";
"detectColor" -> "lookupBool";
"detectVerbosity" -> "detectMark";
"diff" -> "eval";
"diff" -> "failDiff";
"diff" -> "success";
"digit" -> "enum";
"discover" -> "discoverPrefix";
"discoverPrefix" -> "getCurrentFile";
"discoverPrefix" -> "listTE";
"discoverPrefix" -> "mkNamedProperty";
"discoverPrefix" -> "moduleName";
"discoverPrefix" -> "readProperties";
"displayRegion" -> "displayRegions";
"displayRegion" -> "finishRegion";
"displayRegion" -> "newOpenRegion";
"distributeGenT" -> "distributeGenT";
"distributeGenT" -> "fromTreeMaybeT";
"distributeGenT" -> "genToGloop";
"distributeGenT" -> "gloopToGen";
"distributeGenT" -> "runGenT";
"distributeNodeT" -> "distributeTreeT";
"distributeNodeT" -> "fromNodeT";
"distributeTreeT" -> "distributeNodeT";
"distributeTreeT" -> "distributeTreeT";
"double" -> "realFloat";
"dropInvalid" -> "insertSymbolic";
"dropInvalid" -> "variablesOK";
"dropLeadingSep" -> "dropLeadingSep";
"dropSome" -> "interleave";
"dropSome" -> "removes";
"either" -> "frequency";
"either" -> "sized";
"either_" -> "choice";
"element" -> "integral";
"embedGenT" -> "embedGenT";
"embedGenT" -> "embedTreeMaybeT";
"embedGenT" -> "runGenT";
"embedNodeT" -> "embedTreeT";
"embedTreeMaybeT" -> "embedMaybeT";
"embedTreeT" -> "embedNodeT";
"embedTreeT" -> "embedTreeT";
"ensure" -> "discard";
"enum" -> "integral";
"enumBounded" -> "enum";
"eval" -> "either";
"eval" -> "failException";
"eval" -> "tryEvaluate";
"evalEither" -> "failWith";
"evalEither" -> "showPretty";
"evalEitherM" -> "evalEither";
"evalEitherM" -> "evalM";
"evalExceptT" -> "evalEither";
"evalExp" -> "evalExp";
"evalGen" -> "evalGenT";
"evalGenT" -> "runDiscardEffectT";
"evalGenT" -> "runGenT";
"evalIO" -> "either";
"evalIO" -> "failException";
"evalIO" -> "tryAll";
"evalM" -> "either";
"evalM" -> "failException";
"evalM" -> "tryAll";
"evalMaybe" -> "failWith";
"evalMaybeM" -> "discard";
"evalMaybeM" -> "evalM";
"evalMaybeM" -> "evalMaybe";
"evalMaybeM" -> "mkTestT";
"evalMaybeM" -> "runTestT";
"evalNF" -> "either";
"evalNF" -> "failExceptionWith";
"evalNF" -> "tryEvaluate";
"evaluate" -> "evaluate";
"evaluate" -> "subst";
"execute" -> "ensure";
"execute" -> "evalEither";
"execute" -> "insertConcrete";
"execute" -> "reify";
"executeParallel" -> "annotate";
"executeParallel" -> "discover";
"executeParallel" -> "discoverPrefix";
"executeParallel" -> "emptyEnvironment";
"executeParallel" -> "evalM";
"executeParallel" -> "execute";
"executeParallel" -> "executeUpdateEnsure";
"executeParallel" -> "linearize";
"executeParallel" -> "renderActionResult";
"executeParallel" -> "renderParallel";
"executeParallel" -> "unionsEnvironment";
"executeSequential" -> "emptyEnvironment";
"executeSequential" -> "evalM";
"executeSequential" -> "executeUpdateEnsure";
"executeUpdateEnsure" -> "ensure";
"executeUpdateEnsure" -> "evalEither";
"executeUpdateEnsure" -> "insertConcrete";
"executeUpdateEnsure" -> "reify";
"expand" -> "expand";
"expand" -> "unfoldForest";
"exponential" -> "exponentialFrom";
"exponentialBounded" -> "exponentialFrom";
"exponentialFloat" -> "exponentialFloatFrom";
"exponentialFloatFrom" -> "clamp";
"exponentialFloatFrom" -> "scaleExponentialFloat";
"exponentialFrom" -> "clamp";
"exponentialFrom" -> "scaleExponential";
"failDiff" -> "failWith";
"failDiff" -> "mkValue";
"failDiff" -> "showPretty";
"failDiff" -> "valueDiff";
"failException" -> "failExceptionWith";
"failExceptionWith" -> "failWith";
"failWith" -> "getCaller";
"failWith" -> "mkTest";
"failure" -> "failWith";
"filter" -> "filter";
"filter" -> "fromPred";
"filter" -> "mapMaybe";
"filterMaybeT" -> "fromPred";
"filterMaybeT" -> "mapMaybeMaybeT";
"filterT" -> "fromPred";
"filterT" -> "mapMaybeT";
"finalizeTask" -> "runActiveFinalizers";
"findDeclarations" -> "classified";
"findDeclarations" -> "declarations";
"findDeclarations" -> "positioned";
"findM" -> "findM";
"findM" -> "return";
"findProperties" -> "findDeclarations";
"finishRegion" -> "fromResult";
"finishRegion" -> "mkFailure";
"finishRegion" -> "ppProgress";
"finishRegion" -> "ppResult";
"finishRegion" -> "ppSummary";
"finishRegion" -> "renderDoc";
"finishRegion" -> "renderProgress";
"finishRegion" -> "renderResult";
"finishRegion" -> "renderSummary";
"flattenTree" -> "flattenTree";
"float" -> "realFloat";
"foo" -> "mkQQ";
"footnote" -> "writeLog";
"footnoteShow" -> "showPretty";
"footnoteShow" -> "writeLog";
"forAll" -> "forAllWith";
"forAll" -> "showPretty";
"forAllT" -> "forAllWithT";
"forAllT" -> "showPretty";
"forAllWith" -> "forAllWithT";
"forAllWith" -> "render";
"forAllWithT" -> "annotate";
"forAllWithT" -> "render";
"forAllWithT" -> "return";
"free" -> "free\'";
"free\'" -> "free\'";
"freeze" -> "fromTreeMaybeT";
"freeze" -> "runGenT";
"freeze" -> "withGenT";
"frequency" -> "integral_";
"frequency" -> "shrink";
"frequency" -> "total";
"from" -> "goldenGamma";
"from" -> "mix64";
"from" -> "mixGamma";
"fromTree" -> "fromTreeT";
"fromTreeT" -> "fromTreeMaybeT";
"genActions" -> "action";
"genActions" -> "dropInvalid";
"genExp1" -> "genExp1";
"genExp2" -> "genExp2";
"genExp2" -> "shrinkExp2";
"genIllTypedApp" -> "genType";
"genIllTypedApp" -> "genWellTypedExpr";
"genIllTypedExpr" -> "genIllTypedApp";
"genIllTypedExpr" -> "genType";
"genIllTypedExpr" -> "genWellTypedExpr";
"genKnownTypeMaybe" -> "genType";
"genStateInt" -> "genInt";
"genSubterms" -> "freeze";
"genSubterms" -> "shrink";
"genSubterms" -> "shrinkSubterms";
"genToGloop" -> "mapGenT";
"genToGloop" -> "runGenT";
"genToken" -> "round6";
"genTokens" -> "genToken";
"genType" -> "genType";
"genWellTypedApp" -> "genKnownTypeMaybe";
"genWellTypedApp" -> "genWellTypedExpr\'";
"genWellTypedExpr" -> "genWellTypedExpr\'";
"genWellTypedExpr\'" -> "genWellTypedApp";
"genWellTypedExpr\'" -> "genWellTypedExpr\'\'";
"genWellTypedExpr\'" -> "genWellTypedPath";
"genWellTypedExpr\'" -> "shrinkExpr";
"genWellTypedExpr\'\'" -> "genWellTypedExpr\'";
"genWellTypedExpr\'\'" -> "insertVar";
"genWriterInt" -> "genInt";
"getCaller" -> "action";
"getCaller" -> "commandGenOK";
"getCaller" -> "concrete";
"getCaller" -> "dropInvalid";
"getCaller" -> "emptyEnvironment";
"getCaller" -> "executeParallel";
"getCaller" -> "executeSequential";
"getCaller" -> "insertConcrete";
"getCaller" -> "opaque";
"getCaller" -> "parallel";
"getCaller" -> "reify";
"getCaller" -> "reifyDynamic";
"getCaller" -> "reifyEnvironment";
"getCaller" -> "sequential";
"getCaller" -> "takeVariables";
"getCaller" -> "variablesOK";
"getCurrentFile" -> "catMaybes";
"getCurrentFile" -> "depth";
"getCurrentFile" -> "expand";
"getCurrentFile" -> "filter";
"getCurrentFile" -> "filterMaybeT";
"getCurrentFile" -> "filterT";
"getCurrentFile" -> "fromNodeT";
"getCurrentFile" -> "interleave";
"getCurrentFile" -> "mapMaybe";
"getCurrentFile" -> "mapMaybeMaybeT";
"getCurrentFile" -> "mapMaybeT";
"getCurrentFile" -> "mapTreeT";
"getCurrentFile" -> "pattern";
"getCurrentFile" -> "prune";
"getCurrentFile" -> "render";
"getCurrentFile" -> "renderT";
"getCurrentFile" -> "runTree";
"getCurrentFile" -> "treeChildren";
"getCurrentFile" -> "treeValue";
"getCurrentFile" -> "unfold";
"getCurrentFile" -> "unfoldForest";
"global" -> "from";
"gutter" -> "markup";
"handleErrorNodeT" -> "handleErrorTreeT";
"handleErrorTreeT" -> "handleErrorNodeT";
"handleErrorTreeT" -> "handleErrorTreeT";
"handleNodeT" -> "handleTreeT";
"handleTreeT" -> "handleNodeT";
"handleTreeT" -> "handleTreeT";
"hedgehog" -> "alpha";
"hedgehog" -> "alphaNum";
"hedgehog" -> "annotate";
"hedgehog" -> "annotateShow";
"hedgehog" -> "ascii";
"hedgehog" -> "assert";
"hedgehog" -> "binit";
"hedgehog" -> "bool";
"hedgehog" -> "bool_";
"hedgehog" -> "bytes";
"hedgehog" -> "check";
"hedgehog" -> "checkParallel";
"hedgehog" -> "checkSequential";
"hedgehog" -> "choice";
"hedgehog" -> "classify";
"hedgehog" -> "collect";
"hedgehog" -> "concrete";
"hedgehog" -> "constant";
"hedgehog" -> "cover";
"hedgehog" -> "detectColor";
"hedgehog" -> "detectMark";
"hedgehog" -> "detectVerbosity";
"hedgehog" -> "detectWorkers";
"hedgehog" -> "diff";
"hedgehog" -> "digit";
"hedgehog" -> "discard";
"hedgehog" -> "discover";
"hedgehog" -> "discoverPrefix";
"hedgehog" -> "double";
"hedgehog" -> "either";
"hedgehog" -> "either_";
"hedgehog" -> "element";
"hedgehog" -> "enum";
"hedgehog" -> "enumBounded";
"hedgehog" -> "eval";
"hedgehog" -> "evalEither";
"hedgehog" -> "evalEitherM";
"hedgehog" -> "evalExceptT";
"hedgehog" -> "evalGen";
"hedgehog" -> "evalIO";
"hedgehog" -> "evalM";
"hedgehog" -> "evalMaybe";
"hedgehog" -> "evalMaybeM";
"hedgehog" -> "evalNF";
"hedgehog" -> "executeParallel";
"hedgehog" -> "executeSequential";
"hedgehog" -> "failure";
"hedgehog" -> "filter";
"hedgehog" -> "filterT";
"hedgehog" -> "float";
"hedgehog" -> "footnote";
"hedgehog" -> "footnoteShow";
"hedgehog" -> "forAll";
"hedgehog" -> "forAllWith";
"hedgehog" -> "freeze";
"hedgehog" -> "frequency";
"hedgehog" -> "genSeed";
"hedgehog" -> "hexit";
"hedgehog" -> "int";
"hedgehog" -> "int16";
"hedgehog" -> "int32";
"hedgehog" -> "int64";
"hedgehog" -> "int8";
"hedgehog" -> "integral";
"hedgehog" -> "integral_";
"hedgehog" -> "just";
"hedgehog" -> "justT";
"hedgehog" -> "label";
"hedgehog" -> "latin1";
"hedgehog" -> "list";
"hedgehog" -> "lower";
"hedgehog" -> "map";
"hedgehog" -> "mapMaybe";
"hedgehog" -> "mapMaybeT";
"hedgehog" -> "maybe";
"hedgehog" -> "nonEmpty";
"hedgehog" -> "octit";
"hedgehog" -> "opaque";
"hedgehog" -> "parallel";
"hedgehog" -> "print";
"hedgehog" -> "printTree";
"hedgehog" -> "printTreeWith";
"hedgehog" -> "printWith";
"hedgehog" -> "property";
"hedgehog" -> "prune";
"hedgehog" -> "realFloat";
"hedgehog" -> "realFrac_";
"hedgehog" -> "recheck";
"hedgehog" -> "recursive";
"hedgehog" -> "resize";
"hedgehog" -> "resolveColor";
"hedgehog" -> "resolveVerbosity";
"hedgehog" -> "resolveWorkers";
"hedgehog" -> "sample";
"hedgehog" -> "scale";
"hedgehog" -> "seq";
"hedgehog" -> "sequential";
"hedgehog" -> "set";
"hedgehog" -> "shrink";
"hedgehog" -> "shuffle";
"hedgehog" -> "sized";
"hedgehog" -> "small";
"hedgehog" -> "string";
"hedgehog" -> "subsequence";
"hedgehog" -> "subterm";
"hedgehog" -> "subterm2";
"hedgehog" -> "subterm3";
"hedgehog" -> "subtermM";
"hedgehog" -> "subtermM2";
"hedgehog" -> "subtermM3";
"hedgehog" -> "success";
"hedgehog" -> "test";
"hedgehog" -> "text";
"hedgehog" -> "treeValue";
"hedgehog" -> "tripping";
"hedgehog" -> "unicode";
"hedgehog" -> "unicodeAll";
"hedgehog" -> "upper";
"hedgehog" -> "utf8";
"hedgehog" -> "verifiedTermination";
"hedgehog" -> "withConfidence";
"hedgehog" -> "withDiscards";
"hedgehog" -> "withRetries";
"hedgehog" -> "withShrinks";
"hedgehog" -> "withTests";
"hedgehog" -> "word";
"hedgehog" -> "word16";
"hedgehog" -> "word32";
"hedgehog" -> "word64";
"hedgehog" -> "word8";
"hexit" -> "element";
"icon" -> "markup";
"incRef" -> "execute";
"incRef" -> "opaque";
"infix" -> "diff";
"insertSymbolic" -> "takeSymbolic";
"insertVar" -> "filter";
"int" -> "integral";
"int16" -> "integral";
"int32" -> "integral";
"int64" -> "integral";
"int8" -> "integral";
"integral" -> "integral_";
"integral" -> "shrink";
"integral_" -> "generate";
"interleave" -> "dropSome";
"interleave" -> "fromNodeT";
"interleave" -> "interleave";
"interleave" -> "map";
"interleave" -> "return";
"interleave" -> "shrinkOne";
"ioRegister" -> "procTable";
"ioReset" -> "pidRef";
"ioReset" -> "procTable";
"ioSpawn" -> "pidRef";
"ioUnregister" -> "procTable";
"isSuccess" -> "isFailure";
"joinBlocks" -> "joinBlocks";
"journalCoverage" -> "fromLabel";
"journalCoverage" -> "toCoverCount";
"journalCoverage" -> "unionsCoverage";
"just" -> "filter";
"justT" -> "filterT";
"label" -> "cover";
"labelCovered" -> "coverPercentage";
"labelCovered" -> "tests";
"labelWidth" -> "coverPercentage";
"labelWidth" -> "labelCovered";
"labelWidth" -> "renderCoverPercentage";
"labelWidth" -> "tests";
"lastLineSpan" -> "lineSpan";
"lastLineSpan" -> "takeLines";
"latin1" -> "enum";
"lineDiff" -> "toLineDiff";
"lineDiff" -> "valueDiff";
"linear" -> "linearFrom";
"linearBounded" -> "linearFrom";
"linearFrac" -> "linearFracFrom";
"linearFracFrom" -> "clamp";
"linearFracFrom" -> "scaleLinearFrac";
"linearFrom" -> "clamp";
"linearFrom" -> "scaleLinear";
"linearize" -> "checkActions";
"linearize" -> "failWith";
"linearize" -> "interleave";
"linearize" -> "successful";
"list" -> "atLeast";
"list" -> "ensure";
"list" -> "halves";
"list" -> "integral_";
"list" -> "interleave";
"list" -> "interleaveTreeT";
"list" -> "mapGenT";
"list" -> "removes";
"list" -> "sized";
"list" -> "toTreeMaybeT";
"list" -> "withGenT";
"listenNodeT" -> "listenTreeT";
"listenTreeT" -> "listenNodeT";
"localNodeT" -> "localTreeT";
"localTreeT" -> "localNodeT";
"localTreeT" -> "localTreeT";
"lower" -> "enum";
"lowerBound" -> "bounds";
"map" -> "ensure";
"map" -> "integral_";
"map" -> "shrink";
"map" -> "sized";
"map" -> "uniqueByKey";
"mapGenT" -> "runGenT";
"mapMaybe" -> "catMaybes";
"mapMaybe" -> "discard";
"mapMaybe" -> "freeze";
"mapMaybe" -> "mapGenT";
"mapMaybe" -> "mapMaybeMaybeT";
"mapMaybe" -> "runTreeMaybeT";
"mapMaybe" -> "scale";
"mapMaybe" -> "withGenT";
"mapMaybeMaybeT" -> "flattenTree";
"mapMaybeMaybeT" -> "generalize";
"mapMaybeMaybeT" -> "runTreeMaybeT";
"mapMaybeT" -> "discard";
"mapMaybeT" -> "freeze";
"mapMaybeT" -> "mapGenT";
"mapMaybeT" -> "mapMaybeT";
"mapMaybeT" -> "scale";
"mapMaybeT" -> "withGenT";
"maximum" -> "maximum";
"maybe" -> "frequency";
"maybe" -> "sized";
"merge" -> "price";
"mergeDeclaration" -> "mergeLine";
"mergeDeclarations" -> "mergeDeclaration";
"mixGamma" -> "lineDiff";
"mixGamma" -> "mix64variant13";
"mixGamma" -> "mkValue";
"mixGamma" -> "next";
"mixGamma" -> "nextWord32";
"mixGamma" -> "nextWord64";
"mixGamma" -> "renderLineDiff";
"mixGamma" -> "renderValue";
"mixGamma" -> "renderValueDiff";
"mixGamma" -> "showPretty";
"mixGamma" -> "split";
"mixGamma" -> "takeLeft";
"mixGamma" -> "takeRight";
"mixGamma" -> "toLineDiff";
"mixGamma" -> "valueDiff";
"mkDocDiff" -> "added";
"mkDocDiff" -> "diff";
"mkDocDiff" -> "mkDocDiff";
"mkDocDiff" -> "oneLiner";
"mkDocDiff" -> "removed";
"mkDocDiff" -> "renderValue";
"mkDocDiff" -> "same";
"mkDocDiff" -> "takeLeft";
"mkDocDiff" -> "takeRight";
"mkFailure" -> "diff";
"mkFailure" -> "mapMaybe";
"mkFailure" -> "takeAnnotation";
"mkFailure" -> "takeFootnote";
"mkLineDiff" -> "diff";
"mkLineDiff" -> "mkLineDiff";
"mkLineDiff" -> "spaces";
"mkNamedProperty" -> "unsafeProperty";
"mkTest" -> "mkTestT";
"mkValue" -> "reify";
"moveToBottom" -> "filter";
"newRef" -> "execute";
"nextWord32" -> "mix32";
"nextWord32" -> "next";
"nextWord64" -> "mix64";
"nextWord64" -> "next";
"nonEmpty" -> "list";
"octit" -> "enum";
"oneLiner" -> "renderValue";
"parallel" -> "genActions";
"parallel" -> "mkContext";
"parse" -> "parseTokens";
"parseToken" -> "parseDouble";
"parseToken" -> "parseInt";
"parseToken" -> "parseVar";
"parseTokens" -> "parseToken";
"parseTokens" -> "whitespace";
"passNodeT" -> "passTreeT";
"passTreeT" -> "listenTreeT";
"passTreeT" -> "passNodeT";
"passTreeT" -> "passTreeT";
"positioned" -> "return";
"positioned" -> "tryAll";
"positioned" -> "tryEvaluate";
"ppCoverPercentage" -> "renderCoverPercentage";
"ppCoverage" -> "coverageWidth";
"ppCoverage" -> "ppLabel";
"ppCoverage" -> "tests";
"ppDeclaration" -> "markup";
"ppDiff" -> "added";
"ppDiff" -> "diff";
"ppDiff" -> "markup";
"ppDiff" -> "ppLineDiff";
"ppDiff" -> "removed";
"ppDiff" -> "toLineDiff";
"ppDiscardCount" -> "ppShow";
"ppFailedInput" -> "ppFailedInputDeclaration";
"ppFailedInput" -> "ppFailedInputTypedArgument";
"ppFailedInputDeclaration" -> "defaultStyle";
"ppFailedInputDeclaration" -> "lastLineSpan";
"ppFailedInputDeclaration" -> "mapSource";
"ppFailedInputDeclaration" -> "markup";
"ppFailedInputDeclaration" -> "readDeclaration";
"ppFailedInputTypedArgument" -> "markup";
"ppFailedInputTypedArgument" -> "ppShow";
"ppFailureLocation" -> "defaultStyle";
"ppFailureLocation" -> "diff";
"ppFailureLocation" -> "lastLineSpan";
"ppFailureLocation" -> "mapSource";
"ppFailureLocation" -> "markup";
"ppFailureLocation" -> "ppDiff";
"ppFailureLocation" -> "readDeclaration";
"ppFailureReport" -> "catMaybes";
"ppFailureReport" -> "coverPercentage";
"ppFailureReport" -> "coverageFailures";
"ppFailureReport" -> "maybe";
"ppFailureReport" -> "mergeDeclarations";
"ppFailureReport" -> "ppCoverPercentage";
"ppFailureReport" -> "ppDeclaration";
"ppFailureReport" -> "ppDiff";
"ppFailureReport" -> "ppFailedInput";
"ppFailureReport" -> "ppFailureLocation";
"ppFailureReport" -> "ppReproduce";
"ppFailureReport" -> "ppTextLines";
"ppFailureReport" -> "return";
"ppFailureReport" -> "tests";
"ppLabel" -> "coverPercentage";
"ppLabel" -> "labelCovered";
"ppLabel" -> "ppCoverBar";
"ppLabel" -> "ppCoverPercentage";
"ppLabel" -> "ppLabelName";
"ppLabel" -> "ppLeftPad";
"ppLabel" -> "tests";
"ppLineDiff" -> "markup";
"ppProgress" -> "failure";
"ppProgress" -> "icon";
"ppProgress" -> "ppCoverage";
"ppProgress" -> "ppFailedAtLocation";
"ppProgress" -> "ppName";
"ppProgress" -> "ppShrinkDiscard";
"ppProgress" -> "ppTestCount";
"ppProgress" -> "ppWithDiscardCount";
"ppProgress" -> "tests";
"ppRawPropertyCount" -> "ppShow";
"ppReproduce" -> "gutter";
"ppReproduce" -> "markup";
"ppReproduce" -> "maybe";
"ppResult" -> "failure";
"ppResult" -> "icon";
"ppResult" -> "ppCoverage";
"ppResult" -> "ppDiscardCount";
"ppResult" -> "ppFailedAtLocation";
"ppResult" -> "ppFailureReport";
"ppResult" -> "ppName";
"ppResult" -> "ppShrinkDiscard";
"ppResult" -> "ppTestCount";
"ppResult" -> "tests";
"ppShrinkCount" -> "ppShow";
"ppShrinkDiscard" -> "ppDiscardCount";
"ppShrinkDiscard" -> "ppShrinkCount";
"ppSummary" -> "annotateSummary";
"ppSummary" -> "catMaybes";
"ppSummary" -> "ppRawPropertyCount";
"ppSummary" -> "ppWhenNonZero";
"ppSummary" -> "summaryCompleted";
"ppSummary" -> "summaryTotal";
"ppTestCount" -> "ppShow";
"ppWhenNonZero" -> "ppRawPropertyCount";
"ppWithDiscardCount" -> "ppDiscardCount";
"pretty" -> "renderToken";
"print" -> "printWith";
"printTree" -> "printTreeWith";
"printTreeWith" -> "renderTree";
"printWith" -> "evalGen";
"prop_assert" -> "assert";
"prop_assert" -> "filter";
"prop_assert" -> "forAll";
"prop_assert" -> "property";
"prop_classify" -> "classify";
"prop_classify" -> "forAll";
"prop_classify" -> "property";
"prop_classify" -> "withTests";
"prop_collect" -> "collect";
"prop_collect" -> "evalIO";
"prop_collect" -> "forAll";
"prop_collect" -> "property";
"prop_collect" -> "withTests";
"prop_consistent" -> "evaluate";
"prop_consistent" -> "forAll";
"prop_consistent" -> "genType";
"prop_consistent" -> "genWellTypedExpr";
"prop_consistent" -> "property";
"prop_consistent" -> "typecheck";
"prop_cover_bool" -> "cover";
"prop_cover_bool" -> "forAll";
"prop_cover_bool" -> "property";
"prop_cover_bool" -> "withTests";
"prop_cover_number" -> "cover";
"prop_cover_number" -> "evalIO";
"prop_cover_number" -> "forAll";
"prop_cover_number" -> "label";
"prop_cover_number" -> "property";
"prop_cover_number" -> "withTests";
"prop_different_record" -> "forAll";
"prop_different_record" -> "genRecord";
"prop_different_record" -> "property";
"prop_discard" -> "discard";
"prop_discard" -> "property";
"prop_discard_limit" -> "discard";
"prop_discard_limit" -> "property";
"prop_discard_limit" -> "withDiscards";
"prop_equals" -> "forAll";
"prop_equals" -> "maximum";
"prop_equals" -> "property";
"prop_evalNF_failure" -> "evalNF";
"prop_evalNF_failure" -> "property";
"prop_evalNF_success" -> "evalNF";
"prop_evalNF_success" -> "property";
"prop_failure" -> "failure";
"prop_failure" -> "property";
"prop_foo" -> "diff";
"prop_foo" -> "forAll";
"prop_foo" -> "genFoo";
"prop_foo" -> "property";
"prop_hutton_1" -> "assert";
"prop_hutton_1" -> "evalExp";
"prop_hutton_1" -> "forAll";
"prop_hutton_1" -> "genExp1";
"prop_hutton_1" -> "property";
"prop_hutton_1" -> "success";
"prop_hutton_2" -> "assert";
"prop_hutton_2" -> "evalExp";
"prop_hutton_2" -> "forAll";
"prop_hutton_2" -> "genExp2";
"prop_hutton_2" -> "property";
"prop_hutton_2" -> "success";
"prop_idempotent" -> "evaluate";
"prop_idempotent" -> "forAll";
"prop_idempotent" -> "genType";
"prop_idempotent" -> "genWellTypedExpr";
"prop_idempotent" -> "property";
"prop_idempotent1" -> "prop_idempotent";
"prop_idempotent2" -> "prop_idempotent";
"prop_idempotent3" -> "prop_idempotent";
"prop_idempotent4" -> "prop_idempotent";
"prop_idempotent5" -> "prop_idempotent";
"prop_idempotent6" -> "prop_idempotent";
"prop_illtyped" -> "evalEither";
"prop_illtyped" -> "forAll";
"prop_illtyped" -> "genIllTypedExpr";
"prop_illtyped" -> "property";
"prop_illtyped" -> "success";
"prop_illtyped" -> "typecheck";
"prop_label" -> "evalIO";
"prop_label" -> "forAll";
"prop_label" -> "label";
"prop_label" -> "property";
"prop_label" -> "withTests";
"prop_list" -> "assert";
"prop_list" -> "forAll";
"prop_list" -> "forAllWith";
"prop_list" -> "genInt";
"prop_list" -> "genList";
"prop_list" -> "property";
"prop_list" -> "renderTree";
"prop_logged_unix_sort" -> "bracketLog";
"prop_logged_unix_sort" -> "evalExceptT";
"prop_logged_unix_sort" -> "forAll";
"prop_logged_unix_sort" -> "normalLog";
"prop_logged_unix_sort" -> "property";
"prop_logged_unix_sort" -> "unixSort";
"prop_logged_unix_sort_bracket" -> "bracketLog";
"prop_logged_unix_sort_bracket" -> "evalExceptT";
"prop_logged_unix_sort_bracket" -> "forAll";
"prop_logged_unix_sort_bracket" -> "normalLog";
"prop_logged_unix_sort_bracket" -> "property";
"prop_logged_unix_sort_bracket" -> "unixSort";
"prop_occupy" -> "forAll";
"prop_occupy" -> "label";
"prop_occupy" -> "property";
"prop_property_exception" -> "assert";
"prop_property_exception" -> "forAll";
"prop_property_exception" -> "property";
"prop_record" -> "diff";
"prop_record" -> "forAll";
"prop_record" -> "genRecord";
"prop_record" -> "property";
"prop_references_parallel" -> "executeParallel";
"prop_references_parallel" -> "forAll";
"prop_references_parallel" -> "incRef";
"prop_references_parallel" -> "initialState";
"prop_references_parallel" -> "newRef";
"prop_references_parallel" -> "property";
"prop_references_parallel" -> "readRef";
"prop_references_parallel" -> "test";
"prop_references_parallel" -> "withRetries";
"prop_references_parallel" -> "withTests";
"prop_references_parallel" -> "writeRef";
"prop_references_sequential" -> "executeSequential";
"prop_references_sequential" -> "forAll";
"prop_references_sequential" -> "incRef";
"prop_references_sequential" -> "initialState";
"prop_references_sequential" -> "newRef";
"prop_references_sequential" -> "property";
"prop_references_sequential" -> "readRef";
"prop_references_sequential" -> "writeRef";
"prop_registry_parallel" -> "evalIO";
"prop_registry_parallel" -> "forAll";
"prop_registry_parallel" -> "initialState";
"prop_registry_parallel" -> "ioReset";
"prop_registry_parallel" -> "property";
"prop_registry_parallel" -> "register";
"prop_registry_parallel" -> "spawn";
"prop_registry_parallel" -> "test";
"prop_registry_parallel" -> "unregister";
"prop_registry_parallel" -> "withRetries";
"prop_registry_sequential" -> "evalIO";
"prop_registry_sequential" -> "forAll";
"prop_registry_sequential" -> "initialState";
"prop_registry_sequential" -> "ioReset";
"prop_registry_sequential" -> "property";
"prop_registry_sequential" -> "register";
"prop_registry_sequential" -> "spawn";
"prop_registry_sequential" -> "unregister";
"prop_reverse" -> "forAll";
"prop_reverse" -> "property";
"prop_reverse_mixed" -> "forAll";
"prop_reverse_mixed" -> "property";
"prop_shrink_limit" -> "assert";
"prop_shrink_limit" -> "forAll";
"prop_shrink_limit" -> "property";
"prop_shrink_limit" -> "withShrinks";
"prop_state_list" -> "assert";
"prop_state_list" -> "forAll";
"prop_state_list" -> "forAllWith";
"prop_state_list" -> "genList";
"prop_state_list" -> "genStateInt";
"prop_state_list" -> "property";
"prop_state_list" -> "renderTree";
"prop_success" -> "property";
"prop_success" -> "success";
"prop_takeEnd" -> "forAll";
"prop_takeEnd" -> "property";
"prop_takeEnd" -> "string";
"prop_takeEnd" -> "text";
"prop_test_limit" -> "property";
"prop_test_limit" -> "success";
"prop_test_limit" -> "withTests";
"prop_total" -> "cheap";
"prop_total" -> "expensive";
"prop_total" -> "forAll";
"prop_total" -> "merge";
"prop_total" -> "order";
"prop_total" -> "property";
"prop_total" -> "total";
"prop_trip" -> "forAll";
"prop_trip" -> "genTokens";
"prop_trip" -> "parse";
"prop_trip" -> "pretty";
"prop_trip" -> "property";
"prop_trip" -> "tripping";
"prop_trip" -> "withTests";
"prop_unix_sort" -> "evalExceptT";
"prop_unix_sort" -> "forAll";
"prop_unix_sort" -> "property";
"prop_unix_sort" -> "unixSort";
"prop_welltyped" -> "forAll";
"prop_welltyped" -> "genType";
"prop_welltyped" -> "genWellTypedExpr";
"prop_welltyped" -> "property";
"prop_welltyped" -> "typecheck";
"prop_without_confidence" -> "cover";
"prop_without_confidence" -> "forAll";
"prop_without_confidence" -> "property";
"prop_without_confidence" -> "verifiedTermination";
"prop_without_confidence" -> "withConfidence";
"prop_without_confidence" -> "withTests";
"prop_world_cup_titles_2018" -> "classify";
"prop_world_cup_titles_2018" -> "forAll";
"prop_world_cup_titles_2018" -> "property";
"prop_world_cup_titles_2018" -> "withTests";
"prop_writer_list" -> "assert";
"prop_writer_list" -> "forAll";
"prop_writer_list" -> "forAllWith";
"prop_writer_list" -> "genWriterInt";
"prop_writer_list" -> "genWriterList";
"prop_writer_list" -> "property";
"prop_writer_list" -> "renderLog";
"prop_writer_list" -> "renderTree";
"property" -> "defaultConfig";
"property" -> "evalM";
"prune" -> "mapGenT";
"prune" -> "prune";
"prune" -> "withGenT";
"quickcheck" -> "seedQCGen";
"random" -> "global";
"random" -> "split";
"readDeclaration" -> "filter";
"readDeclaration" -> "findDeclarations";
"readDeclaration" -> "readFileSafe";
"readDeclaration" -> "takeHead";
"readProperties" -> "findProperties";
"readRef" -> "execute";
"readRef" -> "opaque";
"realFloat" -> "realFrac_";
"realFloat" -> "shrink";
"realFrac_" -> "generate";
"recheck" -> "checkRegion";
"recheck" -> "detectColor";
"recheck" -> "displayRegion";
"recheck" -> "withTests";
"recursive" -> "sized";
"recursive" -> "small";
"register" -> "concrete";
"register" -> "execute";
"register" -> "genName";
"register" -> "ioRegister";
"reify" -> "reifyEnvironment";
"reifyEnvironment" -> "reifyDynamic";
"removes" -> "map";
"render" -> "renderT";
"renderAction" -> "showPretty";
"renderActionResult" -> "either";
"renderActionResult" -> "reifyEnvironment";
"renderActionResult" -> "renderAction";
"renderActionResult" -> "showPretty";
"renderDoc" -> "utf8";
"renderForestLines" -> "renderForestLines";
"renderForestLines" -> "renderTreeTLines";
"renderParallel" -> "render";
"renderProgress" -> "ppProgress";
"renderProgress" -> "renderDoc";
"renderResult" -> "ppResult";
"renderResult" -> "renderDoc";
"renderSummary" -> "check";
"renderSummary" -> "checkGroup";
"renderSummary" -> "checkNamed";
"renderSummary" -> "checkParallel";
"renderSummary" -> "checkRegion";
"renderSummary" -> "checkReport";
"renderSummary" -> "checkSequential";
"renderSummary" -> "ppSummary";
"renderSummary" -> "recheck";
"renderSummary" -> "renderDoc";
"renderT" -> "renderTreeTLines";
"renderT" -> "tripping";
"renderTree" -> "annotate";
"renderTree" -> "annotateShow";
"renderTree" -> "assert";
"renderTree" -> "classify";
"renderTree" -> "collect";
"renderTree" -> "confidenceFailure";
"renderTree" -> "confidenceSuccess";
"renderTree" -> "cover";
"renderTree" -> "coverPercentage";
"renderTree" -> "coverageFailures";
"renderTree" -> "coverageSuccess";
"renderTree" -> "defaultConfidence";
"renderTree" -> "defaultConfig";
"renderTree" -> "defaultMinTests";
"renderTree" -> "diff";
"renderTree" -> "discard";
"renderTree" -> "eval";
"renderTree" -> "evalEither";
"renderTree" -> "evalEitherM";
"renderTree" -> "evalExceptT";
"renderTree" -> "evalGen";
"renderTree" -> "evalIO";
"renderTree" -> "evalM";
"renderTree" -> "evalMaybe";
"renderTree" -> "evalMaybeM";
"renderTree" -> "evalNF";
"renderTree" -> "failDiff";
"renderTree" -> "failException";
"renderTree" -> "failWith";
"renderTree" -> "failure";
"renderTree" -> "footnote";
"renderTree" -> "footnoteShow";
"renderTree" -> "forAll";
"renderTree" -> "forAllT";
"renderTree" -> "forAllWith";
"renderTree" -> "forAllWithT";
"renderTree" -> "journalCoverage";
"renderTree" -> "label";
"renderTree" -> "labelCovered";
"renderTree" -> "mapConfig";
"renderTree" -> "mkTest";
"renderTree" -> "mkTestT";
"renderTree" -> "property";
"renderTree" -> "return";
"renderTree" -> "runTest";
"renderTree" -> "runTestT";
"renderTree" -> "success";
"renderTree" -> "test";
"renderTree" -> "toCoverCount";
"renderTree" -> "verifiedTermination";
"renderTree" -> "wilsonBounds";
"renderTree" -> "withConfidence";
"renderTree" -> "withDiscards";
"renderTree" -> "withRetries";
"renderTree" -> "withShrinks";
"renderTree" -> "withTests";
"renderTree" -> "writeLog";
"renderTreeTLines" -> "renderForestLines";
"renderTreeTLines" -> "renderNodeT";
"renderValueDiff" -> "renderLineDiff";
"renderValueDiff" -> "toLineDiff";
"resize" -> "scale";
"resolveColor" -> "detectColor";
"resolveVerbosity" -> "detectVerbosity";
"resolveWorkers" -> "detectWorkers";
"resolveWorkers" -> "findProperties";
"resolveWorkers" -> "readDeclaration";
"resolveWorkers" -> "readProperties";
"runActiveFinalizers" -> "runActiveFinalizers";
"runDiscardEffect" -> "runDiscardEffectT";
"runTasks" -> "dequeueMVar";
"runTasks" -> "finalizeTask";
"runTest" -> "runTestT";
"runTreeN" -> "isSuccess";
"runTreeN" -> "runTreeN";
"sample" -> "evalGen";
"scale" -> "runGenT";
"scale" -> "withGenT";
"scaleExponential" -> "scaleExponentialFloat";
"scaleExponentialFloat" -> "clamp";
"scaleExponentialFloat" -> "diff";
"scaleExponentialFloat" -> "displayRegion";
"scaleExponentialFloat" -> "displayRegions";
"scaleExponentialFloat" -> "finishRegion";
"scaleExponentialFloat" -> "moveToBottom";
"scaleExponentialFloat" -> "newEmptyRegion";
"scaleExponentialFloat" -> "newOpenRegion";
"scaleExponentialFloat" -> "openRegion";
"scaleExponentialFloat" -> "setRegion";
"scaleLinear" -> "diff";
"scaleLinearFrac" -> "diff";
"seq" -> "list";
"sequential" -> "genActions";
"sequential" -> "mkContext";
"sequential" -> "renderAction";
"sequential" -> "renderParallel";
"set" -> "map";
"showPretty" -> "ppShow";
"shrink" -> "mapGenT";
"shrink" -> "withGenT";
"shrinkExp2" -> "evalExp";
"shrinkExpr" -> "evaluate";
"shrinkExpr" -> "subst";
"shrinkOne" -> "interleave";
"shrinkOne" -> "splits";
"shuffle" -> "shuffleSeq";
"shuffleSeq" -> "integral";
"shuffleSeq" -> "shuffleSeq";
"sized" -> "generate";
"small" -> "golden";
"small" -> "scale";
"spawn" -> "execute";
"spawn" -> "ioSpawn";
"split" -> "mix64";
"split" -> "mixGamma";
"split" -> "next";
"string" -> "list";
"subsequence" -> "bool_";
"subsequence" -> "shrink";
"subst" -> "subst";
"subterm" -> "subtermM";
"subterm2" -> "subtermM2";
"subterm3" -> "subtermM3";
"subtermM" -> "subtermMVec";
"subtermM2" -> "subtermMVec";
"subtermM3" -> "subtermMVec";
"subtermMVec" -> "fromSubterms";
"subtermMVec" -> "genSubterms";
"successful" -> "runTest";
"tagWithName" -> "takeName";
"takeLeft" -> "takeLeft";
"takeRight" -> "takeRight";
"takeSmallest" -> "failure";
"takeSmallest" -> "findM";
"takeSmallest" -> "isFailure";
"takeSmallest" -> "mkFailure";
"takeSmallest" -> "return";
"takeSmallest" -> "runTreeN";
"takeSmallest" -> "takeSmallest";
"takeVariables" -> "insertSymbolic";
"tests" -> "arbitrary";
"tests" -> "checkParallel";
"tests" -> "checkSequential";
"tests" -> "discover";
"tests" -> "joinBlocks";
"tests" -> "prop_logged_unix_sort";
"tests" -> "prop_logged_unix_sort_bracket";
"tests" -> "quickcheck";
"tests" -> "tests";
"text" -> "string";
"toLineDiff" -> "collapseOpen";
"toLineDiff" -> "dropLeadingSep";
"toLineDiff" -> "mkDocDiff";
"toLineDiff" -> "mkLineDiff";
"toTree" -> "mapGenT";
"toTree" -> "runDiscardEffect";
"toTree" -> "withGenT";
"toTreeMaybeT" -> "mapGenT";
"toTreeMaybeT" -> "withGenT";
"total" -> "price";
"towards" -> "consNub";
"towards" -> "diff";
"towards" -> "halves";
"towardsFloat" -> "diff";
"treeChildren" -> "runTree";
"treeValue" -> "runTree";
"trimEnd" -> "isWhitespace";
"tripping" -> "defaultMain";
"tripping" -> "diff";
"tripping" -> "failWith";
"tripping" -> "mkValue";
"tripping" -> "showPretty";
"tripping" -> "success";
"tripping" -> "valueDiff";
"tryEvaluate" -> "alpha";
"tryEvaluate" -> "alphaNum";
"tryEvaluate" -> "ascii";
"tryEvaluate" -> "atLeast";
"tryEvaluate" -> "binit";
"tryEvaluate" -> "bool";
"tryEvaluate" -> "bool_";
"tryEvaluate" -> "bytes";
"tryEvaluate" -> "choice";
"tryEvaluate" -> "constant";
"tryEvaluate" -> "digit";
"tryEvaluate" -> "discard";
"tryEvaluate" -> "double";
"tryEvaluate" -> "either";
"tryEvaluate" -> "either_";
"tryEvaluate" -> "element";
"tryEvaluate" -> "ensure";
"tryEvaluate" -> "enum";
"tryEvaluate" -> "enumBounded";
"tryEvaluate" -> "evalGen";
"tryEvaluate" -> "evalGenT";
"tryEvaluate" -> "evaluate";
"tryEvaluate" -> "filter";
"tryEvaluate" -> "filterT";
"tryEvaluate" -> "float";
"tryEvaluate" -> "freeze";
"tryEvaluate" -> "frequency";
"tryEvaluate" -> "fromTree";
"tryEvaluate" -> "fromTreeMaybeT";
"tryEvaluate" -> "fromTreeT";
"tryEvaluate" -> "generalize";
"tryEvaluate" -> "generate";
"tryEvaluate" -> "golden";
"tryEvaluate" -> "hexit";
"tryEvaluate" -> "int";
"tryEvaluate" -> "int16";
"tryEvaluate" -> "int32";
"tryEvaluate" -> "int64";
"tryEvaluate" -> "int8";
"tryEvaluate" -> "integral";
"tryEvaluate" -> "integral_";
"tryEvaluate" -> "isNoncharacter";
"tryEvaluate" -> "isSurrogate";
"tryEvaluate" -> "just";
"tryEvaluate" -> "justT";
"tryEvaluate" -> "latin1";
"tryEvaluate" -> "list";
"tryEvaluate" -> "lower";
"tryEvaluate" -> "map";
"tryEvaluate" -> "mapGenT";
"tryEvaluate" -> "mapMaybe";
"tryEvaluate" -> "mapMaybeT";
"tryEvaluate" -> "maybe";
"tryEvaluate" -> "nonEmpty";
"tryEvaluate" -> "octit";
"tryEvaluate" -> "print";
"tryEvaluate" -> "printTree";
"tryEvaluate" -> "printTreeWith";
"tryEvaluate" -> "printWith";
"tryEvaluate" -> "prune";
"tryEvaluate" -> "realFloat";
"tryEvaluate" -> "realFrac_";
"tryEvaluate" -> "recursive";
"tryEvaluate" -> "renderTree";
"tryEvaluate" -> "resize";
"tryEvaluate" -> "runDiscardEffect";
"tryEvaluate" -> "runDiscardEffectT";
"tryEvaluate" -> "runGenT";
"tryEvaluate" -> "sample";
"tryEvaluate" -> "scale";
"tryEvaluate" -> "seq";
"tryEvaluate" -> "set";
"tryEvaluate" -> "shrink";
"tryEvaluate" -> "shuffle";
"tryEvaluate" -> "shuffleSeq";
"tryEvaluate" -> "sized";
"tryEvaluate" -> "small";
"tryEvaluate" -> "string";
"tryEvaluate" -> "subsequence";
"tryEvaluate" -> "subterm";
"tryEvaluate" -> "subterm2";
"tryEvaluate" -> "subterm3";
"tryEvaluate" -> "subtermM";
"tryEvaluate" -> "subtermM2";
"tryEvaluate" -> "subtermM3";
"tryEvaluate" -> "subtermMVec";
"tryEvaluate" -> "text";
"tryEvaluate" -> "toTree";
"tryEvaluate" -> "toTreeMaybeT";
"tryEvaluate" -> "tryAll";
"tryEvaluate" -> "unicode";
"tryEvaluate" -> "unicodeAll";
"tryEvaluate" -> "upper";
"tryEvaluate" -> "utf8";
"tryEvaluate" -> "word";
"tryEvaluate" -> "word16";
"tryEvaluate" -> "word32";
"tryEvaluate" -> "word64";
"tryEvaluate" -> "word8";
"typecheck" -> "typecheck\'";
"typecheck\'" -> "maybe";
"typecheck\'" -> "typecheck\'";
"unfold" -> "unfoldForest";
"unfoldForest" -> "unfold";
"unicode" -> "enum";
"unicode" -> "frequency";
"unicodeAll" -> "enumBounded";
"uniqueByKey" -> "discard";
"uniqueByKey" -> "freeze";
"uniqueByKey" -> "uniqueInsert";
"uniqueInsert" -> "uniqueInsert";
"unregister" -> "execute";
"unregister" -> "genName";
"unregister" -> "ioUnregister";
"updateNumCapabilities" -> "bounds";
"updateNumCapabilities" -> "clamp";
"updateNumCapabilities" -> "constant";
"updateNumCapabilities" -> "constantBounded";
"updateNumCapabilities" -> "constantFrom";
"updateNumCapabilities" -> "exponential";
"updateNumCapabilities" -> "exponentialBounded";
"updateNumCapabilities" -> "exponentialFloat";
"updateNumCapabilities" -> "exponentialFloatFrom";
"updateNumCapabilities" -> "exponentialFrom";
"updateNumCapabilities" -> "linear";
"updateNumCapabilities" -> "linearBounded";
"updateNumCapabilities" -> "linearFrac";
"updateNumCapabilities" -> "linearFracFrom";
"updateNumCapabilities" -> "linearFrom";
"updateNumCapabilities" -> "lowerBound";
"updateNumCapabilities" -> "origin";
"updateNumCapabilities" -> "scaleExponential";
"updateNumCapabilities" -> "scaleExponentialFloat";
"updateNumCapabilities" -> "scaleLinear";
"updateNumCapabilities" -> "scaleLinearFrac";
"updateNumCapabilities" -> "singleton";
"updateNumCapabilities" -> "upperBound";
"updateSummary" -> "renderSummary";
"updateSummary" -> "setRegion";
"upper" -> "enum";
"upperBound" -> "bounds";
"utf8" -> "text";
"valueDiff" -> "valueDiff";
"variablesOK" -> "takeVariables";
"verifiedTermination" -> "defaultConfidence";
"verifiedTermination" -> "mapConfig";
"verifiedTermination" -> "tests";
"withConfidence" -> "mapConfig";
"withConfidence" -> "tests";
"withDiscards" -> "mapConfig";
"withGenT" -> "fromTreeMaybeT";
"withGenT" -> "mapGenT";
"withGenT" -> "return";
"withGenT" -> "runGenT";
"withRetries" -> "mapConfig";
"withShrinks" -> "mapConfig";
"withTests" -> "mapConfig";
"withTests" -> "tests";
"word" -> "integral";
"word16" -> "integral";
"word32" -> "integral";
"word64" -> "integral";
"word8" -> "integral";
"writeLog" -> "mkTest";
"writeRef" -> "execute";
"writeRef" -> "filter";
"writeRef" -> "opaque";
"zipTreeT" -> "zipTreeT";
}
