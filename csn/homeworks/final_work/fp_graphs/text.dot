strict digraph deps {
"all" [style=solid];
"any" [style=solid];
"append" [style=solid];
"break" [style=solid];
"breakOn" [style=solid];
"breakOnAll" [style=solid];
"breakOnEnd" [style=solid];
"center" [style=solid];
"chunksOf" [style=solid];
"commonPrefixes" [style=solid];
"compareLength" [style=solid];
"compareText" [style=solid];
"concat" [style=solid];
"concatMap" [style=solid];
"cons" [style=solid];
"copy" [style=solid];
"count" [style=solid];
"countChar" [style=solid];
"drop" [style=solid];
"dropAround" [style=solid];
"dropEnd" [style=solid];
"dropWhile" [style=solid];
"dropWhileEnd" [style=solid];
"emptyError" [style=solid];
"filter" [style=solid];
"find" [style=solid];
"findAIndexOrEnd" [style=solid];
"findIndex" [style=solid];
"foldl" [style=solid];
"foldl1" [style=solid];
"foldl1\'" [style=solid];
"foldl\'" [style=solid];
"foldr" [style=solid];
"foldr1" [style=solid];
"group" [style=solid];
"groupBy" [style=solid];
"head" [style=solid];
"index" [style=solid];
"infixr" [style=solid];
"init" [style=solid];
"inits" [style=solid];
"intercalate" [style=solid];
"intersperse" [style=solid];
"isInfixOf" [style=solid];
"isPrefixOf" [style=solid];
"isSingleton" [style=solid];
"isSuffixOf" [style=solid];
"iterN" [style=solid];
"iterNEnd" [style=solid];
"justifyLeft" [style=solid];
"justifyRight" [style=solid];
"last" [style=solid];
"length" [style=solid];
"lines" [style=solid];
"map" [style=solid];
"mapAccumL" [style=solid];
"mapAccumR" [style=solid];
"maximum" [style=solid];
"minimum" [style=solid];
"null" [style=solid];
"overflowError" [style=solid];
"pack" [style=solid];
"packConstr" [style=solid];
"partition" [style=solid];
"replace" [style=solid];
"replicate" [style=solid];
"replicateChar" [style=solid];
"reverse" [style=solid];
"scanl" [style=solid];
"scanl1" [style=solid];
"scanr" [style=solid];
"scanr1" [style=solid];
"second" [style=solid];
"snoc" [style=solid];
"span" [style=solid];
"split" [style=solid];
"splitAt" [style=solid];
"splitOn" [style=solid];
"strip" [style=solid];
"stripEnd" [style=solid];
"stripPrefix" [style=solid];
"stripStart" [style=solid];
"stripSuffix" [style=solid];
"sumP" [style=solid];
"tail" [style=solid];
"tails" [style=solid];
"take" [style=solid];
"takeEnd" [style=solid];
"takeWhile" [style=solid];
"takeWhileEnd" [style=solid];
"textDataType" [style=solid];
"toCaseFold" [style=solid];
"toLower" [style=solid];
"toTitle" [style=solid];
"toUpper" [style=solid];
"transpose" [style=solid];
"uncons" [style=solid];
"unfoldr" [style=solid];
"unfoldrN" [style=solid];
"unlines" [style=solid];
"unsnoc" [style=solid];
"unwords" [style=solid];
"words" [style=solid];
"zip" [style=solid];
"zipWith" [style=solid];
"" -> "all";
"" -> "any";
"" -> "append";
"" -> "break";
"" -> "breakOn";
"" -> "breakOnAll";
"" -> "breakOnEnd";
"" -> "center";
"" -> "chunksOf";
"" -> "commonPrefixes";
"" -> "compareLength";
"" -> "compareText";
"" -> "concat";
"" -> "concatMap";
"" -> "cons";
"" -> "copy";
"" -> "count";
"" -> "drop";
"" -> "dropAround";
"" -> "dropEnd";
"" -> "dropWhile";
"" -> "dropWhileEnd";
"" -> "filter";
"" -> "find";
"" -> "findIndex";
"" -> "foldl";
"" -> "foldl1";
"" -> "foldl1\'";
"" -> "foldl\'";
"" -> "foldr";
"" -> "foldr1";
"" -> "group";
"" -> "groupBy";
"" -> "head";
"" -> "index";
"" -> "init";
"" -> "inits";
"" -> "intercalate";
"" -> "intersperse";
"" -> "isInfixOf";
"" -> "isPrefixOf";
"" -> "isSuffixOf";
"" -> "justifyLeft";
"" -> "justifyRight";
"" -> "last";
"" -> "length";
"" -> "lines";
"" -> "map";
"" -> "mapAccumL";
"" -> "mapAccumR";
"" -> "maximum";
"" -> "minimum";
"" -> "null";
"" -> "pack";
"" -> "packConstr";
"" -> "partition";
"" -> "replace";
"" -> "replicate";
"" -> "reverse";
"" -> "scanl";
"" -> "scanl1";
"" -> "scanr";
"" -> "scanr1";
"" -> "snoc";
"" -> "span";
"" -> "split";
"" -> "splitAt";
"" -> "splitOn";
"" -> "strip";
"" -> "stripEnd";
"" -> "stripPrefix";
"" -> "stripStart";
"" -> "stripSuffix";
"" -> "tail";
"" -> "tails";
"" -> "take";
"" -> "takeEnd";
"" -> "takeWhile";
"" -> "takeWhileEnd";
"" -> "textDataType";
"" -> "toCaseFold";
"" -> "toLower";
"" -> "toTitle";
"" -> "toUpper";
"" -> "transpose";
"" -> "uncons";
"" -> "unfoldr";
"" -> "unfoldrN";
"" -> "unlines";
"" -> "unsnoc";
"" -> "unwords";
"" -> "words";
"" -> "zip";
"" -> "zipWith";
"append" -> "overflowError";
"break" -> "span";
"breakOn" -> "emptyError";
"breakOn" -> "null";
"breakOnAll" -> "emptyError";
"breakOnAll" -> "null";
"breakOnEnd" -> "breakOn";
"breakOnEnd" -> "reverse";
"center" -> "append";
"center" -> "length";
"center" -> "replicateChar";
"chunksOf" -> "null";
"chunksOf" -> "splitAt";
"concat" -> "null";
"concat" -> "sumP";
"concatMap" -> "concat";
"concatMap" -> "foldr";
"cons" -> "cons";
"count" -> "countChar";
"count" -> "emptyError";
"count" -> "isSingleton";
"count" -> "null";
"drop" -> "iterN";
"dropAround" -> "dropWhile";
"dropAround" -> "dropWhileEnd";
"dropEnd" -> "iterNEnd";
"group" -> "groupBy";
"groupBy" -> "findAIndexOrEnd";
"groupBy" -> "null";
"init" -> "emptyError";
"intercalate" -> "concat";
"isInfixOf" -> "isSingleton";
"isInfixOf" -> "null";
"justifyLeft" -> "append";
"justifyLeft" -> "length";
"justifyLeft" -> "replicateChar";
"justifyRight" -> "append";
"justifyRight" -> "length";
"justifyRight" -> "replicateChar";
"last" -> "emptyError";
"lines" -> "lines";
"lines" -> "null";
"mapAccumL" -> "second";
"mapAccumR" -> "reverse";
"mapAccumR" -> "second";
"packConstr" -> "textDataType";
"partition" -> "filter";
"replace" -> "emptyError";
"replicate" -> "isSingleton";
"replicate" -> "replicateChar";
"scanl1" -> "null";
"scanl1" -> "scanl";
"scanr1" -> "init";
"scanr1" -> "last";
"scanr1" -> "null";
"scanr1" -> "scanr";
"split" -> "null";
"splitAt" -> "iterN";
"splitOn" -> "emptyError";
"splitOn" -> "isSingleton";
"splitOn" -> "split";
"strip" -> "dropAround";
"stripEnd" -> "dropWhileEnd";
"stripPrefix" -> "isPrefixOf";
"stripStart" -> "dropWhile";
"stripSuffix" -> "isSuffixOf";
"sumP" -> "overflowError";
"tail" -> "emptyError";
"tails" -> "null";
"tails" -> "tails";
"take" -> "iterN";
"takeEnd" -> "iterNEnd";
"textDataType" -> "packConstr";
"transpose" -> "pack";
"unlines" -> "concat";
"unlines" -> "snoc";
"unwords" -> "intercalate";
}
