strict digraph deps {
"atEnd" [style=solid];
"binop" [style=solid];
"choice" [style=solid];
"compareResults" [style=solid];
"concatReverse" [style=solid];
"count" [style=solid];
"decimal" [style=solid];
"demandInput" [style=solid];
"demandInput_" [style=solid];
"digit" [style=solid];
"double" [style=solid];
"eitherP" [style=solid];
"eitherResult" [style=solid];
"endOfInput" [style=solid];
"f" [style=solid];
"feed" [style=solid];
"gets" [style=solid];
"hexadecimal" [style=solid];
"infix" [style=solid];
"isDecimal" [style=solid];
"isEndOfLine" [style=solid];
"isHorizontalSpace" [style=solid];
"letter" [style=solid];
"liftM2\'" [style=solid];
"lookAhead" [style=solid];
"many1" [style=solid];
"many1\'" [style=solid];
"manyTill" [style=solid];
"manyTill\'" [style=solid];
"many\'" [style=solid];
"maybeResult" [style=solid];
"number" [style=solid];
"option" [style=solid];
"p" [style=solid];
"parse" [style=solid];
"parseT" [style=solid];
"parseTest" [style=solid];
"parseWith" [style=solid];
"prompt" [style=solid];
"put" [style=solid];
"rational" [style=solid];
"s" [style=solid];
"satisfyElem" [style=solid];
"satisfySuspended" [style=solid];
"scientific" [style=solid];
"scientifically" [style=solid];
"sepBy" [style=solid];
"sepBy1" [style=solid];
"sepBy1\'" [style=solid];
"sepBy\'" [style=solid];
"signed" [style=solid];
"skipMany" [style=solid];
"skipMany1" [style=solid];
"skipSpace" [style=solid];
"space" [style=solid];
"string" [style=solid];
"take" [style=solid];
"takeWhile" [style=solid];
"try" [style=solid];
"wantInput" [style=solid];
"" -> "choice";
"" -> "count";
"" -> "eitherP";
"" -> "eitherResult";
"" -> "feed";
"" -> "many1";
"" -> "many1\'";
"" -> "manyTill";
"" -> "manyTill\'";
"" -> "many\'";
"" -> "maybeResult";
"" -> "option";
"" -> "parse";
"" -> "parseTest";
"" -> "parseWith";
"" -> "sepBy";
"" -> "sepBy1";
"" -> "sepBy1\'";
"" -> "sepBy\'";
"" -> "skipMany";
"" -> "skipMany1";
"" -> "try";
"atEnd" -> "gets";
"atEnd" -> "wantInput";
"binop" -> "binop";
"binop" -> "choice";
"binop" -> "count";
"binop" -> "decimal";
"binop" -> "digit";
"binop" -> "double";
"binop" -> "eitherP";
"binop" -> "eitherResult";
"binop" -> "feed";
"binop" -> "hexadecimal";
"binop" -> "isEndOfLine";
"binop" -> "isHorizontalSpace";
"binop" -> "letter";
"binop" -> "many1";
"binop" -> "many1\'";
"binop" -> "manyTill";
"binop" -> "manyTill\'";
"binop" -> "many\'";
"binop" -> "maybeResult";
"binop" -> "number";
"binop" -> "option";
"binop" -> "parse";
"binop" -> "parseTest";
"binop" -> "parseWith";
"binop" -> "rational";
"binop" -> "scientific";
"binop" -> "sepBy";
"binop" -> "sepBy1";
"binop" -> "sepBy1\'";
"binop" -> "sepBy\'";
"binop" -> "signed";
"binop" -> "skipMany";
"binop" -> "skipMany1";
"binop" -> "skipSpace";
"binop" -> "space";
"binop" -> "try";
"choice" -> "f";
"count" -> "f";
"count" -> "p";
"decimal" -> "isDecimal";
"demandInput" -> "prompt";
"demandInput_" -> "s";
"double" -> "scientifically";
"eitherResult" -> "atEnd";
"eitherResult" -> "choice";
"eitherResult" -> "count";
"eitherResult" -> "eitherP";
"eitherResult" -> "endOfInput";
"eitherResult" -> "feed";
"eitherResult" -> "lookAhead";
"eitherResult" -> "many1";
"eitherResult" -> "many1\'";
"eitherResult" -> "manyTill";
"eitherResult" -> "manyTill\'";
"eitherResult" -> "many\'";
"eitherResult" -> "option";
"eitherResult" -> "satisfyElem";
"eitherResult" -> "sepBy";
"eitherResult" -> "sepBy1";
"eitherResult" -> "sepBy1\'";
"eitherResult" -> "sepBy\'";
"eitherResult" -> "skipMany";
"eitherResult" -> "skipMany1";
"eitherResult" -> "try";
"endOfInput" -> "demandInput";
"f" -> "atEnd";
"f" -> "f";
"f" -> "parse";
"f" -> "parseT";
"f" -> "s";
"f" -> "string";
"f" -> "take";
"f" -> "takeWhile";
"gets" -> "f";
"gets" -> "s";
"infix" -> "f";
"liftM2\'" -> "f";
"lookAhead" -> "atEnd";
"lookAhead" -> "compareResults";
"lookAhead" -> "concatReverse";
"lookAhead" -> "demandInput";
"lookAhead" -> "demandInput_";
"lookAhead" -> "endOfInput";
"lookAhead" -> "p";
"lookAhead" -> "prompt";
"lookAhead" -> "satisfyElem";
"lookAhead" -> "wantInput";
"many1" -> "p";
"many1\'" -> "f";
"many1\'" -> "liftM2\'";
"many1\'" -> "many\'";
"many1\'" -> "p";
"many1\'" -> "s";
"manyTill" -> "p";
"manyTill\'" -> "f";
"manyTill\'" -> "liftM2\'";
"manyTill\'" -> "p";
"many\'" -> "f";
"many\'" -> "liftM2\'";
"many\'" -> "p";
"number" -> "s";
"number" -> "scientifically";
"option" -> "p";
"p" -> "p";
"parse" -> "p";
"parseT" -> "p";
"parseTest" -> "p";
"parseTest" -> "parse";
"parseTest" -> "s";
"parseWith" -> "p";
"parseWith" -> "parse";
"parseWith" -> "s";
"prompt" -> "s";
"put" -> "s";
"rational" -> "scientifically";
"s" -> "f";
"s" -> "s";
"satisfyElem" -> "p";
"satisfyElem" -> "satisfySuspended";
"satisfySuspended" -> "demandInput";
"satisfySuspended" -> "p";
"scientific" -> "scientifically";
"scientifically" -> "decimal";
"scientifically" -> "f";
"scientifically" -> "signed";
"sepBy" -> "p";
"sepBy" -> "s";
"sepBy" -> "sepBy1";
"sepBy1" -> "p";
"sepBy1" -> "s";
"sepBy1\'" -> "f";
"sepBy1\'" -> "liftM2\'";
"sepBy1\'" -> "p";
"sepBy1\'" -> "s";
"sepBy\'" -> "f";
"sepBy\'" -> "liftM2\'";
"sepBy\'" -> "p";
"sepBy\'" -> "s";
"sepBy\'" -> "sepBy1\'";
"signed" -> "p";
"skipMany" -> "f";
"skipMany" -> "p";
"skipMany1" -> "p";
"skipMany1" -> "skipMany";
"skipSpace" -> "f";
"skipSpace" -> "s";
"string" -> "gets";
"string" -> "put";
"string" -> "s";
"take" -> "gets";
"take" -> "put";
"take" -> "s";
"takeWhile" -> "gets";
"takeWhile" -> "p";
"takeWhile" -> "put";
"try" -> "p";
"wantInput" -> "prompt";
}
