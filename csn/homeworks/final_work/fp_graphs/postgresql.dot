strict digraph deps {
"_daterange" [style=solid];
"_daterangeOid" [style=solid];
"_int4range" [style=solid];
"_int4rangeOid" [style=solid];
"_int8range" [style=solid];
"_int8rangeOid" [style=solid];
"_numrange" [style=solid];
"_numrangeOid" [style=solid];
"_tsrange" [style=solid];
"_tsrangeOid" [style=solid];
"_tstzrange" [style=solid];
"_tstzrangeOid" [style=solid];
"array" [style=solid];
"arrayFormat" [style=solid];
"array_bit" [style=solid];
"array_bitOid" [style=solid];
"array_bool" [style=solid];
"array_boolOid" [style=solid];
"array_box" [style=solid];
"array_boxOid" [style=solid];
"array_bpchar" [style=solid];
"array_bpcharOid" [style=solid];
"array_bytea" [style=solid];
"array_byteaOid" [style=solid];
"array_char" [style=solid];
"array_charOid" [style=solid];
"array_cid" [style=solid];
"array_cidOid" [style=solid];
"array_cidr" [style=solid];
"array_cidrOid" [style=solid];
"array_circle" [style=solid];
"array_circleOid" [style=solid];
"array_date" [style=solid];
"array_dateOid" [style=solid];
"array_float4" [style=solid];
"array_float4Oid" [style=solid];
"array_float8" [style=solid];
"array_float8Oid" [style=solid];
"array_inet" [style=solid];
"array_inetOid" [style=solid];
"array_int2" [style=solid];
"array_int2Oid" [style=solid];
"array_int2vector" [style=solid];
"array_int2vectorOid" [style=solid];
"array_int4" [style=solid];
"array_int4Oid" [style=solid];
"array_int8" [style=solid];
"array_int8Oid" [style=solid];
"array_interval" [style=solid];
"array_intervalOid" [style=solid];
"array_json" [style=solid];
"array_jsonOid" [style=solid];
"array_jsonb" [style=solid];
"array_jsonbOid" [style=solid];
"array_line" [style=solid];
"array_lineOid" [style=solid];
"array_lseg" [style=solid];
"array_lsegOid" [style=solid];
"array_macaddr" [style=solid];
"array_macaddrOid" [style=solid];
"array_money" [style=solid];
"array_moneyOid" [style=solid];
"array_name" [style=solid];
"array_nameOid" [style=solid];
"array_numeric" [style=solid];
"array_numericOid" [style=solid];
"array_oid" [style=solid];
"array_oidOid" [style=solid];
"array_oidvector" [style=solid];
"array_oidvectorOid" [style=solid];
"array_path" [style=solid];
"array_pathOid" [style=solid];
"array_point" [style=solid];
"array_pointOid" [style=solid];
"array_polygon" [style=solid];
"array_polygonOid" [style=solid];
"array_record" [style=solid];
"array_recordOid" [style=solid];
"array_refcursor" [style=solid];
"array_refcursorOid" [style=solid];
"array_regclass" [style=solid];
"array_regclassOid" [style=solid];
"array_regoper" [style=solid];
"array_regoperOid" [style=solid];
"array_regoperator" [style=solid];
"array_regoperatorOid" [style=solid];
"array_regproc" [style=solid];
"array_regprocOid" [style=solid];
"array_regprocedure" [style=solid];
"array_regprocedureOid" [style=solid];
"array_regtype" [style=solid];
"array_regtypeOid" [style=solid];
"array_text" [style=solid];
"array_textOid" [style=solid];
"array_tid" [style=solid];
"array_tidOid" [style=solid];
"array_time" [style=solid];
"array_timeOid" [style=solid];
"array_timestamp" [style=solid];
"array_timestampOid" [style=solid];
"array_timestamptz" [style=solid];
"array_timestamptzOid" [style=solid];
"array_timetz" [style=solid];
"array_timetzOid" [style=solid];
"array_uuid" [style=solid];
"array_uuidOid" [style=solid];
"array_varbit" [style=solid];
"array_varbitOid" [style=solid];
"array_varchar" [style=solid];
"array_varcharOid" [style=solid];
"array_xid" [style=solid];
"array_xidOid" [style=solid];
"array_xml" [style=solid];
"array_xmlOid" [style=solid];
"attoFieldParser" [style=solid];
"begin" [style=solid];
"beginLevel" [style=solid];
"beginMode" [style=solid];
"bit" [style=solid];
"bitOid" [style=solid];
"bool" [style=solid];
"boolOid" [style=solid];
"box" [style=solid];
"boxOid" [style=solid];
"bpchar" [style=solid];
"bpcharOid" [style=solid];
"breakOnSingleQuestionMark" [style=solid];
"buildAction" [style=solid];
"buildQuery" [style=solid];
"bytea" [style=solid];
"byteaOid" [style=solid];
"catchViolation" [style=solid];
"char" [style=solid];
"charOid" [style=solid];
"checkError" [style=solid];
"cid" [style=solid];
"cidOid" [style=solid];
"cidr" [style=solid];
"cidrOid" [style=solid];
"circle" [style=solid];
"circleOid" [style=solid];
"close" [style=solid];
"closeCursor" [style=solid];
"cmpZonedTime" [style=solid];
"cmpZonedTimestamp" [style=solid];
"commit" [style=solid];
"connect" [style=solid];
"connectPostgreSQL" [style=solid];
"connectdb" [style=solid];
"constraintViolation" [style=solid];
"constraintViolationE" [style=solid];
"consumeResults" [style=solid];
"contains" [style=solid];
"containsBy" [style=solid];
"conversionError" [style=solid];
"conversionMap" [style=solid];
"convertNotice" [style=solid];
"copy" [style=solid];
"copy_" [style=solid];
"date" [style=solid];
"dateOid" [style=solid];
"dateToBuilder" [style=solid];
"daterange" [style=solid];
"daterangeOid" [style=solid];
"day" [style=solid];
"dayToBuilder" [style=solid];
"declareCursor" [style=solid];
"defaultConnectInfo" [style=solid];
"defaultFoldOptions" [style=solid];
"defaultIsolationLevel" [style=solid];
"defaultReadWriteMode" [style=solid];
"defaultTransactionMode" [style=solid];
"delimit" [style=solid];
"digit" [style=solid];
"digits2" [style=solid];
"digits3" [style=solid];
"digits4" [style=solid];
"disconnectedError" [style=solid];
"doCopy" [style=solid];
"doCopyIn" [style=solid];
"doFold" [style=solid];
"doFromField" [style=solid];
"doubleQuoted" [style=solid];
"ellipsis" [style=solid];
"empty" [style=solid];
"eq" [style=solid];
"esc" [style=solid];
"escapeAppend" [style=solid];
"escapeByteaConn" [style=solid];
"escapeIdentifier" [style=solid];
"escapeStringConn" [style=solid];
"escapeWrap" [style=solid];
"exec" [style=solid];
"execute" [style=solid];
"executeMany" [style=solid];
"execute_" [style=solid];
"f" [style=solid];
"fatalError" [style=solid];
"fdError" [style=solid];
"ff" [style=solid];
"field" [style=solid];
"fieldWith" [style=solid];
"finishExecute" [style=solid];
"finishQueryWith" [style=solid];
"finishQueryWithV" [style=solid];
"finishQueryWithVU" [style=solid];
"finishQueryWith\'" [style=solid];
"float4" [style=solid];
"float4Oid" [style=solid];
"float8" [style=solid];
"float8Oid" [style=solid];
"fmt" [style=solid];
"fmtError" [style=solid];
"fmtErrorBs" [style=solid];
"fmt\'" [style=solid];
"fold" [style=solid];
"foldCopyData" [style=solid];
"foldForward" [style=solid];
"foldForwardWithParser" [style=solid];
"foldM\'" [style=solid];
"foldWith" [style=solid];
"foldWithOptions" [style=solid];
"foldWithOptionsAndParser" [style=solid];
"foldWithOptionsAndParser_" [style=solid];
"foldWithOptions_" [style=solid];
"foldWith_" [style=solid];
"fold_" [style=solid];
"forEach" [style=solid];
"forEachWith" [style=solid];
"forEachWith_" [style=solid];
"forEach_" [style=solid];
"forM\'" [style=solid];
"format" [style=solid];
"formatMany" [style=solid];
"formatQuery" [style=solid];
"frac" [style=solid];
"fromArray" [style=solid];
"fromFieldJSONByteString" [style=solid];
"fromFieldRange" [style=solid];
"fromJSONField" [style=solid];
"fromPico" [style=solid];
"getAeson" [style=solid];
"getAttInfos" [style=solid];
"getBackendPID" [style=solid];
"getCopyCommandTag" [style=solid];
"getCopyData" [style=solid];
"getDate" [style=solid];
"getDay" [style=solid];
"getLocalTime" [style=solid];
"getLocalTimestamp" [style=solid];
"getNotification" [style=solid];
"getNotificationNonBlocking" [style=solid];
"getRowWith" [style=solid];
"getTimeOfDay" [style=solid];
"getTimeZone" [style=solid];
"getTimeZoneHMS" [style=solid];
"getTypeInfo" [style=solid];
"getTypeInfoByCol" [style=solid];
"getTypeInfo\'" [style=solid];
"getTypenameByCol" [style=solid];
"getTypoid" [style=solid];
"getUTCTime" [style=solid];
"getUTCTimestamp" [style=solid];
"getUnbounded" [style=solid];
"getZonedTime" [style=solid];
"getZonedTimestamp" [style=solid];
"getvalue" [style=solid];
"hstore" [style=solid];
"inQuotes" [style=solid];
"inet" [style=solid];
"inetOid" [style=solid];
"infixr" [style=solid];
"inlineTypoid" [style=solid];
"inlineTypoidP" [style=solid];
"int2" [style=solid];
"int2Oid" [style=solid];
"int2vector" [style=solid];
"int2vectorOid" [style=solid];
"int4" [style=solid];
"int4Oid" [style=solid];
"int4range" [style=solid];
"int4rangeOid" [style=solid];
"int8" [style=solid];
"int8Oid" [style=solid];
"int8range" [style=solid];
"int8rangeOid" [style=solid];
"interleaveFoldr" [style=solid];
"interval" [style=solid];
"intervalOid" [style=solid];
"isEmpty" [style=solid];
"isEmptyBy" [style=solid];
"isFailedTransactionError" [style=solid];
"isNoActiveTransactionError" [style=solid];
"isSerializationError" [style=solid];
"isSqlState" [style=solid];
"json" [style=solid];
"jsonOid" [style=solid];
"jsonb" [style=solid];
"jsonbOid" [style=solid];
"left" [style=solid];
"libPQError" [style=solid];
"liftB" [style=solid];
"liftConversion" [style=solid];
"liftPQ" [style=solid];
"liftRowParser" [style=solid];
"line" [style=solid];
"lineOid" [style=solid];
"loClose" [style=solid];
"loCreat" [style=solid];
"loCreate" [style=solid];
"loExport" [style=solid];
"loImport" [style=solid];
"loImportWithOid" [style=solid];
"loOpen" [style=solid];
"loRead" [style=solid];
"loSeek" [style=solid];
"loTell" [style=solid];
"loTruncate" [style=solid];
"loUnlink" [style=solid];
"loWrite" [style=solid];
"localTime" [style=solid];
"localTimeToBuilder" [style=solid];
"localTimestampToBuilder" [style=solid];
"localToUTCTimeOfDayHMS" [style=solid];
"lowerBound" [style=solid];
"lseg" [style=solid];
"lsegOid" [style=solid];
"macaddr" [style=solid];
"macaddrOid" [style=solid];
"mask" [style=solid];
"minimizeSpace" [style=solid];
"mkCompats" [style=solid];
"money" [style=solid];
"moneyOid" [style=solid];
"name" [style=solid];
"nameOid" [style=solid];
"newNullConnection" [style=solid];
"newSavepoint" [style=solid];
"newTempName" [style=solid];
"nfields" [style=solid];
"nominalDiffTime" [style=solid];
"nominalDiffTimeToBuilder" [style=solid];
"null" [style=solid];
"numFieldsRemaining" [style=solid];
"numeric" [style=solid];
"numericOid" [style=solid];
"numrange" [style=solid];
"numrangeOid" [style=solid];
"oid" [style=solid];
"oid2int" [style=solid];
"oidOid" [style=solid];
"oidvector" [style=solid];
"oidvectorOid" [style=solid];
"ok16" [style=solid];
"ok32" [style=solid];
"ok64" [style=solid];
"okBinary" [style=solid];
"okInt" [style=solid];
"okText" [style=solid];
"okText\'" [style=solid];
"optionalField" [style=solid];
"parseDate" [style=solid];
"parseDay" [style=solid];
"parseHStore" [style=solid];
"parseHStoreKeyVal" [style=solid];
"parseHStoreList" [style=solid];
"parseHStoreText" [style=solid];
"parseHStoreTexts" [style=solid];
"parseLocalTime" [style=solid];
"parseLocalTimestamp" [style=solid];
"parseMaybe" [style=solid];
"parseQ1" [style=solid];
"parseQ2" [style=solid];
"parseTemplate" [style=solid];
"parseTimeOfDay" [style=solid];
"parseUTCTime" [style=solid];
"parseUTCTimestamp" [style=solid];
"parseZonedTime" [style=solid];
"parseZonedTimestamp" [style=solid];
"path" [style=solid];
"pathOid" [style=solid];
"pgArrayFieldParser" [style=solid];
"pg_double" [style=solid];
"pg_rational" [style=solid];
"pgrange" [style=solid];
"plain" [style=solid];
"point" [style=solid];
"pointOid" [style=solid];
"polygon" [style=solid];
"polygonOid" [style=solid];
"postgreSQLConnectionString" [style=solid];
"putCopyData" [style=solid];
"putCopyEnd" [style=solid];
"putCopyError" [style=solid];
"query" [style=solid];
"queryWith" [style=solid];
"queryWith_" [style=solid];
"query_" [style=solid];
"quote" [style=solid];
"quoted" [style=solid];
"rangeElem" [style=solid];
"rangeToBuilder" [style=solid];
"rangeToBuilderBy" [style=solid];
"record" [style=solid];
"recordOid" [style=solid];
"refcursor" [style=solid];
"refcursorOid" [style=solid];
"regclass" [style=solid];
"regclassOid" [style=solid];
"regoper" [style=solid];
"regoperOid" [style=solid];
"regoperator" [style=solid];
"regoperatorOid" [style=solid];
"regproc" [style=solid];
"regprocOid" [style=solid];
"regprocedure" [style=solid];
"regprocedureOid" [style=solid];
"regtype" [style=solid];
"regtypeOid" [style=solid];
"releaseSavepoint" [style=solid];
"renderNull" [style=solid];
"returnError" [style=solid];
"returning" [style=solid];
"returningWith" [style=solid];
"rollback" [style=solid];
"rollbackToAndReleaseSavepoint" [style=solid];
"rollbackToSavepoint" [style=solid];
"rollback_" [style=solid];
"scanTillQuote" [style=solid];
"seconds" [style=solid];
"skipWhiteSpace" [style=solid];
"sql" [style=solid];
"sqlExp" [style=solid];
"staticTypeInfo" [style=solid];
"tableColumn" [style=solid];
"tableOid" [style=solid];
"text" [style=solid];
"textOid" [style=solid];
"throwLibPQError" [style=solid];
"throwResultError" [style=solid];
"tid" [style=solid];
"tidOid" [style=solid];
"time" [style=solid];
"timeOfDay" [style=solid];
"timeOfDayToBuilder" [style=solid];
"timeOid" [style=solid];
"timeZone" [style=solid];
"timeZoneHMS" [style=solid];
"timeZoneToBuilder" [style=solid];
"timestamp" [style=solid];
"timestampOid" [style=solid];
"timestamptz" [style=solid];
"timestamptzOid" [style=solid];
"timetz" [style=solid];
"timetzOid" [style=solid];
"toBuilder" [style=solid];
"toByteString" [style=solid];
"toJSONField" [style=solid];
"toLazyByteString" [style=solid];
"toPico" [style=solid];
"tsrange" [style=solid];
"tsrangeOid" [style=solid];
"tstzrange" [style=solid];
"tstzrangeOid" [style=solid];
"twoDigits" [style=solid];
"typeInfo" [style=solid];
"typeInfoByOid" [style=solid];
"typename" [style=solid];
"unBinary" [style=solid];
"unboundedToBuilder" [style=solid];
"unescapeBytea" [style=solid];
"unknown" [style=solid];
"unknownOid" [style=solid];
"upperBound" [style=solid];
"utc" [style=solid];
"utcTime" [style=solid];
"utcTimeToBuilder" [style=solid];
"utcTimestampToBuilder" [style=solid];
"uuid" [style=solid];
"uuidOid" [style=solid];
"varbit" [style=solid];
"varbitOid" [style=solid];
"varchar" [style=solid];
"varcharOid" [style=solid];
"void" [style=solid];
"voidOid" [style=solid];
"withConnection" [style=solid];
"withSavepoint" [style=solid];
"withTransaction" [style=solid];
"withTransactionLevel" [style=solid];
"withTransactionMode" [style=solid];
"withTransactionModeRetry" [style=solid];
"withTransactionModeRetry\'" [style=solid];
"withTransactionSerializable" [style=solid];
"xid" [style=solid];
"xidOid" [style=solid];
"xml" [style=solid];
"xmlOid" [style=solid];
"year" [style=solid];
"zonedTime" [style=solid];
"zonedTimeToBuilder" [style=solid];
"zonedTimestampToBuilder" [style=solid];
"" -> "begin";
"" -> "commit";
"" -> "defaultFoldOptions";
"" -> "execute";
"" -> "executeMany";
"" -> "execute_";
"" -> "fold";
"" -> "foldWith";
"" -> "foldWithOptions";
"" -> "foldWithOptionsAndParser";
"" -> "foldWithOptionsAndParser_";
"" -> "foldWithOptions_";
"" -> "foldWith_";
"" -> "fold_";
"" -> "forEach";
"" -> "forEachWith";
"" -> "forEachWith_";
"" -> "forEach_";
"" -> "formatMany";
"" -> "formatQuery";
"" -> "query";
"" -> "queryWith";
"" -> "queryWith_";
"" -> "query_";
"" -> "returning";
"" -> "returningWith";
"" -> "rollback";
"" -> "withSavepoint";
"" -> "withTransaction";
"_daterange" -> "_daterangeOid";
"_daterange" -> "daterange";
"_int4range" -> "_int4rangeOid";
"_int4range" -> "int4range";
"_int8range" -> "_int8rangeOid";
"_int8range" -> "int8range";
"_int8rangeOid" -> "toByteString";
"_numrange" -> "_numrangeOid";
"_numrange" -> "numrange";
"_tsrange" -> "_tsrangeOid";
"_tsrange" -> "tsrange";
"_tstzrange" -> "_tstzrangeOid";
"_tstzrange" -> "tstzrange";
"array" -> "array";
"array" -> "char";
"array" -> "plain";
"array" -> "quoted";
"arrayFormat" -> "array";
"arrayFormat" -> "plain";
"arrayFormat" -> "quoted";
"array_bit" -> "array_bitOid";
"array_bit" -> "bit";
"array_bool" -> "array_boolOid";
"array_bool" -> "bool";
"array_box" -> "array_boxOid";
"array_box" -> "box";
"array_bpchar" -> "array_bpcharOid";
"array_bpchar" -> "bpchar";
"array_bytea" -> "array_byteaOid";
"array_bytea" -> "bytea";
"array_char" -> "array_charOid";
"array_char" -> "char";
"array_cid" -> "array_cidOid";
"array_cid" -> "cid";
"array_cidr" -> "array_cidrOid";
"array_cidr" -> "cidr";
"array_circle" -> "array_circleOid";
"array_circle" -> "circle";
"array_date" -> "array_dateOid";
"array_date" -> "date";
"array_float4" -> "array_float4Oid";
"array_float4" -> "float4";
"array_float8" -> "array_float8Oid";
"array_float8" -> "float8";
"array_inet" -> "array_inetOid";
"array_inet" -> "inet";
"array_int2" -> "array_int2Oid";
"array_int2" -> "int2";
"array_int2vector" -> "array_int2vectorOid";
"array_int2vector" -> "int2vector";
"array_int4" -> "array_int4Oid";
"array_int4" -> "int4";
"array_int8" -> "array_int8Oid";
"array_int8" -> "int8";
"array_interval" -> "array_intervalOid";
"array_interval" -> "interval";
"array_json" -> "array_jsonOid";
"array_json" -> "json";
"array_jsonb" -> "array_jsonbOid";
"array_jsonb" -> "jsonb";
"array_line" -> "array_lineOid";
"array_line" -> "line";
"array_lseg" -> "array_lsegOid";
"array_lseg" -> "lseg";
"array_macaddr" -> "array_macaddrOid";
"array_macaddr" -> "macaddr";
"array_money" -> "array_moneyOid";
"array_money" -> "money";
"array_name" -> "array_nameOid";
"array_name" -> "name";
"array_numeric" -> "array_numericOid";
"array_numeric" -> "numeric";
"array_oid" -> "array_oidOid";
"array_oid" -> "oid";
"array_oidvector" -> "array_oidvectorOid";
"array_oidvector" -> "oidvector";
"array_path" -> "array_pathOid";
"array_path" -> "path";
"array_point" -> "array_pointOid";
"array_point" -> "point";
"array_polygon" -> "array_polygonOid";
"array_polygon" -> "polygon";
"array_record" -> "array_recordOid";
"array_record" -> "record";
"array_refcursor" -> "array_refcursorOid";
"array_refcursor" -> "refcursor";
"array_regclass" -> "array_regclassOid";
"array_regclass" -> "regclass";
"array_regoper" -> "array_regoperOid";
"array_regoper" -> "regoper";
"array_regoperator" -> "array_regoperatorOid";
"array_regoperator" -> "regoperator";
"array_regproc" -> "array_regprocOid";
"array_regproc" -> "regproc";
"array_regprocedure" -> "array_regprocedureOid";
"array_regprocedure" -> "regprocedure";
"array_regtype" -> "array_regtypeOid";
"array_regtype" -> "regtype";
"array_text" -> "array_textOid";
"array_text" -> "text";
"array_tid" -> "array_tidOid";
"array_tid" -> "tid";
"array_time" -> "array_timeOid";
"array_time" -> "time";
"array_timestamp" -> "array_timestampOid";
"array_timestamp" -> "timestamp";
"array_timestamptz" -> "array_timestamptzOid";
"array_timestamptz" -> "timestamptz";
"array_timetz" -> "array_timetzOid";
"array_timetz" -> "timetz";
"array_uuid" -> "array_uuidOid";
"array_uuid" -> "uuid";
"array_varbit" -> "array_varbitOid";
"array_varbit" -> "varbit";
"array_varchar" -> "array_varcharOid";
"array_varchar" -> "varchar";
"array_xid" -> "array_xidOid";
"array_xid" -> "xid";
"array_xml" -> "array_xmlOid";
"array_xml" -> "xml";
"attoFieldParser" -> "doFromField";
"attoFieldParser" -> "f";
"attoFieldParser" -> "field";
"attoFieldParser" -> "fieldWith";
"attoFieldParser" -> "numFieldsRemaining";
"attoFieldParser" -> "returnError";
"begin" -> "beginMode";
"begin" -> "defaultTransactionMode";
"beginLevel" -> "beginMode";
"beginLevel" -> "defaultTransactionMode";
"beginMode" -> "execute_";
"bit" -> "bitOid";
"bool" -> "boolOid";
"box" -> "boxOid";
"bpchar" -> "bpcharOid";
"breakOnSingleQuestionMark" -> "finishQueryWith";
"breakOnSingleQuestionMark" -> "finishQueryWithV";
"breakOnSingleQuestionMark" -> "finishQueryWithVU";
"breakOnSingleQuestionMark" -> "getRowWith";
"buildAction" -> "buildAction";
"buildAction" -> "escapeByteaConn";
"buildAction" -> "escapeIdentifier";
"buildAction" -> "escapeStringConn";
"buildAction" -> "fmtErrorBs";
"buildAction" -> "quote";
"buildQuery" -> "breakOnSingleQuestionMark";
"buildQuery" -> "buildAction";
"buildQuery" -> "fmtError";
"bytea" -> "byteaOid";
"catchViolation" -> "constraintViolation";
"catchViolation" -> "f";
"char" -> "charOid";
"cid" -> "cidOid";
"cidr" -> "cidrOid";
"circle" -> "circleOid";
"close" -> "mask";
"closeCursor" -> "execute_";
"closeCursor" -> "isFailedTransactionError";
"closeCursor" -> "name";
"closeCursor" -> "void";
"cmpZonedTime" -> "cmpZonedTimestamp";
"cmpZonedTime" -> "dayToBuilder";
"cmpZonedTime" -> "localTimeToBuilder";
"cmpZonedTime" -> "rangeToBuilder";
"cmpZonedTime" -> "rangeToBuilderBy";
"cmpZonedTime" -> "timeOfDayToBuilder";
"cmpZonedTime" -> "utcTimestampToBuilder";
"cmpZonedTime" -> "zonedTimestampToBuilder";
"cmpZonedTimestamp" -> "dateToBuilder";
"cmpZonedTimestamp" -> "localTimestampToBuilder";
"cmpZonedTimestamp" -> "nominalDiffTimeToBuilder";
"cmpZonedTimestamp" -> "rangeToBuilder";
"commit" -> "execute_";
"connect" -> "connectPostgreSQL";
"connect" -> "postgreSQLConnectionString";
"connectPostgreSQL" -> "connectdb";
"connectPostgreSQL" -> "execute_";
"connectPostgreSQL" -> "fatalError";
"connectdb" -> "fdError";
"connectdb" -> "throwLibPQError";
"constraintViolation" -> "parseMaybe";
"constraintViolation" -> "parseQ1";
"constraintViolation" -> "parseQ2";
"constraintViolationE" -> "constraintViolation";
"consumeResults" -> "closeCursor";
"consumeResults" -> "consumeResults";
"consumeResults" -> "declareCursor";
"consumeResults" -> "foldForward";
"consumeResults" -> "foldForwardWithParser";
"contains" -> "containsBy";
"conversionMap" -> "f";
"copy" -> "doCopy";
"copy" -> "formatQuery";
"copy_" -> "doCopy";
"date" -> "dateOid";
"dateToBuilder" -> "dayToBuilder";
"dateToBuilder" -> "unboundedToBuilder";
"daterange" -> "date";
"daterange" -> "daterangeOid";
"day" -> "char";
"day" -> "digits2";
"day" -> "liftB";
"day" -> "twoDigits";
"day" -> "year";
"declareCursor" -> "execute_";
"declareCursor" -> "name";
"declareCursor" -> "newTempName";
"declareCursor" -> "void";
"defaultTransactionMode" -> "defaultIsolationLevel";
"defaultTransactionMode" -> "defaultReadWriteMode";
"delimit" -> "delimit";
"delimit" -> "fmt\'";
"digits2" -> "digit";
"digits3" -> "digit";
"digits3" -> "digits2";
"digits4" -> "digit";
"digits4" -> "digits3";
"disconnectedError" -> "fatalError";
"doCopy" -> "exec";
"doCopy" -> "throwResultError";
"doCopyIn" -> "fdError";
"doFold" -> "closeCursor";
"doFold" -> "declareCursor";
"doFold" -> "f";
"doFold" -> "foldForwardWithParser";
"doFold" -> "withConnection";
"doFold" -> "withTransactionMode";
"doFromField" -> "f";
"doFromField" -> "returnError";
"doubleQuoted" -> "toByteString";
"empty" -> "eq";
"empty" -> "isEmpty";
"esc" -> "f";
"esc" -> "fromPico";
"esc" -> "mask";
"esc" -> "toByteString";
"esc" -> "toPico";
"escapeByteaConn" -> "escapeWrap";
"escapeIdentifier" -> "escapeWrap";
"escapeStringConn" -> "escapeWrap";
"escapeWrap" -> "checkError";
"escapeWrap" -> "f";
"escapeWrap" -> "withConnection";
"exec" -> "fdError";
"exec" -> "sql";
"exec" -> "throwLibPQError";
"exec" -> "withConnection";
"execute" -> "exec";
"execute" -> "finishExecute";
"execute" -> "formatQuery";
"executeMany" -> "exec";
"executeMany" -> "finishExecute";
"executeMany" -> "formatMany";
"execute_" -> "exec";
"execute_" -> "finishExecute";
"ff" -> "f";
"ff" -> "left";
"ff" -> "name";
"ff" -> "pgArrayFieldParser";
"ff" -> "tableOid";
"ff" -> "typename";
"field" -> "fieldWith";
"fieldWith" -> "conversionError";
"fieldWith" -> "ellipsis";
"fieldWith" -> "getTypenameByCol";
"fieldWith" -> "getvalue";
"fieldWith" -> "nfields";
"finishExecute" -> "throwResultError";
"finishQueryWith" -> "finishQueryWith\'";
"finishQueryWith" -> "forM\'";
"finishQueryWith" -> "getRowWith";
"finishQueryWithV" -> "finishQueryWith\'";
"finishQueryWithV" -> "getRowWith";
"finishQueryWithVU" -> "finishQueryWith\'";
"finishQueryWithVU" -> "getRowWith";
"finishQueryWith\'" -> "throwResultError";
"float4" -> "float4Oid";
"float8" -> "float8Oid";
"fmt" -> "fmt\'";
"fmtError" -> "toByteString";
"fmtErrorBs" -> "fmtError";
"fmt\'" -> "delimit";
"fold" -> "defaultFoldOptions";
"fold" -> "foldWithOptions";
"foldCopyData" -> "f";
"foldCopyData" -> "foldCopyData";
"foldCopyData" -> "getCopyData";
"foldForward" -> "foldForwardWithParser";
"foldForwardWithParser" -> "exec";
"foldForwardWithParser" -> "f";
"foldForwardWithParser" -> "foldM\'";
"foldForwardWithParser" -> "getRowWith";
"foldForwardWithParser" -> "name";
"foldForwardWithParser" -> "throwResultError";
"foldForwardWithParser" -> "toByteString";
"foldM\'" -> "catchViolation";
"foldM\'" -> "constraintViolation";
"foldM\'" -> "constraintViolationE";
"foldM\'" -> "f";
"foldM\'" -> "isFailedTransactionError";
"foldM\'" -> "isNoActiveTransactionError";
"foldM\'" -> "isSerializationError";
"foldWith" -> "defaultFoldOptions";
"foldWith" -> "foldWithOptionsAndParser";
"foldWithOptions" -> "foldWithOptionsAndParser";
"foldWithOptionsAndParser" -> "doFold";
"foldWithOptionsAndParser" -> "f";
"foldWithOptionsAndParser" -> "formatQuery";
"foldWithOptionsAndParser_" -> "doFold";
"foldWithOptionsAndParser_" -> "f";
"foldWithOptions_" -> "doFold";
"foldWithOptions_" -> "f";
"foldWith_" -> "defaultFoldOptions";
"foldWith_" -> "foldWithOptionsAndParser_";
"fold_" -> "defaultFoldOptions";
"fold_" -> "foldWithOptions_";
"forEach" -> "forEachWith";
"forEachWith" -> "foldWith";
"forEachWith_" -> "foldWith_";
"forEach_" -> "forEachWith_";
"forM\'" -> "loClose";
"forM\'" -> "loCreat";
"forM\'" -> "loCreate";
"forM\'" -> "loExport";
"forM\'" -> "loImport";
"forM\'" -> "loImportWithOid";
"forM\'" -> "loOpen";
"forM\'" -> "loRead";
"forM\'" -> "loSeek";
"forM\'" -> "loTell";
"forM\'" -> "loTruncate";
"forM\'" -> "loUnlink";
"forM\'" -> "loWrite";
"format" -> "f";
"format" -> "optionalField";
"format" -> "returnError";
"formatMany" -> "buildQuery";
"formatMany" -> "fmtError";
"formatMany" -> "parseTemplate";
"formatMany" -> "toByteString";
"formatQuery" -> "buildQuery";
"formatQuery" -> "null";
"formatQuery" -> "toByteString";
"frac" -> "digit";
"frac" -> "digits4";
"frac" -> "liftB";
"fromArray" -> "array";
"fromArray" -> "f";
"fromArray" -> "fmt";
"fromArray" -> "fromFieldJSONByteString";
"fromArray" -> "liftConversion";
"fromArray" -> "returnError";
"fromArray" -> "uuid";
"fromFieldJSONByteString" -> "f";
"fromFieldJSONByteString" -> "returnError";
"fromFieldRange" -> "cmpZonedTime";
"fromFieldRange" -> "empty";
"fromFieldRange" -> "f";
"fromFieldRange" -> "pgrange";
"fromFieldRange" -> "rangeToBuilder";
"fromFieldRange" -> "rangeToBuilderBy";
"fromFieldRange" -> "returnError";
"fromFieldRange" -> "typeInfo";
"fromFieldRange" -> "utcTimeToBuilder";
"fromFieldRange" -> "zonedTimeToBuilder";
"fromJSONField" -> "eq";
"fromJSONField" -> "f";
"fromJSONField" -> "liftConversion";
"fromJSONField" -> "path";
"fromJSONField" -> "returnError";
"fromPico" -> "copy";
"fromPico" -> "copy_";
"fromPico" -> "foldCopyData";
"fromPico" -> "getCopyData";
"fromPico" -> "putCopyData";
"fromPico" -> "putCopyEnd";
"fromPico" -> "putCopyError";
"getAeson" -> "f";
"getAeson" -> "fromJSONField";
"getAeson" -> "getAeson";
"getAeson" -> "getBackendPID";
"getAeson" -> "getNotification";
"getAeson" -> "getNotificationNonBlocking";
"getAttInfos" -> "getAttInfos";
"getAttInfos" -> "getTypeInfo\'";
"getAttInfos" -> "inlineTypoid";
"getAttInfos" -> "mkCompats";
"getBackendPID" -> "contains";
"getBackendPID" -> "containsBy";
"getBackendPID" -> "empty";
"getBackendPID" -> "f";
"getBackendPID" -> "fromFieldRange";
"getBackendPID" -> "isEmpty";
"getBackendPID" -> "isEmptyBy";
"getBackendPID" -> "withConnection";
"getCopyCommandTag" -> "consumeResults";
"getCopyData" -> "fdError";
"getCopyData" -> "getCopyCommandTag";
"getCopyData" -> "withConnection";
"getDate" -> "getDay";
"getDate" -> "getUnbounded";
"getLocalTimestamp" -> "getLocalTime";
"getLocalTimestamp" -> "getUnbounded";
"getNotification" -> "convertNotice";
"getNotification" -> "fdError";
"getNotification" -> "void";
"getNotification" -> "withConnection";
"getNotificationNonBlocking" -> "convertNotice";
"getNotificationNonBlocking" -> "withConnection";
"getRowWith" -> "ellipsis";
"getRowWith" -> "forM\'";
"getRowWith" -> "getTypeInfo";
"getTimeZone" -> "utc";
"getTypeInfo" -> "getTypeInfo\'";
"getTypeInfo" -> "staticTypeInfo";
"getTypeInfoByCol" -> "getTypeInfo";
"getTypeInfoByCol" -> "oid";
"getTypeInfo\'" -> "fatalError";
"getTypeInfo\'" -> "getAttInfos";
"getTypeInfo\'" -> "getTypeInfo\'";
"getTypeInfo\'" -> "oid";
"getTypeInfo\'" -> "oid2int";
"getTypeInfo\'" -> "query";
"getTypeInfo\'" -> "typeInfo";
"getTypenameByCol" -> "getTypeInfoByCol";
"getTypoid" -> "_daterange";
"getTypoid" -> "_daterangeOid";
"getTypoid" -> "_int4range";
"getTypoid" -> "_int4rangeOid";
"getTypoid" -> "_int8range";
"getTypoid" -> "_int8rangeOid";
"getTypoid" -> "_numrange";
"getTypoid" -> "_numrangeOid";
"getTypoid" -> "_tsrange";
"getTypoid" -> "_tsrangeOid";
"getTypoid" -> "_tstzrange";
"getTypoid" -> "_tstzrangeOid";
"getTypoid" -> "array_bit";
"getTypoid" -> "array_bitOid";
"getTypoid" -> "array_bool";
"getTypoid" -> "array_boolOid";
"getTypoid" -> "array_box";
"getTypoid" -> "array_boxOid";
"getTypoid" -> "array_bpchar";
"getTypoid" -> "array_bpcharOid";
"getTypoid" -> "array_bytea";
"getTypoid" -> "array_byteaOid";
"getTypoid" -> "array_char";
"getTypoid" -> "array_charOid";
"getTypoid" -> "array_cid";
"getTypoid" -> "array_cidOid";
"getTypoid" -> "array_cidr";
"getTypoid" -> "array_cidrOid";
"getTypoid" -> "array_circle";
"getTypoid" -> "array_circleOid";
"getTypoid" -> "array_date";
"getTypoid" -> "array_dateOid";
"getTypoid" -> "array_float4";
"getTypoid" -> "array_float4Oid";
"getTypoid" -> "array_float8";
"getTypoid" -> "array_float8Oid";
"getTypoid" -> "array_inet";
"getTypoid" -> "array_inetOid";
"getTypoid" -> "array_int2";
"getTypoid" -> "array_int2Oid";
"getTypoid" -> "array_int2vector";
"getTypoid" -> "array_int2vectorOid";
"getTypoid" -> "array_int4";
"getTypoid" -> "array_int4Oid";
"getTypoid" -> "array_int8";
"getTypoid" -> "array_int8Oid";
"getTypoid" -> "array_interval";
"getTypoid" -> "array_intervalOid";
"getTypoid" -> "array_json";
"getTypoid" -> "array_jsonOid";
"getTypoid" -> "array_jsonb";
"getTypoid" -> "array_jsonbOid";
"getTypoid" -> "array_line";
"getTypoid" -> "array_lineOid";
"getTypoid" -> "array_lseg";
"getTypoid" -> "array_lsegOid";
"getTypoid" -> "array_macaddr";
"getTypoid" -> "array_macaddrOid";
"getTypoid" -> "array_money";
"getTypoid" -> "array_moneyOid";
"getTypoid" -> "array_name";
"getTypoid" -> "array_nameOid";
"getTypoid" -> "array_numeric";
"getTypoid" -> "array_numericOid";
"getTypoid" -> "array_oid";
"getTypoid" -> "array_oidOid";
"getTypoid" -> "array_oidvector";
"getTypoid" -> "array_oidvectorOid";
"getTypoid" -> "array_path";
"getTypoid" -> "array_pathOid";
"getTypoid" -> "array_point";
"getTypoid" -> "array_pointOid";
"getTypoid" -> "array_polygon";
"getTypoid" -> "array_polygonOid";
"getTypoid" -> "array_record";
"getTypoid" -> "array_recordOid";
"getTypoid" -> "array_refcursor";
"getTypoid" -> "array_refcursorOid";
"getTypoid" -> "array_regclass";
"getTypoid" -> "array_regclassOid";
"getTypoid" -> "array_regoper";
"getTypoid" -> "array_regoperOid";
"getTypoid" -> "array_regoperator";
"getTypoid" -> "array_regoperatorOid";
"getTypoid" -> "array_regproc";
"getTypoid" -> "array_regprocOid";
"getTypoid" -> "array_regprocedure";
"getTypoid" -> "array_regprocedureOid";
"getTypoid" -> "array_regtype";
"getTypoid" -> "array_regtypeOid";
"getTypoid" -> "array_text";
"getTypoid" -> "array_textOid";
"getTypoid" -> "array_tid";
"getTypoid" -> "array_tidOid";
"getTypoid" -> "array_time";
"getTypoid" -> "array_timeOid";
"getTypoid" -> "array_timestamp";
"getTypoid" -> "array_timestampOid";
"getTypoid" -> "array_timestamptz";
"getTypoid" -> "array_timestamptzOid";
"getTypoid" -> "array_timetz";
"getTypoid" -> "array_timetzOid";
"getTypoid" -> "array_uuid";
"getTypoid" -> "array_uuidOid";
"getTypoid" -> "array_varbit";
"getTypoid" -> "array_varbitOid";
"getTypoid" -> "array_varchar";
"getTypoid" -> "array_varcharOid";
"getTypoid" -> "array_xid";
"getTypoid" -> "array_xidOid";
"getTypoid" -> "array_xml";
"getTypoid" -> "array_xmlOid";
"getTypoid" -> "bit";
"getTypoid" -> "bitOid";
"getTypoid" -> "bool";
"getTypoid" -> "boolOid";
"getTypoid" -> "box";
"getTypoid" -> "boxOid";
"getTypoid" -> "bpchar";
"getTypoid" -> "bpcharOid";
"getTypoid" -> "bytea";
"getTypoid" -> "byteaOid";
"getTypoid" -> "char";
"getTypoid" -> "charOid";
"getTypoid" -> "cid";
"getTypoid" -> "cidOid";
"getTypoid" -> "cidr";
"getTypoid" -> "cidrOid";
"getTypoid" -> "circle";
"getTypoid" -> "circleOid";
"getTypoid" -> "date";
"getTypoid" -> "dateOid";
"getTypoid" -> "daterange";
"getTypoid" -> "daterangeOid";
"getTypoid" -> "float4";
"getTypoid" -> "float4Oid";
"getTypoid" -> "float8";
"getTypoid" -> "float8Oid";
"getTypoid" -> "inet";
"getTypoid" -> "inetOid";
"getTypoid" -> "int2";
"getTypoid" -> "int2Oid";
"getTypoid" -> "int2vector";
"getTypoid" -> "int2vectorOid";
"getTypoid" -> "int4";
"getTypoid" -> "int4Oid";
"getTypoid" -> "int4range";
"getTypoid" -> "int4rangeOid";
"getTypoid" -> "int8";
"getTypoid" -> "int8Oid";
"getTypoid" -> "int8range";
"getTypoid" -> "int8rangeOid";
"getTypoid" -> "interval";
"getTypoid" -> "intervalOid";
"getTypoid" -> "json";
"getTypoid" -> "jsonOid";
"getTypoid" -> "jsonb";
"getTypoid" -> "jsonbOid";
"getTypoid" -> "line";
"getTypoid" -> "lineOid";
"getTypoid" -> "lseg";
"getTypoid" -> "lsegOid";
"getTypoid" -> "macaddr";
"getTypoid" -> "macaddrOid";
"getTypoid" -> "money";
"getTypoid" -> "moneyOid";
"getTypoid" -> "name";
"getTypoid" -> "nameOid";
"getTypoid" -> "numeric";
"getTypoid" -> "numericOid";
"getTypoid" -> "numrange";
"getTypoid" -> "numrangeOid";
"getTypoid" -> "oid";
"getTypoid" -> "oidOid";
"getTypoid" -> "oidvector";
"getTypoid" -> "oidvectorOid";
"getTypoid" -> "path";
"getTypoid" -> "pathOid";
"getTypoid" -> "point";
"getTypoid" -> "pointOid";
"getTypoid" -> "polygon";
"getTypoid" -> "polygonOid";
"getTypoid" -> "record";
"getTypoid" -> "recordOid";
"getTypoid" -> "refcursor";
"getTypoid" -> "refcursorOid";
"getTypoid" -> "regclass";
"getTypoid" -> "regclassOid";
"getTypoid" -> "regoper";
"getTypoid" -> "regoperOid";
"getTypoid" -> "regoperator";
"getTypoid" -> "regoperatorOid";
"getTypoid" -> "regproc";
"getTypoid" -> "regprocOid";
"getTypoid" -> "regprocedure";
"getTypoid" -> "regprocedureOid";
"getTypoid" -> "regtype";
"getTypoid" -> "regtypeOid";
"getTypoid" -> "staticTypeInfo";
"getTypoid" -> "text";
"getTypoid" -> "textOid";
"getTypoid" -> "tid";
"getTypoid" -> "tidOid";
"getTypoid" -> "time";
"getTypoid" -> "timeOid";
"getTypoid" -> "timestamp";
"getTypoid" -> "timestampOid";
"getTypoid" -> "timestamptz";
"getTypoid" -> "timestamptzOid";
"getTypoid" -> "timetz";
"getTypoid" -> "timetzOid";
"getTypoid" -> "tsrange";
"getTypoid" -> "tsrangeOid";
"getTypoid" -> "tstzrange";
"getTypoid" -> "tstzrangeOid";
"getTypoid" -> "unknown";
"getTypoid" -> "unknownOid";
"getTypoid" -> "uuid";
"getTypoid" -> "uuidOid";
"getTypoid" -> "varbit";
"getTypoid" -> "varbitOid";
"getTypoid" -> "varchar";
"getTypoid" -> "varcharOid";
"getTypoid" -> "void";
"getTypoid" -> "voidOid";
"getTypoid" -> "xid";
"getTypoid" -> "xidOid";
"getTypoid" -> "xml";
"getTypoid" -> "xmlOid";
"getUTCTimestamp" -> "getUTCTime";
"getUTCTimestamp" -> "getUnbounded";
"getZonedTimestamp" -> "getUnbounded";
"getZonedTimestamp" -> "getZonedTime";
"hstore" -> "conversionError";
"hstore" -> "f";
"hstore" -> "hstore";
"hstore" -> "parseHStore";
"hstore" -> "returnError";
"hstore" -> "typename";
"inQuotes" -> "quote";
"inet" -> "inetOid";
"infixr" -> "f";
"inlineTypoid" -> "getTypoid";
"inlineTypoidP" -> "getTypoid";
"int2" -> "int2Oid";
"int2vector" -> "int2";
"int2vector" -> "int2vectorOid";
"int4" -> "int4Oid";
"int4range" -> "int4";
"int4range" -> "int4rangeOid";
"int8" -> "int8Oid";
"int8range" -> "int8";
"int8range" -> "int8rangeOid";
"interleaveFoldr" -> "begin";
"interleaveFoldr" -> "beginLevel";
"interleaveFoldr" -> "beginMode";
"interleaveFoldr" -> "commit";
"interleaveFoldr" -> "defaultIsolationLevel";
"interleaveFoldr" -> "defaultReadWriteMode";
"interleaveFoldr" -> "defaultTransactionMode";
"interleaveFoldr" -> "f";
"interleaveFoldr" -> "interleaveFoldr";
"interleaveFoldr" -> "isFailedTransactionError";
"interleaveFoldr" -> "isNoActiveTransactionError";
"interleaveFoldr" -> "isSerializationError";
"interleaveFoldr" -> "newSavepoint";
"interleaveFoldr" -> "releaseSavepoint";
"interleaveFoldr" -> "rollback";
"interleaveFoldr" -> "rollbackToAndReleaseSavepoint";
"interleaveFoldr" -> "rollbackToSavepoint";
"interleaveFoldr" -> "withSavepoint";
"interleaveFoldr" -> "withTransaction";
"interleaveFoldr" -> "withTransactionLevel";
"interleaveFoldr" -> "withTransactionMode";
"interleaveFoldr" -> "withTransactionModeRetry";
"interleaveFoldr" -> "withTransactionModeRetry\'";
"interleaveFoldr" -> "withTransactionSerializable";
"interval" -> "intervalOid";
"isEmpty" -> "isEmptyBy";
"isFailedTransactionError" -> "isSqlState";
"isNoActiveTransactionError" -> "isSqlState";
"isSerializationError" -> "isSqlState";
"isSqlState" -> "attoFieldParser";
"isSqlState" -> "conversionError";
"isSqlState" -> "conversionMap";
"isSqlState" -> "format";
"isSqlState" -> "fromFieldJSONByteString";
"isSqlState" -> "fromJSONField";
"isSqlState" -> "name";
"isSqlState" -> "optionalField";
"isSqlState" -> "pgArrayFieldParser";
"isSqlState" -> "returnError";
"isSqlState" -> "tableColumn";
"isSqlState" -> "tableOid";
"isSqlState" -> "typeInfo";
"isSqlState" -> "typeInfoByOid";
"isSqlState" -> "typename";
"json" -> "jsonOid";
"jsonb" -> "jsonbOid";
"left" -> "conversionError";
"liftConversion" -> "empty";
"liftConversion" -> "f";
"liftPQ" -> "fatalError";
"liftPQ" -> "withConnection";
"liftRowParser" -> "liftConversion";
"line" -> "lineOid";
"loClose" -> "liftPQ";
"loCreat" -> "liftPQ";
"loCreate" -> "liftPQ";
"loCreate" -> "oid";
"loExport" -> "liftPQ";
"loExport" -> "oid";
"loExport" -> "path";
"loImport" -> "liftPQ";
"loImport" -> "path";
"loImportWithOid" -> "liftPQ";
"loImportWithOid" -> "oid";
"loImportWithOid" -> "path";
"loOpen" -> "liftPQ";
"loOpen" -> "oid";
"loRead" -> "liftPQ";
"loSeek" -> "liftPQ";
"loTell" -> "liftPQ";
"loTruncate" -> "liftPQ";
"loUnlink" -> "getAeson";
"loUnlink" -> "liftPQ";
"loUnlink" -> "oid";
"loWrite" -> "liftPQ";
"localTime" -> "day";
"localTime" -> "f";
"localTime" -> "liftB";
"localTime" -> "timeOfDay";
"localTimestampToBuilder" -> "localTimeToBuilder";
"localTimestampToBuilder" -> "unboundedToBuilder";
"lseg" -> "lsegOid";
"macaddr" -> "macaddrOid";
"minimizeSpace" -> "dateToBuilder";
"minimizeSpace" -> "dayToBuilder";
"minimizeSpace" -> "localTimeToBuilder";
"minimizeSpace" -> "localTimestampToBuilder";
"minimizeSpace" -> "nominalDiffTimeToBuilder";
"minimizeSpace" -> "parseDate";
"minimizeSpace" -> "parseDay";
"minimizeSpace" -> "parseLocalTime";
"minimizeSpace" -> "parseLocalTimestamp";
"minimizeSpace" -> "parseTimeOfDay";
"minimizeSpace" -> "parseUTCTime";
"minimizeSpace" -> "parseUTCTimestamp";
"minimizeSpace" -> "parseZonedTime";
"minimizeSpace" -> "parseZonedTimestamp";
"minimizeSpace" -> "time";
"minimizeSpace" -> "timeOfDayToBuilder";
"minimizeSpace" -> "timeZoneToBuilder";
"minimizeSpace" -> "unboundedToBuilder";
"minimizeSpace" -> "utcTimeToBuilder";
"minimizeSpace" -> "utcTimestampToBuilder";
"minimizeSpace" -> "zonedTimeToBuilder";
"minimizeSpace" -> "zonedTimestampToBuilder";
"mkCompats" -> "inlineTypoidP";
"money" -> "moneyOid";
"name" -> "nameOid";
"newSavepoint" -> "execute_";
"newSavepoint" -> "name";
"newSavepoint" -> "newTempName";
"nominalDiffTime" -> "frac";
"nominalDiffTime" -> "fromPico";
"nominalDiffTime" -> "inQuotes";
"nominalDiffTime" -> "renderNull";
"nominalDiffTime" -> "toByteString";
"nominalDiffTime" -> "toJSONField";
"nominalDiffTimeToBuilder" -> "day";
"nominalDiffTimeToBuilder" -> "getDate";
"nominalDiffTimeToBuilder" -> "getDay";
"nominalDiffTimeToBuilder" -> "getLocalTime";
"nominalDiffTimeToBuilder" -> "getLocalTimestamp";
"nominalDiffTimeToBuilder" -> "getTimeOfDay";
"nominalDiffTimeToBuilder" -> "getTimeZone";
"nominalDiffTimeToBuilder" -> "getTimeZoneHMS";
"nominalDiffTimeToBuilder" -> "getUTCTime";
"nominalDiffTimeToBuilder" -> "getUTCTimestamp";
"nominalDiffTimeToBuilder" -> "getZonedTime";
"nominalDiffTimeToBuilder" -> "getZonedTimestamp";
"nominalDiffTimeToBuilder" -> "localTime";
"nominalDiffTimeToBuilder" -> "localToUTCTimeOfDayHMS";
"nominalDiffTimeToBuilder" -> "timeOfDay";
"nominalDiffTimeToBuilder" -> "timeZone";
"nominalDiffTimeToBuilder" -> "timeZoneHMS";
"nominalDiffTimeToBuilder" -> "utcTime";
"nominalDiffTimeToBuilder" -> "zonedTime";
"null" -> "f";
"null" -> "field";
"null" -> "hstore";
"null" -> "null";
"null" -> "numFieldsRemaining";
"null" -> "parseHStoreList";
"null" -> "toBuilder";
"null" -> "toLazyByteString";
"numFieldsRemaining" -> "nfields";
"numeric" -> "numericOid";
"numrange" -> "numeric";
"numrange" -> "numrangeOid";
"oid" -> "oidOid";
"oidvector" -> "oid";
"oidvector" -> "oidvectorOid";
"ok16" -> "eq";
"ok32" -> "eq";
"ok64" -> "ok32";
"okBinary" -> "eq";
"okInt" -> "ok64";
"okText" -> "eq";
"okText\'" -> "eq";
"optionalField" -> "attoFieldParser";
"optionalField" -> "eq";
"optionalField" -> "f";
"optionalField" -> "ok16";
"optionalField" -> "ok32";
"optionalField" -> "ok64";
"optionalField" -> "okInt";
"optionalField" -> "pg_double";
"optionalField" -> "pg_rational";
"optionalField" -> "returnError";
"parseDate" -> "getDate";
"parseDay" -> "getDay";
"parseHStore" -> "parseHStoreKeyVal";
"parseHStore" -> "skipWhiteSpace";
"parseHStoreKeyVal" -> "parseHStoreText";
"parseHStoreKeyVal" -> "skipWhiteSpace";
"parseHStoreList" -> "parseHStore";
"parseHStoreText" -> "parseHStoreTexts";
"parseHStoreTexts" -> "parseHStore";
"parseHStoreTexts" -> "parseHStoreKeyVal";
"parseHStoreTexts" -> "parseHStoreText";
"parseHStoreTexts" -> "parseHStoreTexts";
"parseLocalTime" -> "getLocalTime";
"parseLocalTimestamp" -> "getLocalTimestamp";
"parseQ1" -> "char";
"parseQ1" -> "scanTillQuote";
"parseQ2" -> "parseQ1";
"parseTimeOfDay" -> "getTimeOfDay";
"parseUTCTime" -> "getUTCTime";
"parseUTCTimestamp" -> "getUTCTimestamp";
"parseZonedTime" -> "getZonedTime";
"parseZonedTimestamp" -> "getZonedTimestamp";
"path" -> "pathOid";
"pgArrayFieldParser" -> "f";
"pgArrayFieldParser" -> "fromArray";
"pgArrayFieldParser" -> "returnError";
"pgArrayFieldParser" -> "typeInfo";
"pg_rational" -> "attoFieldParser";
"pg_rational" -> "doFromField";
"pg_rational" -> "f";
"pg_rational" -> "okText\'";
"pg_rational" -> "unBinary";
"pgrange" -> "lowerBound";
"pgrange" -> "rangeElem";
"pgrange" -> "upperBound";
"point" -> "pointOid";
"polygon" -> "polygonOid";
"postgreSQLConnectionString" -> "field";
"postgreSQLConnectionString" -> "name";
"postgreSQLConnectionString" -> "null";
"putCopyData" -> "doCopyIn";
"putCopyData" -> "withConnection";
"putCopyEnd" -> "doCopyIn";
"putCopyEnd" -> "getCopyCommandTag";
"putCopyEnd" -> "withConnection";
"putCopyError" -> "consumeResults";
"putCopyError" -> "doCopyIn";
"putCopyError" -> "withConnection";
"query" -> "queryWith";
"queryWith" -> "exec";
"queryWith" -> "finishQueryWith";
"queryWith" -> "finishQueryWithV";
"queryWith" -> "finishQueryWithVU";
"queryWith" -> "formatQuery";
"queryWith_" -> "exec";
"queryWith_" -> "finishQueryWith";
"queryWith_" -> "finishQueryWithV";
"queryWith_" -> "finishQueryWithVU";
"query_" -> "queryWith_";
"quote" -> "fmtErrorBs";
"quote" -> "inQuotes";
"quoted" -> "char";
"rangeToBuilder" -> "rangeToBuilderBy";
"rangeToBuilderBy" -> "f";
"rangeToBuilderBy" -> "fromFieldRange";
"rangeToBuilderBy" -> "isEmptyBy";
"record" -> "recordOid";
"refcursor" -> "refcursorOid";
"regclass" -> "regclassOid";
"regoper" -> "regoperOid";
"regoperator" -> "regoperatorOid";
"regproc" -> "regprocOid";
"regprocedure" -> "regprocedureOid";
"regtype" -> "regtypeOid";
"releaseSavepoint" -> "execute_";
"releaseSavepoint" -> "name";
"renderNull" -> "dateToBuilder";
"renderNull" -> "dayToBuilder";
"renderNull" -> "inQuotes";
"renderNull" -> "localTimeToBuilder";
"renderNull" -> "localTimestampToBuilder";
"renderNull" -> "nominalDiffTimeToBuilder";
"renderNull" -> "renderNull";
"renderNull" -> "timeOfDayToBuilder";
"renderNull" -> "toByteString";
"renderNull" -> "utcTimeToBuilder";
"renderNull" -> "utcTimestampToBuilder";
"renderNull" -> "zonedTimeToBuilder";
"renderNull" -> "zonedTimestampToBuilder";
"returnError" -> "f";
"returnError" -> "left";
"returnError" -> "name";
"returnError" -> "tableOid";
"returnError" -> "typename";
"returning" -> "returningWith";
"returningWith" -> "exec";
"returningWith" -> "finishQueryWith";
"returningWith" -> "finishQueryWithV";
"returningWith" -> "finishQueryWithVU";
"returningWith" -> "formatMany";
"rollback" -> "execute_";
"rollbackToAndReleaseSavepoint" -> "execute_";
"rollbackToAndReleaseSavepoint" -> "getTypeInfo";
"rollbackToAndReleaseSavepoint" -> "name";
"rollbackToAndReleaseSavepoint" -> "sql";
"rollbackToSavepoint" -> "execute_";
"rollbackToSavepoint" -> "name";
"rollback_" -> "rollback";
"seconds" -> "toPico";
"seconds" -> "twoDigits";
"sql" -> "sqlExp";
"sqlExp" -> "minimizeSpace";
"staticTypeInfo" -> "_daterange";
"staticTypeInfo" -> "_int4range";
"staticTypeInfo" -> "_int8range";
"staticTypeInfo" -> "_numrange";
"staticTypeInfo" -> "_tsrange";
"staticTypeInfo" -> "_tstzrange";
"staticTypeInfo" -> "array_bit";
"staticTypeInfo" -> "array_bool";
"staticTypeInfo" -> "array_box";
"staticTypeInfo" -> "array_bpchar";
"staticTypeInfo" -> "array_bytea";
"staticTypeInfo" -> "array_char";
"staticTypeInfo" -> "array_cid";
"staticTypeInfo" -> "array_cidr";
"staticTypeInfo" -> "array_circle";
"staticTypeInfo" -> "array_date";
"staticTypeInfo" -> "array_float4";
"staticTypeInfo" -> "array_float8";
"staticTypeInfo" -> "array_inet";
"staticTypeInfo" -> "array_int2";
"staticTypeInfo" -> "array_int2vector";
"staticTypeInfo" -> "array_int4";
"staticTypeInfo" -> "array_int8";
"staticTypeInfo" -> "array_interval";
"staticTypeInfo" -> "array_json";
"staticTypeInfo" -> "array_jsonb";
"staticTypeInfo" -> "array_line";
"staticTypeInfo" -> "array_lseg";
"staticTypeInfo" -> "array_macaddr";
"staticTypeInfo" -> "array_money";
"staticTypeInfo" -> "array_name";
"staticTypeInfo" -> "array_numeric";
"staticTypeInfo" -> "array_oid";
"staticTypeInfo" -> "array_oidvector";
"staticTypeInfo" -> "array_path";
"staticTypeInfo" -> "array_point";
"staticTypeInfo" -> "array_polygon";
"staticTypeInfo" -> "array_record";
"staticTypeInfo" -> "array_refcursor";
"staticTypeInfo" -> "array_regclass";
"staticTypeInfo" -> "array_regoper";
"staticTypeInfo" -> "array_regoperator";
"staticTypeInfo" -> "array_regproc";
"staticTypeInfo" -> "array_regprocedure";
"staticTypeInfo" -> "array_regtype";
"staticTypeInfo" -> "array_text";
"staticTypeInfo" -> "array_tid";
"staticTypeInfo" -> "array_time";
"staticTypeInfo" -> "array_timestamp";
"staticTypeInfo" -> "array_timestamptz";
"staticTypeInfo" -> "array_timetz";
"staticTypeInfo" -> "array_uuid";
"staticTypeInfo" -> "array_varbit";
"staticTypeInfo" -> "array_varchar";
"staticTypeInfo" -> "array_xid";
"staticTypeInfo" -> "array_xml";
"staticTypeInfo" -> "bit";
"staticTypeInfo" -> "bool";
"staticTypeInfo" -> "box";
"staticTypeInfo" -> "bpchar";
"staticTypeInfo" -> "bytea";
"staticTypeInfo" -> "char";
"staticTypeInfo" -> "cid";
"staticTypeInfo" -> "cidr";
"staticTypeInfo" -> "circle";
"staticTypeInfo" -> "date";
"staticTypeInfo" -> "daterange";
"staticTypeInfo" -> "float4";
"staticTypeInfo" -> "float8";
"staticTypeInfo" -> "inet";
"staticTypeInfo" -> "int2";
"staticTypeInfo" -> "int2vector";
"staticTypeInfo" -> "int4";
"staticTypeInfo" -> "int4range";
"staticTypeInfo" -> "int8";
"staticTypeInfo" -> "int8range";
"staticTypeInfo" -> "interval";
"staticTypeInfo" -> "json";
"staticTypeInfo" -> "jsonb";
"staticTypeInfo" -> "line";
"staticTypeInfo" -> "lseg";
"staticTypeInfo" -> "macaddr";
"staticTypeInfo" -> "money";
"staticTypeInfo" -> "name";
"staticTypeInfo" -> "numeric";
"staticTypeInfo" -> "numrange";
"staticTypeInfo" -> "oid";
"staticTypeInfo" -> "oidvector";
"staticTypeInfo" -> "path";
"staticTypeInfo" -> "point";
"staticTypeInfo" -> "polygon";
"staticTypeInfo" -> "record";
"staticTypeInfo" -> "refcursor";
"staticTypeInfo" -> "regclass";
"staticTypeInfo" -> "regoper";
"staticTypeInfo" -> "regoperator";
"staticTypeInfo" -> "regproc";
"staticTypeInfo" -> "regprocedure";
"staticTypeInfo" -> "regtype";
"staticTypeInfo" -> "text";
"staticTypeInfo" -> "tid";
"staticTypeInfo" -> "time";
"staticTypeInfo" -> "timestamp";
"staticTypeInfo" -> "timestamptz";
"staticTypeInfo" -> "timetz";
"staticTypeInfo" -> "tsrange";
"staticTypeInfo" -> "tstzrange";
"staticTypeInfo" -> "unknown";
"staticTypeInfo" -> "uuid";
"staticTypeInfo" -> "varbit";
"staticTypeInfo" -> "varchar";
"staticTypeInfo" -> "void";
"staticTypeInfo" -> "xid";
"staticTypeInfo" -> "xml";
"text" -> "textOid";
"throwLibPQError" -> "libPQError";
"tid" -> "tidOid";
"time" -> "timeOid";
"timeOfDay" -> "char";
"timeOfDay" -> "digits2";
"timeOfDay" -> "f";
"timeOfDay" -> "frac";
"timeOfDay" -> "fromPico";
"timeOfDay" -> "liftB";
"timeOfDay" -> "seconds";
"timeOfDay" -> "twoDigits";
"timeZone" -> "digits2";
"timeZone" -> "liftB";
"timeZone" -> "twoDigits";
"timeZoneHMS" -> "twoDigits";
"timestamp" -> "timestampOid";
"timestamptz" -> "timestamptzOid";
"timetz" -> "timetzOid";
"toByteString" -> "toLazyByteString";
"toLazyByteString" -> "escapeAppend";
"tsrange" -> "timestamp";
"tsrange" -> "tsrangeOid";
"tstzrange" -> "timestamptz";
"tstzrange" -> "tstzrangeOid";
"twoDigits" -> "digit";
"typeInfo" -> "getTypeInfo";
"typeInfoByOid" -> "getTypeInfo";
"typeInfoByOid" -> "oid";
"typename" -> "field";
"typename" -> "typeInfo";
"unescapeBytea" -> "doFromField";
"unescapeBytea" -> "f";
"unescapeBytea" -> "ff";
"unescapeBytea" -> "format";
"unescapeBytea" -> "left";
"unescapeBytea" -> "okBinary";
"unescapeBytea" -> "okText";
"unescapeBytea" -> "parseDate";
"unescapeBytea" -> "parseDay";
"unescapeBytea" -> "parseLocalTime";
"unescapeBytea" -> "parseLocalTimestamp";
"unescapeBytea" -> "parseTimeOfDay";
"unescapeBytea" -> "parseUTCTime";
"unescapeBytea" -> "parseUTCTimestamp";
"unescapeBytea" -> "parseZonedTime";
"unescapeBytea" -> "parseZonedTimestamp";
"unescapeBytea" -> "returnError";
"unescapeBytea" -> "typename";
"unescapeBytea" -> "unBinary";
"unescapeBytea" -> "unescapeBytea";
"unknown" -> "unknownOid";
"utc" -> "day";
"utc" -> "localTime";
"utc" -> "nominalDiffTime";
"utc" -> "timeOfDay";
"utc" -> "timeZone";
"utc" -> "utcTime";
"utc" -> "zonedTime";
"utcTime" -> "day";
"utcTime" -> "f";
"utcTime" -> "liftB";
"utcTime" -> "localTime";
"utcTime" -> "localToUTCTimeOfDayHMS";
"utcTime" -> "timeOfDay";
"utcTime" -> "timeZoneHMS";
"utcTimestampToBuilder" -> "unboundedToBuilder";
"utcTimestampToBuilder" -> "utcTimeToBuilder";
"uuid" -> "uuidOid";
"varbit" -> "varbitOid";
"varchar" -> "varcharOid";
"void" -> "voidOid";
"withConnection" -> "disconnectedError";
"withSavepoint" -> "isFailedTransactionError";
"withSavepoint" -> "mask";
"withSavepoint" -> "newSavepoint";
"withSavepoint" -> "releaseSavepoint";
"withSavepoint" -> "rollbackToAndReleaseSavepoint";
"withTransaction" -> "defaultTransactionMode";
"withTransaction" -> "withTransactionMode";
"withTransactionLevel" -> "defaultTransactionMode";
"withTransactionLevel" -> "withTransactionMode";
"withTransactionMode" -> "beginMode";
"withTransactionMode" -> "commit";
"withTransactionMode" -> "mask";
"withTransactionMode" -> "rollback_";
"withTransactionModeRetry" -> "withTransactionModeRetry\'";
"withTransactionModeRetry\'" -> "beginMode";
"withTransactionModeRetry\'" -> "commit";
"withTransactionModeRetry\'" -> "mask";
"withTransactionModeRetry\'" -> "rollback_";
"withTransactionSerializable" -> "isSerializationError";
"withTransactionSerializable" -> "withTransactionModeRetry";
"xid" -> "xidOid";
"xml" -> "xmlOid";
"year" -> "digits4";
"year" -> "liftB";
"zonedTime" -> "f";
"zonedTime" -> "localTime";
"zonedTime" -> "timeZone";
"zonedTime" -> "utc";
"zonedTimestampToBuilder" -> "unboundedToBuilder";
"zonedTimestampToBuilder" -> "zonedTimeToBuilder";
}
