strict digraph deps {
"a" [style=solid];
"aesonExp" [style=solid];
"aesonQQ" [style=solid];
"allDistinct" [style=solid];
"allowExQuant" [style=solid];
"apP" [style=solid];
"applyCon" [style=solid];
"applySubstitutionKind" [style=solid];
"applyTyCon" [style=solid];
"argsToValue" [style=solid];
"arityInt" [style=solid];
"array" [style=solid];
"arrayValues" [style=solid];
"array_" [style=solid];
"array_\'" [style=solid];
"ascii2" [style=solid];
"ascii3" [style=solid];
"ascii4" [style=solid];
"ascii5" [style=solid];
"ascii6" [style=solid];
"ascii8" [style=solid];
"bool" [style=solid];
"bsToInteger" [style=solid];
"bsToIntegerSimple" [style=solid];
"buildTypeInstance" [style=solid];
"c2w" [style=solid];
"camelTo" [style=solid];
"camelTo2" [style=solid];
"canEtaReduce" [style=solid];
"canRealizeKindStar" [style=solid];
"catKindVarNames" [style=solid];
"checkExistentialContext" [style=solid];
"closeBracket" [style=solid];
"closeCurly" [style=solid];
"coerceFromJSONKeyFunction" [style=solid];
"colon" [style=solid];
"comma" [style=solid];
"conNameExp" [style=solid];
"conNotFoundFail2ElemArray" [style=solid];
"conNotFoundFailObjectSingleField" [style=solid];
"conNotFoundFailTaggedObject" [style=solid];
"conStr" [style=solid];
"conString" [style=solid];
"conTxt" [style=solid];
"consFromJSON" [style=solid];
"consToValue" [style=solid];
"constructorTags" [style=solid];
"contextCons" [style=solid];
"contextTag" [style=solid];
"contextType" [style=solid];
"contramapToJSONKeyFunction" [style=solid];
"createKindChain" [style=solid];
"datatypeContextError" [style=solid];
"day" [style=solid];
"dayTime" [style=solid];
"decimal0" [style=solid];
"decode" [style=solid];
"decodeFileStrict" [style=solid];
"decodeFileStrict\'" [style=solid];
"decodeStrict" [style=solid];
"decodeStrictWith" [style=solid];
"decodeStrict\'" [style=solid];
"decodeWith" [style=solid];
"decode\'" [style=solid];
"defaultJSONKeyOptions" [style=solid];
"defaultOptions" [style=solid];
"defaultTaggedObject" [style=solid];
"deriveConstraint" [style=solid];
"deriveFromJSON" [style=solid];
"deriveFromJSON1" [style=solid];
"deriveFromJSON2" [style=solid];
"deriveFromJSONCommon" [style=solid];
"deriveJSON" [style=solid];
"deriveJSON1" [style=solid];
"deriveJSON2" [style=solid];
"deriveJSONBoth" [style=solid];
"deriveJSONClass" [style=solid];
"deriveToJSON" [style=solid];
"deriveToJSON1" [style=solid];
"deriveToJSON2" [style=solid];
"deriveToJSONCommon" [style=solid];
"derivingKindError" [style=solid];
"dict" [style=solid];
"digit" [style=solid];
"dispatchFunByType" [style=solid];
"dispatchParseJSON" [style=solid];
"dispatchToJSON" [style=solid];
"dotNetTime" [style=solid];
"double" [style=solid];
"doubleText" [style=solid];
"econcat" [style=solid];
"eitherDecode" [style=solid];
"eitherDecodeFileStrict" [style=solid];
"eitherDecodeFileStrict\'" [style=solid];
"eitherDecodeStrict" [style=solid];
"eitherDecodeStrictWith" [style=solid];
"eitherDecodeStrict\'" [style=solid];
"eitherDecodeWith" [style=solid];
"eitherDecode\'" [style=solid];
"eitherFormatError" [style=solid];
"empty" [style=solid];
"emptyArray" [style=solid];
"emptyArray_" [style=solid];
"emptyObject" [style=solid];
"emptyObject_" [style=solid];
"encode" [style=solid];
"encodeFile" [style=solid];
"encodeToBuilder" [style=solid];
"encodeToLazyText" [style=solid];
"encodeToTextBuilder" [style=solid];
"encodeVector" [style=solid];
"encodeYear" [style=solid];
"encodingToLazyByteString" [style=solid];
"escapeAscii" [style=solid];
"etaReductionError" [style=solid];
"existentialContextError" [style=solid];
"explicitParseField" [style=solid];
"explicitParseFieldMaybe" [style=solid];
"explicitParseFieldMaybe\'" [style=solid];
"failWithCTags" [style=solid];
"fieldLabel" [style=solid];
"fieldToPair" [style=solid];
"firstElemNoStringFail" [style=solid];
"float" [style=solid];
"floatText" [style=solid];
"foldable" [style=solid];
"formatError" [style=solid];
"formatErrorLine" [style=solid];
"formatMillis" [style=solid];
"formatPath" [style=solid];
"formatRelativePath" [style=solid];
"fromJSON" [style=solid];
"fromJSON1Class" [style=solid];
"fromJSON2Class" [style=solid];
"fromJSONClass" [style=solid];
"fromJSONKeyCoerce" [style=solid];
"fromListAccum" [style=solid];
"fromNull" [style=solid];
"fromPairsE" [style=solid];
"fromScientific" [style=solid];
"genericFromJSONKey" [style=solid];
"genericLiftParseJSON" [style=solid];
"genericLiftToEncoding" [style=solid];
"genericLiftToJSON" [style=solid];
"genericParseJSON" [style=solid];
"genericToEncoding" [style=solid];
"genericToJSON" [style=solid];
"genericToJSONKey" [style=solid];
"getValField" [style=solid];
"hasKindStar" [style=solid];
"hasKindVarChain" [style=solid];
"hashValue" [style=solid];
"ifromJSON" [style=solid];
"infixr" [style=solid];
"int" [style=solid];
"int16" [style=solid];
"int16Text" [style=solid];
"int32" [style=solid];
"int32Text" [style=solid];
"int64" [style=solid];
"int64Text" [style=solid];
"int8" [style=solid];
"int8Text" [style=solid];
"intText" [style=solid];
"integer" [style=solid];
"integerText" [style=solid];
"interleave" [style=solid];
"iparse" [style=solid];
"isEmptyArray" [style=solid];
"isInTypeFamilyApp" [style=solid];
"isMaybe" [style=solid];
"isNullary" [style=solid];
"isOption" [style=solid];
"isStarOrVar" [style=solid];
"isTyVar" [style=solid];
"json" [style=solid];
"jsonAccum" [style=solid];
"jsonAccum\'" [style=solid];
"jsonClassName" [style=solid];
"jsonEOF" [style=solid];
"jsonEOF\'" [style=solid];
"jsonFunListName" [style=solid];
"jsonFunValName" [style=solid];
"jsonFunValOrListName" [style=solid];
"jsonLast" [style=solid];
"jsonLast\'" [style=solid];
"jsonNoDup" [style=solid];
"jsonNoDup\'" [style=solid];
"jsonWith" [style=solid];
"jsonWith\'" [style=solid];
"json\'" [style=solid];
"jstring" [style=solid];
"jstringSlow" [style=solid];
"jstring_" [style=solid];
"lazyText" [style=solid];
"list" [style=solid];
"listEncoding" [style=solid];
"listParser" [style=solid];
"listValue" [style=solid];
"localTime" [style=solid];
"lookupFieldWith" [style=solid];
"mapFromJSONKeyFunction" [style=solid];
"mapHashKeyVal" [style=solid];
"mapKey" [style=solid];
"mapKeyVal" [style=solid];
"matchCases" [style=solid];
"matchFailed" [style=solid];
"mconcatE" [style=solid];
"mentionsName" [style=solid];
"mkFunCommon" [style=solid];
"mkLiftParseJSON" [style=solid];
"mkLiftParseJSON2" [style=solid];
"mkLiftToEncoding" [style=solid];
"mkLiftToEncoding2" [style=solid];
"mkLiftToJSON" [style=solid];
"mkLiftToJSON2" [style=solid];
"mkParseJSON" [style=solid];
"mkParseJSONCommon" [style=solid];
"mkToEncoding" [style=solid];
"mkToEncodingCommon" [style=solid];
"mkToJSON" [style=solid];
"mkToJSONCommon" [style=solid];
"modifyFailure" [style=solid];
"month" [style=solid];
"newNameList" [style=solid];
"noArrayFail" [style=solid];
"noMatchFail" [style=solid];
"noObjectFail" [style=solid];
"noStringFail" [style=solid];
"nonAllNullarySumToJSON" [style=solid];
"not2ElemArray" [style=solid];
"nullEncoding" [style=solid];
"null_" [style=solid];
"object" [style=solid];
"objectE" [style=solid];
"objectValues" [style=solid];
"object_" [style=solid];
"object_\'" [style=solid];
"opaqueSumToValue" [style=solid];
"openBracket" [style=solid];
"openCurly" [style=solid];
"optionToMaybe" [style=solid];
"orderingToText" [style=solid];
"outOfPlaceTyVarError" [style=solid];
"p" [style=solid];
"pair" [style=solid];
"pairE" [style=solid];
"pairStr" [style=solid];
"pair\'" [style=solid];
"pairs" [style=solid];
"parse" [style=solid];
"parseAllNullarySum" [style=solid];
"parseArgs" [style=solid];
"parseBoundedIntegral" [style=solid];
"parseBoundedIntegralFromScientific" [style=solid];
"parseBoundedIntegralText" [style=solid];
"parseChar" [style=solid];
"parseDayOfWeek" [style=solid];
"parseEither" [style=solid];
"parseFail" [style=solid];
"parseField" [style=solid];
"parseFieldMaybe" [style=solid];
"parseFieldMaybe\'" [style=solid];
"parseIndexedJSON" [style=solid];
"parseIndexedJSONPair" [style=solid];
"parseIntegral" [style=solid];
"parseIntegralFromScientific" [style=solid];
"parseIntegralText" [style=solid];
"parseJSON1" [style=solid];
"parseJSON2" [style=solid];
"parseJSONElemAtIndex" [style=solid];
"parseListNoDup" [style=solid];
"parseMaybe" [style=solid];
"parseNatural" [style=solid];
"parseNonAllNullarySum" [style=solid];
"parseNullaryMatches" [style=solid];
"parseOptionalFieldWith" [style=solid];
"parseProduct" [style=solid];
"parseQuarterOfYear" [style=solid];
"parseRealFloat" [style=solid];
"parseRecord" [style=solid];
"parseScientificText" [style=solid];
"parseTypeMismatch" [style=solid];
"parseTypeMismatch\'" [style=solid];
"parseUnaryMatches" [style=solid];
"parseVersionText" [style=solid];
"parserCatchError" [style=solid];
"parserThrowError" [style=solid];
"pmval" [style=solid];
"predMentionsName" [style=solid];
"prependContext" [style=solid];
"prependFailure" [style=solid];
"productParseJSON0" [style=solid];
"quarter" [style=solid];
"quote" [style=solid];
"realFloatToEncoding" [style=solid];
"realFloatToJSON" [style=solid];
"recordSumToValue" [style=solid];
"retagEncoding" [style=solid];
"run" [style=solid];
"scientific" [style=solid];
"scientificText" [style=solid];
"showCons" [style=solid];
"skipSpace" [style=solid];
"starKindStatusToName" [style=solid];
"string" [style=solid];
"stringEncoding" [style=solid];
"substNameWithKind" [style=solid];
"substNamesWithKindStar" [style=solid];
"sumToValue" [style=solid];
"targetToJSONFun" [style=solid];
"text" [style=solid];
"timeOfDay" [style=solid];
"timeOfDay64" [style=solid];
"timeZone" [style=solid];
"toEncoding1" [style=solid];
"toEncoding2" [style=solid];
"toEncodingDayOfWeek" [style=solid];
"toEncodingQuarterOfYear" [style=solid];
"toJSON1" [style=solid];
"toJSON1Class" [style=solid];
"toJSON2" [style=solid];
"toJSON2Class" [style=solid];
"toJSONClass" [style=solid];
"toJSONKeyText" [style=solid];
"toJSONKeyTextEnc" [style=solid];
"toJSONPair" [style=solid];
"tuple" [style=solid];
"twoDigits" [style=solid];
"tyKind" [style=solid];
"typeMismatch" [style=solid];
"typeOf" [style=solid];
"unSigT" [style=solid];
"unapplyTy" [style=solid];
"uncurryKind" [style=solid];
"uncurryTy" [style=solid];
"unexpected" [style=solid];
"unknownFieldFail" [style=solid];
"unquoted" [style=solid];
"unsafeDecodeASCII" [style=solid];
"unsafeToEncoding" [style=solid];
"utcTime" [style=solid];
"valInteger" [style=solid];
"valSimple" [style=solid];
"value" [style=solid];
"valueConName" [style=solid];
"value\'" [style=solid];
"varTToName" [style=solid];
"varTToNameMaybe" [style=solid];
"vectorParseJSON" [style=solid];
"vectorToJSON" [style=solid];
"withArray" [style=solid];
"withBool" [style=solid];
"withBoundedScientific" [style=solid];
"withBoundedScientific\'" [style=solid];
"withBoundedScientific_" [style=solid];
"withEmbeddedJSON" [style=solid];
"withObject" [style=solid];
"withScientific" [style=solid];
"withScientific\'" [style=solid];
"withText" [style=solid];
"word" [style=solid];
"word16" [style=solid];
"word16Text" [style=solid];
"word32" [style=solid];
"word32Text" [style=solid];
"word64" [style=solid];
"word64Text" [style=solid];
"word8" [style=solid];
"word8Text" [style=solid];
"wordText" [style=solid];
"wrapArray" [style=solid];
"wrapObject" [style=solid];
"wrongPairCountFail" [style=solid];
"zonedTime" [style=solid];
"" -> "a";
"" -> "camelTo2";
"" -> "decode";
"" -> "decodeFileStrict";
"" -> "decodeFileStrict\'";
"" -> "decodeStrict";
"" -> "decodeStrict\'";
"" -> "decode\'";
"" -> "defaultJSONKeyOptions";
"" -> "defaultOptions";
"" -> "defaultTaggedObject";
"" -> "eitherDecode";
"" -> "eitherDecodeFileStrict";
"" -> "eitherDecodeFileStrict\'";
"" -> "eitherDecodeStrict";
"" -> "eitherDecodeStrict\'";
"" -> "eitherDecode\'";
"" -> "encode";
"" -> "encodeFile";
"" -> "foldable";
"" -> "fromJSON";
"" -> "genericFromJSONKey";
"" -> "genericLiftParseJSON";
"" -> "genericLiftToEncoding";
"" -> "genericLiftToJSON";
"" -> "genericParseJSON";
"" -> "genericToEncoding";
"" -> "genericToJSON";
"" -> "genericToJSONKey";
"" -> "json";
"" -> "json\'";
"" -> "object";
"" -> "pairs";
"" -> "parseIndexedJSON";
"" -> "parseJSON1";
"" -> "parseJSON2";
"" -> "toEncoding1";
"" -> "toEncoding2";
"" -> "toJSON1";
"" -> "toJSON2";
"" -> "withArray";
"" -> "withBool";
"" -> "withEmbeddedJSON";
"" -> "withObject";
"" -> "withScientific";
"" -> "withText";
"a" -> "a";
"aesonExp" -> "defaultOptions";
"aesonExp" -> "defaultTaggedObject";
"aesonExp" -> "deriveFromJSON";
"aesonExp" -> "deriveFromJSON1";
"aesonExp" -> "deriveFromJSON2";
"aesonExp" -> "deriveJSON";
"aesonExp" -> "deriveJSON1";
"aesonExp" -> "deriveJSON2";
"aesonExp" -> "deriveToJSON";
"aesonExp" -> "deriveToJSON1";
"aesonExp" -> "deriveToJSON2";
"aesonExp" -> "eitherDecodeStrict";
"aesonExp" -> "mkLiftParseJSON";
"aesonExp" -> "mkLiftParseJSON2";
"aesonExp" -> "mkLiftToEncoding";
"aesonExp" -> "mkLiftToEncoding2";
"aesonExp" -> "mkLiftToJSON";
"aesonExp" -> "mkLiftToJSON2";
"aesonExp" -> "mkParseJSON";
"aesonExp" -> "mkToEncoding";
"aesonExp" -> "mkToJSON";
"aesonQQ" -> "aesonExp";
"allDistinct" -> "a";
"apP" -> "a";
"argsToValue" -> "a";
"argsToValue" -> "argsToValue";
"argsToValue" -> "array";
"argsToValue" -> "dispatchToJSON";
"argsToValue" -> "fieldLabel";
"argsToValue" -> "isMaybe";
"argsToValue" -> "isOption";
"argsToValue" -> "mconcatE";
"argsToValue" -> "newNameList";
"argsToValue" -> "opaqueSumToValue";
"argsToValue" -> "optionToMaybe";
"argsToValue" -> "pairE";
"argsToValue" -> "pairs";
"argsToValue" -> "recordSumToValue";
"array" -> "a";
"array" -> "emptyArray_";
"array" -> "encodeToBuilder";
"arrayValues" -> "skipSpace";
"array_" -> "arrayValues";
"array_\'" -> "arrayValues";
"ascii2" -> "a";
"ascii3" -> "a";
"ascii4" -> "a";
"ascii5" -> "a";
"ascii8" -> "a";
"bool" -> "ascii4";
"bool" -> "ascii5";
"bsToInteger" -> "bsToIntegerSimple";
"bsToInteger" -> "valInteger";
"bsToIntegerSimple" -> "a";
"buildTypeInstance" -> "applyTyCon";
"buildTypeInstance" -> "arityInt";
"buildTypeInstance" -> "canEtaReduce";
"buildTypeInstance" -> "canRealizeKindStar";
"buildTypeInstance" -> "catKindVarNames";
"buildTypeInstance" -> "datatypeContextError";
"buildTypeInstance" -> "deriveConstraint";
"buildTypeInstance" -> "derivingKindError";
"buildTypeInstance" -> "etaReductionError";
"buildTypeInstance" -> "hasKindStar";
"buildTypeInstance" -> "jsonClassName";
"buildTypeInstance" -> "predMentionsName";
"buildTypeInstance" -> "substNamesWithKindStar";
"buildTypeInstance" -> "unSigT";
"camelTo2" -> "a";
"camelTo2" -> "contramapToJSONKeyFunction";
"camelTo2" -> "genericLiftToEncoding";
"camelTo2" -> "genericLiftToJSON";
"camelTo2" -> "genericToEncoding";
"camelTo2" -> "genericToJSON";
"camelTo2" -> "genericToJSONKey";
"camelTo2" -> "listEncoding";
"camelTo2" -> "listValue";
"camelTo2" -> "toEncoding1";
"camelTo2" -> "toEncoding2";
"camelTo2" -> "toJSON1";
"camelTo2" -> "toJSON2";
"camelTo2" -> "toJSONKeyText";
"canEtaReduce" -> "allDistinct";
"canEtaReduce" -> "isTyVar";
"canEtaReduce" -> "mentionsName";
"canEtaReduce" -> "varTToName";
"canRealizeKindStar" -> "hasKindStar";
"catKindVarNames" -> "a";
"catKindVarNames" -> "encodeToLazyText";
"catKindVarNames" -> "encodeToTextBuilder";
"catKindVarNames" -> "starKindStatusToName";
"checkExistentialContext" -> "a";
"checkExistentialContext" -> "allowExQuant";
"checkExistentialContext" -> "arityInt";
"checkExistentialContext" -> "existentialContextError";
"checkExistentialContext" -> "predMentionsName";
"coerceFromJSONKeyFunction" -> "a";
"conStr" -> "conTxt";
"conTxt" -> "conString";
"consFromJSON" -> "arityInt";
"consFromJSON" -> "checkExistentialContext";
"consFromJSON" -> "conNameExp";
"consFromJSON" -> "conTxt";
"consFromJSON" -> "firstElemNoStringFail";
"consFromJSON" -> "interleave";
"consFromJSON" -> "isNullary";
"consFromJSON" -> "matchFailed";
"consFromJSON" -> "newNameList";
"consFromJSON" -> "noArrayFail";
"consFromJSON" -> "noMatchFail";
"consFromJSON" -> "noObjectFail";
"consFromJSON" -> "noStringFail";
"consFromJSON" -> "not2ElemArray";
"consFromJSON" -> "parseArgs";
"consFromJSON" -> "value";
"consFromJSON" -> "valueConName";
"consFromJSON" -> "varTToName";
"consFromJSON" -> "wrongPairCountFail";
"consToValue" -> "argsToValue";
"consToValue" -> "arityInt";
"consToValue" -> "conStr";
"consToValue" -> "interleave";
"consToValue" -> "isNullary";
"consToValue" -> "newNameList";
"consToValue" -> "value";
"consToValue" -> "varTToName";
"constructorTags" -> "a";
"contextCons" -> "prependContext";
"contextCons" -> "showCons";
"contextTag" -> "a";
"contextTag" -> "prependFailure";
"contextType" -> "a";
"contextType" -> "prependContext";
"contramapToJSONKeyFunction" -> "a";
"datatypeContextError" -> "a";
"day" -> "a";
"day" -> "ascii6";
"day" -> "encodeYear";
"day" -> "twoDigits";
"dayTime" -> "day";
"dayTime" -> "timeOfDay64";
"decimal0" -> "bsToInteger";
"decode" -> "a";
"decode" -> "decodeWith";
"decode" -> "fromJSON";
"decode" -> "jsonEOF";
"decodeFileStrict" -> "a";
"decodeFileStrict" -> "decodeStrict";
"decodeFileStrict\'" -> "a";
"decodeFileStrict\'" -> "decodeStrict\'";
"decodeStrict" -> "a";
"decodeStrict" -> "decodeStrictWith";
"decodeStrict" -> "fromJSON";
"decodeStrict" -> "jsonEOF";
"decodeStrictWith" -> "a";
"decodeStrictWith" -> "p";
"decodeStrict\'" -> "a";
"decodeStrict\'" -> "decodeStrictWith";
"decodeStrict\'" -> "fromJSON";
"decodeStrict\'" -> "jsonEOF\'";
"decodeWith" -> "a";
"decodeWith" -> "p";
"decode\'" -> "a";
"decode\'" -> "decodeWith";
"decode\'" -> "fromJSON";
"decode\'" -> "jsonEOF\'";
"defaultOptions" -> "defaultTaggedObject";
"deriveConstraint" -> "applyCon";
"deriveConstraint" -> "hasKindStar";
"deriveConstraint" -> "hasKindVarChain";
"deriveConstraint" -> "isTyVar";
"deriveConstraint" -> "jsonClassName";
"deriveConstraint" -> "varTToName";
"deriveFromJSON" -> "deriveFromJSONCommon";
"deriveFromJSON" -> "fromJSONClass";
"deriveFromJSON1" -> "deriveFromJSONCommon";
"deriveFromJSON1" -> "fromJSON1Class";
"deriveFromJSON2" -> "deriveFromJSONCommon";
"deriveFromJSON2" -> "fromJSON2Class";
"deriveFromJSONCommon" -> "consFromJSON";
"deriveFromJSONCommon" -> "deriveJSONClass";
"deriveJSON" -> "deriveFromJSON";
"deriveJSON" -> "deriveJSONBoth";
"deriveJSON" -> "deriveToJSON";
"deriveJSON1" -> "deriveFromJSON1";
"deriveJSON1" -> "deriveJSONBoth";
"deriveJSON1" -> "deriveToJSON1";
"deriveJSON2" -> "deriveFromJSON2";
"deriveJSON2" -> "deriveJSONBoth";
"deriveJSON2" -> "deriveToJSON2";
"deriveJSONClass" -> "buildTypeInstance";
"deriveJSONClass" -> "jsonFunValName";
"deriveToJSON" -> "deriveToJSONCommon";
"deriveToJSON" -> "toJSONClass";
"deriveToJSON1" -> "deriveToJSONCommon";
"deriveToJSON1" -> "toJSON1Class";
"deriveToJSON2" -> "deriveToJSONCommon";
"deriveToJSON2" -> "toJSON2Class";
"deriveToJSONCommon" -> "consToValue";
"deriveToJSONCommon" -> "deriveJSONClass";
"derivingKindError" -> "a";
"derivingKindError" -> "arityInt";
"derivingKindError" -> "createKindChain";
"derivingKindError" -> "jsonClassName";
"dict" -> "a";
"dict" -> "colon";
"dict" -> "pairs";
"dict" -> "retagEncoding";
"digit" -> "a";
"digit" -> "bool";
"digit" -> "closeBracket";
"digit" -> "closeCurly";
"digit" -> "colon";
"digit" -> "comma";
"digit" -> "day";
"digit" -> "dict";
"digit" -> "double";
"digit" -> "doubleText";
"digit" -> "econcat";
"digit" -> "empty";
"digit" -> "emptyArray_";
"digit" -> "emptyObject_";
"digit" -> "encodingToLazyByteString";
"digit" -> "float";
"digit" -> "floatText";
"digit" -> "int";
"digit" -> "int16";
"digit" -> "int16Text";
"digit" -> "int32";
"digit" -> "int32Text";
"digit" -> "int64";
"digit" -> "int64Text";
"digit" -> "int8";
"digit" -> "int8Text";
"digit" -> "intText";
"digit" -> "integer";
"digit" -> "integerText";
"digit" -> "lazyText";
"digit" -> "list";
"digit" -> "localTime";
"digit" -> "month";
"digit" -> "nullEncoding";
"digit" -> "null_";
"digit" -> "openBracket";
"digit" -> "openCurly";
"digit" -> "pair";
"digit" -> "pairStr";
"digit" -> "pair\'";
"digit" -> "pairs";
"digit" -> "quarter";
"digit" -> "retagEncoding";
"digit" -> "scientific";
"digit" -> "scientificText";
"digit" -> "string";
"digit" -> "text";
"digit" -> "timeOfDay";
"digit" -> "tuple";
"digit" -> "unsafeToEncoding";
"digit" -> "utcTime";
"digit" -> "value";
"digit" -> "word";
"digit" -> "word16";
"digit" -> "word16Text";
"digit" -> "word32";
"digit" -> "word32Text";
"digit" -> "word64";
"digit" -> "word64Text";
"digit" -> "word8";
"digit" -> "word8Text";
"digit" -> "wordText";
"digit" -> "wrapArray";
"digit" -> "wrapObject";
"digit" -> "zonedTime";
"dispatchFunByType" -> "arityInt";
"dispatchFunByType" -> "dispatchFunByType";
"dispatchFunByType" -> "interleave";
"dispatchFunByType" -> "isInTypeFamilyApp";
"dispatchFunByType" -> "jsonFunValOrListName";
"dispatchFunByType" -> "list";
"dispatchFunByType" -> "mentionsName";
"dispatchFunByType" -> "outOfPlaceTyVarError";
"dispatchFunByType" -> "unapplyTy";
"dispatchParseJSON" -> "dispatchFunByType";
"dispatchToJSON" -> "dispatchFunByType";
"dispatchToJSON" -> "targetToJSONFun";
"dotNetTime" -> "formatMillis";
"double" -> "realFloatToEncoding";
"doubleText" -> "a";
"econcat" -> "empty";
"eitherDecode" -> "a";
"eitherDecode" -> "eitherDecodeWith";
"eitherDecode" -> "eitherFormatError";
"eitherDecode" -> "ifromJSON";
"eitherDecode" -> "jsonEOF";
"eitherDecodeFileStrict" -> "a";
"eitherDecodeFileStrict" -> "eitherDecodeStrict";
"eitherDecodeFileStrict\'" -> "a";
"eitherDecodeFileStrict\'" -> "eitherDecodeStrict\'";
"eitherDecodeFileStrict\'" -> "encode";
"eitherDecodeFileStrict\'" -> "encodeToTextBuilder";
"eitherDecodeStrict" -> "a";
"eitherDecodeStrict" -> "eitherDecodeStrictWith";
"eitherDecodeStrict" -> "eitherFormatError";
"eitherDecodeStrict" -> "ifromJSON";
"eitherDecodeStrict" -> "jsonEOF";
"eitherDecodeStrictWith" -> "a";
"eitherDecodeStrictWith" -> "p";
"eitherDecodeStrict\'" -> "a";
"eitherDecodeStrict\'" -> "eitherDecodeStrictWith";
"eitherDecodeStrict\'" -> "eitherFormatError";
"eitherDecodeStrict\'" -> "ifromJSON";
"eitherDecodeStrict\'" -> "jsonEOF\'";
"eitherDecodeWith" -> "a";
"eitherDecodeWith" -> "formatErrorLine";
"eitherDecodeWith" -> "p";
"eitherDecode\'" -> "a";
"eitherDecode\'" -> "eitherDecodeWith";
"eitherDecode\'" -> "eitherFormatError";
"eitherDecode\'" -> "ifromJSON";
"eitherDecode\'" -> "jsonEOF\'";
"eitherFormatError" -> "a";
"eitherFormatError" -> "formatError";
"empty" -> "a";
"emptyArray_" -> "ascii2";
"emptyObject" -> "a";
"emptyObject_" -> "a";
"emptyObject_" -> "ascii2";
"encode" -> "a";
"encode" -> "encodingToLazyByteString";
"encodeFile" -> "a";
"encodeFile" -> "encode";
"encodeToBuilder" -> "array";
"encodeToBuilder" -> "bool";
"encodeToBuilder" -> "null_";
"encodeToBuilder" -> "object";
"encodeToBuilder" -> "scientific";
"encodeToBuilder" -> "text";
"encodeToLazyText" -> "a";
"encodeToLazyText" -> "encodingToLazyByteString";
"encodeToTextBuilder" -> "a";
"encodeToTextBuilder" -> "array";
"encodeToTextBuilder" -> "ascii2";
"encodeToTextBuilder" -> "ascii4";
"encodeToTextBuilder" -> "ascii5";
"encodeToTextBuilder" -> "bool";
"encodeToTextBuilder" -> "day";
"encodeToTextBuilder" -> "dict";
"encodeToTextBuilder" -> "double";
"encodeToTextBuilder" -> "doubleText";
"encodeToTextBuilder" -> "emptyArray_";
"encodeToTextBuilder" -> "emptyObject_";
"encodeToTextBuilder" -> "encodeToBuilder";
"encodeToTextBuilder" -> "encodingToLazyByteString";
"encodeToTextBuilder" -> "float";
"encodeToTextBuilder" -> "floatText";
"encodeToTextBuilder" -> "fromScientific";
"encodeToTextBuilder" -> "int";
"encodeToTextBuilder" -> "int16";
"encodeToTextBuilder" -> "int16Text";
"encodeToTextBuilder" -> "int32";
"encodeToTextBuilder" -> "int32Text";
"encodeToTextBuilder" -> "int64";
"encodeToTextBuilder" -> "int64Text";
"encodeToTextBuilder" -> "int8";
"encodeToTextBuilder" -> "int8Text";
"encodeToTextBuilder" -> "intText";
"encodeToTextBuilder" -> "integer";
"encodeToTextBuilder" -> "integerText";
"encodeToTextBuilder" -> "lazyText";
"encodeToTextBuilder" -> "list";
"encodeToTextBuilder" -> "localTime";
"encodeToTextBuilder" -> "month";
"encodeToTextBuilder" -> "nullEncoding";
"encodeToTextBuilder" -> "null_";
"encodeToTextBuilder" -> "object";
"encodeToTextBuilder" -> "pair";
"encodeToTextBuilder" -> "pairStr";
"encodeToTextBuilder" -> "pair\'";
"encodeToTextBuilder" -> "pairs";
"encodeToTextBuilder" -> "quarter";
"encodeToTextBuilder" -> "quote";
"encodeToTextBuilder" -> "scientific";
"encodeToTextBuilder" -> "scientificText";
"encodeToTextBuilder" -> "string";
"encodeToTextBuilder" -> "text";
"encodeToTextBuilder" -> "timeOfDay";
"encodeToTextBuilder" -> "unquoted";
"encodeToTextBuilder" -> "unsafeToEncoding";
"encodeToTextBuilder" -> "utcTime";
"encodeToTextBuilder" -> "value";
"encodeToTextBuilder" -> "word";
"encodeToTextBuilder" -> "word16";
"encodeToTextBuilder" -> "word16Text";
"encodeToTextBuilder" -> "word32";
"encodeToTextBuilder" -> "word32Text";
"encodeToTextBuilder" -> "word64";
"encodeToTextBuilder" -> "word64Text";
"encodeToTextBuilder" -> "word8";
"encodeToTextBuilder" -> "word8Text";
"encodeToTextBuilder" -> "wordText";
"encodeToTextBuilder" -> "zonedTime";
"encodeVector" -> "a";
"encodeVector" -> "listEncoding";
"encodeYear" -> "ascii4";
"encodeYear" -> "ascii5";
"encodingToLazyByteString" -> "a";
"escapeAscii" -> "ascii2";
"escapeAscii" -> "c2w";
"etaReductionError" -> "a";
"explicitParseField" -> "a";
"explicitParseField" -> "p";
"explicitParseFieldMaybe" -> "a";
"explicitParseFieldMaybe" -> "listParser";
"explicitParseFieldMaybe" -> "p";
"explicitParseFieldMaybe\'" -> "a";
"explicitParseFieldMaybe\'" -> "p";
"explicitParseFieldMaybe\'" -> "pmval";
"failWithCTags" -> "a";
"failWithCTags" -> "constructorTags";
"failWithCTags" -> "contextType";
"fieldToPair" -> "a";
"fieldToPair" -> "orderingToText";
"fieldToPair" -> "p";
"fieldToPair" -> "pair";
"fieldToPair" -> "pairs";
"fieldToPair" -> "toEncoding1";
"fieldToPair" -> "toEncoding2";
"fieldToPair" -> "toJSON1";
"fieldToPair" -> "toJSON2";
"fieldToPair" -> "toJSONKeyText";
"fieldToPair" -> "value";
"float" -> "realFloatToEncoding";
"floatText" -> "a";
"foldable" -> "a";
"foldable" -> "coerceFromJSONKeyFunction";
"foldable" -> "contramapToJSONKeyFunction";
"foldable" -> "explicitParseField";
"foldable" -> "explicitParseFieldMaybe";
"foldable" -> "explicitParseFieldMaybe\'";
"foldable" -> "fromJSON";
"foldable" -> "fromJSONKeyCoerce";
"foldable" -> "genericFromJSONKey";
"foldable" -> "genericLiftParseJSON";
"foldable" -> "genericLiftToEncoding";
"foldable" -> "genericLiftToJSON";
"foldable" -> "genericParseJSON";
"foldable" -> "genericToEncoding";
"foldable" -> "genericToJSON";
"foldable" -> "genericToJSONKey";
"foldable" -> "ifromJSON";
"foldable" -> "listEncoding";
"foldable" -> "listParser";
"foldable" -> "listValue";
"foldable" -> "mapFromJSONKeyFunction";
"foldable" -> "parseField";
"foldable" -> "parseFieldMaybe";
"foldable" -> "parseFieldMaybe\'";
"foldable" -> "parseIndexedJSON";
"foldable" -> "parseJSON1";
"foldable" -> "parseJSON2";
"foldable" -> "parseOptionalFieldWith";
"foldable" -> "toEncoding1";
"foldable" -> "toEncoding2";
"foldable" -> "toJSON1";
"foldable" -> "toJSON2";
"foldable" -> "toJSONKeyText";
"foldable" -> "typeMismatch";
"foldable" -> "unexpected";
"foldable" -> "withArray";
"foldable" -> "withBool";
"foldable" -> "withEmbeddedJSON";
"foldable" -> "withObject";
"foldable" -> "withScientific";
"foldable" -> "withText";
"formatError" -> "formatPath";
"formatErrorLine" -> "a";
"formatMillis" -> "stringEncoding";
"formatMillis" -> "toJSONKeyTextEnc";
"formatPath" -> "formatRelativePath";
"fromJSON" -> "a";
"fromJSON" -> "parse";
"fromJSONKeyCoerce" -> "a";
"fromNull" -> "a";
"fromNull" -> "coerceFromJSONKeyFunction";
"fromNull" -> "p";
"fromNull" -> "parseChar";
"fromNull" -> "parseJSON1";
"fromNull" -> "parseJSON2";
"fromNull" -> "parseJSONElemAtIndex";
"fromNull" -> "prependContext";
"fromNull" -> "typeMismatch";
"fromNull" -> "withArray";
"fromNull" -> "withObject";
"fromScientific" -> "a";
"fromScientific" -> "camelTo";
"fromScientific" -> "camelTo2";
"fromScientific" -> "coerceFromJSONKeyFunction";
"fromScientific" -> "contramapToJSONKeyFunction";
"fromScientific" -> "defaultJSONKeyOptions";
"fromScientific" -> "defaultOptions";
"fromScientific" -> "defaultTaggedObject";
"fromScientific" -> "emptyArray";
"fromScientific" -> "emptyObject";
"fromScientific" -> "explicitParseField";
"fromScientific" -> "explicitParseFieldMaybe";
"fromScientific" -> "explicitParseFieldMaybe\'";
"fromScientific" -> "foldable";
"fromScientific" -> "formatPath";
"fromScientific" -> "formatRelativePath";
"fromScientific" -> "fromJSON";
"fromScientific" -> "fromJSONKeyCoerce";
"fromScientific" -> "genericFromJSONKey";
"fromScientific" -> "genericLiftParseJSON";
"fromScientific" -> "genericLiftToEncoding";
"fromScientific" -> "genericLiftToJSON";
"fromScientific" -> "genericParseJSON";
"fromScientific" -> "genericToEncoding";
"fromScientific" -> "genericToJSON";
"fromScientific" -> "genericToJSONKey";
"fromScientific" -> "listEncoding";
"fromScientific" -> "listParser";
"fromScientific" -> "listValue";
"fromScientific" -> "mapFromJSONKeyFunction";
"fromScientific" -> "modifyFailure";
"fromScientific" -> "object";
"fromScientific" -> "pairs";
"fromScientific" -> "parse";
"fromScientific" -> "parseEither";
"fromScientific" -> "parseFail";
"fromScientific" -> "parseField";
"fromScientific" -> "parseFieldMaybe";
"fromScientific" -> "parseFieldMaybe\'";
"fromScientific" -> "parseJSON1";
"fromScientific" -> "parseJSON2";
"fromScientific" -> "parseMaybe";
"fromScientific" -> "parserCatchError";
"fromScientific" -> "parserThrowError";
"fromScientific" -> "prependFailure";
"fromScientific" -> "toEncoding1";
"fromScientific" -> "toEncoding2";
"fromScientific" -> "toJSON1";
"fromScientific" -> "toJSON2";
"fromScientific" -> "toJSONKeyText";
"fromScientific" -> "typeMismatch";
"fromScientific" -> "unexpected";
"fromScientific" -> "unsafeToEncoding";
"fromScientific" -> "withArray";
"fromScientific" -> "withBool";
"fromScientific" -> "withEmbeddedJSON";
"fromScientific" -> "withObject";
"fromScientific" -> "withScientific";
"fromScientific" -> "withText";
"genericFromJSONKey" -> "a";
"genericFromJSONKey" -> "constructorTags";
"genericLiftParseJSON" -> "a";
"genericLiftParseJSON" -> "defaultOptions";
"genericLiftParseJSON" -> "genericParseJSON";
"genericLiftParseJSON" -> "parseIndexedJSON";
"genericLiftParseJSON" -> "withArray";
"genericLiftToEncoding" -> "a";
"genericLiftToEncoding" -> "defaultOptions";
"genericLiftToEncoding" -> "genericToJSON";
"genericLiftToEncoding" -> "infixr";
"genericLiftToEncoding" -> "listEncoding";
"genericLiftToEncoding" -> "listValue";
"genericLiftToEncoding" -> "value";
"genericLiftToJSON" -> "a";
"genericParseJSON" -> "a";
"genericToEncoding" -> "a";
"genericToJSON" -> "a";
"genericToJSONKey" -> "a";
"genericToJSONKey" -> "defaultOptions";
"genericToJSONKey" -> "genericLiftToEncoding";
"genericToJSONKey" -> "genericLiftToJSON";
"genericToJSONKey" -> "listEncoding";
"genericToJSONKey" -> "listValue";
"genericToJSONKey" -> "toJSONKeyText";
"hasKindVarChain" -> "isStarOrVar";
"hasKindVarChain" -> "tyKind";
"hasKindVarChain" -> "uncurryKind";
"hashValue" -> "a";
"hashValue" -> "hashValue";
"ifromJSON" -> "a";
"ifromJSON" -> "explicitParseField";
"ifromJSON" -> "explicitParseFieldMaybe";
"ifromJSON" -> "explicitParseFieldMaybe\'";
"ifromJSON" -> "iparse";
"infixr" -> "a";
"infixr" -> "apP";
"infixr" -> "camelTo";
"infixr" -> "camelTo2";
"infixr" -> "comma";
"infixr" -> "defaultJSONKeyOptions";
"infixr" -> "defaultOptions";
"infixr" -> "defaultTaggedObject";
"infixr" -> "empty";
"infixr" -> "emptyArray";
"infixr" -> "emptyObject";
"infixr" -> "formatError";
"infixr" -> "formatPath";
"infixr" -> "formatRelativePath";
"infixr" -> "iparse";
"infixr" -> "isEmptyArray";
"infixr" -> "modifyFailure";
"infixr" -> "object";
"infixr" -> "parse";
"infixr" -> "parseEither";
"infixr" -> "parseFail";
"infixr" -> "parseMaybe";
"infixr" -> "parserCatchError";
"infixr" -> "parserThrowError";
"infixr" -> "prependFailure";
"infixr" -> "retagEncoding";
"int16Text" -> "a";
"int32Text" -> "a";
"int64Text" -> "a";
"int8Text" -> "a";
"intText" -> "a";
"integerText" -> "a";
"iparse" -> "a";
"isInTypeFamilyApp" -> "a";
"isMaybe" -> "a";
"isTyVar" -> "isTyVar";
"json" -> "value";
"jsonAccum" -> "fromListAccum";
"jsonAccum" -> "jsonWith";
"jsonAccum\'" -> "fromListAccum";
"jsonAccum\'" -> "jsonWith\'";
"jsonEOF" -> "json";
"jsonEOF" -> "skipSpace";
"jsonEOF\'" -> "json\'";
"jsonEOF\'" -> "skipSpace";
"jsonFunValOrListName" -> "jsonFunListName";
"jsonFunValOrListName" -> "jsonFunValName";
"jsonLast" -> "jsonWith";
"jsonLast\'" -> "jsonWith\'";
"jsonNoDup" -> "jsonWith";
"jsonNoDup" -> "parseListNoDup";
"jsonNoDup\'" -> "jsonWith\'";
"jsonNoDup\'" -> "parseListNoDup";
"jsonWith" -> "array_";
"jsonWith" -> "jstring_";
"jsonWith" -> "object_";
"jsonWith" -> "scientific";
"jsonWith" -> "skipSpace";
"jsonWith" -> "string";
"jsonWith\'" -> "array_\'";
"jsonWith\'" -> "jstring_";
"jsonWith\'" -> "object_\'";
"jsonWith\'" -> "scientific";
"jsonWith\'" -> "skipSpace";
"jsonWith\'" -> "string";
"json\'" -> "value\'";
"jstring" -> "jstring_";
"jstringSlow" -> "a";
"jstring_" -> "jstringSlow";
"jstring_" -> "unsafeDecodeASCII";
"lazyText" -> "a";
"list" -> "closeBracket";
"list" -> "comma";
"list" -> "empty";
"list" -> "emptyArray_";
"list" -> "openBracket";
"listEncoding" -> "a";
"listParser" -> "a";
"listParser" -> "parseJSON1";
"listParser" -> "typeMismatch";
"listValue" -> "a";
"listValue" -> "emptyArray";
"listValue" -> "listEncoding";
"listValue" -> "listValue";
"listValue" -> "nonAllNullarySumToJSON";
"listValue" -> "p";
"listValue" -> "toEncoding1";
"listValue" -> "toJSON1";
"localTime" -> "a";
"localTime" -> "dayTime";
"lookupFieldWith" -> "a";
"lookupFieldWith" -> "unknownFieldFail";
"mapFromJSONKeyFunction" -> "a";
"mapKey" -> "decodeStrictWith";
"mapKey" -> "decodeWith";
"mapKey" -> "eitherDecodeStrictWith";
"mapKey" -> "eitherDecodeWith";
"mapKey" -> "fromListAccum";
"mapKey" -> "json";
"mapKey" -> "jsonAccum";
"mapKey" -> "jsonAccum\'";
"mapKey" -> "jsonEOF";
"mapKey" -> "jsonEOF\'";
"mapKey" -> "jsonLast";
"mapKey" -> "jsonLast\'";
"mapKey" -> "jsonNoDup";
"mapKey" -> "jsonNoDup\'";
"mapKey" -> "jsonWith";
"mapKey" -> "jsonWith\'";
"mapKey" -> "json\'";
"mapKey" -> "jstring";
"mapKey" -> "jstring_";
"mapKey" -> "mapKeyVal";
"mapKey" -> "parseListNoDup";
"mapKey" -> "scientific";
"mapKey" -> "value";
"mapKey" -> "value\'";
"matchCases" -> "getValField";
"matchFailed" -> "parseTypeMismatch";
"matchFailed" -> "valueConName";
"mconcatE" -> "mconcatE";
"mkFunCommon" -> "buildTypeInstance";
"mkLiftParseJSON" -> "fromJSON1Class";
"mkLiftParseJSON" -> "mkParseJSONCommon";
"mkLiftParseJSON2" -> "fromJSON2Class";
"mkLiftParseJSON2" -> "mkParseJSONCommon";
"mkLiftToEncoding" -> "mkToEncodingCommon";
"mkLiftToEncoding" -> "toJSON1Class";
"mkLiftToEncoding2" -> "mkToEncodingCommon";
"mkLiftToEncoding2" -> "toJSON2Class";
"mkLiftToJSON" -> "mkToJSONCommon";
"mkLiftToJSON" -> "toJSON1Class";
"mkLiftToJSON2" -> "mkToJSONCommon";
"mkLiftToJSON2" -> "toJSON2Class";
"mkParseJSON" -> "fromJSONClass";
"mkParseJSON" -> "mkParseJSONCommon";
"mkParseJSONCommon" -> "consFromJSON";
"mkParseJSONCommon" -> "mkFunCommon";
"mkToEncoding" -> "mkToEncodingCommon";
"mkToEncoding" -> "toJSONClass";
"mkToEncodingCommon" -> "consToValue";
"mkToEncodingCommon" -> "mkFunCommon";
"mkToJSON" -> "mkToJSONCommon";
"mkToJSON" -> "toJSONClass";
"mkToJSONCommon" -> "consToValue";
"mkToJSONCommon" -> "mkFunCommon";
"modifyFailure" -> "a";
"modifyFailure" -> "p";
"month" -> "a";
"month" -> "ascii3";
"month" -> "encodeYear";
"month" -> "twoDigits";
"nonAllNullarySumToJSON" -> "a";
"nonAllNullarySumToJSON" -> "fieldToPair";
"nonAllNullarySumToJSON" -> "p";
"nonAllNullarySumToJSON" -> "pair";
"nonAllNullarySumToJSON" -> "pairs";
"null_" -> "ascii4";
"object" -> "a";
"object" -> "emptyObject_";
"object" -> "encodeToBuilder";
"object" -> "p";
"object" -> "text";
"objectE" -> "fromPairsE";
"objectE" -> "mconcatE";
"objectE" -> "pairE";
"objectValues" -> "skipSpace";
"object_" -> "jstring";
"object_" -> "objectValues";
"object_\'" -> "jstring";
"object_\'" -> "objectValues";
"opaqueSumToValue" -> "pairE";
"opaqueSumToValue" -> "pairs";
"opaqueSumToValue" -> "sumToValue";
"opaqueSumToValue" -> "value";
"optionToMaybe" -> "a";
"orderingToText" -> "a";
"orderingToText" -> "contramapToJSONKeyFunction";
"orderingToText" -> "dict";
"orderingToText" -> "emptyArray";
"orderingToText" -> "emptyArray_";
"orderingToText" -> "listEncoding";
"orderingToText" -> "listValue";
"orderingToText" -> "mapHashKeyVal";
"orderingToText" -> "object";
"orderingToText" -> "realFloatToJSON";
"orderingToText" -> "toEncoding1";
"orderingToText" -> "toJSON1";
"orderingToText" -> "toJSONKeyText";
"orderingToText" -> "toJSONKeyTextEnc";
"orderingToText" -> "toJSONPair";
"outOfPlaceTyVarError" -> "a";
"outOfPlaceTyVarError" -> "arityInt";
"p" -> "a";
"pair" -> "pair\'";
"pair" -> "text";
"pairE" -> "pair";
"pairStr" -> "pair\'";
"pairStr" -> "string";
"pair\'" -> "a";
"pair\'" -> "colon";
"pair\'" -> "comma";
"pair\'" -> "retagEncoding";
"pairs" -> "a";
"pairs" -> "closeCurly";
"pairs" -> "emptyObject_";
"pairs" -> "openCurly";
"pairs" -> "retagEncoding";
"parse" -> "a";
"parseAllNullarySum" -> "a";
"parseAllNullarySum" -> "failWithCTags";
"parseAllNullarySum" -> "withText";
"parseArgs" -> "matchCases";
"parseArgs" -> "matchFailed";
"parseArgs" -> "parseArgs";
"parseArgs" -> "parseNullaryMatches";
"parseArgs" -> "parseProduct";
"parseArgs" -> "parseRecord";
"parseArgs" -> "parseUnaryMatches";
"parseBoundedIntegral" -> "parseBoundedIntegralFromScientific";
"parseBoundedIntegral" -> "prependContext";
"parseBoundedIntegral" -> "withScientific\'";
"parseBoundedIntegralFromScientific" -> "a";
"parseBoundedIntegralText" -> "a";
"parseBoundedIntegralText" -> "parseBoundedIntegralFromScientific";
"parseBoundedIntegralText" -> "parseScientificText";
"parseBoundedIntegralText" -> "prependContext";
"parseChar" -> "integer";
"parseChar" -> "parseBoundedIntegral";
"parseChar" -> "parseBoundedIntegralText";
"parseChar" -> "parseIntegral";
"parseChar" -> "parseIntegralText";
"parseChar" -> "parseNatural";
"parseChar" -> "parseRealFloat";
"parseChar" -> "parseScientificText";
"parseChar" -> "prependContext";
"parseChar" -> "text";
"parseChar" -> "value";
"parseChar" -> "withBoundedScientific\'";
"parseChar" -> "withObject";
"parseDayOfWeek" -> "parseDayOfWeek";
"parseDayOfWeek" -> "parseQuarterOfYear";
"parseDayOfWeek" -> "withText";
"parseEither" -> "formatError";
"parseFail" -> "a";
"parseField" -> "a";
"parseFieldMaybe" -> "a";
"parseFieldMaybe\'" -> "a";
"parseIndexedJSON" -> "a";
"parseIndexedJSON" -> "p";
"parseIndexedJSON" -> "value";
"parseIndexedJSONPair" -> "a";
"parseIndexedJSONPair" -> "p";
"parseIndexedJSONPair" -> "parseJSONElemAtIndex";
"parseIndexedJSONPair" -> "value";
"parseIndexedJSONPair" -> "withArray";
"parseIntegral" -> "a";
"parseIntegral" -> "parseIntegralFromScientific";
"parseIntegral" -> "prependContext";
"parseIntegral" -> "withBoundedScientific\'";
"parseIntegralFromScientific" -> "a";
"parseIntegralText" -> "a";
"parseIntegralText" -> "parseIntegralFromScientific";
"parseIntegralText" -> "parseScientificText";
"parseIntegralText" -> "prependContext";
"parseIntegralText" -> "withBoundedScientific\'";
"parseJSON1" -> "a";
"parseJSON1" -> "withArray";
"parseJSON2" -> "a";
"parseJSONElemAtIndex" -> "a";
"parseJSONElemAtIndex" -> "p";
"parseMaybe" -> "a";
"parseNatural" -> "fromJSONKeyCoerce";
"parseNatural" -> "integer";
"parseNatural" -> "parseBoundedIntegral";
"parseNatural" -> "parseBoundedIntegralText";
"parseNatural" -> "parseVersionText";
"parseNatural" -> "withText";
"parseNonAllNullarySum" -> "a";
"parseNonAllNullarySum" -> "constructorTags";
"parseNonAllNullarySum" -> "contextCons";
"parseNonAllNullarySum" -> "contextTag";
"parseNonAllNullarySum" -> "contextType";
"parseNonAllNullarySum" -> "failWithCTags";
"parseNonAllNullarySum" -> "p";
"parseNonAllNullarySum" -> "productParseJSON0";
"parseNonAllNullarySum" -> "showCons";
"parseNonAllNullarySum" -> "typeMismatch";
"parseNonAllNullarySum" -> "withArray";
"parseNonAllNullarySum" -> "withObject";
"parseNullaryMatches" -> "matchFailed";
"parseNullaryMatches" -> "parseTypeMismatch";
"parseOptionalFieldWith" -> "a";
"parseProduct" -> "a";
"parseProduct" -> "dispatchParseJSON";
"parseProduct" -> "matchFailed";
"parseProduct" -> "parseTypeMismatch";
"parseQuarterOfYear" -> "a";
"parseQuarterOfYear" -> "fromNull";
"parseQuarterOfYear" -> "p";
"parseQuarterOfYear" -> "parseJSON1";
"parseQuarterOfYear" -> "parseQuarterOfYear";
"parseQuarterOfYear" -> "withText";
"parseRealFloat" -> "a";
"parseRealFloat" -> "prependContext";
"parseRealFloat" -> "unexpected";
"parseRecord" -> "a";
"parseRecord" -> "dispatchParseJSON";
"parseRecord" -> "fieldLabel";
"parseScientificText" -> "a";
"parseTypeMismatch" -> "a";
"parseTypeMismatch" -> "lookupFieldWith";
"parseTypeMismatch" -> "parseOptionalFieldWith";
"parseTypeMismatch" -> "parseTypeMismatch\'";
"parseUnaryMatches" -> "dispatchParseJSON";
"parseVersionText" -> "a";
"parseVersionText" -> "coerceFromJSONKeyFunction";
"parseVersionText" -> "listParser";
"parseVersionText" -> "p";
"parseVersionText" -> "parseIndexedJSON";
"parseVersionText" -> "parseIndexedJSONPair";
"parseVersionText" -> "parseJSON1";
"parseVersionText" -> "value";
"parseVersionText" -> "withArray";
"parseVersionText" -> "withObject";
"parseVersionText" -> "withScientific";
"parseVersionText" -> "withText";
"parserCatchError" -> "a";
"parserCatchError" -> "p";
"parserThrowError" -> "a";
"pmval" -> "a";
"predMentionsName" -> "mentionsName";
"prependContext" -> "a";
"prependContext" -> "prependFailure";
"prependFailure" -> "a";
"prependFailure" -> "modifyFailure";
"productParseJSON0" -> "a";
"productParseJSON0" -> "contextCons";
"productParseJSON0" -> "p";
"productParseJSON0" -> "pair";
"productParseJSON0" -> "parseChar";
"productParseJSON0" -> "parseJSON1";
"productParseJSON0" -> "parseJSON2";
"productParseJSON0" -> "prependContext";
"productParseJSON0" -> "showCons";
"productParseJSON0" -> "typeMismatch";
"productParseJSON0" -> "value";
"productParseJSON0" -> "withArray";
"productParseJSON0" -> "withText";
"quarter" -> "a";
"quarter" -> "ascii3";
"quarter" -> "encodeYear";
"realFloatToEncoding" -> "a";
"realFloatToEncoding" -> "null_";
"realFloatToJSON" -> "a";
"recordSumToValue" -> "fromPairsE";
"recordSumToValue" -> "pairs";
"recordSumToValue" -> "sumToValue";
"retagEncoding" -> "a";
"run" -> "p";
"scientific" -> "a";
"scientific" -> "decimal0";
"scientificText" -> "a";
"showCons" -> "a";
"showCons" -> "listParser";
"showCons" -> "p";
"showCons" -> "parseAllNullarySum";
"showCons" -> "parseNonAllNullarySum";
"string" -> "c2w";
"string" -> "escapeAscii";
"string" -> "quote";
"stringEncoding" -> "a";
"stringEncoding" -> "object";
"stringEncoding" -> "toEncodingDayOfWeek";
"substNameWithKind" -> "applySubstitutionKind";
"substNamesWithKindStar" -> "a";
"substNamesWithKindStar" -> "substNameWithKind";
"sumToValue" -> "array";
"sumToValue" -> "conStr";
"sumToValue" -> "conString";
"sumToValue" -> "fromPairsE";
"sumToValue" -> "objectE";
"sumToValue" -> "pairE";
"sumToValue" -> "pairs";
"sumToValue" -> "value";
"targetToJSONFun" -> "fromJSON1Class";
"targetToJSONFun" -> "fromJSON2Class";
"targetToJSONFun" -> "fromJSONClass";
"text" -> "a";
"timeOfDay" -> "a";
"timeOfDay" -> "timeOfDay64";
"timeOfDay64" -> "ascii8";
"timeOfDay64" -> "digit";
"timeOfDay64" -> "twoDigits";
"timeZone" -> "ascii6";
"timeZone" -> "twoDigits";
"toEncoding1" -> "a";
"toEncoding1" -> "listEncoding";
"toEncoding1" -> "listValue";
"toEncoding2" -> "a";
"toEncodingDayOfWeek" -> "a";
"toEncodingDayOfWeek" -> "toEncodingDayOfWeek";
"toEncodingDayOfWeek" -> "toJSONKeyTextEnc";
"toEncodingQuarterOfYear" -> "a";
"toEncodingQuarterOfYear" -> "contramapToJSONKeyFunction";
"toEncodingQuarterOfYear" -> "listEncoding";
"toEncodingQuarterOfYear" -> "listValue";
"toEncodingQuarterOfYear" -> "object";
"toEncodingQuarterOfYear" -> "pair";
"toEncodingQuarterOfYear" -> "pairs";
"toEncodingQuarterOfYear" -> "toEncoding1";
"toEncodingQuarterOfYear" -> "toEncoding2";
"toEncodingQuarterOfYear" -> "toEncodingQuarterOfYear";
"toEncodingQuarterOfYear" -> "toJSON1";
"toEncodingQuarterOfYear" -> "toJSON2";
"toEncodingQuarterOfYear" -> "toJSONKeyText";
"toEncodingQuarterOfYear" -> "toJSONKeyTextEnc";
"toJSON1" -> "a";
"toJSON2" -> "a";
"toJSONKeyText" -> "a";
"toJSONKeyTextEnc" -> "a";
"toJSONKeyTextEnc" -> "contramapToJSONKeyFunction";
"toJSONPair" -> "a";
"toJSONPair" -> "listValue";
"tuple" -> "a";
"tuple" -> "closeBracket";
"tuple" -> "openBracket";
"tuple" -> "retagEncoding";
"twoDigits" -> "a";
"twoDigits" -> "digit";
"typeMismatch" -> "a";
"typeMismatch" -> "typeOf";
"typeOf" -> "a";
"typeOf" -> "defaultOptions";
"typeOf" -> "genericLiftParseJSON";
"typeOf" -> "listParser";
"unSigT" -> "a";
"uncurryKind" -> "uncurryTy";
"uncurryTy" -> "uncurryTy";
"unexpected" -> "typeOf";
"unquoted" -> "escapeAscii";
"unsafeToEncoding" -> "a";
"utcTime" -> "a";
"utcTime" -> "dayTime";
"valInteger" -> "valSimple";
"valSimple" -> "a";
"valSimple" -> "day";
"valSimple" -> "localTime";
"valSimple" -> "month";
"valSimple" -> "quarter";
"valSimple" -> "run";
"valSimple" -> "timeOfDay";
"valSimple" -> "timeZone";
"valSimple" -> "utcTime";
"valSimple" -> "zonedTime";
"value" -> "formatError";
"value" -> "ifromJSON";
"value" -> "iparse";
"value" -> "jsonWith";
"value" -> "mapHashKeyVal";
"value" -> "mapKey";
"value" -> "mapKeyVal";
"value\'" -> "jsonWith\'";
"varTToName" -> "a";
"varTToName" -> "varTToNameMaybe";
"varTToNameMaybe" -> "varTToNameMaybe";
"vectorParseJSON" -> "mapKey";
"vectorParseJSON" -> "p";
"vectorParseJSON" -> "parseDayOfWeek";
"vectorParseJSON" -> "parseIndexedJSON";
"vectorParseJSON" -> "parseIndexedJSONPair";
"vectorParseJSON" -> "parseJSON1";
"vectorParseJSON" -> "prependContext";
"vectorParseJSON" -> "vectorParseJSON";
"vectorParseJSON" -> "withArray";
"vectorParseJSON" -> "withBoundedScientific";
"vectorParseJSON" -> "withObject";
"vectorParseJSON" -> "withText";
"vectorToJSON" -> "a";
"vectorToJSON" -> "dict";
"vectorToJSON" -> "dotNetTime";
"vectorToJSON" -> "encodeVector";
"vectorToJSON" -> "listEncoding";
"vectorToJSON" -> "listValue";
"vectorToJSON" -> "mapKeyVal";
"vectorToJSON" -> "toEncoding1";
"vectorToJSON" -> "toJSON1";
"vectorToJSON" -> "toJSONPair";
"vectorToJSON" -> "vectorToJSON";
"withArray" -> "a";
"withArray" -> "prependContext";
"withArray" -> "typeMismatch";
"withBool" -> "a";
"withBool" -> "prependContext";
"withBool" -> "typeMismatch";
"withBoundedScientific" -> "a";
"withBoundedScientific" -> "prependContext";
"withBoundedScientific" -> "withBoundedScientific_";
"withBoundedScientific\'" -> "a";
"withBoundedScientific\'" -> "withBoundedScientific_";
"withBoundedScientific_" -> "a";
"withBoundedScientific_" -> "scientific";
"withBoundedScientific_" -> "typeMismatch";
"withEmbeddedJSON" -> "a";
"withEmbeddedJSON" -> "eitherDecode";
"withEmbeddedJSON" -> "eitherDecodeWith";
"withEmbeddedJSON" -> "eitherFormatError";
"withEmbeddedJSON" -> "formatError";
"withEmbeddedJSON" -> "ifromJSON";
"withEmbeddedJSON" -> "jsonEOF";
"withEmbeddedJSON" -> "prependContext";
"withEmbeddedJSON" -> "typeMismatch";
"withObject" -> "a";
"withObject" -> "prependContext";
"withObject" -> "typeMismatch";
"withScientific" -> "a";
"withScientific" -> "prependContext";
"withScientific" -> "scientific";
"withScientific" -> "typeMismatch";
"withScientific\'" -> "a";
"withScientific\'" -> "typeMismatch";
"withText" -> "a";
"withText" -> "prependContext";
"withText" -> "typeMismatch";
"word16Text" -> "a";
"word32Text" -> "a";
"word64Text" -> "a";
"word8Text" -> "a";
"wordText" -> "a";
"wrapArray" -> "a";
"wrapArray" -> "closeBracket";
"wrapArray" -> "openBracket";
"wrapArray" -> "retagEncoding";
"wrapObject" -> "closeCurly";
"wrapObject" -> "openCurly";
"wrapObject" -> "retagEncoding";
"zonedTime" -> "localTime";
"zonedTime" -> "timeZone";
}
