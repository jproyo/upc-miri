strict digraph deps {
"abstract" [style=solid];
"addCoverageCheck" [style=solid];
"again" [style=solid];
"allCoverage" [style=solid];
"allProperties" [style=solid];
"apply" [style=solid];
"applyArbitrary2" [style=solid];
"applyArbitrary3" [style=solid];
"applyArbitrary4" [style=solid];
"applyFun" [style=solid];
"applyFun2" [style=solid];
"applyFun3" [style=solid];
"arbitrary1" [style=solid];
"arbitrary2" [style=solid];
"arbitraryASCIIChar" [style=solid];
"arbitraryBoundedEnum" [style=solid];
"arbitraryBoundedIntegral" [style=solid];
"arbitraryBoundedRandom" [style=solid];
"arbitraryPrintableChar" [style=solid];
"arbitrarySizedBoundedIntegral" [style=solid];
"arbitrarySizedFractional" [style=solid];
"arbitrarySizedIntegral" [style=solid];
"arbitrarySizedNatural" [style=solid];
"arbitraryUnicodeChar" [style=solid];
"assert" [style=solid];
"bind" [style=solid];
"bold" [style=solid];
"callback" [style=solid];
"callbackPostFinalFailure" [style=solid];
"callbackPostTest" [style=solid];
"capture" [style=solid];
"centre" [style=solid];
"checkCoverage" [style=solid];
"checkCoverageWith" [style=solid];
"choose" [style=solid];
"chooseAny" [style=solid];
"chooseBoundedIntegral" [style=solid];
"chooseEnum" [style=solid];
"chooseInt" [style=solid];
"chooseInt64" [style=solid];
"chooseInteger" [style=solid];
"chooseUpTo" [style=solid];
"chooseWord64" [style=solid];
"classify" [style=solid];
"coarbitraryEnum" [style=solid];
"coarbitraryIntegral" [style=solid];
"coarbitraryReal" [style=solid];
"coarbitraryShow" [style=solid];
"collect" [style=solid];
"conjoin" [style=solid];
"counterexample" [style=solid];
"cover" [style=solid];
"coverTable" [style=solid];
"deconstructType" [style=solid];
"delay" [style=solid];
"discard" [style=solid];
"disjoin" [style=solid];
"doneTesting" [style=solid];
"drawTable" [style=solid];
"elements" [style=solid];
"evaluate" [style=solid];
"exception" [style=solid];
"expName" [style=solid];
"expectFailure" [style=solid];
"fail_" [style=solid];
"failureReason" [style=solid];
"failureSummary" [style=solid];
"failureSummaryAndReason" [style=solid];
"features" [style=solid];
"finally" [style=solid];
"flattenRows" [style=solid];
"forAll" [style=solid];
"forAllBlind" [style=solid];
"forAllM" [style=solid];
"forAllProperties" [style=solid];
"forAllShow" [style=solid];
"forAllShrink" [style=solid];
"forAllShrinkBlind" [style=solid];
"forAllShrinkShow" [style=solid];
"formatException" [style=solid];
"foundFailure" [style=solid];
"frequency" [style=solid];
"functionBoundedEnum" [style=solid];
"functionEitherWith" [style=solid];
"functionIntegral" [style=solid];
"functionMap" [style=solid];
"functionMapWith" [style=solid];
"functionPairWith" [style=solid];
"functionRealFrac" [style=solid];
"functionShow" [style=solid];
"functionVoid" [style=solid];
"gen" [style=solid];
"generate" [style=solid];
"genericCoarbitrary" [style=solid];
"genericFunction" [style=solid];
"genericShrink" [style=solid];
"getSize" [style=solid];
"giveUp" [style=solid];
"growingElements" [style=solid];
"handle" [style=solid];
"idempotentIOProperty" [style=solid];
"inBounds" [style=solid];
"infiniteList" [style=solid];
"infiniteListFromData" [style=solid];
"infiniteListOf" [style=solid];
"infix" [style=solid];
"infixr" [style=solid];
"infoType" [style=solid];
"insufficientlyCovered" [style=solid];
"integerVariant" [style=solid];
"invnormcdf" [style=solid];
"ioProperty" [style=solid];
"ioRose" [style=solid];
"isDiscard" [style=solid];
"isInterrupt" [style=solid];
"isOneLine" [style=solid];
"isSuccess" [style=solid];
"isVar" [style=solid];
"joinRose" [style=solid];
"label" [style=solid];
"labelledExamples" [style=solid];
"labelledExamplesResult" [style=solid];
"labelledExamplesWith" [style=solid];
"labelledExamplesWithResult" [style=solid];
"labelsAndTables" [style=solid];
"liftBool" [style=solid];
"liftOrdA" [style=solid];
"liftOrdA2" [style=solid];
"liftOrdB" [style=solid];
"liftOrdB2" [style=solid];
"liftOrdC" [style=solid];
"liftOrdC2" [style=solid];
"listOf" [style=solid];
"listOf1" [style=solid];
"ljust" [style=solid];
"localMin" [style=solid];
"localMinFound" [style=solid];
"localMin\'" [style=solid];
"lpercent" [style=solid];
"lpercentage" [style=solid];
"mapProp" [style=solid];
"mapResult" [style=solid];
"mapRoseResult" [style=solid];
"mapSize" [style=solid];
"mapTotalResult" [style=solid];
"mkFun" [style=solid];
"mkQCGen" [style=solid];
"monadic" [style=solid];
"monadicIO" [style=solid];
"monadicST" [style=solid];
"monadic\'" [style=solid];
"monitor" [style=solid];
"monomorphic" [style=solid];
"monomorphiseType" [style=solid];
"morallyDubiousIOProperty" [style=solid];
"newQCGen" [style=solid];
"newTerminal" [style=solid];
"noShrinking" [style=solid];
"number" [style=solid];
"onRose" [style=solid];
"once" [style=solid];
"oneLine" [style=solid];
"oneof" [style=solid];
"orderedList" [style=solid];
"p1" [style=solid];
"paragraphs" [style=solid];
"pattern" [style=solid];
"pick" [style=solid];
"polyQuickCheck" [style=solid];
"polyVerboseCheck" [style=solid];
"pre" [style=solid];
"printTestCase" [style=solid];
"promote" [style=solid];
"prop_noNewFeatures" [style=solid];
"protect" [style=solid];
"protectProp" [style=solid];
"protectResult" [style=solid];
"protectResults" [style=solid];
"protectRose" [style=solid];
"putLine" [style=solid];
"putPart" [style=solid];
"putTemp" [style=solid];
"quickCheck" [style=solid];
"quickCheckAll" [style=solid];
"quickCheckResult" [style=solid];
"quickCheckWith" [style=solid];
"quickCheckWithResult" [style=solid];
"ranges" [style=solid];
"readUTF8File" [style=solid];
"recursivelyShrink" [style=solid];
"reduceRose" [style=solid];
"resize" [style=solid];
"rjust" [style=solid];
"rpercent" [style=solid];
"rpercentage" [style=solid];
"run" [style=solid];
"runATest" [style=solid];
"runQuickCheckAll" [style=solid];
"runSTGen" [style=solid];
"sample" [style=solid];
"sample\'" [style=solid];
"scale" [style=solid];
"set_utf8_io_enc" [style=solid];
"short" [style=solid];
"showCounterexample" [style=solid];
"showErr" [style=solid];
"showFunction" [style=solid];
"showTable" [style=solid];
"showTestCount" [style=solid];
"shrink1" [style=solid];
"shrink2" [style=solid];
"shrinkDecimal" [style=solid];
"shrinkFun" [style=solid];
"shrinkIntegral" [style=solid];
"shrinkList" [style=solid];
"shrinkMap" [style=solid];
"shrinkMapBy" [style=solid];
"shrinkNothing" [style=solid];
"shrinkRealFrac" [style=solid];
"shrinking" [style=solid];
"shuffle" [style=solid];
"sized" [style=solid];
"stdArgs" [style=solid];
"stdConfidence" [style=solid];
"stop" [style=solid];
"sublistOf" [style=solid];
"subterms" [style=solid];
"success" [style=solid];
"suchThat" [style=solid];
"suchThatMap" [style=solid];
"suchThatMaybe" [style=solid];
"sufficientlyCovered" [style=solid];
"table" [style=solid];
"tabulate" [style=solid];
"terminalOutput" [style=solid];
"test" [style=solid];
"text" [style=solid];
"total" [style=solid];
"tryEvaluate" [style=solid];
"tryEvaluateIO" [style=solid];
"variant" [style=solid];
"vector" [style=solid];
"vectorOf" [style=solid];
"verbose" [style=solid];
"verboseCheck" [style=solid];
"verboseCheckAll" [style=solid];
"verboseCheckResult" [style=solid];
"verboseCheckWith" [style=solid];
"verboseCheckWithResult" [style=solid];
"verboseShrinking" [style=solid];
"whenFail" [style=solid];
"whenFail\'" [style=solid];
"wilson" [style=solid];
"wilsonHigh" [style=solid];
"wilsonLow" [style=solid];
"withBounds" [style=solid];
"withBuffering" [style=solid];
"withHandleTerminal" [style=solid];
"withMaxSuccess" [style=solid];
"withNullTerminal" [style=solid];
"withState" [style=solid];
"withStdioTerminal" [style=solid];
"within" [style=solid];
"wp" [style=solid];
"wrapQCGen" [style=solid];
"x" [style=solid];
"" -> "again";
"" -> "allProperties";
"" -> "applyArbitrary2";
"" -> "applyArbitrary3";
"" -> "applyArbitrary4";
"" -> "applyFun";
"" -> "applyFun2";
"" -> "applyFun3";
"" -> "arbitrary1";
"" -> "arbitrary2";
"" -> "arbitraryASCIIChar";
"" -> "arbitraryBoundedEnum";
"" -> "arbitraryBoundedIntegral";
"" -> "arbitraryBoundedRandom";
"" -> "arbitraryPrintableChar";
"" -> "arbitrarySizedBoundedIntegral";
"" -> "arbitrarySizedFractional";
"" -> "arbitrarySizedIntegral";
"" -> "arbitrarySizedNatural";
"" -> "arbitraryUnicodeChar";
"" -> "checkCoverage";
"" -> "checkCoverageWith";
"" -> "choose";
"" -> "chooseAny";
"" -> "chooseBoundedIntegral";
"" -> "chooseEnum";
"" -> "chooseInt";
"" -> "chooseInteger";
"" -> "classify";
"" -> "coarbitraryEnum";
"" -> "coarbitraryIntegral";
"" -> "coarbitraryReal";
"" -> "coarbitraryShow";
"" -> "collect";
"" -> "conjoin";
"" -> "counterexample";
"" -> "cover";
"" -> "coverTable";
"" -> "discard";
"" -> "disjoin";
"" -> "elements";
"" -> "expectFailure";
"" -> "forAll";
"" -> "forAllBlind";
"" -> "forAllProperties";
"" -> "forAllShow";
"" -> "forAllShrink";
"" -> "forAllShrinkBlind";
"" -> "forAllShrinkShow";
"" -> "frequency";
"" -> "functionBoundedEnum";
"" -> "functionIntegral";
"" -> "functionMap";
"" -> "functionRealFrac";
"" -> "functionShow";
"" -> "functionVoid";
"" -> "generate";
"" -> "genericCoarbitrary";
"" -> "genericShrink";
"" -> "getSize";
"" -> "growingElements";
"" -> "idempotentIOProperty";
"" -> "infiniteList";
"" -> "infiniteListOf";
"" -> "ioProperty";
"" -> "isSuccess";
"" -> "label";
"" -> "labelledExamples";
"" -> "labelledExamplesResult";
"" -> "labelledExamplesWith";
"" -> "labelledExamplesWithResult";
"" -> "listOf";
"" -> "listOf1";
"" -> "mapSize";
"" -> "monomorphic";
"" -> "noShrinking";
"" -> "once";
"" -> "oneof";
"" -> "orderedList";
"" -> "pattern";
"" -> "polyQuickCheck";
"" -> "polyVerboseCheck";
"" -> "printTestCase";
"" -> "quickCheck";
"" -> "quickCheckAll";
"" -> "quickCheckResult";
"" -> "quickCheckWith";
"" -> "quickCheckWithResult";
"" -> "recursivelyShrink";
"" -> "resize";
"" -> "sample";
"" -> "sample\'";
"" -> "scale";
"" -> "shrink1";
"" -> "shrink2";
"" -> "shrinkDecimal";
"" -> "shrinkIntegral";
"" -> "shrinkList";
"" -> "shrinkMap";
"" -> "shrinkMapBy";
"" -> "shrinkNothing";
"" -> "shrinkRealFrac";
"" -> "shrinking";
"" -> "shuffle";
"" -> "sized";
"" -> "stdArgs";
"" -> "stdConfidence";
"" -> "sublistOf";
"" -> "subterms";
"" -> "suchThat";
"" -> "suchThatMap";
"" -> "suchThatMaybe";
"" -> "tabulate";
"" -> "total";
"" -> "variant";
"" -> "vector";
"" -> "vectorOf";
"" -> "verbose";
"" -> "verboseCheck";
"" -> "verboseCheckAll";
"" -> "verboseCheckResult";
"" -> "verboseCheckWith";
"" -> "verboseCheckWithResult";
"" -> "verboseShrinking";
"" -> "whenFail";
"" -> "whenFail\'";
"" -> "withMaxSuccess";
"" -> "within";
"abstract" -> "abstract";
"abstract" -> "x";
"addCoverageCheck" -> "allCoverage";
"addCoverageCheck" -> "counterexample";
"addCoverageCheck" -> "insufficientlyCovered";
"addCoverageCheck" -> "labelsAndTables";
"addCoverageCheck" -> "once";
"addCoverageCheck" -> "paragraphs";
"addCoverageCheck" -> "sufficientlyCovered";
"again" -> "mapTotalResult";
"allCoverage" -> "bold";
"allCoverage" -> "centre";
"allCoverage" -> "drawTable";
"allCoverage" -> "handle";
"allCoverage" -> "isOneLine";
"allCoverage" -> "ljust";
"allCoverage" -> "lpercent";
"allCoverage" -> "lpercentage";
"allCoverage" -> "newTerminal";
"allCoverage" -> "number";
"allCoverage" -> "oneLine";
"allCoverage" -> "paragraphs";
"allCoverage" -> "putLine";
"allCoverage" -> "putPart";
"allCoverage" -> "putTemp";
"allCoverage" -> "ranges";
"allCoverage" -> "rjust";
"allCoverage" -> "rpercent";
"allCoverage" -> "rpercentage";
"allCoverage" -> "short";
"allCoverage" -> "showErr";
"allCoverage" -> "terminalOutput";
"allCoverage" -> "withHandleTerminal";
"allCoverage" -> "withNullTerminal";
"allCoverage" -> "withStdioTerminal";
"allProperties" -> "monomorphic";
"allProperties" -> "readUTF8File";
"allProperties" -> "x";
"apply" -> "applyFun";
"applyArbitrary4" -> "applyArbitrary3";
"applyFun3" -> "mkFun";
"applyFun3" -> "showFunction";
"applyFun3" -> "x";
"arbitraryASCIIChar" -> "chooseEnum";
"arbitraryBoundedEnum" -> "chooseEnum";
"arbitraryBoundedIntegral" -> "chooseBoundedIntegral";
"arbitraryBoundedRandom" -> "choose";
"arbitraryPrintableChar" -> "suchThat";
"arbitrarySizedBoundedIntegral" -> "chooseInteger";
"arbitrarySizedBoundedIntegral" -> "sized";
"arbitrarySizedBoundedIntegral" -> "withBounds";
"arbitrarySizedFractional" -> "chooseInteger";
"arbitrarySizedFractional" -> "sized";
"arbitrarySizedIntegral" -> "chooseInt";
"arbitrarySizedIntegral" -> "inBounds";
"arbitrarySizedIntegral" -> "sized";
"arbitrarySizedNatural" -> "chooseInt";
"arbitrarySizedNatural" -> "inBounds";
"arbitrarySizedNatural" -> "sized";
"arbitraryUnicodeChar" -> "arbitraryBoundedEnum";
"arbitraryUnicodeChar" -> "suchThat";
"bind" -> "bind";
"callback" -> "mapTotalResult";
"callbackPostFinalFailure" -> "putLine";
"callbackPostFinalFailure" -> "tryEvaluateIO";
"callbackPostFinalFailure" -> "x";
"callbackPostTest" -> "exception";
"callbackPostTest" -> "protect";
"capture" -> "orderedList";
"capture" -> "suchThat";
"capture" -> "x";
"centre" -> "ljust";
"checkCoverage" -> "checkCoverageWith";
"checkCoverage" -> "stdConfidence";
"checkCoverageWith" -> "mapTotalResult";
"choose" -> "x";
"chooseAny" -> "x";
"chooseBoundedIntegral" -> "chooseInt64";
"chooseBoundedIntegral" -> "chooseInteger";
"chooseBoundedIntegral" -> "chooseWord64";
"chooseEnum" -> "chooseInt";
"chooseInt" -> "chooseBoundedIntegral";
"chooseInt64" -> "chooseUpTo";
"chooseInteger" -> "choose";
"chooseInteger" -> "chooseInt64";
"chooseInteger" -> "chooseWord64";
"chooseWord64" -> "chooseUpTo";
"classify" -> "mapTotalResult";
"coarbitraryEnum" -> "variant";
"coarbitraryIntegral" -> "variant";
"coarbitraryReal" -> "x";
"coarbitraryShow" -> "x";
"collect" -> "label";
"collect" -> "x";
"conjoin" -> "again";
"conjoin" -> "disjoin";
"conjoin" -> "p1";
"conjoin" -> "reduceRose";
"counterexample" -> "callback";
"counterexample" -> "mapTotalResult";
"counterexample" -> "putLine";
"counterexample" -> "showCounterexample";
"cover" -> "classify";
"cover" -> "mapTotalResult";
"cover" -> "x";
"coverTable" -> "mapTotalResult";
"coverTable" -> "table";
"coverTable" -> "x";
"disjoin" -> "again";
"disjoin" -> "putLine";
"doneTesting" -> "bold";
"doneTesting" -> "putPart";
"doneTesting" -> "showTestCount";
"doneTesting" -> "success";
"doneTesting" -> "terminalOutput";
"drawTable" -> "centre";
"drawTable" -> "flattenRows";
"drawTable" -> "table";
"drawTable" -> "x";
"elements" -> "chooseInt";
"evaluate" -> "x";
"exception" -> "formatException";
"exception" -> "isDiscard";
"expName" -> "isVar";
"expectFailure" -> "mapTotalResult";
"fail_" -> "bind";
"fail_" -> "fail_";
"fail_" -> "run";
"fail_" -> "stop";
"fail_" -> "x";
"failureReason" -> "failureSummaryAndReason";
"failureSummary" -> "failureSummaryAndReason";
"failureSummaryAndReason" -> "bold";
"failureSummaryAndReason" -> "isOneLine";
"failureSummaryAndReason" -> "number";
"failureSummaryAndReason" -> "oneLine";
"failureSummaryAndReason" -> "short";
"finally" -> "x";
"flattenRows" -> "centre";
"flattenRows" -> "ljust";
"flattenRows" -> "rjust";
"flattenRows" -> "text";
"forAll" -> "forAllShrink";
"forAll" -> "gen";
"forAllBlind" -> "forAllShrinkBlind";
"forAllBlind" -> "gen";
"forAllM" -> "gen";
"forAllM" -> "pick";
"forAllProperties" -> "allProperties";
"forAllProperties" -> "runQuickCheckAll";
"forAllShow" -> "forAllShrinkShow";
"forAllShow" -> "gen";
"forAllShrink" -> "forAllShrinkShow";
"forAllShrink" -> "gen";
"forAllShrinkBlind" -> "again";
"forAllShrinkBlind" -> "gen";
"forAllShrinkBlind" -> "shrinking";
"forAllShrinkBlind" -> "x";
"forAllShrinkShow" -> "counterexample";
"forAllShrinkShow" -> "forAllShrinkBlind";
"forAllShrinkShow" -> "gen";
"forAllShrinkShow" -> "x";
"formatException" -> "isOneLine";
"foundFailure" -> "localMin";
"frequency" -> "chooseInt";
"frequency" -> "pick";
"frequency" -> "x";
"functionBoundedEnum" -> "x";
"functionEitherWith" -> "functionBoundedEnum";
"functionEitherWith" -> "functionIntegral";
"functionEitherWith" -> "functionMap";
"functionEitherWith" -> "functionRealFrac";
"functionEitherWith" -> "shrinkFun";
"functionEitherWith" -> "x";
"functionIntegral" -> "functionMap";
"functionMap" -> "functionMapWith";
"functionMapWith" -> "functionMap";
"functionMapWith" -> "functionPairWith";
"functionPairWith" -> "functionEitherWith";
"functionRealFrac" -> "functionMap";
"functionShow" -> "functionMap";
"gen" -> "gen";
"gen" -> "resize";
"gen" -> "sized";
"gen" -> "suchThat";
"gen" -> "suchThatMaybe";
"gen" -> "x";
"generate" -> "newQCGen";
"genericCoarbitrary" -> "coarbitraryIntegral";
"genericCoarbitrary" -> "coarbitraryReal";
"genericCoarbitrary" -> "gen";
"genericCoarbitrary" -> "variant";
"genericCoarbitrary" -> "x";
"genericFunction" -> "functionEitherWith";
"genericFunction" -> "functionMap";
"genericFunction" -> "functionMapWith";
"genericFunction" -> "functionPairWith";
"genericFunction" -> "x";
"genericShrink" -> "recursivelyShrink";
"genericShrink" -> "subterms";
"genericShrink" -> "x";
"getSize" -> "sized";
"giveUp" -> "bold";
"giveUp" -> "putPart";
"giveUp" -> "showTestCount";
"giveUp" -> "success";
"giveUp" -> "terminalOutput";
"growingElements" -> "elements";
"growingElements" -> "sized";
"idempotentIOProperty" -> "gen";
"idempotentIOProperty" -> "ioRose";
"idempotentIOProperty" -> "promote";
"idempotentIOProperty" -> "x";
"inBounds" -> "suchThat";
"inBounds" -> "x";
"infiniteList" -> "infiniteListOf";
"infiniteListFromData" -> "arbitraryASCIIChar";
"infiniteListFromData" -> "arbitraryPrintableChar";
"infiniteListFromData" -> "arbitrarySizedBoundedIntegral";
"infiniteListFromData" -> "arbitrarySizedIntegral";
"infiniteListFromData" -> "arbitraryUnicodeChar";
"infiniteListFromData" -> "assert";
"infiniteListFromData" -> "discard";
"infiniteListFromData" -> "forAllM";
"infiniteListFromData" -> "infiniteList";
"infiniteListFromData" -> "infiniteListFromData";
"infiniteListFromData" -> "listOf";
"infiniteListFromData" -> "monadic";
"infiniteListFromData" -> "monadicIO";
"infiniteListFromData" -> "monadicST";
"infiniteListFromData" -> "monadic\'";
"infiniteListFromData" -> "monitor";
"infiniteListFromData" -> "pick";
"infiniteListFromData" -> "pre";
"infiniteListFromData" -> "run";
"infiniteListFromData" -> "runSTGen";
"infiniteListFromData" -> "shrinkIntegral";
"infiniteListFromData" -> "stop";
"infiniteListFromData" -> "suchThat";
"infiniteListFromData" -> "wp";
"infiniteListFromData" -> "x";
"infiniteListOf" -> "gen";
"infixr" -> "again";
"infixr" -> "counterexample";
"infixr" -> "forAllShrinkBlind";
"infixr" -> "gen";
"infixr" -> "liftBool";
"infixr" -> "protectProp";
"infixr" -> "protectResults";
"infixr" -> "x";
"insufficientlyCovered" -> "wilsonHigh";
"ioProperty" -> "idempotentIOProperty";
"ioProperty" -> "noShrinking";
"ioRose" -> "protectRose";
"isDiscard" -> "discard";
"isDiscard" -> "isDiscard";
"joinRose" -> "joinRose";
"joinRose" -> "x";
"label" -> "mapTotalResult";
"labelledExamples" -> "labelledExamplesWith";
"labelledExamples" -> "stdArgs";
"labelledExamplesResult" -> "labelledExamplesWithResult";
"labelledExamplesResult" -> "stdArgs";
"labelledExamplesWith" -> "labelledExamplesWithResult";
"labelledExamplesWithResult" -> "apply";
"labelledExamplesWithResult" -> "applyFun";
"labelledExamplesWithResult" -> "applyFun2";
"labelledExamplesWithResult" -> "applyFun3";
"labelledExamplesWithResult" -> "features";
"labelledExamplesWithResult" -> "functionBoundedEnum";
"labelledExamplesWithResult" -> "functionEitherWith";
"labelledExamplesWithResult" -> "functionIntegral";
"labelledExamplesWithResult" -> "functionMap";
"labelledExamplesWithResult" -> "functionMapWith";
"labelledExamplesWithResult" -> "functionPairWith";
"labelledExamplesWithResult" -> "functionRealFrac";
"labelledExamplesWithResult" -> "functionShow";
"labelledExamplesWithResult" -> "functionVoid";
"labelledExamplesWithResult" -> "pattern";
"labelledExamplesWithResult" -> "prop_noNewFeatures";
"labelledExamplesWithResult" -> "putLine";
"labelledExamplesWithResult" -> "showFunction";
"labelledExamplesWithResult" -> "terminalOutput";
"labelledExamplesWithResult" -> "test";
"labelledExamplesWithResult" -> "withNullTerminal";
"labelledExamplesWithResult" -> "withState";
"labelsAndTables" -> "allCoverage";
"labelsAndTables" -> "insufficientlyCovered";
"labelsAndTables" -> "label";
"labelsAndTables" -> "lpercent";
"labelsAndTables" -> "lpercentage";
"labelsAndTables" -> "paragraphs";
"labelsAndTables" -> "showTable";
"labelsAndTables" -> "table";
"liftOrdA" -> "x";
"liftOrdA2" -> "liftOrdA";
"liftOrdA2" -> "liftOrdA2";
"liftOrdA2" -> "x";
"liftOrdB" -> "x";
"liftOrdB2" -> "liftOrdB";
"liftOrdB2" -> "liftOrdB2";
"liftOrdB2" -> "x";
"liftOrdC" -> "x";
"liftOrdC2" -> "liftOrdC";
"liftOrdC2" -> "liftOrdC2";
"liftOrdC2" -> "x";
"listOf" -> "chooseInt";
"listOf" -> "gen";
"listOf" -> "sized";
"listOf" -> "vectorOf";
"listOf1" -> "chooseInt";
"listOf1" -> "gen";
"listOf1" -> "sized";
"listOf1" -> "vectorOf";
"localMin" -> "exception";
"localMin" -> "failureSummary";
"localMin" -> "localMinFound";
"localMin" -> "localMin\'";
"localMin" -> "putTemp";
"localMin" -> "tryEvaluate";
"localMin" -> "tryEvaluateIO";
"localMinFound" -> "callbackPostFinalFailure";
"localMinFound" -> "failureReason";
"localMinFound" -> "putLine";
"localMin\'" -> "callbackPostTest";
"localMin\'" -> "localMin";
"localMin\'" -> "localMinFound";
"localMin\'" -> "protectRose";
"localMin\'" -> "reduceRose";
"lpercent" -> "lpercentage";
"lpercentage" -> "lpercentage";
"mapResult" -> "mapRoseResult";
"mapResult" -> "protectResults";
"mapRoseResult" -> "mapProp";
"mapSize" -> "scale";
"mapTotalResult" -> "mapRoseResult";
"mkFun" -> "abstract";
"monadic" -> "monadic\'";
"monadicIO" -> "ioProperty";
"monadicIO" -> "monadic";
"monadicST" -> "monadic\'";
"monadicST" -> "runSTGen";
"monomorphic" -> "deconstructType";
"monomorphic" -> "expName";
"monomorphic" -> "infoType";
"monomorphic" -> "monomorphiseType";
"monomorphiseType" -> "monomorphiseType";
"morallyDubiousIOProperty" -> "ioProperty";
"noShrinking" -> "mapRoseResult";
"noShrinking" -> "onRose";
"onRose" -> "onRose";
"onRose" -> "x";
"once" -> "mapTotalResult";
"oneof" -> "chooseInt";
"p1" -> "again";
"p1" -> "conjoin";
"p1" -> "counterexample";
"p1" -> "p1";
"pattern" -> "applyFun";
"pattern" -> "applyFun2";
"pattern" -> "applyFun3";
"pick" -> "forAll";
"pick" -> "gen";
"polyQuickCheck" -> "monomorphic";
"polyQuickCheck" -> "quickCheck";
"polyQuickCheck" -> "x";
"polyVerboseCheck" -> "monomorphic";
"polyVerboseCheck" -> "verboseCheck";
"polyVerboseCheck" -> "x";
"pre" -> "stop";
"printTestCase" -> "counterexample";
"promote" -> "delay";
"prop_noNewFeatures" -> "features";
"prop_noNewFeatures" -> "mapResult";
"protect" -> "tryEvaluateIO";
"protect" -> "x";
"protectProp" -> "protectRose";
"protectResult" -> "exception";
"protectResult" -> "protect";
"protectResults" -> "onRose";
"protectResults" -> "protectResult";
"protectResults" -> "protectResults";
"protectResults" -> "x";
"protectRose" -> "exception";
"protectRose" -> "protect";
"putPart" -> "evaluate";
"putPart" -> "putPart";
"putPart" -> "putTemp";
"putPart" -> "x";
"quickCheck" -> "quickCheckWith";
"quickCheck" -> "stdArgs";
"quickCheckAll" -> "forAllProperties";
"quickCheckAll" -> "quickCheckResult";
"quickCheckResult" -> "quickCheckWithResult";
"quickCheckResult" -> "stdArgs";
"quickCheckWith" -> "quickCheckWithResult";
"quickCheckWithResult" -> "test";
"quickCheckWithResult" -> "withState";
"readUTF8File" -> "set_utf8_io_enc";
"recursivelyShrink" -> "x";
"reduceRose" -> "reduceRose";
"rpercent" -> "rpercentage";
"run" -> "promote";
"runATest" -> "addCoverageCheck";
"runATest" -> "callbackPostTest";
"runATest" -> "doneTesting";
"runATest" -> "foundFailure";
"runATest" -> "giveUp";
"runATest" -> "protectRose";
"runATest" -> "putTemp";
"runATest" -> "reduceRose";
"runATest" -> "showCounterexample";
"runATest" -> "showTestCount";
"runATest" -> "terminalOutput";
"runATest" -> "test";
"runATest" -> "x";
"runQuickCheckAll" -> "applyArbitrary2";
"runQuickCheckAll" -> "applyArbitrary3";
"runQuickCheckAll" -> "applyArbitrary4";
"runQuickCheckAll" -> "arbitrary1";
"runQuickCheckAll" -> "arbitrary2";
"runQuickCheckAll" -> "arbitraryASCIIChar";
"runQuickCheckAll" -> "arbitraryBoundedEnum";
"runQuickCheckAll" -> "arbitraryBoundedIntegral";
"runQuickCheckAll" -> "arbitraryBoundedRandom";
"runQuickCheckAll" -> "arbitraryPrintableChar";
"runQuickCheckAll" -> "arbitrarySizedBoundedIntegral";
"runQuickCheckAll" -> "arbitrarySizedFractional";
"runQuickCheckAll" -> "arbitrarySizedIntegral";
"runQuickCheckAll" -> "arbitrarySizedNatural";
"runQuickCheckAll" -> "arbitraryUnicodeChar";
"runQuickCheckAll" -> "coarbitraryEnum";
"runQuickCheckAll" -> "coarbitraryIntegral";
"runQuickCheckAll" -> "coarbitraryReal";
"runQuickCheckAll" -> "coarbitraryShow";
"runQuickCheckAll" -> "genericCoarbitrary";
"runQuickCheckAll" -> "genericShrink";
"runQuickCheckAll" -> "infiniteList";
"runQuickCheckAll" -> "orderedList";
"runQuickCheckAll" -> "recursivelyShrink";
"runQuickCheckAll" -> "shrink1";
"runQuickCheckAll" -> "shrink2";
"runQuickCheckAll" -> "shrinkDecimal";
"runQuickCheckAll" -> "shrinkIntegral";
"runQuickCheckAll" -> "shrinkList";
"runQuickCheckAll" -> "shrinkMap";
"runQuickCheckAll" -> "shrinkMapBy";
"runQuickCheckAll" -> "shrinkNothing";
"runQuickCheckAll" -> "shrinkRealFrac";
"runQuickCheckAll" -> "subterms";
"runQuickCheckAll" -> "vector";
"runSTGen" -> "capture";
"runSTGen" -> "x";
"sample" -> "sample\'";
"sample\'" -> "generate";
"sample\'" -> "resize";
"scale" -> "resize";
"scale" -> "sized";
"showCounterexample" -> "formatException";
"showCounterexample" -> "tryEvaluateIO";
"showCounterexample" -> "x";
"showFunction" -> "table";
"showFunction" -> "x";
"showTable" -> "rpercent";
"showTable" -> "table";
"showTable" -> "total";
"showTestCount" -> "number";
"shrinkDecimal" -> "genericCoarbitrary";
"shrinkDecimal" -> "x";
"shrinkFun" -> "shrinkFun";
"shrinkFun" -> "shrinkList";
"shrinkFun" -> "table";
"shrinkIntegral" -> "x";
"shrinkList" -> "arbitrary1";
"shrinkList" -> "arbitrary2";
"shrinkList" -> "arbitraryASCIIChar";
"shrinkList" -> "arbitrarySizedBoundedIntegral";
"shrinkList" -> "arbitrarySizedFractional";
"shrinkList" -> "arbitrarySizedIntegral";
"shrinkList" -> "arbitrarySizedNatural";
"shrinkList" -> "arbitraryUnicodeChar";
"shrinkList" -> "chooseInt";
"shrinkList" -> "frequency";
"shrinkList" -> "shrink1";
"shrinkList" -> "shrink2";
"shrinkList" -> "shrinkDecimal";
"shrinkList" -> "shrinkIntegral";
"shrinkList" -> "shrinkRealFrac";
"shrinkList" -> "shuffle";
"shrinkList" -> "sized";
"shrinkList" -> "vectorOf";
"shrinkList" -> "x";
"shrinkMap" -> "shrinkMapBy";
"shrinkRealFrac" -> "shrinkRealFrac";
"shrinkRealFrac" -> "x";
"shrinking" -> "joinRose";
"shrinking" -> "promote";
"shrinking" -> "x";
"shuffle" -> "chooseInt";
"shuffle" -> "vectorOf";
"sublistOf" -> "chooseEnum";
"subterms" -> "arbitrary1";
"subterms" -> "arbitrary2";
"subterms" -> "chooseEnum";
"subterms" -> "elements";
"subterms" -> "frequency";
"subterms" -> "listOf";
"subterms" -> "oneof";
"subterms" -> "promote";
"subterms" -> "shrink1";
"subterms" -> "shrink2";
"subterms" -> "shrinkList";
"subterms" -> "x";
"success" -> "labelsAndTables";
"success" -> "paragraphs";
"success" -> "putLine";
"success" -> "short";
"suchThat" -> "suchThat";
"suchThatMap" -> "suchThatMap";
"suchThatMaybe" -> "sized";
"suchThatMaybe" -> "suchThatMaybe";
"sufficientlyCovered" -> "wilsonLow";
"table" -> "genericFunction";
"table" -> "table";
"table" -> "x";
"tabulate" -> "mapTotalResult";
"test" -> "doneTesting";
"test" -> "giveUp";
"test" -> "runATest";
"total" -> "wrapQCGen";
"total" -> "x";
"tryEvaluate" -> "tryEvaluateIO";
"tryEvaluate" -> "x";
"variant" -> "integerVariant";
"vector" -> "vectorOf";
"verbose" -> "mapResult";
"verbose" -> "putLine";
"verboseCheck" -> "quickCheck";
"verboseCheck" -> "verbose";
"verboseCheckAll" -> "forAllProperties";
"verboseCheckAll" -> "verboseCheckResult";
"verboseCheckResult" -> "quickCheckResult";
"verboseCheckResult" -> "verbose";
"verboseCheckWith" -> "quickCheckWith";
"verboseCheckWith" -> "verbose";
"verboseCheckWithResult" -> "quickCheckWithResult";
"verboseCheckWithResult" -> "verbose";
"verboseShrinking" -> "mapResult";
"verboseShrinking" -> "putLine";
"whenFail" -> "callback";
"whenFail\'" -> "callback";
"wilsonHigh" -> "invnormcdf";
"wilsonHigh" -> "wilson";
"wilsonLow" -> "invnormcdf";
"wilsonLow" -> "wilson";
"withBuffering" -> "finally";
"withHandleTerminal" -> "handle";
"withHandleTerminal" -> "newTerminal";
"withMaxSuccess" -> "mapTotalResult";
"withNullTerminal" -> "newTerminal";
"withState" -> "newQCGen";
"withState" -> "test";
"withState" -> "withNullTerminal";
"withState" -> "withStdioTerminal";
"withStdioTerminal" -> "withBuffering";
"withStdioTerminal" -> "withHandleTerminal";
"within" -> "ioRose";
"within" -> "mapRoseResult";
"within" -> "protectResult";
"within" -> "reduceRose";
"within" -> "x";
"wp" -> "run";
"wrapQCGen" -> "x";
"x" -> "counterexample";
"x" -> "x";
}
