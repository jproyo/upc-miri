strict digraph deps {
"_Bool" [style=solid];
"_Double" [style=solid];
"_DoubleShow" [style=solid];
"_ERROR" [style=solid];
"_False" [style=solid];
"_Integer" [style=solid];
"_IntegerClamp" [style=solid];
"_IntegerNegate" [style=solid];
"_IntegerShow" [style=solid];
"_IntegerToDouble" [style=solid];
"_Kind" [style=solid];
"_List" [style=solid];
"_ListBuild" [style=solid];
"_ListFold" [style=solid];
"_ListHead" [style=solid];
"_ListIndexed" [style=solid];
"_ListLast" [style=solid];
"_ListLength" [style=solid];
"_ListReverse" [style=solid];
"_Location" [style=solid];
"_NOT" [style=solid];
"_NaN" [style=solid];
"_Natural" [style=solid];
"_NaturalBuild" [style=solid];
"_NaturalEven" [style=solid];
"_NaturalFold" [style=solid];
"_NaturalIsZero" [style=solid];
"_NaturalOdd" [style=solid];
"_NaturalShow" [style=solid];
"_NaturalSubtract" [style=solid];
"_NaturalToInteger" [style=solid];
"_None" [style=solid];
"_Optional" [style=solid];
"_Some" [style=solid];
"_Sort" [style=solid];
"_Text" [style=solid];
"_TextReplace" [style=solid];
"_TextShow" [style=solid];
"_True" [style=solid];
"_Type" [style=solid];
"_and" [style=solid];
"_arrow" [style=solid];
"_as" [style=solid];
"_assert" [style=solid];
"_at" [style=solid];
"_bar" [style=solid];
"_closeAngle" [style=solid];
"_closeBrace" [style=solid];
"_closeBracket" [style=solid];
"_closeParens" [style=solid];
"_colon" [style=solid];
"_combine" [style=solid];
"_combineTypes" [style=solid];
"_comma" [style=solid];
"_dot" [style=solid];
"_doubleColon" [style=solid];
"_doubleEqual" [style=solid];
"_else" [style=solid];
"_equal" [style=solid];
"_equivalent" [style=solid];
"_forall" [style=solid];
"_if" [style=solid];
"_importAlt" [style=solid];
"_in" [style=solid];
"_lambda" [style=solid];
"_let" [style=solid];
"_listAppend" [style=solid];
"_merge" [style=solid];
"_missing" [style=solid];
"_notEqual" [style=solid];
"_openAngle" [style=solid];
"_openBrace" [style=solid];
"_openBracket" [style=solid];
"_openParens" [style=solid];
"_or" [style=solid];
"_plus" [style=solid];
"_prefer" [style=solid];
"_textAppend" [style=solid];
"_then" [style=solid];
"_times" [style=solid];
"_toMap" [style=solid];
"_using" [style=solid];
"_with" [style=solid];
"addBinding" [style=solid];
"addConstructorModifier" [style=solid];
"addFieldModifier" [style=solid];
"addPreludeExtensions" [style=solid];
"addType" [style=solid];
"addTypeValue" [style=solid];
"align" [style=solid];
"alpha" [style=solid];
"alphaNormalize" [style=solid];
"alphaNum" [style=solid];
"angled" [style=solid];
"angles" [style=solid];
"annToAnsiStyle" [style=solid];
"anyLabel" [style=solid];
"anyLabelOrSome" [style=solid];
"append" [style=solid];
"applyContext" [style=solid];
"arrows" [style=solid];
"assertNoImports" [style=solid];
"authority_" [style=solid];
"auto" [style=solid];
"axiom" [style=solid];
"backtickLabel" [style=solid];
"bashEnvironmentVariable" [style=solid];
"bindingExprs" [style=solid];
"blockComment" [style=solid];
"blockCommentChunk" [style=solid];
"blockCommentContinue" [style=solid];
"bool" [style=solid];
"boundedType" [style=solid];
"braced" [style=solid];
"braces" [style=solid];
"bracketed" [style=solid];
"buildBooleanOperator" [style=solid];
"buildNaturalOperator" [style=solid];
"builtin" [style=solid];
"cache" [style=solid];
"cacheWarning" [style=solid];
"censor" [style=solid];
"censorChunks" [style=solid];
"censorExpression" [style=solid];
"censorSrc" [style=solid];
"censorText" [style=solid];
"censorTypeError" [style=solid];
"chainImport" [style=solid];
"chainedChangeMode" [style=solid];
"chainedFromLocalHere" [style=solid];
"char" [style=solid];
"checkContext" [style=solid];
"chunkExprs" [style=solid];
"clearBindings" [style=solid];
"cmdQuit" [style=solid];
"colon" [style=solid];
"combine" [style=solid];
"combineTypes" [style=solid];
"comma" [style=solid];
"command" [style=solid];
"completeExpression" [style=solid];
"completeFunc" [style=solid];
"completer" [style=solid];
"computeSemisemanticHash" [style=solid];
"consolidateRecordLiteral" [style=solid];
"constructor" [style=solid];
"containsComment" [style=solid];
"contextToCtx" [style=solid];
"conv" [style=solid];
"cosmosOf" [style=solid];
"count" [style=solid];
"countEnvironment" [style=solid];
"countNames" [style=solid];
"createHeader" [style=solid];
"ctxToContext" [style=solid];
"currentSaveFile" [style=solid];
"currentSaveFileIndex" [style=solid];
"decOctet" [style=solid];
"decodeExpression" [style=solid];
"decodeExpressionInternal" [style=solid];
"decodeImport" [style=solid];
"decodeSchema" [style=solid];
"decodeSchemas" [style=solid];
"decodeVoid" [style=solid];
"decodeWith55799Tag" [style=solid];
"defaultEvaluateSettings" [style=solid];
"defaultInputNormalizer" [style=solid];
"defaultInputSettings" [style=solid];
"defaultInterpretOptions" [style=solid];
"defaultNewManager" [style=solid];
"delete" [style=solid];
"denote" [style=solid];
"dependencyToFile" [style=solid];
"derivingClauses" [style=solid];
"desugarWith" [style=solid];
"detailed" [style=solid];
"detectCharacterSet" [style=solid];
"dhallVersion" [style=solid];
"dhallVersionString" [style=solid];
"diff" [style=solid];
"diffAndExpression" [style=solid];
"diffAnnotatedExpression" [style=solid];
"diffApplicationExpression" [style=solid];
"diffBool" [style=solid];
"diffChunks" [style=solid];
"diffCombineExpression" [style=solid];
"diffCombineTypesExpression" [style=solid];
"diffConst" [style=solid];
"diffDouble" [style=solid];
"diffEqualExpression" [style=solid];
"diffEquivalentExpression" [style=solid];
"diffImportAltExpression" [style=solid];
"diffImportExpression" [style=solid];
"diffInt" [style=solid];
"diffInteger" [style=solid];
"diffKeyVals" [style=solid];
"diffKeysWith" [style=solid];
"diffLabel" [style=solid];
"diffLabels" [style=solid];
"diffList" [style=solid];
"diffListAppendExpression" [style=solid];
"diffMaybe" [style=solid];
"diffNatural" [style=solid];
"diffNormalized" [style=solid];
"diffNotEqualExpression" [style=solid];
"diffOperatorExpression" [style=solid];
"diffOrExpression" [style=solid];
"diffPlusExpression" [style=solid];
"diffPreferExpression" [style=solid];
"diffPretty" [style=solid];
"diffPrimitive" [style=solid];
"diffPrimitiveExpression" [style=solid];
"diffRecord" [style=solid];
"diffRecordCompletionExpression" [style=solid];
"diffRecordLit" [style=solid];
"diffSelectorExpression" [style=solid];
"diffText" [style=solid];
"diffTextAppendExpression" [style=solid];
"diffTimesExpression" [style=solid];
"diffUnion" [style=solid];
"diffVar" [style=solid];
"diffWithExpression" [style=solid];
"difference" [style=solid];
"digit" [style=solid];
"docToStrictText" [style=solid];
"dollar" [style=solid];
"domain" [style=solid];
"domainLabel" [style=solid];
"dontCrash" [style=solid];
"dot" [style=solid];
"double" [style=solid];
"doubleColon" [style=solid];
"doubleInfinity" [style=solid];
"doubleLiteral" [style=solid];
"dropLiteral" [style=solid];
"dropPrefix" [style=solid];
"duplicate" [style=solid];
"duplicateElement" [style=solid];
"elems" [style=solid];
"empty" [style=solid];
"emptyEnv" [style=solid];
"emptyLine" [style=solid];
"emptyStatus" [style=solid];
"emptyStatusWith" [style=solid];
"emptyStatusWithManager" [style=solid];
"enclose" [style=solid];
"enclose\'" [style=solid];
"enclosed" [style=solid];
"enclosed\'" [style=solid];
"encodeConstructor" [style=solid];
"encodeConstructorWith" [style=solid];
"encodeExpression" [style=solid];
"encodeExpressionInternal" [style=solid];
"encodeField" [style=solid];
"encodeFieldWith" [style=solid];
"encodeImport" [style=solid];
"encodeList" [style=solid];
"encodeList1" [style=solid];
"encodeList2" [style=solid];
"encodeList3" [style=solid];
"encodeList4" [style=solid];
"encodeListN" [style=solid];
"encodeVoid" [style=solid];
"env" [style=solid];
"envNames" [style=solid];
"envToContext" [style=solid];
"eqListBy" [style=solid];
"eqMapsBy" [style=solid];
"eqMaybeBy" [style=solid];
"equals" [style=solid];
"equivalent" [style=solid];
"errorMsg" [style=solid];
"escapeControlCharacters" [style=solid];
"escapeEnvironmentVariable" [style=solid];
"escapeLabel" [style=solid];
"escapeSharedWhitespacePrefix" [style=solid];
"escapeSingleQuoteBeforeInterpolation" [style=solid];
"escapeSingleQuotedText" [style=solid];
"escapeText" [style=solid];
"escapeText_" [style=solid];
"escapeTrailingSingleQuote" [style=solid];
"eval" [style=solid];
"expr" [style=solid];
"exprA" [style=solid];
"exprAndHeaderFromText" [style=solid];
"exprFromText" [style=solid];
"extractError" [style=solid];
"extractUnionConstructor" [style=solid];
"fetchFresh" [style=solid];
"fetchFromSemanticCache" [style=solid];
"fetchFromSemisemanticCache" [style=solid];
"fetchRemote" [style=solid];
"field" [style=solid];
"fileTags" [style=solid];
"file_" [style=solid];
"filter" [style=solid];
"filterKeys" [style=solid];
"finaliser" [style=solid];
"firstPosFromExpr" [style=solid];
"fixAssert" [style=solid];
"fixParentPath" [style=solid];
"fixPosAndDefinition" [style=solid];
"foldMapWithKey" [style=solid];
"foldOf" [style=solid];
"forall" [style=solid];
"format" [style=solid];
"freeIn" [style=solid];
"freeze" [style=solid];
"freezeExpression" [style=solid];
"freezeExpressionWithManager" [style=solid];
"freezeImport" [style=solid];
"freezeImportWithManager" [style=solid];
"freezeRemoteImport" [style=solid];
"freezeRemoteImportWithManager" [style=solid];
"freezeWithManager" [style=solid];
"fresh" [style=solid];
"fromList" [style=solid];
"fromListWithKey" [style=solid];
"fromMap" [style=solid];
"fromMonadic" [style=solid];
"fromSet" [style=solid];
"function" [style=solid];
"functionBindingExprs" [style=solid];
"functionWith" [style=solid];
"generate" [style=solid];
"genericAuto" [style=solid];
"genericAutoWith" [style=solid];
"genericToDhall" [style=solid];
"genericToDhallWith" [style=solid];
"get" [style=solid];
"getCacheBaseDirectory" [style=solid];
"getCacheFile" [style=solid];
"getExpression" [style=solid];
"getExpressionAndHeader" [style=solid];
"getExpressionAndHeaderFromStdinText" [style=solid];
"getOffset" [style=solid];
"getOrCreateCacheDirectory" [style=solid];
"getSelName" [style=solid];
"getTagsFromExpr" [style=solid];
"getTagsFromText" [style=solid];
"graph" [style=solid];
"greeter" [style=solid];
"groupDescription" [style=solid];
"h16" [style=solid];
"hangingBraces" [style=solid];
"hardline" [style=solid];
"hashBinding" [style=solid];
"hashExpression" [style=solid];
"hashExpressionToCode" [style=solid];
"hashMap" [style=solid];
"hashSetFromDistinctList" [style=solid];
"hashSetIgnoringDuplicates" [style=solid];
"headCharacter" [style=solid];
"help" [style=solid];
"helpOptions" [style=solid];
"hexNumber" [style=solid];
"hexdig" [style=solid];
"host" [style=solid];
"http" [style=solid];
"httpRaw" [style=solid];
"identifier" [style=solid];
"ignore" [style=solid];
"importExpression" [style=solid];
"importHash_" [style=solid];
"importHashed_" [style=solid];
"importType_" [style=solid];
"import_" [style=solid];
"infer" [style=solid];
"infixr" [style=solid];
"inject" [style=solid];
"input" [style=solid];
"inputExpr" [style=solid];
"inputExprWithSettings" [style=solid];
"inputFile" [style=solid];
"inputFileWithSettings" [style=solid];
"inputHelper" [style=solid];
"inputToFiles" [style=solid];
"inputWithSettings" [style=solid];
"insert" [style=solid];
"insertWith" [style=solid];
"instantiate" [style=solid];
"int" [style=solid];
"int16" [style=solid];
"int32" [style=solid];
"int64" [style=solid];
"int8" [style=solid];
"intHelper" [style=solid];
"integer" [style=solid];
"integerLiteral" [style=solid];
"internalError" [style=solid];
"intersection" [style=solid];
"intersectionWith" [style=solid];
"ipLiteral" [style=solid];
"ipV4Address" [style=solid];
"ipV6Address" [style=solid];
"ipVFuture" [style=solid];
"isNormalized" [style=solid];
"isNormalizedWith" [style=solid];
"isOrContainsAssert" [style=solid];
"isSorted" [style=solid];
"isWhitespace" [style=solid];
"judgmentallyEqual" [style=solid];
"keys" [style=solid];
"keysSet" [style=solid];
"keyword" [style=solid];
"label" [style=solid];
"labels" [style=solid];
"lambda" [style=solid];
"langle" [style=solid];
"laxSrcEq" [style=solid];
"layout" [style=solid];
"layoutOpts" [style=solid];
"lazyText" [style=solid];
"lbrace" [style=solid];
"lbracket" [style=solid];
"leadingSpaces" [style=solid];
"lineComment" [style=solid];
"linesLiteral" [style=solid];
"lint" [style=solid];
"list" [style=solid];
"literal" [style=solid];
"load" [style=solid];
"loadBinding" [style=solid];
"loadImport" [style=solid];
"loadImportWithSemanticCache" [style=solid];
"loadImportWithSemisemanticCache" [style=solid];
"loadRelativeTo" [style=solid];
"loadRelativeToWithManager" [style=solid];
"loadWith" [style=solid];
"loadWithManager" [style=solid];
"local" [style=solid];
"localOnly" [style=solid];
"localToPath" [style=solid];
"longTypeMessage" [style=solid];
"longestSharedWhitespacePrefix" [style=solid];
"lookup" [style=solid];
"lparen" [style=solid];
"ls32" [style=solid];
"main" [style=solid];
"makeBinding" [style=solid];
"makeFieldSelection" [style=solid];
"makeFunctionBinding" [style=solid];
"makeHashMismatchMessage" [style=solid];
"makeHaskellTypeFromUnion" [style=solid];
"makeHaskellTypes" [style=solid];
"makeKeyValue" [style=solid];
"makeRecordField" [style=solid];
"map" [style=solid];
"mapMOf" [style=solid];
"mapMaybe" [style=solid];
"mapWithKey" [style=solid];
"match" [style=solid];
"maybe" [style=solid];
"member" [style=solid];
"messageExpressions" [style=solid];
"minus" [style=solid];
"mismatch" [style=solid];
"missing" [style=solid];
"multiLet" [style=solid];
"multilineChunks" [style=solid];
"natural" [style=solid];
"naturalLiteral" [style=solid];
"newManager" [style=solid];
"nextSaveFile" [style=solid];
"nf" [style=solid];
"noHeaders" [style=solid];
"nonemptyWhitespace" [style=solid];
"normalize" [style=solid];
"normalizeHeaders" [style=solid];
"normalizeWith" [style=solid];
"normalizeWithM" [style=solid];
"normalizer" [style=solid];
"notEmptyRecord" [style=solid];
"notEmptyRecordLit" [style=solid];
"noted" [style=solid];
"nubOrd" [style=solid];
"null" [style=solid];
"operator" [style=solid];
"operatorChar" [style=solid];
"option" [style=solid];
"options" [style=solid];
"optionsPrefix" [style=solid];
"outerJoin" [style=solid];
"output" [style=solid];
"outputWithoutSpacing" [style=solid];
"pair" [style=solid];
"pairFromMapEntry" [style=solid];
"parent" [style=solid];
"parseAndLoad" [style=solid];
"parseAssignment" [style=solid];
"parseMode" [style=solid];
"parseOptions" [style=solid];
"parserInfoOptions" [style=solid];
"parsers" [style=solid];
"pathCharacter" [style=solid];
"pathComponent" [style=solid];
"pattern" [style=solid];
"pchar" [style=solid];
"pctEncoded" [style=solid];
"pipe" [style=solid];
"plus" [style=solid];
"port" [style=solid];
"posixEnvironmentVariable" [style=solid];
"posixEnvironmentVariableCharacter" [style=solid];
"prefer" [style=solid];
"preserveSource" [style=solid];
"pretty" [style=solid];
"prettyAnyLabel" [style=solid];
"prettyAnyLabels" [style=solid];
"prettyCharacterSet" [style=solid];
"prettyConst" [style=solid];
"prettyDetailedTypeError" [style=solid];
"prettyDouble" [style=solid];
"prettyEnvironmentVariable" [style=solid];
"prettyExpr" [style=solid];
"prettyImportExpression" [style=solid];
"prettyInt" [style=solid];
"prettyLabel" [style=solid];
"prettyLabelShared" [style=solid];
"prettyLabels" [style=solid];
"prettyNatural" [style=solid];
"prettyNumber" [style=solid];
"prettyPathComponent" [style=solid];
"prettyPrinters" [style=solid];
"prettySrcExpr" [style=solid];
"prettyToStrictText" [style=solid];
"prettyToString" [style=solid];
"prettyTypeError" [style=solid];
"prettyTypeMessage" [style=solid];
"prettyURIComponent" [style=solid];
"prettyVar" [style=solid];
"pretty_" [style=solid];
"printWarning" [style=solid];
"query_" [style=solid];
"quitMessage" [style=solid];
"quote" [style=solid];
"quotedPathCharacter" [style=solid];
"range" [style=solid];
"rangle" [style=solid];
"rarrow" [style=solid];
"rawInput" [style=solid];
"rbrace" [style=solid];
"rbracket" [style=solid];
"record" [style=solid];
"recordEncoder" [style=solid];
"recordFieldExprs" [style=solid];
"remote" [style=solid];
"removeLetInLet" [style=solid];
"removeUnusedBindings" [style=solid];
"renderComment" [style=solid];
"renderComponent" [style=solid];
"renderQuery" [style=solid];
"renderSrc" [style=solid];
"renderSrcMaybe" [style=solid];
"renderStandardVersion" [style=solid];
"renderURL" [style=solid];
"renote" [style=solid];
"repl" [style=solid];
"replicateDecoder" [style=solid];
"reserved" [style=solid];
"reservedChar" [style=solid];
"reservedIdentifiers" [style=solid];
"reservedKeywords" [style=solid];
"restrictKeys" [style=solid];
"resultToFix" [style=solid];
"rewriteMOf" [style=solid];
"rewriteOf" [style=solid];
"rewriteWithSchemas" [style=solid];
"rootDirectory" [style=solid];
"rparen" [style=solid];
"rule" [style=solid];
"satisfy" [style=solid];
"saveBinding" [style=solid];
"saveFilePrefix" [style=solid];
"schemasCommand" [style=solid];
"scheme_" [style=solid];
"scientific" [style=solid];
"sequence" [style=solid];
"setFromDistinctList" [style=solid];
"setHelper" [style=solid];
"setIgnoringDuplicates" [style=solid];
"setOffset" [style=solid];
"setOption" [style=solid];
"setSingletonConstructors" [style=solid];
"shallowDenote" [style=solid];
"shift" [style=solid];
"shortTypeMessage" [style=solid];
"showDhallErrors" [style=solid];
"showFileTags" [style=solid];
"showInt" [style=solid];
"showPosTag" [style=solid];
"showTags" [style=solid];
"signPrefix" [style=solid];
"simpleLabel" [style=solid];
"singleton" [style=solid];
"size" [style=solid];
"skeleton" [style=solid];
"snip" [style=solid];
"snipDoc" [style=solid];
"sort" [style=solid];
"sourceName" [style=solid];
"splitOn" [style=solid];
"splitOnPredicate" [style=solid];
"splitWith" [style=solid];
"src" [style=solid];
"srcAnd" [style=solid];
"srcToLineColumn" [style=solid];
"stack" [style=solid];
"star" [style=solid];
"startingContext" [style=solid];
"staticDhallExpression" [style=solid];
"strictText" [style=solid];
"string" [style=solid];
"subDelims" [style=solid];
"subExpressions" [style=solid];
"subcommand" [style=solid];
"subst" [style=solid];
"substitute" [style=solid];
"substitutions" [style=solid];
"syntax" [style=solid];
"tailCharacter" [style=solid];
"takeEnd" [style=solid];
"takeWhile" [style=solid];
"takeWhile1" [style=solid];
"text" [style=solid];
"textShow" [style=solid];
"textSkeleton" [style=solid];
"throwMissingImport" [style=solid];
"throws" [style=solid];
"to" [style=solid];
"toAscList" [style=solid];
"toConstructor" [style=solid];
"toDeclaration" [style=solid];
"toDirectoryTree" [style=solid];
"toDoubleQuoted" [style=solid];
"toHeader" [style=solid];
"toHeaders" [style=solid];
"toList" [style=solid];
"toMap" [style=solid];
"toMapWith" [style=solid];
"toMonadic" [style=solid];
"toNestedHaskellType" [style=solid];
"toPath" [style=solid];
"toSeq" [style=solid];
"toSet" [style=solid];
"toVHPi" [style=solid];
"token" [style=solid];
"transformMOf" [style=solid];
"transformOf" [style=solid];
"traverseWithIndex_" [style=solid];
"traverseWithKey" [style=solid];
"trim" [style=solid];
"typeCheck" [style=solid];
"typeError" [style=solid];
"typeOf" [style=solid];
"typeWith" [style=solid];
"typeWithA" [style=solid];
"typesToNames" [style=solid];
"unApply" [style=solid];
"uncons" [style=solid];
"unhandledConstructor" [style=solid];
"union" [style=solid];
"unionEncoder" [style=solid];
"unionWith" [style=solid];
"unit" [style=solid];
"unlinesLiteral" [style=solid];
"unorderedFromList" [style=solid];
"unorderedSingleton" [style=solid];
"unorderedTraverseWithKey" [style=solid];
"unorderedTraverseWithKey_" [style=solid];
"unreserved" [style=solid];
"unsafeExpectRecord" [style=solid];
"unsafeExpectRecordLit" [style=solid];
"unsafeExpectUnion" [style=solid];
"unsafeExpectUnionLit" [style=solid];
"unsafeSubExpressions" [style=solid];
"unsetOption" [style=solid];
"unsnoc" [style=solid];
"useToMap" [style=solid];
"userinfo" [style=solid];
"vApp" [style=solid];
"vCombine" [style=solid];
"vCombineTypes" [style=solid];
"vField" [style=solid];
"vListAppend" [style=solid];
"vNaturalPlus" [style=solid];
"vPrefer" [style=solid];
"vProjectByFields" [style=solid];
"vTextReplace" [style=solid];
"vVar" [style=solid];
"vWith" [style=solid];
"validCodepoint" [style=solid];
"vector" [style=solid];
"void" [style=solid];
"whitespace" [style=solid];
"whitespaceChunk" [style=solid];
"will" [style=solid];
"withoutKeys" [style=solid];
"word" [style=solid];
"word16" [style=solid];
"word32" [style=solid];
"word64" [style=solid];
"word8" [style=solid];
"wordHelper" [style=solid];
"wrapInLets" [style=solid];
"writeExpressionToSemanticCache" [style=solid];
"writeOutputHandle" [style=solid];
"writeToSemanticCache" [style=solid];
"writeToSemisemanticCache" [style=solid];
"" -> "auto";
"" -> "bool";
"" -> "constructor";
"" -> "defaultEvaluateSettings";
"" -> "defaultInputNormalizer";
"" -> "defaultInputSettings";
"" -> "defaultInterpretOptions";
"" -> "detailed";
"" -> "double";
"" -> "encodeConstructor";
"" -> "encodeConstructorWith";
"" -> "encodeField";
"" -> "encodeFieldWith";
"" -> "extractError";
"" -> "field";
"" -> "fromMonadic";
"" -> "function";
"" -> "functionWith";
"" -> "genericAuto";
"" -> "genericAutoWith";
"" -> "genericToDhall";
"" -> "genericToDhallWith";
"" -> "hashMap";
"" -> "hashSetFromDistinctList";
"" -> "hashSetIgnoringDuplicates";
"" -> "inject";
"" -> "input";
"" -> "inputExpr";
"" -> "inputExprWithSettings";
"" -> "inputFile";
"" -> "inputFileWithSettings";
"" -> "inputWithSettings";
"" -> "int";
"" -> "int16";
"" -> "int32";
"" -> "int64";
"" -> "int8";
"" -> "integer";
"" -> "lazyText";
"" -> "list";
"" -> "maybe";
"" -> "natural";
"" -> "newManager";
"" -> "normalizer";
"" -> "pair";
"" -> "pairFromMapEntry";
"" -> "rawInput";
"" -> "record";
"" -> "recordEncoder";
"" -> "rootDirectory";
"" -> "scientific";
"" -> "sequence";
"" -> "setFromDistinctList";
"" -> "setIgnoringDuplicates";
"" -> "showDhallErrors";
"" -> "sourceName";
"" -> "startingContext";
"" -> "strictText";
"" -> "string";
"" -> "substitutions";
"" -> "toMonadic";
"" -> "typeError";
"" -> "union";
"" -> "unionEncoder";
"" -> "unit";
"" -> "vector";
"" -> "void";
"" -> "word";
"" -> "word16";
"" -> "word32";
"" -> "word64";
"" -> "word8";
"_Bool" -> "builtin";
"_Double" -> "builtin";
"_DoubleShow" -> "builtin";
"_ERROR" -> "_ERROR";
"_ERROR" -> "forall";
"_ERROR" -> "function";
"_False" -> "builtin";
"_Integer" -> "builtin";
"_IntegerClamp" -> "builtin";
"_IntegerNegate" -> "builtin";
"_IntegerShow" -> "builtin";
"_IntegerToDouble" -> "builtin";
"_Kind" -> "builtin";
"_List" -> "builtin";
"_ListBuild" -> "builtin";
"_ListFold" -> "builtin";
"_ListHead" -> "builtin";
"_ListIndexed" -> "builtin";
"_ListLast" -> "builtin";
"_ListLength" -> "builtin";
"_ListReverse" -> "builtin";
"_Location" -> "builtin";
"_NaN" -> "builtin";
"_Natural" -> "builtin";
"_NaturalBuild" -> "builtin";
"_NaturalEven" -> "builtin";
"_NaturalFold" -> "builtin";
"_NaturalIsZero" -> "builtin";
"_NaturalOdd" -> "builtin";
"_NaturalShow" -> "builtin";
"_NaturalSubtract" -> "builtin";
"_NaturalToInteger" -> "builtin";
"_None" -> "builtin";
"_Optional" -> "builtin";
"_Some" -> "keyword";
"_Sort" -> "builtin";
"_Text" -> "builtin";
"_TextReplace" -> "builtin";
"_TextShow" -> "builtin";
"_True" -> "builtin";
"_Type" -> "builtin";
"_and" -> "operator";
"_arrow" -> "char";
"_arrow" -> "text";
"_as" -> "keyword";
"_assert" -> "keyword";
"_at" -> "reservedChar";
"_bar" -> "reservedChar";
"_closeAngle" -> "reservedChar";
"_closeBrace" -> "reservedChar";
"_closeBracket" -> "reservedChar";
"_closeParens" -> "reservedChar";
"_colon" -> "reservedChar";
"_combine" -> "char";
"_combine" -> "text";
"_combineTypes" -> "char";
"_combineTypes" -> "text";
"_comma" -> "reservedChar";
"_dot" -> "operatorChar";
"_doubleColon" -> "annToAnsiStyle";
"_doubleColon" -> "builtin";
"_doubleColon" -> "colon";
"_doubleColon" -> "comma";
"_doubleColon" -> "detectCharacterSet";
"_doubleColon" -> "docToStrictText";
"_doubleColon" -> "dot";
"_doubleColon" -> "equals";
"_doubleColon" -> "escapeEnvironmentVariable";
"_doubleColon" -> "escapeLabel";
"_doubleColon" -> "escapeText_";
"_doubleColon" -> "forall";
"_doubleColon" -> "keyword";
"_doubleColon" -> "label";
"_doubleColon" -> "lambda";
"_doubleColon" -> "langle";
"_doubleColon" -> "layout";
"_doubleColon" -> "layoutOpts";
"_doubleColon" -> "lbrace";
"_doubleColon" -> "lbracket";
"_doubleColon" -> "literal";
"_doubleColon" -> "lparen";
"_doubleColon" -> "operator";
"_doubleColon" -> "pipe";
"_doubleColon" -> "prettyAnyLabel";
"_doubleColon" -> "prettyCharacterSet";
"_doubleColon" -> "prettyConst";
"_doubleColon" -> "prettyDouble";
"_doubleColon" -> "prettyEnvironmentVariable";
"_doubleColon" -> "prettyExpr";
"_doubleColon" -> "prettyImportExpression";
"_doubleColon" -> "prettyInt";
"_doubleColon" -> "prettyLabel";
"_doubleColon" -> "prettyLabels";
"_doubleColon" -> "prettyNatural";
"_doubleColon" -> "prettyNumber";
"_doubleColon" -> "prettySrcExpr";
"_doubleColon" -> "prettyToStrictText";
"_doubleColon" -> "prettyToString";
"_doubleColon" -> "prettyVar";
"_doubleColon" -> "pretty_";
"_doubleColon" -> "rangle";
"_doubleColon" -> "rarrow";
"_doubleColon" -> "rbrace";
"_doubleColon" -> "rbracket";
"_doubleColon" -> "rparen";
"_doubleEqual" -> "operator";
"_else" -> "keyword";
"_equal" -> "reservedChar";
"_equivalent" -> "char";
"_equivalent" -> "text";
"_equivalent" -> "void";
"_forall" -> "char";
"_forall" -> "text";
"_if" -> "keyword";
"_importAlt" -> "operatorChar";
"_in" -> "keyword";
"_lambda" -> "char";
"_let" -> "keyword";
"_listAppend" -> "operatorChar";
"_merge" -> "keyword";
"_missing" -> "keyword";
"_missing" -> "tailCharacter";
"_notEqual" -> "operator";
"_openAngle" -> "reservedChar";
"_openBrace" -> "reservedChar";
"_openBracket" -> "reservedChar";
"_openParens" -> "reservedChar";
"_or" -> "operator";
"_plus" -> "operatorChar";
"_prefer" -> "char";
"_prefer" -> "text";
"_textAppend" -> "operator";
"_then" -> "keyword";
"_times" -> "operatorChar";
"_toMap" -> "keyword";
"_using" -> "keyword";
"_with" -> "keyword";
"addBinding" -> "expr";
"addBinding" -> "normalize";
"addBinding" -> "output";
"addBinding" -> "parseAndLoad";
"addBinding" -> "src";
"addBinding" -> "typeCheck";
"addConstructorModifier" -> "options";
"addFieldModifier" -> "options";
"alphaNormalize" -> "censor";
"alphaNormalize" -> "env";
"alphaNormalize" -> "format";
"alphaNormalize" -> "input";
"alphaNum" -> "alpha";
"alphaNum" -> "digit";
"angled" -> "enclosed";
"angled" -> "langle";
"angled" -> "pipe";
"angled" -> "rangle";
"angles" -> "enclose";
"angles" -> "langle";
"angles" -> "pipe";
"angles" -> "rangle";
"anyLabel" -> "backtickLabel";
"anyLabel" -> "simpleLabel";
"anyLabelOrSome" -> "_Some";
"anyLabelOrSome" -> "anyLabel";
"applyContext" -> "expr";
"arrows" -> "map";
"arrows" -> "rarrow";
"arrows" -> "unsnoc";
"authority_" -> "host";
"authority_" -> "option";
"authority_" -> "port";
"authority_" -> "userinfo";
"auto" -> "defaultInputNormalizer";
"backtickLabel" -> "char";
"bashEnvironmentVariable" -> "alpha";
"bashEnvironmentVariable" -> "alphaNum";
"bashEnvironmentVariable" -> "satisfy";
"bashEnvironmentVariable" -> "star";
"blockComment" -> "text";
"blockCommentChunk" -> "blockComment";
"blockCommentContinue" -> "blockCommentChunk";
"blockCommentContinue" -> "blockCommentContinue";
"blockCommentContinue" -> "text";
"blockCommentContinue" -> "void";
"bool" -> "expr";
"bool" -> "typeError";
"boundedType" -> "boundedType";
"braced" -> "comma";
"braced" -> "enclosed";
"braced" -> "lbrace";
"braced" -> "rbrace";
"braces" -> "comma";
"braces" -> "enclose";
"braces" -> "lbrace";
"braces" -> "rbrace";
"bracketed" -> "comma";
"bracketed" -> "enclosed";
"bracketed" -> "lbracket";
"bracketed" -> "rbracket";
"buildBooleanOperator" -> "insert";
"buildBooleanOperator" -> "operator";
"buildBooleanOperator" -> "pretty";
"buildNaturalOperator" -> "get";
"buildNaturalOperator" -> "insert";
"buildNaturalOperator" -> "literal";
"buildNaturalOperator" -> "operator";
"buildNaturalOperator" -> "pretty";
"buildNaturalOperator" -> "prettyTypeError";
"buildNaturalOperator" -> "to";
"builtin" -> "reserved";
"builtin" -> "token";
"cacheWarning" -> "_ERROR";
"cacheWarning" -> "addPreludeExtensions";
"cacheWarning" -> "fixAssert";
"cacheWarning" -> "fixParentPath";
"cacheWarning" -> "lint";
"cacheWarning" -> "removeLetInLet";
"cacheWarning" -> "removeUnusedBindings";
"cacheWarning" -> "subExpressions";
"cacheWarning" -> "useToMap";
"censorChunks" -> "censorExpression";
"censorChunks" -> "censorText";
"censorExpression" -> "censorChunks";
"censorExpression" -> "censorExpression";
"censorExpression" -> "censorSrc";
"censorExpression" -> "src";
"censorExpression" -> "subExpressions";
"censorSrc" -> "censorText";
"censorTypeError" -> "messageExpressions";
"chainImport" -> "normalizeHeaders";
"chainImport" -> "parent";
"checkContext" -> "list";
"checkContext" -> "typeWith";
"chunkExprs" -> "pretty";
"chunkExprs" -> "prettyPathComponent";
"cmdQuit" -> "quitMessage";
"colon" -> "syntax";
"colon" -> "token";
"comma" -> "syntax";
"comma" -> "token";
"command" -> "alpha";
"command" -> "annToAnsiStyle";
"command" -> "cache";
"command" -> "censor";
"command" -> "command";
"command" -> "detectCharacterSet";
"command" -> "dhallVersionString";
"command" -> "diff";
"command" -> "dot";
"command" -> "expr";
"command" -> "file_";
"command" -> "getExpression";
"command" -> "import_";
"command" -> "input";
"command" -> "map";
"command" -> "noHeaders";
"command" -> "noted";
"command" -> "null";
"command" -> "output";
"command" -> "parent";
"command" -> "pretty";
"command" -> "rootDirectory";
"command" -> "string";
"command" -> "text";
"command" -> "to";
"completeExpression" -> "parsers";
"completeFunc" -> "expr";
"completeFunc" -> "filter";
"completeFunc" -> "get";
"completeFunc" -> "keys";
"completeFunc" -> "map";
"completeFunc" -> "null";
"completeFunc" -> "options";
"completeFunc" -> "reserved";
"completeFunc" -> "word";
"completer" -> "completeFunc";
"computeSemisemanticHash" -> "hashExpression";
"consolidateRecordLiteral" -> "containsComment";
"consolidateRecordLiteral" -> "keys";
"consolidateRecordLiteral" -> "makeRecordField";
"consolidateRecordLiteral" -> "shallowDenote";
"containsComment" -> "isWhitespace";
"conv" -> "conv";
"conv" -> "countEnvironment";
"conv" -> "env";
"conv" -> "eqListBy";
"conv" -> "eqMapsBy";
"conv" -> "eqMaybeBy";
"conv" -> "fresh";
"conv" -> "instantiate";
"conv" -> "toList";
"conv" -> "vApp";
"cosmosOf" -> "cosmosOf";
"countEnvironment" -> "env";
"countNames" -> "env";
"countNames" -> "forall";
"createHeader" -> "isWhitespace";
"createHeader" -> "text";
"ctxToContext" -> "typesToNames";
"currentSaveFile" -> "currentSaveFileIndex";
"currentSaveFile" -> "saveFilePrefix";
"currentSaveFileIndex" -> "mapMaybe";
"currentSaveFileIndex" -> "saveFilePrefix";
"decOctet" -> "count";
"decOctet" -> "digit";
"decOctet" -> "satisfy";
"decodeExpression" -> "decodeWith55799Tag";
"decodeExpressionInternal" -> "empty";
"decodeExpressionInternal" -> "replicateDecoder";
"decodeImport" -> "decodeExpressionInternal";
"decodeImport" -> "decodeImport";
"decodeImport" -> "env";
"decodeImport" -> "local";
"decodeImport" -> "missing";
"decodeImport" -> "remote";
"decodeImport" -> "replicateDecoder";
"decodeSchema" -> "_Type";
"decodeSchemas" -> "_Type";
"decodeSchemas" -> "decodeSchema";
"decodeSchemas" -> "empty";
"defaultInputSettings" -> "defaultEvaluateSettings";
"defaultInterpretOptions" -> "expr";
"defaultInterpretOptions" -> "options";
"defaultInterpretOptions" -> "typeError";
"denote" -> "denote";
"denote" -> "unsafeSubExpressions";
"dependencyToFile" -> "chainImport";
"dependencyToFile" -> "ignore";
"dependencyToFile" -> "import_";
"dependencyToFile" -> "localToPath";
"dependencyToFile" -> "parent";
"dependencyToFile" -> "pretty";
"dependencyToFile" -> "stack";
"desugarWith" -> "keys";
"desugarWith" -> "makeBinding";
"desugarWith" -> "makeRecordField";
"desugarWith" -> "record";
"desugarWith" -> "shift";
"desugarWith" -> "subExpressions";
"detectCharacterSet" -> "cosmosOf";
"detectCharacterSet" -> "foldOf";
"detectCharacterSet" -> "subExpressions";
"detectCharacterSet" -> "to";
"dhallVersionString" -> "dhallVersion";
"diff" -> "align";
"diff" -> "colon";
"diff" -> "diff";
"diff" -> "diffAnnotatedExpression";
"diff" -> "diffLabel";
"diff" -> "diffMaybe";
"diff" -> "enclosed\'";
"diff" -> "equals";
"diff" -> "forall";
"diff" -> "format";
"diff" -> "hardline";
"diff" -> "ignore";
"diff" -> "keyword";
"diff" -> "lambda";
"diff" -> "lparen";
"diff" -> "mismatch";
"diff" -> "rarrow";
"diff" -> "rparen";
"diffAndExpression" -> "diffCombineExpression";
"diffAndExpression" -> "enclosed\'";
"diffAndExpression" -> "mismatch";
"diffAndExpression" -> "operator";
"diffAnnotatedExpression" -> "align";
"diffAnnotatedExpression" -> "colon";
"diffAnnotatedExpression" -> "diff";
"diffAnnotatedExpression" -> "diffApplicationExpression";
"diffAnnotatedExpression" -> "diffList";
"diffAnnotatedExpression" -> "diffMaybe";
"diffAnnotatedExpression" -> "diffOperatorExpression";
"diffAnnotatedExpression" -> "diffWithExpression";
"diffAnnotatedExpression" -> "enclosed\'";
"diffAnnotatedExpression" -> "format";
"diffAnnotatedExpression" -> "keyword";
"diffAnnotatedExpression" -> "mismatch";
"diffApplicationExpression" -> "builtin";
"diffApplicationExpression" -> "diffWithExpression";
"diffApplicationExpression" -> "enclosed\'";
"diffApplicationExpression" -> "mismatch";
"diffBool" -> "bool";
"diffBool" -> "builtin";
"diffBool" -> "diffPrimitive";
"diffChunks" -> "align";
"diffChunks" -> "diff";
"diffChunks" -> "diffText";
"diffChunks" -> "difference";
"diffChunks" -> "enclosed";
"diffChunks" -> "null";
"diffChunks" -> "textSkeleton";
"diffCombineExpression" -> "diffPreferExpression";
"diffCombineExpression" -> "enclosed\'";
"diffCombineExpression" -> "mismatch";
"diffCombineExpression" -> "operator";
"diffCombineTypesExpression" -> "diffTimesExpression";
"diffCombineTypesExpression" -> "enclosed\'";
"diffCombineTypesExpression" -> "mismatch";
"diffCombineTypesExpression" -> "operator";
"diffConst" -> "diffPrimitive";
"diffConst" -> "token";
"diffDouble" -> "diffPrimitive";
"diffDouble" -> "token";
"diffEqualExpression" -> "diffNotEqualExpression";
"diffEqualExpression" -> "enclosed\'";
"diffEqualExpression" -> "mismatch";
"diffEqualExpression" -> "operator";
"diffEquivalentExpression" -> "diffApplicationExpression";
"diffEquivalentExpression" -> "enclosed\'";
"diffEquivalentExpression" -> "mismatch";
"diffEquivalentExpression" -> "operator";
"diffImportAltExpression" -> "diffOrExpression";
"diffImportAltExpression" -> "enclosed\'";
"diffImportAltExpression" -> "mismatch";
"diffImportAltExpression" -> "operator";
"diffImportExpression" -> "diffPretty";
"diffImportExpression" -> "diffRecordCompletionExpression";
"diffImportExpression" -> "mismatch";
"diffInt" -> "diffPrimitive";
"diffInt" -> "token";
"diffInteger" -> "diffPrimitive";
"diffInteger" -> "token";
"diffKeyVals" -> "diff";
"diffKeyVals" -> "diffKeysWith";
"diffKeysWith" -> "filter";
"diffKeysWith" -> "ignore";
"diffKeysWith" -> "minus";
"diffKeysWith" -> "plus";
"diffKeysWith" -> "token";
"diffLabel" -> "diffPrimitive";
"diffLabel" -> "token";
"diffLabels" -> "braced";
"diffLabels" -> "ignore";
"diffLabels" -> "minus";
"diffLabels" -> "plus";
"diffLabels" -> "token";
"diffList" -> "bracketed";
"diffList" -> "diff";
"diffList" -> "ignore";
"diffList" -> "map";
"diffList" -> "minus";
"diffList" -> "plus";
"diffList" -> "toList";
"diffList" -> "token";
"diffListAppendExpression" -> "diffAndExpression";
"diffListAppendExpression" -> "enclosed\'";
"diffListAppendExpression" -> "mismatch";
"diffListAppendExpression" -> "operator";
"diffMaybe" -> "difference";
"diffMaybe" -> "ignore";
"diffNatural" -> "diffPrimitive";
"diffNatural" -> "token";
"diffNotEqualExpression" -> "diffEquivalentExpression";
"diffNotEqualExpression" -> "enclosed\'";
"diffNotEqualExpression" -> "mismatch";
"diffNotEqualExpression" -> "operator";
"diffOperatorExpression" -> "diffImportAltExpression";
"diffOrExpression" -> "diffPlusExpression";
"diffOrExpression" -> "enclosed\'";
"diffOrExpression" -> "mismatch";
"diffOrExpression" -> "operator";
"diffPlusExpression" -> "diffTextAppendExpression";
"diffPlusExpression" -> "enclosed\'";
"diffPlusExpression" -> "mismatch";
"diffPlusExpression" -> "operator";
"diffPreferExpression" -> "diffCombineTypesExpression";
"diffPreferExpression" -> "enclosed\'";
"diffPreferExpression" -> "mismatch";
"diffPreferExpression" -> "operator";
"diffPretty" -> "diffPrimitive";
"diffPretty" -> "token";
"diffPrimitive" -> "difference";
"diffPrimitive" -> "ignore";
"diffPrimitiveExpression" -> "align";
"diffPrimitiveExpression" -> "diff";
"diffPrimitiveExpression" -> "diffBool";
"diffPrimitiveExpression" -> "diffChunks";
"diffPrimitiveExpression" -> "diffConst";
"diffPrimitiveExpression" -> "diffDouble";
"diffPrimitiveExpression" -> "diffInteger";
"diffPrimitiveExpression" -> "diffList";
"diffPrimitiveExpression" -> "diffNatural";
"diffPrimitiveExpression" -> "diffRecord";
"diffPrimitiveExpression" -> "diffRecordLit";
"diffPrimitiveExpression" -> "diffUnion";
"diffPrimitiveExpression" -> "diffVar";
"diffPrimitiveExpression" -> "format";
"diffPrimitiveExpression" -> "hardline";
"diffPrimitiveExpression" -> "ignore";
"diffPrimitiveExpression" -> "mismatch";
"diffPrimitiveExpression" -> "toDirectoryTree";
"diffRecord" -> "braced";
"diffRecord" -> "colon";
"diffRecord" -> "diffKeyVals";
"diffRecordCompletionExpression" -> "diffSelectorExpression";
"diffRecordCompletionExpression" -> "mismatch";
"diffRecordLit" -> "braced";
"diffRecordLit" -> "diffKeyVals";
"diffRecordLit" -> "equals";
"diffSelectorExpression" -> "diff";
"diffSelectorExpression" -> "diffLabel";
"diffSelectorExpression" -> "diffLabels";
"diffSelectorExpression" -> "diffPrimitiveExpression";
"diffSelectorExpression" -> "dot";
"diffSelectorExpression" -> "enclosed\'";
"diffSelectorExpression" -> "mismatch";
"diffTextAppendExpression" -> "diffListAppendExpression";
"diffTextAppendExpression" -> "enclosed\'";
"diffTextAppendExpression" -> "mismatch";
"diffTextAppendExpression" -> "operator";
"diffTimesExpression" -> "diffEqualExpression";
"diffTimesExpression" -> "enclosed\'";
"diffTimesExpression" -> "mismatch";
"diffTimesExpression" -> "operator";
"diffUnion" -> "angled";
"diffUnion" -> "colon";
"diffUnion" -> "diff";
"diffUnion" -> "diffKeysWith";
"diffUnion" -> "diffMaybe";
"diffVar" -> "diffInt";
"diffVar" -> "diffLabel";
"diffVar" -> "format";
"diffVar" -> "label";
"diffVar" -> "natural";
"diffWithExpression" -> "align";
"diffWithExpression" -> "diffImportExpression";
"diffWithExpression" -> "diffLabel";
"diffWithExpression" -> "diffOperatorExpression";
"diffWithExpression" -> "dot";
"diffWithExpression" -> "format";
"diffWithExpression" -> "minus";
"diffWithExpression" -> "mismatch";
"diffWithExpression" -> "plus";
"diffWithExpression" -> "token";
"difference" -> "align";
"difference" -> "filter";
"difference" -> "filterKeys";
"difference" -> "hardline";
"difference" -> "minus";
"difference" -> "plus";
"difference" -> "toList";
"docToStrictText" -> "layout";
"dollar" -> "syntax";
"domain" -> "domainLabel";
"domain" -> "option";
"domain" -> "star";
"domainLabel" -> "alphaNum";
"domainLabel" -> "plus";
"domainLabel" -> "satisfy";
"domainLabel" -> "star";
"dot" -> "token";
"double" -> "expr";
"double" -> "typeError";
"doubleColon" -> "syntax";
"doubleInfinity" -> "char";
"doubleInfinity" -> "text";
"doubleLiteral" -> "signPrefix";
"dropPrefix" -> "text";
"emptyStatus" -> "defaultNewManager";
"emptyStatus" -> "emptyStatusWithManager";
"emptyStatusWith" -> "rootDirectory";
"emptyStatusWithManager" -> "emptyStatusWith";
"emptyStatusWithManager" -> "fetchRemote";
"emptyStatusWithManager" -> "newManager";
"enclosed" -> "align";
"enclosed" -> "hardline";
"enclosed\'" -> "align";
"enclosed\'" -> "hardline";
"encodeConstructor" -> "decodeExpression";
"encodeConstructor" -> "encodeConstructorWith";
"encodeConstructor" -> "encodeExpression";
"encodeConstructor" -> "inject";
"encodeConstructor" -> "renderStandardVersion";
"encodeExpressionInternal" -> "encodeList";
"encodeExpressionInternal" -> "encodeList1";
"encodeExpressionInternal" -> "encodeList2";
"encodeExpressionInternal" -> "encodeList3";
"encodeExpressionInternal" -> "encodeList4";
"encodeExpressionInternal" -> "encodeListN";
"encodeExpressionInternal" -> "function";
"encodeExpressionInternal" -> "label";
"encodeExpressionInternal" -> "map";
"encodeExpressionInternal" -> "null";
"encodeExpressionInternal" -> "toList";
"encodeExpressionInternal" -> "unApply";
"encodeField" -> "encodeFieldWith";
"encodeField" -> "inject";
"encodeImport" -> "encodeExpressionInternal";
"encodeImport" -> "encodeImport";
"encodeImport" -> "encodeList";
"encodeImport" -> "import_";
"encodeImport" -> "map";
"encodeList" -> "encodeListN";
"encodeVoid" -> "decodeExpressionInternal";
"encodeVoid" -> "decodeImport";
"encodeVoid" -> "decodeVoid";
"encodeVoid" -> "encodeExpressionInternal";
"encodeVoid" -> "encodeImport";
"encodeVoid" -> "encodeVoid";
"env" -> "bashEnvironmentVariable";
"env" -> "char";
"env" -> "posixEnvironmentVariable";
"env" -> "text";
"envNames" -> "env";
"envNames" -> "envNames";
"eqMapsBy" -> "eqListBy";
"equals" -> "syntax";
"equals" -> "token";
"errorMsg" -> "_ERROR";
"escapeControlCharacters" -> "splitOnPredicate";
"escapeControlCharacters" -> "splitWith";
"escapeEnvironmentVariable" -> "alpha";
"escapeEnvironmentVariable" -> "alphaNum";
"escapeEnvironmentVariable" -> "escapeText_";
"escapeLabel" -> "headCharacter";
"escapeLabel" -> "reservedIdentifiers";
"escapeLabel" -> "reservedKeywords";
"escapeLabel" -> "tailCharacter";
"escapeSharedWhitespacePrefix" -> "linesLiteral";
"escapeSharedWhitespacePrefix" -> "longestSharedWhitespacePrefix";
"escapeSharedWhitespacePrefix" -> "unlinesLiteral";
"escapeSingleQuoteBeforeInterpolation" -> "splitWith";
"escapeSingleQuoteBeforeInterpolation" -> "text";
"escapeSingleQuotedText" -> "splitWith";
"escapeText" -> "escapeText_";
"escapeText_" -> "map";
"escapeText_" -> "text";
"eval" -> "conv";
"eval" -> "env";
"eval" -> "errorMsg";
"eval" -> "eval";
"eval" -> "expr";
"eval" -> "list";
"eval" -> "map";
"eval" -> "maybe";
"eval" -> "natural";
"eval" -> "normalize";
"eval" -> "null";
"eval" -> "output";
"eval" -> "parseAndLoad";
"eval" -> "src";
"eval" -> "textShow";
"eval" -> "typeCheck";
"eval" -> "vApp";
"eval" -> "vCombine";
"eval" -> "vCombineTypes";
"eval" -> "vField";
"eval" -> "vListAppend";
"eval" -> "vNaturalPlus";
"eval" -> "vPrefer";
"eval" -> "vProjectByFields";
"eval" -> "vTextReplace";
"eval" -> "vVar";
"eval" -> "vWith";
"expr" -> "exprA";
"expr" -> "import_";
"exprA" -> "completeExpression";
"exprA" -> "input";
"exprAndHeaderFromText" -> "count";
"exprAndHeaderFromText" -> "createHeader";
"exprAndHeaderFromText" -> "expr";
"exprAndHeaderFromText" -> "input";
"exprAndHeaderFromText" -> "laxSrcEq";
"exprAndHeaderFromText" -> "option";
"exprAndHeaderFromText" -> "plus";
"exprAndHeaderFromText" -> "pretty";
"exprAndHeaderFromText" -> "range";
"exprAndHeaderFromText" -> "satisfy";
"exprAndHeaderFromText" -> "star";
"exprAndHeaderFromText" -> "takeWhile1";
"exprAndHeaderFromText" -> "text";
"exprAndHeaderFromText" -> "toMap";
"exprAndHeaderFromText" -> "toMapWith";
"exprAndHeaderFromText" -> "whitespace";
"exprFromText" -> "exprAndHeaderFromText";
"exprFromText" -> "text";
"extractError" -> "showDhallErrors";
"extractUnionConstructor" -> "constructor";
"extractUnionConstructor" -> "empty";
"extractUnionConstructor" -> "options";
"extractUnionConstructor" -> "union";
"fetchFresh" -> "env";
"fetchFresh" -> "localToPath";
"fetchFresh" -> "string";
"fetchFresh" -> "throwMissingImport";
"fetchFromSemanticCache" -> "getCacheFile";
"fetchFromSemisemanticCache" -> "getCacheFile";
"fetchRemote" -> "remote";
"fetchRemote" -> "throwMissingImport";
"fetchRemote" -> "toHeaders";
"field" -> "expr";
"field" -> "typeError";
"fileTags" -> "getTagsFromText";
"file_" -> "empty";
"file_" -> "pathComponent";
"filter" -> "filterKeys";
"filterKeys" -> "alphaNormalize";
"filterKeys" -> "freeIn";
"filterKeys" -> "isNormalized";
"filterKeys" -> "isNormalizedWith";
"filterKeys" -> "judgmentallyEqual";
"filterKeys" -> "normalize";
"filterKeys" -> "normalizeWith";
"filterKeys" -> "normalizeWithM";
"filterKeys" -> "subst";
"finaliser" -> "quitMessage";
"firstPosFromExpr" -> "srcToLineColumn";
"foldMapWithKey" -> "toList";
"foldOf" -> "censor";
"foldOf" -> "createHeader";
"foldOf" -> "expr";
"foldOf" -> "exprA";
"foldOf" -> "exprAndHeaderFromText";
"foldOf" -> "exprFromText";
"forall" -> "syntax";
"forall" -> "token";
"format" -> "annToAnsiStyle";
"format" -> "censor";
"format" -> "command";
"format" -> "detectCharacterSet";
"format" -> "expr";
"format" -> "freeze";
"format" -> "freezeExpression";
"format" -> "freezeExpressionWithManager";
"format" -> "freezeImport";
"format" -> "freezeImportWithManager";
"format" -> "freezeRemoteImport";
"format" -> "freezeRemoteImportWithManager";
"format" -> "freezeWithManager";
"format" -> "hardline";
"format" -> "import_";
"format" -> "input";
"format" -> "text";
"freeIn" -> "cosmosOf";
"freeIn" -> "foldOf";
"freeIn" -> "mapMOf";
"freeIn" -> "rewriteMOf";
"freeIn" -> "rewriteOf";
"freeIn" -> "subst";
"freeIn" -> "to";
"freeIn" -> "transformMOf";
"freeIn" -> "transformOf";
"freeze" -> "freezeWithManager";
"freezeExpression" -> "freezeExpressionWithManager";
"freezeExpressionWithManager" -> "assertNoImports";
"freezeExpressionWithManager" -> "bindingExprs";
"freezeExpressionWithManager" -> "cache";
"freezeExpressionWithManager" -> "chainImport";
"freezeExpressionWithManager" -> "chainedChangeMode";
"freezeExpressionWithManager" -> "chainedFromLocalHere";
"freezeExpressionWithManager" -> "defaultNewManager";
"freezeExpressionWithManager" -> "dependencyToFile";
"freezeExpressionWithManager" -> "emptyStatus";
"freezeExpressionWithManager" -> "emptyStatusWithManager";
"freezeExpressionWithManager" -> "freezeImportWithManager";
"freezeExpressionWithManager" -> "freezeRemoteImportWithManager";
"freezeExpressionWithManager" -> "functionBindingExprs";
"freezeExpressionWithManager" -> "graph";
"freezeExpressionWithManager" -> "hashExpression";
"freezeExpressionWithManager" -> "hashExpressionToCode";
"freezeExpressionWithManager" -> "import_";
"freezeExpressionWithManager" -> "load";
"freezeExpressionWithManager" -> "loadRelativeTo";
"freezeExpressionWithManager" -> "loadRelativeToWithManager";
"freezeExpressionWithManager" -> "loadWith";
"freezeExpressionWithManager" -> "loadWithManager";
"freezeExpressionWithManager" -> "localToPath";
"freezeExpressionWithManager" -> "newManager";
"freezeExpressionWithManager" -> "normalizer";
"freezeExpressionWithManager" -> "recordFieldExprs";
"freezeExpressionWithManager" -> "remote";
"freezeExpressionWithManager" -> "stack";
"freezeExpressionWithManager" -> "startingContext";
"freezeExpressionWithManager" -> "substitutions";
"freezeExpressionWithManager" -> "toHeaders";
"freezeExpressionWithManager" -> "writeExpressionToSemanticCache";
"freezeImport" -> "freezeImportWithManager";
"freezeImportWithManager" -> "import_";
"freezeImportWithManager" -> "newManager";
"freezeRemoteImport" -> "freezeRemoteImportWithManager";
"freezeRemoteImportWithManager" -> "freezeImportWithManager";
"freezeRemoteImportWithManager" -> "import_";
"freezeRemoteImportWithManager" -> "newManager";
"freezeWithManager" -> "censor";
"freezeWithManager" -> "command";
"freezeWithManager" -> "detectCharacterSet";
"freezeWithManager" -> "freezeExpressionWithManager";
"freezeWithManager" -> "import_";
"freezeWithManager" -> "input";
"freezeWithManager" -> "newManager";
"freezeWithManager" -> "text";
"fromList" -> "append";
"fromList" -> "empty";
"fromList" -> "map";
"fromList" -> "nubOrd";
"fromListWithKey" -> "map";
"fromListWithKey" -> "nubOrd";
"fromMonadic" -> "_ERROR";
"fromMonadic" -> "showDhallErrors";
"fromMonadic" -> "to";
"function" -> "defaultInputNormalizer";
"function" -> "functionWith";
"functionBindingExprs" -> "label";
"generate" -> "fileTags";
"generate" -> "inputToFiles";
"generate" -> "map";
"generate" -> "showTags";
"genericAuto" -> "defaultInterpretOptions";
"genericAuto" -> "genericAutoWith";
"genericAutoWith" -> "defaultInputNormalizer";
"genericAutoWith" -> "options";
"genericAutoWith" -> "to";
"genericToDhall" -> "defaultInterpretOptions";
"genericToDhall" -> "genericToDhallWith";
"genericToDhallWith" -> "defaultInputNormalizer";
"genericToDhallWith" -> "getSelName";
"genericToDhallWith" -> "notEmptyRecord";
"genericToDhallWith" -> "notEmptyRecordLit";
"genericToDhallWith" -> "null";
"genericToDhallWith" -> "options";
"genericToDhallWith" -> "text";
"genericToDhallWith" -> "unsafeExpectRecord";
"genericToDhallWith" -> "unsafeExpectRecordLit";
"genericToDhallWith" -> "unsafeExpectUnion";
"genericToDhallWith" -> "unsafeExpectUnionLit";
"get" -> "censor";
"get" -> "input";
"get" -> "text";
"get" -> "throws";
"getCacheBaseDirectory" -> "empty";
"getCacheFile" -> "getOrCreateCacheDirectory";
"getExpression" -> "censor";
"getExpression" -> "get";
"getExpressionAndHeader" -> "censor";
"getExpressionAndHeader" -> "get";
"getExpressionAndHeaderFromStdinText" -> "censor";
"getExpressionAndHeaderFromStdinText" -> "dhallVersionString";
"getExpressionAndHeaderFromStdinText" -> "get";
"getOrCreateCacheDirectory" -> "empty";
"getOrCreateCacheDirectory" -> "getCacheBaseDirectory";
"getOrCreateCacheDirectory" -> "printWarning";
"getSelName" -> "genericToDhall";
"getSelName" -> "get";
"getSelName" -> "getSelName";
"getSelName" -> "options";
"getSelName" -> "typeError";
"getSelName" -> "unsafeExpectRecord";
"getTagsFromExpr" -> "firstPosFromExpr";
"getTagsFromExpr" -> "foldMapWithKey";
"getTagsFromExpr" -> "maybe";
"getTagsFromExpr" -> "src";
"getTagsFromExpr" -> "srcToLineColumn";
"getTagsFromText" -> "expr";
"getTagsFromText" -> "exprFromText";
"getTagsFromText" -> "fixPosAndDefinition";
"getTagsFromText" -> "getTagsFromExpr";
"h16" -> "hexdig";
"h16" -> "range";
"h16" -> "satisfy";
"hangingBraces" -> "comma";
"hangingBraces" -> "lbrace";
"hangingBraces" -> "map";
"hangingBraces" -> "rbrace";
"hardline" -> "token";
"hashBinding" -> "hashExpressionToCode";
"hashBinding" -> "normalize";
"hashBinding" -> "parseAndLoad";
"hashBinding" -> "src";
"hashBinding" -> "typeCheck";
"hashBinding" -> "writeOutputHandle";
"hashExpression" -> "encodeExpression";
"hashExpressionToCode" -> "expr";
"hashExpressionToCode" -> "hashExpression";
"hashMap" -> "list";
"hashMap" -> "pairFromMapEntry";
"hashSetFromDistinctList" -> "setHelper";
"hashSetIgnoringDuplicates" -> "list";
"headCharacter" -> "alpha";
"help" -> "syntax";
"helpOptions" -> "addBinding";
"helpOptions" -> "clearBindings";
"helpOptions" -> "cmdQuit";
"helpOptions" -> "dontCrash";
"helpOptions" -> "hashBinding";
"helpOptions" -> "help";
"helpOptions" -> "helpOptions";
"helpOptions" -> "loadBinding";
"helpOptions" -> "parseAssignment";
"helpOptions" -> "saveBinding";
"helpOptions" -> "setOption";
"helpOptions" -> "trim";
"helpOptions" -> "typeOf";
"helpOptions" -> "unsetOption";
"host" -> "domain";
"host" -> "ipLiteral";
"host" -> "ipV4Address";
"http" -> "_using";
"http" -> "httpRaw";
"http" -> "importExpression";
"http" -> "import_";
"http" -> "nonemptyWhitespace";
"http" -> "whitespace";
"httpRaw" -> "authority_";
"httpRaw" -> "file_";
"httpRaw" -> "query_";
"httpRaw" -> "scheme_";
"identifier" -> "_at";
"identifier" -> "label";
"identifier" -> "naturalLiteral";
"identifier" -> "whitespace";
"importExpression" -> "forall";
"importExpression" -> "parsers";
"importHash_" -> "count";
"importHash_" -> "hexdig";
"importHash_" -> "satisfy";
"importHash_" -> "string";
"importHash_" -> "text";
"importHashed_" -> "importHash_";
"importHashed_" -> "importType_";
"importHashed_" -> "nonemptyWhitespace";
"importType_" -> "env";
"importType_" -> "http";
"importType_" -> "local";
"importType_" -> "missing";
"import_" -> "_Bool";
"import_" -> "_Double";
"import_" -> "_DoubleShow";
"import_" -> "_False";
"import_" -> "_Integer";
"import_" -> "_IntegerClamp";
"import_" -> "_IntegerNegate";
"import_" -> "_IntegerShow";
"import_" -> "_IntegerToDouble";
"import_" -> "_Kind";
"import_" -> "_List";
"import_" -> "_ListBuild";
"import_" -> "_ListFold";
"import_" -> "_ListHead";
"import_" -> "_ListIndexed";
"import_" -> "_ListLast";
"import_" -> "_ListLength";
"import_" -> "_ListReverse";
"import_" -> "_Location";
"import_" -> "_NaN";
"import_" -> "_Natural";
"import_" -> "_NaturalBuild";
"import_" -> "_NaturalEven";
"import_" -> "_NaturalFold";
"import_" -> "_NaturalIsZero";
"import_" -> "_NaturalOdd";
"import_" -> "_NaturalShow";
"import_" -> "_NaturalSubtract";
"import_" -> "_NaturalToInteger";
"import_" -> "_None";
"import_" -> "_Optional";
"import_" -> "_Some";
"import_" -> "_Sort";
"import_" -> "_Text";
"import_" -> "_TextReplace";
"import_" -> "_TextShow";
"import_" -> "_True";
"import_" -> "_Type";
"import_" -> "_and";
"import_" -> "_arrow";
"import_" -> "_as";
"import_" -> "_assert";
"import_" -> "_at";
"import_" -> "_bar";
"import_" -> "_closeAngle";
"import_" -> "_closeBrace";
"import_" -> "_closeBracket";
"import_" -> "_closeParens";
"import_" -> "_colon";
"import_" -> "_combine";
"import_" -> "_combineTypes";
"import_" -> "_comma";
"import_" -> "_dot";
"import_" -> "_doubleColon";
"import_" -> "_doubleEqual";
"import_" -> "_else";
"import_" -> "_equal";
"import_" -> "_equivalent";
"import_" -> "_forall";
"import_" -> "_if";
"import_" -> "_importAlt";
"import_" -> "_in";
"import_" -> "_lambda";
"import_" -> "_let";
"import_" -> "_listAppend";
"import_" -> "_merge";
"import_" -> "_missing";
"import_" -> "_notEqual";
"import_" -> "_openAngle";
"import_" -> "_openBrace";
"import_" -> "_openBracket";
"import_" -> "_openParens";
"import_" -> "_or";
"import_" -> "_plus";
"import_" -> "_prefer";
"import_" -> "_textAppend";
"import_" -> "_then";
"import_" -> "_times";
"import_" -> "_toMap";
"import_" -> "_using";
"import_" -> "_with";
"import_" -> "anyLabel";
"import_" -> "anyLabelOrSome";
"import_" -> "bashEnvironmentVariable";
"import_" -> "blockComment";
"import_" -> "char";
"import_" -> "doubleInfinity";
"import_" -> "doubleLiteral";
"import_" -> "file_";
"import_" -> "hexNumber";
"import_" -> "hexdig";
"import_" -> "httpRaw";
"import_" -> "identifier";
"import_" -> "importHashed_";
"import_" -> "integerLiteral";
"import_" -> "label";
"import_" -> "labels";
"import_" -> "lineComment";
"import_" -> "naturalLiteral";
"import_" -> "nonemptyWhitespace";
"import_" -> "posixEnvironmentVariable";
"import_" -> "text";
"import_" -> "validCodepoint";
"import_" -> "whitespace";
"infer" -> "addType";
"infer" -> "addTypeValue";
"infer" -> "axiom";
"infer" -> "combine";
"infer" -> "combineTypes";
"infer" -> "ctxToContext";
"infer" -> "duplicateElement";
"infer" -> "eval";
"infer" -> "forall";
"infer" -> "fresh";
"infer" -> "list";
"infer" -> "match";
"infer" -> "natural";
"infer" -> "quote";
"infer" -> "rule";
"infer" -> "sequence";
"infer" -> "text";
"infer" -> "traverseWithIndex_";
"infer" -> "typesToNames";
"infixr" -> "addConstructorModifier";
"infixr" -> "addFieldModifier";
"infixr" -> "dropPrefix";
"infixr" -> "setSingletonConstructors";
"inject" -> "defaultInputNormalizer";
"input" -> "defaultInputSettings";
"input" -> "inputWithSettings";
"inputExpr" -> "defaultInputSettings";
"inputExpr" -> "inputExprWithSettings";
"inputExprWithSettings" -> "inputHelper";
"inputFile" -> "defaultEvaluateSettings";
"inputFile" -> "inputFileWithSettings";
"inputFileWithSettings" -> "inputWithSettings";
"inputFileWithSettings" -> "text";
"inputHelper" -> "expr";
"inputHelper" -> "normalizer";
"inputHelper" -> "sourceName";
"inputHelper" -> "startingContext";
"inputHelper" -> "substitutions";
"inputToFiles" -> "checkContext";
"inputToFiles" -> "filter";
"inputToFiles" -> "maybe";
"inputToFiles" -> "messageExpressions";
"inputToFiles" -> "prettyTypeMessage";
"inputToFiles" -> "typeOf";
"inputToFiles" -> "typeWith";
"inputToFiles" -> "typeWithA";
"inputWithSettings" -> "inputHelper";
"insert" -> "snipDoc";
"insert" -> "string";
"instantiate" -> "env";
"instantiate" -> "eval";
"int" -> "intHelper";
"int16" -> "intHelper";
"int32" -> "intHelper";
"int64" -> "intHelper";
"int8" -> "intHelper";
"intHelper" -> "expr";
"intHelper" -> "extractError";
"intHelper" -> "typeError";
"integer" -> "expr";
"integer" -> "forall";
"integer" -> "typeError";
"integerLiteral" -> "naturalLiteral";
"integerLiteral" -> "signPrefix";
"internalError" -> "_ERROR";
"internalError" -> "makeHaskellTypeFromUnion";
"internalError" -> "makeHaskellTypes";
"internalError" -> "staticDhallExpression";
"internalError" -> "text";
"intersection" -> "filterKeys";
"intersectionWith" -> "combine";
"intersectionWith" -> "filterKeys";
"ipLiteral" -> "ipV6Address";
"ipLiteral" -> "ipVFuture";
"ipV4Address" -> "decOctet";
"ipV6Address" -> "count";
"ipV6Address" -> "h16";
"ipV6Address" -> "ls32";
"ipV6Address" -> "option";
"ipV6Address" -> "range";
"ipVFuture" -> "hexdig";
"ipVFuture" -> "plus";
"ipVFuture" -> "satisfy";
"ipVFuture" -> "subDelims";
"ipVFuture" -> "unreserved";
"isNormalized" -> "null";
"isNormalizedWith" -> "normalizeWith";
"isOrContainsAssert" -> "isOrContainsAssert";
"isOrContainsAssert" -> "subExpressions";
"isSorted" -> "toList";
"isSorted" -> "toSet";
"judgmentallyEqual" -> "conv";
"judgmentallyEqual" -> "eval";
"keyword" -> "text";
"keyword" -> "token";
"keyword" -> "void";
"label" -> "backtickLabel";
"label" -> "simpleLabel";
"labels" -> "_closeBrace";
"labels" -> "_comma";
"labels" -> "_openBrace";
"labels" -> "anyLabelOrSome";
"labels" -> "whitespace";
"lambda" -> "syntax";
"lambda" -> "token";
"langle" -> "syntax";
"langle" -> "token";
"laxSrcEq" -> "char";
"laxSrcEq" -> "empty";
"laxSrcEq" -> "label";
"laxSrcEq" -> "satisfy";
"laxSrcEq" -> "string";
"laxSrcEq" -> "text";
"laxSrcEq" -> "token";
"layout" -> "layoutOpts";
"layoutOpts" -> "normalize";
"layoutOpts" -> "repl";
"lazyText" -> "strictText";
"lbrace" -> "syntax";
"lbrace" -> "token";
"lbracket" -> "syntax";
"lbracket" -> "token";
"lineComment" -> "text";
"lineComment" -> "void";
"linesLiteral" -> "linesLiteral";
"linesLiteral" -> "splitOn";
"lint" -> "addPreludeExtensions";
"lint" -> "fixAssert";
"lint" -> "fixParentPath";
"lint" -> "removeLetInLet";
"lint" -> "removeUnusedBindings";
"lint" -> "subExpressions";
"list" -> "comma";
"list" -> "duplicate";
"list" -> "enclose";
"list" -> "lbracket";
"list" -> "rbracket";
"list" -> "sequence";
"load" -> "defaultNewManager";
"load" -> "loadWithManager";
"loadBinding" -> "currentSaveFile";
"loadBinding" -> "get";
"loadBinding" -> "loadBinding";
"loadBinding" -> "lookup";
"loadBinding" -> "options";
"loadBinding" -> "optionsPrefix";
"loadBinding" -> "saveFilePrefix";
"loadBinding" -> "writeOutputHandle";
"loadImport" -> "cache";
"loadImport" -> "import_";
"loadImport" -> "loadImportWithSemanticCache";
"loadImportWithSemanticCache" -> "cacheWarning";
"loadImportWithSemanticCache" -> "encodeExpression";
"loadImportWithSemanticCache" -> "fetchFromSemanticCache";
"loadImportWithSemanticCache" -> "hashExpression";
"loadImportWithSemanticCache" -> "import_";
"loadImportWithSemanticCache" -> "loadImportWithSemisemanticCache";
"loadImportWithSemanticCache" -> "makeHashMismatchMessage";
"loadImportWithSemanticCache" -> "map";
"loadImportWithSemanticCache" -> "printWarning";
"loadImportWithSemanticCache" -> "throwMissingImport";
"loadImportWithSemanticCache" -> "writeToSemanticCache";
"loadImportWithSemisemanticCache" -> "cacheWarning";
"loadImportWithSemisemanticCache" -> "computeSemisemanticHash";
"loadImportWithSemisemanticCache" -> "encodeExpression";
"loadImportWithSemisemanticCache" -> "env";
"loadImportWithSemisemanticCache" -> "expr";
"loadImportWithSemisemanticCache" -> "fetchFresh";
"loadImportWithSemisemanticCache" -> "fetchFromSemisemanticCache";
"loadImportWithSemisemanticCache" -> "loadWith";
"loadImportWithSemisemanticCache" -> "local";
"loadImportWithSemisemanticCache" -> "localToPath";
"loadImportWithSemisemanticCache" -> "text";
"loadImportWithSemisemanticCache" -> "throwMissingImport";
"loadImportWithSemisemanticCache" -> "writeToSemisemanticCache";
"loadRelativeTo" -> "defaultNewManager";
"loadRelativeTo" -> "loadRelativeToWithManager";
"loadRelativeToWithManager" -> "emptyStatusWithManager";
"loadRelativeToWithManager" -> "loadWith";
"loadRelativeToWithManager" -> "newManager";
"loadRelativeToWithManager" -> "rootDirectory";
"loadWith" -> "bindingExprs";
"loadWith" -> "chainImport";
"loadWith" -> "expr";
"loadWith" -> "functionBindingExprs";
"loadWith" -> "graph";
"loadWith" -> "loadImport";
"loadWith" -> "loadWith";
"loadWith" -> "local";
"loadWith" -> "parent";
"loadWith" -> "recordFieldExprs";
"loadWith" -> "stack";
"loadWith" -> "text";
"loadWith" -> "throwMissingImport";
"loadWithManager" -> "loadRelativeToWithManager";
"loadWithManager" -> "newManager";
"local" -> "localOnly";
"localOnly" -> "file_";
"localToPath" -> "file_";
"localToPath" -> "map";
"longTypeMessage" -> "prettyTypeMessage";
"longestSharedWhitespacePrefix" -> "emptyLine";
"longestSharedWhitespacePrefix" -> "filter";
"longestSharedWhitespacePrefix" -> "leadingSpaces";
"lookup" -> "lookup";
"lparen" -> "syntax";
"lparen" -> "token";
"ls32" -> "h16";
"ls32" -> "ipV4Address";
"main" -> "delete";
"main" -> "difference";
"main" -> "elems";
"main" -> "empty";
"main" -> "filter";
"main" -> "foldMapWithKey";
"main" -> "fromList";
"main" -> "fromListWithKey";
"main" -> "fromMap";
"main" -> "insert";
"main" -> "insertWith";
"main" -> "intersection";
"main" -> "intersectionWith";
"main" -> "isSorted";
"main" -> "keys";
"main" -> "keysSet";
"main" -> "lookup";
"main" -> "mapMaybe";
"main" -> "mapWithKey";
"main" -> "member";
"main" -> "null";
"main" -> "options";
"main" -> "outerJoin";
"main" -> "parserInfoOptions";
"main" -> "restrictKeys";
"main" -> "singleton";
"main" -> "size";
"main" -> "sort";
"main" -> "toAscList";
"main" -> "toList";
"main" -> "toMap";
"main" -> "traverseWithKey";
"main" -> "uncons";
"main" -> "union";
"main" -> "unionWith";
"main" -> "unorderedFromList";
"main" -> "unorderedSingleton";
"main" -> "unorderedTraverseWithKey";
"main" -> "unorderedTraverseWithKey_";
"main" -> "withoutKeys";
"makeFieldSelection" -> "label";
"makeFieldSelection" -> "pretty";
"makeFieldSelection" -> "prettyExpr";
"makeFieldSelection" -> "unsafeSubExpressions";
"makeFunctionBinding" -> "label";
"makeHaskellTypeFromUnion" -> "makeHaskellTypes";
"makeHaskellTypes" -> "generate";
"makeHaskellTypes" -> "toDeclaration";
"makeKeyValue" -> "expr";
"makeKeyValue" -> "keys";
"map" -> "list";
"map" -> "pairFromMapEntry";
"mapMaybe" -> "filterKeys";
"maybe" -> "expr";
"maybe" -> "typeError";
"messageExpressions" -> "pretty";
"messageExpressions" -> "prettyDetailedTypeError";
"mismatch" -> "difference";
"mismatch" -> "skeleton";
"missing" -> "_missing";
"multiLet" -> "multiLet";
"multilineChunks" -> "escapeControlCharacters";
"multilineChunks" -> "escapeSharedWhitespacePrefix";
"multilineChunks" -> "escapeSingleQuoteBeforeInterpolation";
"multilineChunks" -> "escapeSingleQuotedText";
"multilineChunks" -> "escapeTrailingSingleQuote";
"natural" -> "expr";
"natural" -> "typeError";
"naturalLiteral" -> "char";
"naturalLiteral" -> "digit";
"nextSaveFile" -> "currentSaveFileIndex";
"nextSaveFile" -> "maybe";
"nextSaveFile" -> "saveFilePrefix";
"nf" -> "env";
"nf" -> "envNames";
"nf" -> "eval";
"nf" -> "quote";
"nonemptyWhitespace" -> "whitespaceChunk";
"normalize" -> "applyContext";
"normalize" -> "env";
"normalize" -> "envToContext";
"normalize" -> "get";
"normalize" -> "nf";
"normalizeHeaders" -> "loadWith";
"normalizeHeaders" -> "throwMissingImport";
"normalizeWith" -> "normalizeWithM";
"normalizeWithM" -> "bool";
"normalizeWithM" -> "boundedType";
"normalizeWithM" -> "empty";
"normalizeWithM" -> "expr";
"normalizeWithM" -> "list";
"normalizeWithM" -> "map";
"normalizeWithM" -> "null";
"normalizeWithM" -> "subst";
"notEmptyRecord" -> "null";
"notEmptyRecordLit" -> "null";
"noted" -> "laxSrcEq";
"noted" -> "src";
"operator" -> "reserved";
"operator" -> "syntax";
"operator" -> "token";
"operatorChar" -> "reservedChar";
"options" -> "helpOptions";
"output" -> "expr";
"output" -> "outputWithoutSpacing";
"output" -> "writeOutputHandle";
"outputWithoutSpacing" -> "censor";
"outputWithoutSpacing" -> "expr";
"outputWithoutSpacing" -> "get";
"outputWithoutSpacing" -> "input";
"outputWithoutSpacing" -> "rewriteWithSchemas";
"outputWithoutSpacing" -> "schemasCommand";
"pair" -> "bool";
"pair" -> "double";
"pair" -> "expr";
"pair" -> "functionWith";
"pair" -> "genericAuto";
"pair" -> "hashSetFromDistinctList";
"pair" -> "int";
"pair" -> "int16";
"pair" -> "int32";
"pair" -> "int64";
"pair" -> "int8";
"pair" -> "integer";
"pair" -> "lazyText";
"pair" -> "list";
"pair" -> "maybe";
"pair" -> "natural";
"pair" -> "scientific";
"pair" -> "sequence";
"pair" -> "setFromDistinctList";
"pair" -> "strictText";
"pair" -> "string";
"pair" -> "typeError";
"pair" -> "unit";
"pair" -> "vector";
"pair" -> "void";
"pair" -> "word";
"pair" -> "word16";
"pair" -> "word32";
"pair" -> "word64";
"pair" -> "word8";
"pairFromMapEntry" -> "expr";
"pairFromMapEntry" -> "typeError";
"parent" -> "env";
"parent" -> "parent";
"parent" -> "pretty";
"parent" -> "prettyEnvironmentVariable";
"parseAndLoad" -> "src";
"parseAssignment" -> "expr";
"parseAssignment" -> "trim";
"parseMode" -> "subcommand";
"parseOptions" -> "parseMode";
"parserInfoOptions" -> "parseOptions";
"parsers" -> "_Bool";
"parsers" -> "_Double";
"parsers" -> "_DoubleShow";
"parsers" -> "_False";
"parsers" -> "_Integer";
"parsers" -> "_IntegerClamp";
"parsers" -> "_IntegerNegate";
"parsers" -> "_IntegerShow";
"parsers" -> "_IntegerToDouble";
"parsers" -> "_Kind";
"parsers" -> "_List";
"parsers" -> "_ListBuild";
"parsers" -> "_ListFold";
"parsers" -> "_ListHead";
"parsers" -> "_ListIndexed";
"parsers" -> "_ListLast";
"parsers" -> "_ListLength";
"parsers" -> "_ListReverse";
"parsers" -> "_NaN";
"parsers" -> "_Natural";
"parsers" -> "_NaturalBuild";
"parsers" -> "_NaturalEven";
"parsers" -> "_NaturalFold";
"parsers" -> "_NaturalIsZero";
"parsers" -> "_NaturalOdd";
"parsers" -> "_NaturalShow";
"parsers" -> "_NaturalSubtract";
"parsers" -> "_NaturalToInteger";
"parsers" -> "_None";
"parsers" -> "_Optional";
"parsers" -> "_Some";
"parsers" -> "_Sort";
"parsers" -> "_Text";
"parsers" -> "_TextReplace";
"parsers" -> "_TextShow";
"parsers" -> "_True";
"parsers" -> "_Type";
"parsers" -> "_and";
"parsers" -> "_arrow";
"parsers" -> "_assert";
"parsers" -> "_bar";
"parsers" -> "_closeAngle";
"parsers" -> "_closeBrace";
"parsers" -> "_closeBracket";
"parsers" -> "_closeParens";
"parsers" -> "_colon";
"parsers" -> "_combine";
"parsers" -> "_combineTypes";
"parsers" -> "_comma";
"parsers" -> "_dot";
"parsers" -> "_doubleColon";
"parsers" -> "_doubleEqual";
"parsers" -> "_else";
"parsers" -> "_equal";
"parsers" -> "_equivalent";
"parsers" -> "_forall";
"parsers" -> "_if";
"parsers" -> "_importAlt";
"parsers" -> "_in";
"parsers" -> "_lambda";
"parsers" -> "_let";
"parsers" -> "_listAppend";
"parsers" -> "_merge";
"parsers" -> "_notEqual";
"parsers" -> "_openAngle";
"parsers" -> "_openBrace";
"parsers" -> "_openBracket";
"parsers" -> "_openParens";
"parsers" -> "_or";
"parsers" -> "_plus";
"parsers" -> "_prefer";
"parsers" -> "_textAppend";
"parsers" -> "_then";
"parsers" -> "_times";
"parsers" -> "_toMap";
"parsers" -> "_with";
"parsers" -> "anyLabel";
"parsers" -> "anyLabelOrSome";
"parsers" -> "builtin";
"parsers" -> "char";
"parsers" -> "combine";
"parsers" -> "doubleInfinity";
"parsers" -> "doubleLiteral";
"parsers" -> "empty";
"parsers" -> "field";
"parsers" -> "getOffset";
"parsers" -> "hexNumber";
"parsers" -> "identifier";
"parsers" -> "integerLiteral";
"parsers" -> "keys";
"parsers" -> "label";
"parsers" -> "labels";
"parsers" -> "literal";
"parsers" -> "makeRecordField";
"parsers" -> "naturalLiteral";
"parsers" -> "nonemptyWhitespace";
"parsers" -> "noted";
"parsers" -> "satisfy";
"parsers" -> "setOffset";
"parsers" -> "shallowDenote";
"parsers" -> "src";
"parsers" -> "srcAnd";
"parsers" -> "text";
"parsers" -> "toMap";
"parsers" -> "toMapWith";
"parsers" -> "validCodepoint";
"parsers" -> "void";
"parsers" -> "whitespace";
"pathComponent" -> "char";
"pathComponent" -> "pchar";
"pathComponent" -> "quotedPathCharacter";
"pathComponent" -> "star";
"pchar" -> "pctEncoded";
"pchar" -> "satisfy";
"pchar" -> "subDelims";
"pchar" -> "unreserved";
"pctEncoded" -> "count";
"pctEncoded" -> "hexdig";
"pctEncoded" -> "satisfy";
"pipe" -> "syntax";
"pipe" -> "token";
"plus" -> "star";
"port" -> "digit";
"port" -> "satisfy";
"port" -> "star";
"posixEnvironmentVariable" -> "plus";
"posixEnvironmentVariable" -> "posixEnvironmentVariableCharacter";
"posixEnvironmentVariableCharacter" -> "char";
"posixEnvironmentVariableCharacter" -> "empty";
"posixEnvironmentVariableCharacter" -> "satisfy";
"pretty" -> "pretty_";
"prettyAnyLabel" -> "list";
"prettyAnyLabel" -> "prettyLabelShared";
"prettyAnyLabels" -> "dot";
"prettyAnyLabels" -> "keys";
"prettyAnyLabels" -> "map";
"prettyAnyLabels" -> "prettyAnyLabel";
"prettyAnyLabels" -> "renderSrcMaybe";
"prettyAnyLabels" -> "toList";
"prettyCharacterSet" -> "prettyPrinters";
"prettyConst" -> "builtin";
"prettyDetailedTypeError" -> "expr";
"prettyDetailedTypeError" -> "longTypeMessage";
"prettyDetailedTypeError" -> "map";
"prettyDetailedTypeError" -> "null";
"prettyDetailedTypeError" -> "pretty";
"prettyDouble" -> "literal";
"prettyEnvironmentVariable" -> "escapeEnvironmentVariable";
"prettyExpr" -> "denote";
"prettyExpr" -> "prettySrcExpr";
"prettyImportExpression" -> "prettyPrinters";
"prettyInt" -> "literal";
"prettyLabel" -> "prettyLabelShared";
"prettyLabelShared" -> "escapeLabel";
"prettyLabelShared" -> "label";
"prettyLabels" -> "braces";
"prettyLabels" -> "duplicate";
"prettyLabels" -> "lbrace";
"prettyLabels" -> "map";
"prettyLabels" -> "null";
"prettyLabels" -> "prettyAnyLabel";
"prettyLabels" -> "rbrace";
"prettyNatural" -> "literal";
"prettyNumber" -> "literal";
"prettyPathComponent" -> "pathCharacter";
"prettyPathComponent" -> "pretty";
"prettyPathComponent" -> "prettyImportExpression";
"prettyPathComponent" -> "prettyPathComponent";
"prettyPathComponent" -> "prettyURIComponent";
"prettyPathComponent" -> "text";
"prettyPrinters" -> "angles";
"prettyPrinters" -> "arrows";
"prettyPrinters" -> "braces";
"prettyPrinters" -> "builtin";
"prettyPrinters" -> "colon";
"prettyPrinters" -> "combine";
"prettyPrinters" -> "combineTypes";
"prettyPrinters" -> "consolidateRecordLiteral";
"prettyPrinters" -> "containsComment";
"prettyPrinters" -> "dollar";
"prettyPrinters" -> "dot";
"prettyPrinters" -> "doubleColon";
"prettyPrinters" -> "duplicate";
"prettyPrinters" -> "enclose\'";
"prettyPrinters" -> "equals";
"prettyPrinters" -> "equivalent";
"prettyPrinters" -> "escapeText_";
"prettyPrinters" -> "forall";
"prettyPrinters" -> "hangingBraces";
"prettyPrinters" -> "keys";
"prettyPrinters" -> "keyword";
"prettyPrinters" -> "lambda";
"prettyPrinters" -> "lbrace";
"prettyPrinters" -> "list";
"prettyPrinters" -> "literal";
"prettyPrinters" -> "lparen";
"prettyPrinters" -> "makeKeyValue";
"prettyPrinters" -> "map";
"prettyPrinters" -> "multiLet";
"prettyPrinters" -> "multilineChunks";
"prettyPrinters" -> "null";
"prettyPrinters" -> "operator";
"prettyPrinters" -> "prefer";
"prettyPrinters" -> "preserveSource";
"prettyPrinters" -> "prettyAnyLabel";
"prettyPrinters" -> "prettyAnyLabels";
"prettyPrinters" -> "prettyConst";
"prettyPrinters" -> "prettyDouble";
"prettyPrinters" -> "prettyLabel";
"prettyPrinters" -> "prettyLabels";
"prettyPrinters" -> "prettyNatural";
"prettyPrinters" -> "prettyNumber";
"prettyPrinters" -> "prettyVar";
"prettyPrinters" -> "rbrace";
"prettyPrinters" -> "renderSrc";
"prettyPrinters" -> "renderSrcMaybe";
"prettyPrinters" -> "rparen";
"prettyPrinters" -> "shallowDenote";
"prettyPrinters" -> "syntax";
"prettyPrinters" -> "text";
"prettyPrinters" -> "toList";
"prettySrcExpr" -> "prettyCharacterSet";
"prettyToStrictText" -> "docToStrictText";
"prettyToString" -> "layout";
"prettyTypeError" -> "censorTypeError";
"prettyTypeError" -> "expr";
"prettyTypeError" -> "pretty";
"prettyTypeError" -> "shortTypeMessage";
"prettyTypeMessage" -> "append";
"prettyTypeMessage" -> "auto";
"prettyTypeMessage" -> "buildBooleanOperator";
"prettyTypeMessage" -> "buildNaturalOperator";
"prettyTypeMessage" -> "builtin";
"prettyTypeMessage" -> "combine";
"prettyTypeMessage" -> "constructor";
"prettyTypeMessage" -> "empty";
"prettyTypeMessage" -> "equivalent";
"prettyTypeMessage" -> "expr";
"prettyTypeMessage" -> "field";
"prettyTypeMessage" -> "forall";
"prettyTypeMessage" -> "function";
"prettyTypeMessage" -> "get";
"prettyTypeMessage" -> "identifier";
"prettyTypeMessage" -> "ignore";
"prettyTypeMessage" -> "infer";
"prettyTypeMessage" -> "input";
"prettyTypeMessage" -> "insert";
"prettyTypeMessage" -> "keys";
"prettyTypeMessage" -> "label";
"prettyTypeMessage" -> "list";
"prettyTypeMessage" -> "literal";
"prettyTypeMessage" -> "map";
"prettyTypeMessage" -> "match";
"prettyTypeMessage" -> "missing";
"prettyTypeMessage" -> "operator";
"prettyTypeMessage" -> "output";
"prettyTypeMessage" -> "pretty";
"prettyTypeMessage" -> "record";
"prettyTypeMessage" -> "reserved";
"prettyTypeMessage" -> "sort";
"prettyTypeMessage" -> "string";
"prettyTypeMessage" -> "to";
"prettyTypeMessage" -> "toMap";
"prettyTypeMessage" -> "toPath";
"prettyTypeMessage" -> "union";
"prettyTypeMessage" -> "will";
"prettyURIComponent" -> "text";
"prettyVar" -> "label";
"prettyVar" -> "prettyInt";
"prettyVar" -> "prettyLabel";
"pretty_" -> "prettyToStrictText";
"query_" -> "pchar";
"query_" -> "satisfy";
"query_" -> "star";
"quote" -> "countNames";
"quote" -> "env";
"quote" -> "errorMsg";
"quote" -> "fresh";
"quote" -> "instantiate";
"quote" -> "quote";
"range" -> "count";
"rangle" -> "syntax";
"rangle" -> "token";
"rarrow" -> "syntax";
"rarrow" -> "token";
"rawInput" -> "empty";
"rawInput" -> "expr";
"rbrace" -> "syntax";
"rbrace" -> "token";
"rbracket" -> "syntax";
"rbracket" -> "token";
"removeUnusedBindings" -> "isOrContainsAssert";
"renderComment" -> "filter";
"renderComment" -> "map";
"renderComment" -> "text";
"renderSrc" -> "isWhitespace";
"renderSrc" -> "renderComment";
"renderSrcMaybe" -> "isWhitespace";
"renderSrcMaybe" -> "renderComment";
"renderURL" -> "_ERROR";
"renderURL" -> "getExpression";
"renderURL" -> "getExpressionAndHeader";
"renderURL" -> "getExpressionAndHeaderFromStdinText";
"renderURL" -> "insert";
"renderURL" -> "renderComponent";
"renderURL" -> "renderQuery";
"renderURL" -> "snip";
"renderURL" -> "snipDoc";
"repl" -> "completer";
"repl" -> "dontCrash";
"repl" -> "emptyEnv";
"repl" -> "eval";
"repl" -> "finaliser";
"repl" -> "greeter";
"repl" -> "options";
"repl" -> "optionsPrefix";
"replicateDecoder" -> "empty";
"replicateDecoder" -> "insert";
"replicateDecoder" -> "lookup";
"replicateDecoder" -> "match";
"replicateDecoder" -> "toList";
"reserved" -> "text";
"reserved" -> "void";
"reservedChar" -> "char";
"reservedChar" -> "void";
"reservedIdentifiers" -> "reservedKeywords";
"restrictKeys" -> "filterKeys";
"resultToFix" -> "expr";
"resultToFix" -> "resultToFix";
"resultToFix" -> "typeError";
"rewriteMOf" -> "maybe";
"rewriteMOf" -> "transformMOf";
"rewriteOf" -> "maybe";
"rewriteOf" -> "transformOf";
"rewriteWithSchemas" -> "append";
"rewriteWithSchemas" -> "decodeSchemas";
"rewriteWithSchemas" -> "diff";
"rewriteWithSchemas" -> "difference";
"rewriteWithSchemas" -> "empty";
"rewriteWithSchemas" -> "fromList";
"rewriteWithSchemas" -> "fromSet";
"rewriteWithSchemas" -> "isSorted";
"rewriteWithSchemas" -> "null";
"rewriteWithSchemas" -> "size";
"rewriteWithSchemas" -> "sort";
"rewriteWithSchemas" -> "substitutions";
"rewriteWithSchemas" -> "toAscList";
"rewriteWithSchemas" -> "toList";
"rewriteWithSchemas" -> "toSeq";
"rewriteWithSchemas" -> "toSet";
"rparen" -> "syntax";
"rparen" -> "token";
"saveBinding" -> "env";
"saveBinding" -> "expr";
"saveBinding" -> "get";
"saveBinding" -> "label";
"saveBinding" -> "nextSaveFile";
"saveBinding" -> "normalize";
"saveBinding" -> "output";
"saveBinding" -> "outputWithoutSpacing";
"saveBinding" -> "parseAndLoad";
"saveBinding" -> "saveBinding";
"saveBinding" -> "src";
"saveBinding" -> "typeCheck";
"saveBinding" -> "writeOutputHandle";
"schemasCommand" -> "censor";
"schemasCommand" -> "command";
"schemasCommand" -> "detectCharacterSet";
"schemasCommand" -> "input";
"schemasCommand" -> "rewriteWithSchemas";
"scientific" -> "double";
"sequence" -> "expr";
"sequence" -> "typeError";
"setFromDistinctList" -> "setHelper";
"setHelper" -> "expr";
"setHelper" -> "extractError";
"setHelper" -> "size";
"setHelper" -> "toSet";
"setHelper" -> "typeError";
"setIgnoringDuplicates" -> "list";
"setOption" -> "writeOutputHandle";
"setSingletonConstructors" -> "diff";
"setSingletonConstructors" -> "diffNormalized";
"setSingletonConstructors" -> "options";
"setSingletonConstructors" -> "string";
"shallowDenote" -> "shallowDenote";
"shift" -> "shift";
"shift" -> "subExpressions";
"shortTypeMessage" -> "prettyTypeMessage";
"showFileTags" -> "map";
"showFileTags" -> "showInt";
"showFileTags" -> "showPosTag";
"showPosTag" -> "showInt";
"showTags" -> "map";
"showTags" -> "showFileTags";
"signPrefix" -> "char";
"simpleLabel" -> "headCharacter";
"simpleLabel" -> "reservedIdentifiers";
"simpleLabel" -> "reservedKeywords";
"simpleLabel" -> "tailCharacter";
"size" -> "pretty";
"size" -> "text";
"skeleton" -> "colon";
"skeleton" -> "dot";
"skeleton" -> "elems";
"skeleton" -> "equals";
"skeleton" -> "ignore";
"skeleton" -> "keyword";
"skeleton" -> "lambda";
"skeleton" -> "langle";
"skeleton" -> "lbrace";
"skeleton" -> "lbracket";
"skeleton" -> "lparen";
"skeleton" -> "null";
"skeleton" -> "operator";
"skeleton" -> "rangle";
"skeleton" -> "rarrow";
"skeleton" -> "rbrace";
"skeleton" -> "rbracket";
"skeleton" -> "rparen";
"skeleton" -> "textSkeleton";
"skeleton" -> "token";
"snip" -> "filter";
"snip" -> "leadingSpaces";
"snip" -> "map";
"snip" -> "takeEnd";
"snip" -> "text";
"snipDoc" -> "snip";
"snipDoc" -> "text";
"splitOnPredicate" -> "splitOnPredicate";
"splitOnPredicate" -> "text";
"star" -> "plus";
"staticDhallExpression" -> "text";
"strictText" -> "expr";
"strictText" -> "typeError";
"string" -> "lazyText";
"subExpressions" -> "bindingExprs";
"subExpressions" -> "functionBindingExprs";
"subExpressions" -> "recordFieldExprs";
"subExpressions" -> "unsafeSubExpressions";
"subcommand" -> "groupDescription";
"subst" -> "subst";
"substitute" -> "bindingExprs";
"substitute" -> "chunkExprs";
"substitute" -> "denote";
"substitute" -> "desugarWith";
"substitute" -> "expr";
"substitute" -> "functionBindingExprs";
"substitute" -> "internalError";
"substitute" -> "linesLiteral";
"substitute" -> "longestSharedWhitespacePrefix";
"substitute" -> "makeBinding";
"substitute" -> "makeFieldSelection";
"substitute" -> "makeFunctionBinding";
"substitute" -> "makeRecordField";
"substitute" -> "multiLet";
"substitute" -> "pathCharacter";
"substitute" -> "pretty";
"substitute" -> "prettyConst";
"substitute" -> "prettyVar";
"substitute" -> "recordFieldExprs";
"substitute" -> "renote";
"substitute" -> "reservedIdentifiers";
"substitute" -> "reservedKeywords";
"substitute" -> "shallowDenote";
"substitute" -> "shift";
"substitute" -> "subExpressions";
"substitute" -> "subst";
"substitute" -> "toDoubleQuoted";
"substitute" -> "unlinesLiteral";
"substitute" -> "unsafeSubExpressions";
"substitute" -> "wrapInLets";
"tailCharacter" -> "alphaNum";
"textShow" -> "forall";
"textShow" -> "text";
"textSkeleton" -> "ignore";
"throwMissingImport" -> "makeHashMismatchMessage";
"throws" -> "_ERROR";
"throws" -> "addConstructorModifier";
"throws" -> "addFieldModifier";
"throws" -> "command";
"throws" -> "defaultInterpretOptions";
"throws" -> "dropPrefix";
"throws" -> "genericAutoWith";
"throws" -> "genericToDhallWith";
"throws" -> "setSingletonConstructors";
"toConstructor" -> "toNestedHaskellType";
"toDeclaration" -> "constructor";
"toDeclaration" -> "derivingClauses";
"toDeclaration" -> "toConstructor";
"toDirectoryTree" -> "alphaNormalize";
"toDirectoryTree" -> "constructor";
"toDirectoryTree" -> "conv";
"toDirectoryTree" -> "countNames";
"toDirectoryTree" -> "empty";
"toDirectoryTree" -> "envNames";
"toDirectoryTree" -> "eval";
"toDirectoryTree" -> "field";
"toDirectoryTree" -> "judgmentallyEqual";
"toDirectoryTree" -> "normalize";
"toDirectoryTree" -> "null";
"toDirectoryTree" -> "quote";
"toDirectoryTree" -> "record";
"toDirectoryTree" -> "text";
"toDirectoryTree" -> "textShow";
"toDirectoryTree" -> "to";
"toDirectoryTree" -> "toDirectoryTree";
"toDirectoryTree" -> "toVHPi";
"toDirectoryTree" -> "union";
"toDoubleQuoted" -> "dropLiteral";
"toDoubleQuoted" -> "linesLiteral";
"toDoubleQuoted" -> "literal";
"toDoubleQuoted" -> "longestSharedWhitespacePrefix";
"toDoubleQuoted" -> "unlinesLiteral";
"toHeader" -> "empty";
"toHeaders" -> "toHeader";
"toList" -> "alphaNormalize";
"toList" -> "bindingExprs";
"toList" -> "censorExpression";
"toList" -> "censorText";
"toList" -> "chunkExprs";
"toList" -> "denote";
"toList" -> "escapeText";
"toList" -> "freeIn";
"toList" -> "functionBindingExprs";
"toList" -> "internalError";
"toList" -> "isNormalized";
"toList" -> "isNormalizedWith";
"toList" -> "judgmentallyEqual";
"toList" -> "makeBinding";
"toList" -> "makeFieldSelection";
"toList" -> "makeFunctionBinding";
"toList" -> "makeRecordField";
"toList" -> "multiLet";
"toList" -> "normalize";
"toList" -> "normalizeWith";
"toList" -> "normalizeWithM";
"toList" -> "pathCharacter";
"toList" -> "pretty";
"toList" -> "recordFieldExprs";
"toList" -> "renote";
"toList" -> "reservedIdentifiers";
"toList" -> "shallowDenote";
"toList" -> "shift";
"toList" -> "subExpressions";
"toList" -> "subst";
"toList" -> "throws";
"toList" -> "wrapInLets";
"toMap" -> "map";
"toMapWith" -> "combine";
"toMapWith" -> "map";
"toMapWith" -> "sequence";
"toVHPi" -> "instantiate";
"transformMOf" -> "mapMOf";
"traverseWithKey" -> "fromList";
"traverseWithKey" -> "toList";
"typeCheck" -> "applyContext";
"typeCheck" -> "env";
"typeCheck" -> "envToContext";
"typeCheck" -> "get";
"typeOf" -> "output";
"typeOf" -> "parseAndLoad";
"typeOf" -> "src";
"typeOf" -> "typeCheck";
"typeOf" -> "typeWith";
"typeWith" -> "checkContext";
"typeWith" -> "expr";
"typeWith" -> "typeWithA";
"typeWithA" -> "contextToCtx";
"typeWithA" -> "infer";
"typesToNames" -> "typesToNames";
"unhandledConstructor" -> "constructor";
"unhandledConstructor" -> "internalError";
"union" -> "expr";
"union" -> "extractUnionConstructor";
"union" -> "notEmptyRecord";
"union" -> "typeError";
"unionEncoder" -> "notEmptyRecord";
"unionEncoder" -> "notEmptyRecordLit";
"unionWith" -> "combine";
"unit" -> "expr";
"unit" -> "typeError";
"unreserved" -> "alphaNum";
"unsafeSubExpressions" -> "chunkExprs";
"unsafeSubExpressions" -> "unhandledConstructor";
"unsetOption" -> "writeOutputHandle";
"useToMap" -> "alpha";
"useToMap" -> "cache";
"useToMap" -> "censor";
"useToMap" -> "input";
"useToMap" -> "main";
"useToMap" -> "noted";
"useToMap" -> "null";
"useToMap" -> "output";
"useToMap" -> "parseOptions";
"useToMap" -> "parserInfoOptions";
"useToMap" -> "pretty";
"userinfo" -> "pctEncoded";
"userinfo" -> "satisfy";
"userinfo" -> "star";
"userinfo" -> "subDelims";
"userinfo" -> "unreserved";
"vApp" -> "instantiate";
"vCombine" -> "null";
"vCombine" -> "vCombine";
"vCombineTypes" -> "null";
"vCombineTypes" -> "vCombineTypes";
"vField" -> "errorMsg";
"vListAppend" -> "null";
"vPrefer" -> "conv";
"vPrefer" -> "env";
"vPrefer" -> "null";
"vProjectByFields" -> "env";
"vProjectByFields" -> "null";
"vProjectByFields" -> "vPrefer";
"vProjectByFields" -> "vProjectByFields";
"vVar" -> "countEnvironment";
"vVar" -> "env";
"vWith" -> "forall";
"vWith" -> "vWith";
"vector" -> "list";
"void" -> "union";
"whitespace" -> "whitespaceChunk";
"whitespaceChunk" -> "blockComment";
"whitespaceChunk" -> "lineComment";
"whitespaceChunk" -> "void";
"will" -> "to";
"withoutKeys" -> "filterKeys";
"word" -> "wordHelper";
"word16" -> "wordHelper";
"word32" -> "wordHelper";
"word64" -> "forall";
"word64" -> "wordHelper";
"word8" -> "wordHelper";
"wordHelper" -> "expr";
"wordHelper" -> "extractError";
"wordHelper" -> "typeError";
"writeExpressionToSemanticCache" -> "encodeExpression";
"writeExpressionToSemanticCache" -> "writeToSemanticCache";
"writeOutputHandle" -> "get";
"writeToSemanticCache" -> "getCacheFile";
"writeToSemisemanticCache" -> "getCacheFile";
}
