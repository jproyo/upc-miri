strict digraph deps {
"_" [style=solid];
"_anns" [style=solid];
"_checkDuplicateFieldNames" [style=solid];
"_checkQualifiers" [style=solid];
"_checkRefinedClasses" [style=solid];
"_definedVars" [style=solid];
"_dumpRdrEnv" [style=solid];
"_dumpTypeEnv" [style=solid];
"_dupBindError" [style=solid];
"_errorSkip" [style=solid];
"_firstDuplicate" [style=solid];
"_grepClassAssumes" [style=solid];
"_highlight" [style=solid];
"_impThings" [style=solid];
"_isClassOrDict" [style=solid];
"_mbId" [style=solid];
"_meetable" [style=solid];
"_mkCoreLets\'" [style=solid];
"_rTypeTyCons" [style=solid];
"_safeSimplifyPatTuple" [style=solid];
"_showExpr" [style=solid];
"_showVar" [style=solid];
"_tidyAlt" [style=solid];
"actOrDie" [style=solid];
"action" [style=solid];
"add" [style=solid];
"addA" [style=solid];
"addArg" [style=solid];
"addBind" [style=solid];
"addBinders" [style=solid];
"addC" [style=solid];
"addCC" [style=solid];
"addCGEnv" [style=solid];
"addCache" [style=solid];
"addCheckedFun" [style=solid];
"addClassBind" [style=solid];
"addClassEmbeds" [style=solid];
"addConstraints" [style=solid];
"addDecrTerm" [style=solid];
"addEEnv" [style=solid];
"addEmem" [style=solid];
"addEnv" [style=solid];
"addError" [style=solid];
"addErrors" [style=solid];
"addExist" [style=solid];
"addExists" [style=solid];
"addForAllConstraint" [style=solid];
"addFst3" [style=solid];
"addFunctionConstraint" [style=solid];
"addHole" [style=solid];
"addIdA" [style=solid];
"addInstIndex" [style=solid];
"addInvCond" [style=solid];
"addK" [style=solid];
"addKVars" [style=solid];
"addKuts" [style=solid];
"addLhsInv" [style=solid];
"addLibDependencies" [style=solid];
"addLocA" [style=solid];
"addNumSizeFun" [style=solid];
"addObligation" [style=solid];
"addPToEnv" [style=solid];
"addParam" [style=solid];
"addPds" [style=solid];
"addPolyInfo" [style=solid];
"addPost" [style=solid];
"addPostTemplate" [style=solid];
"addRInv" [style=solid];
"addRTyConInv" [style=solid];
"addReflSigs" [style=solid];
"addRefs" [style=solid];
"addSEnv" [style=solid];
"addSubterms" [style=solid];
"addSymSort" [style=solid];
"addSymSortRef" [style=solid];
"addSymSortRef\'" [style=solid];
"addSynonym" [style=solid];
"addThd3" [style=solid];
"addTyConInfo" [style=solid];
"addW" [style=solid];
"addWarning" [style=solid];
"addps" [style=solid];
"addsEmem" [style=solid];
"addsEnv" [style=solid];
"adjustErrors" [style=solid];
"adjustOutput" [style=solid];
"adjustReal" [style=solid];
"adjustResult" [style=solid];
"adjustSpan" [style=solid];
"adjustSrcSpan" [style=solid];
"adjustTypes" [style=solid];
"adtDataConP" [style=solid];
"aliasIdP" [style=solid];
"aliasIdR" [style=solid];
"aliasP" [style=solid];
"allAsmSigs" [style=solid];
"allBoundVars" [style=solid];
"allCombinations" [style=solid];
"allDeps" [style=solid];
"allErrors" [style=solid];
"allImports" [style=solid];
"allProg" [style=solid];
"allTrivial" [style=solid];
"allTyVars" [style=solid];
"allWarnings" [style=solid];
"allowExtResolution" [style=solid];
"allowGlobalPLE" [style=solid];
"allowLocalPLE" [style=solid];
"allowPLE" [style=solid];
"alsQualifiers" [style=solid];
"altReft" [style=solid];
"altSpans" [style=solid];
"altToLg" [style=solid];
"and" [style=solid];
"anfOcc" [style=solid];
"angleBrackets" [style=solid];
"anglesCircleP" [style=solid];
"annErrors" [style=solid];
"annTypes" [style=solid];
"annotParse" [style=solid];
"annotTokenise" [style=solid];
"annotate" [style=solid];
"anormalize" [style=solid];
"anyF" [style=solid];
"anyTypeSymbol" [style=solid];
"ap" [style=solid];
"apiAnnComments" [style=solid];
"apiComments" [style=solid];
"appRTyCon" [style=solid];
"appSolRefa" [style=solid];
"appTysAndIds" [style=solid];
"apply" [style=solid];
"applyArg" [style=solid];
"applySolution" [style=solid];
"applyTerm" [style=solid];
"applyTerms" [style=solid];
"applyTy" [style=solid];
"argExpr" [style=solid];
"argType" [style=solid];
"argsCB" [style=solid];
"argsE" [style=solid];
"argsFill" [style=solid];
"argsP" [style=solid];
"asgn" [style=solid];
"asizeP" [style=solid];
"assert" [style=solid];
"assm" [style=solid];
"assmGrty" [style=solid];
"assumeSpec" [style=solid];
"at" [style=solid];
"autoinstP" [style=solid];
"availableTyCons" [style=solid];
"availableTyThings" [style=solid];
"availableVars" [style=solid];
"availsToStableNameSet" [style=solid];
"aval" [style=solid];
"axiomP" [style=solid];
"axiomType" [style=solid];
"b1" [style=solid];
"bAnd" [style=solid];
"bApp" [style=solid];
"bAppTy" [style=solid];
"bCon" [style=solid];
"bImp" [style=solid];
"bIte" [style=solid];
"bLess" [style=solid];
"bLst" [style=solid];
"bOr" [style=solid];
"bPVar" [style=solid];
"bRProp" [style=solid];
"bRVar" [style=solid];
"bTVar" [style=solid];
"bTVarInfo" [style=solid];
"bTup" [style=solid];
"bTyConP" [style=solid];
"bTyVar" [style=solid];
"bagSize" [style=solid];
"bareAllP" [style=solid];
"bareArgP" [style=solid];
"bareAtomBindP" [style=solid];
"bareAtomNoAppP" [style=solid];
"bareAtomP" [style=solid];
"bareBool" [style=solid];
"bareExpandType" [style=solid];
"bareMSpec" [style=solid];
"bareOfType" [style=solid];
"bareRTyVar" [style=solid];
"bareSpecIso" [style=solid];
"bareSpecType" [style=solid];
"bareTCApp" [style=solid];
"bareTyArgP" [style=solid];
"bareTySigs" [style=solid];
"bareTypeBracesP" [style=solid];
"bareTypeP" [style=solid];
"bbaseNoAppP" [style=solid];
"bbaseP" [style=solid];
"bbindP" [style=solid];
"bchopAlts" [style=solid];
"bform" [style=solid];
"bindEqns" [style=solid];
"bindRefType_" [style=solid];
"bindSpans" [style=solid];
"binderIdP" [style=solid];
"binderIdR" [style=solid];
"binderP" [style=solid];
"binders" [style=solid];
"bindersTx" [style=solid];
"bindings" [style=solid];
"bkArrow" [style=solid];
"bkArrowDeep" [style=solid];
"bkClass" [style=solid];
"bkDataCon" [style=solid];
"bkFun" [style=solid];
"bkImp" [style=solid];
"bkImplicit" [style=solid];
"bkUniv" [style=solid];
"bkUnivClass" [style=solid];
"blankLine" [style=solid];
"bodyPred" [style=solid];
"bops" [style=solid];
"bottonCss" [style=solid];
"bottonsCss" [style=solid];
"boundP" [style=solid];
"boundRecVar" [style=solid];
"breakS" [style=solid];
"brels" [style=solid];
"brkFun" [style=solid];
"bsplitC" [style=solid];
"bsplitC\'" [style=solid];
"bsplitW" [style=solid];
"bsplitW\'" [style=solid];
"bsubst" [style=solid];
"btP" [style=solid];
"buildAliasGraph" [style=solid];
"buildAliasNode" [style=solid];
"buildAliasTable" [style=solid];
"buildDepGraph" [style=solid];
"buildExprEdges" [style=solid];
"buildTypeEdges" [style=solid];
"buttonPrefix" [style=solid];
"bval" [style=solid];
"bx1" [style=solid];
"bx2" [style=solid];
"bx4" [style=solid];
"bytesFS" [style=solid];
"cErrToSpanned" [style=solid];
"cMeasureP" [style=solid];
"cSizeInt" [style=solid];
"cachedBareSpecs" [style=solid];
"cachedSpecModule" [style=solid];
"cachedSpecStableModuleId" [style=solid];
"callGraphRanks" [style=solid];
"canRewrite" [style=solid];
"canonConfig" [style=solid];
"canonicalize" [style=solid];
"canonicalizePaths" [style=solid];
"canonizeDecls" [style=solid];
"caseEnv" [style=solid];
"caseIndent" [style=solid];
"caseKVKind" [style=solid];
"caseVarsE" [style=solid];
"casesToLg" [style=solid];
"castTy" [style=solid];
"castTy\'" [style=solid];
"catSpans" [style=solid];
"cconsCase" [style=solid];
"cconsE" [style=solid];
"cconsE\'" [style=solid];
"cconsFreshE" [style=solid];
"cconsLazyLet" [style=solid];
"cfgRef" [style=solid];
"cgInfoFInfo" [style=solid];
"check" [style=solid];
"checkAbstractRefs" [style=solid];
"checkAll" [style=solid];
"checkAppTys" [style=solid];
"checkBareSpec" [style=solid];
"checkBind" [style=solid];
"checkBoolAlts" [style=solid];
"checkClassMeasures" [style=solid];
"checkClassMethods" [style=solid];
"checkCyclicAliases" [style=solid];
"checkDataAlt" [style=solid];
"checkDataCtorDupField" [style=solid];
"checkDataCtors" [style=solid];
"checkDataDecl" [style=solid];
"checkDisjoint" [style=solid];
"checkDisjoints" [style=solid];
"checkDupIntersect" [style=solid];
"checkDuplicate" [style=solid];
"checkDuplicateMeasure" [style=solid];
"checkDuplicateRTAlias" [style=solid];
"checkDuplicateSigs" [style=solid];
"checkErr" [style=solid];
"checkError" [style=solid];
"checkExitCode" [style=solid];
"checkExtra" [style=solid];
"checkFilePragmas" [style=solid];
"checkFilePresent" [style=solid];
"checkFun" [style=solid];
"checkHint" [style=solid];
"checkIAl" [style=solid];
"checkIAlOne" [style=solid];
"checkIndex" [style=solid];
"checkInv" [style=solid];
"checkLawInstances" [style=solid];
"checkLiquidHaskellContext" [style=solid];
"checkMBody" [style=solid];
"checkMBodyUnify" [style=solid];
"checkMBody\'" [style=solid];
"checkMany" [style=solid];
"checkMeasure" [style=solid];
"checkMeasures" [style=solid];
"checkMismatch" [style=solid];
"checkMonad" [style=solid];
"checkOne" [style=solid];
"checkOneInstance" [style=solid];
"checkOneLaw" [style=solid];
"checkPlugged" [style=solid];
"checkQualifier" [style=solid];
"checkRTAliases" [style=solid];
"checkRType" [style=solid];
"checkRecordSelectorSigs" [style=solid];
"checkReft" [style=solid];
"checkRewrites" [style=solid];
"checkSigTExpr" [style=solid];
"checkSizeFun" [style=solid];
"checkTargetInfo" [style=solid];
"checkTargetSpec" [style=solid];
"checkTargets" [style=solid];
"checkTcArity" [style=solid];
"checkTerminationExpr" [style=solid];
"checkTy" [style=solid];
"checkTyCon" [style=solid];
"checkTySigs" [style=solid];
"checkUnbound" [style=solid];
"checkUnique" [style=solid];
"checkUnique\'" [style=solid];
"checkValid" [style=solid];
"checkValidHint" [style=solid];
"checkedItv" [style=solid];
"checkedVars" [style=solid];
"choose" [style=solid];
"choosen" [style=solid];
"chopAltDBG" [style=solid];
"chopAlts" [style=solid];
"cinfoErr" [style=solid];
"cinfoError" [style=solid];
"circleP" [style=solid];
"classBTyConP" [style=solid];
"classBinds" [style=solid];
"classCons" [style=solid];
"classP" [style=solid];
"classbuttonName" [style=solid];
"classify" [style=solid];
"clearCurrentArgs" [style=solid];
"clearCurrentFun" [style=solid];
"clearSpec" [style=solid];
"client" [style=solid];
"cloneCase" [style=solid];
"closeA" [style=solid];
"closeAnnots" [style=solid];
"cmdArgsRun\'" [style=solid];
"cmd_1" [style=solid];
"cmd_1_2" [style=solid];
"cmd_2" [style=solid];
"cmpLexRef" [style=solid];
"cmpSymbol" [style=solid];
"coSubRReft" [style=solid];
"coSubReft" [style=solid];
"coerceToLg" [style=solid];
"coercionTypeEq" [style=solid];
"collapseA" [style=solid];
"collectArguments" [style=solid];
"collectNonRecLets" [style=solid];
"collectValBinders\'" [style=solid];
"colours" [style=solid];
"combinations" [style=solid];
"combineDCTypes" [style=solid];
"combineProofsName" [style=solid];
"command" [style=solid];
"compP" [style=solid];
"compareRType" [style=solid];
"compileCFiles" [style=solid];
"composeM" [style=solid];
"conLikeSymbol" [style=solid];
"conPatP" [style=solid];
"concatMapM" [style=solid];
"concatString" [style=solid];
"concatUnzip" [style=solid];
"concretize" [style=solid];
"condNull" [style=solid];
"config" [style=solid];
"configSensitiveDependencies" [style=solid];
"configTidy" [style=solid];
"configToRedundantDependencies" [style=solid];
"configureDynFlags" [style=solid];
"configureGhcTargets" [style=solid];
"conjoinInvariant" [style=solid];
"conjoinInvariantShift" [style=solid];
"consAct" [style=solid];
"consBind" [style=solid];
"consCB" [style=solid];
"consCBLet" [style=solid];
"consCBSizedTys" [style=solid];
"consCBTop" [style=solid];
"consCBWithExprs" [style=solid];
"consClass" [style=solid];
"consE" [style=solid];
"consPatP" [style=solid];
"consPattern" [style=solid];
"constraintEnvP" [style=solid];
"constraintP" [style=solid];
"constraintToLogic" [style=solid];
"constraintToLogicOne" [style=solid];
"cookSpecType" [style=solid];
"cookSpecTypeE" [style=solid];
"copyFileCreateParentDirIfMissing" [style=solid];
"copyright" [style=solid];
"coreAltToDef" [style=solid];
"coreBindLits" [style=solid];
"coreBindSymbols" [style=solid];
"coreDefs" [style=solid];
"coreDeps" [style=solid];
"coreExprDef" [style=solid];
"coreExprDefs" [style=solid];
"coreToDef" [style=solid];
"coreToDef\'" [style=solid];
"coreToFun" [style=solid];
"coreToFun\'" [style=solid];
"coreToHs" [style=solid];
"coreToIte" [style=solid];
"coreToLg" [style=solid];
"coreToLogic" [style=solid];
"coreVarExprs" [style=solid];
"coreVisitor" [style=solid];
"countTcConstraints" [style=solid];
"crash" [style=solid];
"createSubgoals" [style=solid];
"createTempDirectoryIfMissing" [style=solid];
"cssHTML" [style=solid];
"csvOutDate" [style=solid];
"csvOutName" [style=solid];
"csvOutPass" [style=solid];
"csvOutTime" [style=solid];
"customDynFlags" [style=solid];
"cycleAliasErr" [style=solid];
"dFunIdVars" [style=solid];
"daemonName" [style=solid];
"dataConArgs" [style=solid];
"dataConDecl" [style=solid];
"dataConExTyVars" [style=solid];
"dataConFieldP" [style=solid];
"dataConFieldsP" [style=solid];
"dataConFullSig" [style=solid];
"dataConImplicitIds" [style=solid];
"dataConInstArgTys" [style=solid];
"dataConMap" [style=solid];
"dataConMsReft" [style=solid];
"dataConNameP" [style=solid];
"dataConOrigArgTys" [style=solid];
"dataConP" [style=solid];
"dataConPSpecType" [style=solid];
"dataConProj" [style=solid];
"dataConReft" [style=solid];
"dataConRepArgTys" [style=solid];
"dataConResultTy" [style=solid];
"dataConSel" [style=solid];
"dataConSig" [style=solid];
"dataConSpec\'" [style=solid];
"dataConToBare" [style=solid];
"dataConTy" [style=solid];
"dataConTypes" [style=solid];
"dataConVars" [style=solid];
"dataConWorkRep" [style=solid];
"dataConWrapperType" [style=solid];
"dataConsOfTyCon" [style=solid];
"dataCtorFields" [style=solid];
"dataCtorsP" [style=solid];
"dataDeclBodyP" [style=solid];
"dataDeclFields" [style=solid];
"dataDeclKey" [style=solid];
"dataDeclName" [style=solid];
"dataDeclP" [style=solid];
"dataNameSymbol" [style=solid];
"dataPropTyP" [style=solid];
"dataSizeP" [style=solid];
"dataToExpQ\'" [style=solid];
"datavarianceP" [style=solid];
"dcPrefix" [style=solid];
"dcSymbol" [style=solid];
"dcWorkSpecType" [style=solid];
"dcWrapSpecType" [style=solid];
"deShadowBind" [style=solid];
"debugLog" [style=solid];
"debugLogs" [style=solid];
"decrType" [style=solid];
"decreaseP" [style=solid];
"deepSplitProductType_maybe" [style=solid];
"defAnn" [style=solid];
"defArgs" [style=solid];
"defBounds" [style=solid];
"defConfig" [style=solid];
"defRefType" [style=solid];
"defaultDataCons" [style=solid];
"defaultErrStyle" [style=solid];
"defaultMaxParams" [style=solid];
"defaultPort" [style=solid];
"defaultTag" [style=solid];
"defaultTyConInfo" [style=solid];
"defineP" [style=solid];
"deleteREnv" [style=solid];
"delimiter" [style=solid];
"dependsOn" [style=solid];
"deref" [style=solid];
"derivedVar" [style=solid];
"derivedVars" [style=solid];
"derivingClasses" [style=solid];
"deserialiseBinaryObject" [style=solid];
"deserialiseLiquidLib" [style=solid];
"desugarModule" [style=solid];
"devModeHooks" [style=solid];
"dfromList" [style=solid];
"dhasinfo" [style=solid];
"dictionaryBind" [style=solid];
"dictionaryTyVar" [style=solid];
"dictionaryVar" [style=solid];
"diffLines" [style=solid];
"diffMap" [style=solid];
"diffShifts" [style=solid];
"diffVars" [style=solid];
"dinsert" [style=solid];
"discardModName" [style=solid];
"dlookup" [style=solid];
"dmap" [style=solid];
"dmapty" [style=solid];
"doExpand" [style=solid];
"doGenerate" [style=solid];
"doTermCheck" [style=solid];
"dot" [style=solid];
"downcastSpec" [style=solid];
"dropApp" [style=solid];
"dropBoundLike" [style=solid];
"dropConstraints" [style=solid];
"dropDependency" [style=solid];
"dropErrorLoc" [style=solid];
"dropExists" [style=solid];
"dropFst3" [style=solid];
"dropImplicits" [style=solid];
"dropImplicitsRP" [style=solid];
"dropModel" [style=solid];
"dropModuleNames" [style=solid];
"dropModuleNamesAndUnique" [style=solid];
"dropModuleNamesCorrect" [style=solid];
"dropModuleUnique" [style=solid];
"dropNArgs" [style=solid];
"dropString" [style=solid];
"dropThd3" [style=solid];
"dropTyVarInfo" [style=solid];
"dropUniv" [style=solid];
"dummyBindP" [style=solid];
"dummyP" [style=solid];
"dummyRSort" [style=solid];
"dummyReft" [style=solid];
"dummySourcePos" [style=solid];
"dummyTyId" [style=solid];
"dumpCs" [style=solid];
"dumpLogs" [style=solid];
"e2u" [style=solid];
"eAppWithMap" [style=solid];
"eVarWithMap" [style=solid];
"ealiasP" [style=solid];
"efoldReft" [style=solid];
"elemHEnv" [style=solid];
"emapExprArg" [style=solid];
"emapRef" [style=solid];
"emapReft" [style=solid];
"embedP" [style=solid];
"empty" [style=solid];
"emptyAnfEnv" [style=solid];
"emptyCache" [style=solid];
"emptyDecl" [style=solid];
"emptyDiagnostics" [style=solid];
"emptyEnv" [style=solid];
"emptyKVProf" [style=solid];
"emptyLiftedSpec" [style=solid];
"emptyLiquidLib" [style=solid];
"emptyOutput" [style=solid];
"envCfg" [style=solid];
"envSort" [style=solid];
"envToSub" [style=solid];
"eq" [style=solid];
"eqBind" [style=solid];
"eqPtr" [style=solid];
"eqRSort" [style=solid];
"eqSubst" [style=solid];
"eqType\'" [style=solid];
"eqVars" [style=solid];
"equationBody" [style=solid];
"erase" [style=solid];
"err" [style=solid];
"errDataConMismatch" [style=solid];
"errDupSpecs" [style=solid];
"errHMeas" [style=solid];
"errMissingSpec" [style=solid];
"errMsgErrors" [style=solid];
"errRTAliasApp" [style=solid];
"errResolve" [style=solid];
"errSaved" [style=solid];
"errSpan" [style=solid];
"errToFCrash" [style=solid];
"errTypeMismatch" [style=solid];
"errorExprPp" [style=solid];
"errorLogger" [style=solid];
"errorToUserError" [style=solid];
"errorWithContext" [style=solid];
"errorsResult" [style=solid];
"errorsWithContext" [style=solid];
"evalSM" [style=solid];
"ex0" [style=solid];
"ex1" [style=solid];
"ex10" [style=solid];
"ex2" [style=solid];
"ex2a" [style=solid];
"ex4" [style=solid];
"ex5" [style=solid];
"ex8" [style=solid];
"ex9" [style=solid];
"exactDCFlag" [style=solid];
"existingSpan" [style=solid];
"exitWithResult" [style=solid];
"expToBind" [style=solid];
"expToBindExpr" [style=solid];
"expToBindParg" [style=solid];
"expToBindRef" [style=solid];
"expToBindReft" [style=solid];
"expToBindT" [style=solid];
"expand" [style=solid];
"expand2" [style=solid];
"expand3" [style=solid];
"expandApp" [style=solid];
"expandBareSpec" [style=solid];
"expandBareType" [style=solid];
"expandDefault" [style=solid];
"expandDefaultCase" [style=solid];
"expandDefaultCase\'" [style=solid];
"expandEApp" [style=solid];
"expandExpr" [style=solid];
"expandFix" [style=solid];
"expandLoc" [style=solid];
"expandMeasure" [style=solid];
"expandMeasureDef" [style=solid];
"expandMessage" [style=solid];
"expandProductType" [style=solid];
"expandRApp" [style=solid];
"expandRTAliasApp" [style=solid];
"expandRTypeSynonyms" [style=solid];
"expandReft" [style=solid];
"expandSym" [style=solid];
"expandVarDefs" [style=solid];
"expandVarType" [style=solid];
"expandWF" [style=solid];
"exportedVarSymbol" [style=solid];
"exportedVars" [style=solid];
"exprArg" [style=solid];
"exprArgs" [style=solid];
"exprDep" [style=solid];
"exprFreeVars" [style=solid];
"exprLetVars" [style=solid];
"exprLiterals" [style=solid];
"exprLoc" [style=solid];
"exprReadVars" [style=solid];
"exprRefType" [style=solid];
"exprRefType_" [style=solid];
"exprSpans" [style=solid];
"exprmemToExpr" [style=solid];
"extQ" [style=solid];
"extend" [style=solid];
"extendAnfEnv" [style=solid];
"extendEnv" [style=solid];
"extendEnvWithVV" [style=solid];
"extender" [style=solid];
"extractModuleAnnotations" [style=solid];
"extractSpecComment" [style=solid];
"extractSpecComments" [style=solid];
"extractSpecQuote" [style=solid];
"extractSpecQuotes" [style=solid];
"extractSpecQuotes\'" [style=solid];
"f" [style=solid];
"fSourcePos" [style=solid];
"fSrcSpan" [style=solid];
"fSrcSpanSrcSpan" [style=solid];
"fTyConP" [style=solid];
"failMaybe" [style=solid];
"failVarP" [style=solid];
"failingBinds" [style=solid];
"fallbackSpecP" [style=solid];
"famInstArgs" [style=solid];
"famInstTyConMb" [style=solid];
"famInstTyConType" [style=solid];
"fastStringText" [style=solid];
"feasible" [style=solid];
"feasibles" [style=solid];
"ff" [style=solid];
"fieldName" [style=solid];
"file" [style=solid];
"fileErrors" [style=solid];
"fileOptions" [style=solid];
"filePathP" [style=solid];
"fill" [style=solid];
"fillOne" [style=solid];
"filterA" [style=solid];
"filterBinds" [style=solid];
"filterElseM" [style=solid];
"filterExprArgs" [style=solid];
"filterREnv" [style=solid];
"findAndParseSpecFiles" [style=solid];
"findCandidates" [style=solid];
"findCompanionSpec" [style=solid];
"findFeasibles" [style=solid];
"findM" [style=solid];
"findModule" [style=solid];
"findPVar" [style=solid];
"findRelevantSpecs" [style=solid];
"findSmtSolver" [style=solid];
"findStructBinds" [style=solid];
"findVarDef" [style=solid];
"findVarDefType" [style=solid];
"first3M" [style=solid];
"firstElems" [style=solid];
"firstGroup" [style=solid];
"firstJust" [style=solid];
"firstM" [style=solid];
"firstMaybes" [style=solid];
"fixApplication" [style=solid];
"fixCands" [style=solid];
"fixCase" [style=solid];
"fixCommas" [style=solid];
"fixConfig" [style=solid];
"fixEMem" [style=solid];
"fixParen" [style=solid];
"fixReftTyVars" [style=solid];
"fixTy" [style=solid];
"flatten" [style=solid];
"fmap" [style=solid];
"foldRType" [style=solid];
"foldReft" [style=solid];
"foldReft\'" [style=solid];
"forallExprRefType" [style=solid];
"forallExprReft" [style=solid];
"forallExprReftLookup" [style=solid];
"forallExprReft_" [style=solid];
"force" [style=solid];
"formButton" [style=solid];
"fourth4" [style=solid];
"fpLen" [style=solid];
"freeArgsPs" [style=solid];
"freeArgsPsRef" [style=solid];
"freeSymbols" [style=solid];
"freeSyms" [style=solid];
"freeTyVars" [style=solid];
"freshInt" [style=solid];
"freshK" [style=solid];
"freshK\'" [style=solid];
"freshK\'\'" [style=solid];
"freshName" [style=solid];
"freshNormalVar" [style=solid];
"freshPredRef" [style=solid];
"freshSym" [style=solid];
"freshSymbol" [style=solid];
"freshTy_expr" [style=solid];
"freshTy_reftype" [style=solid];
"freshTy_type" [style=solid];
"freshUnique" [style=solid];
"freshVar" [style=solid];
"freshVarType" [style=solid];
"fromAliasSymbol" [style=solid];
"fromAnf" [style=solid];
"fromAnf\'" [style=solid];
"fromCached" [style=solid];
"fromFirstMaybes" [style=solid];
"fromGMap" [style=solid];
"fromGSub" [style=solid];
"fromList" [style=solid];
"fromListHEnv" [style=solid];
"fromListREnv" [style=solid];
"fromPJDoc" [style=solid];
"fromRISig" [style=solid];
"fromRTypeRep" [style=solid];
"fromString" [style=solid];
"fromUnhelpfulReason" [style=solid];
"from\'" [style=solid];
"fsToUnitId" [style=solid];
"fst4" [style=solid];
"fstByRank" [style=solid];
"funArgsP" [style=solid];
"funBinds" [style=solid];
"funExpr" [style=solid];
"functionCands" [style=solid];
"functionComposisionSymbol" [style=solid];
"gApp" [style=solid];
"gHC_VERSION" [style=solid];
"gSpanToDeps" [style=solid];
"gcatch" [style=solid];
"genArgs" [style=solid];
"genBareTypeP" [style=solid];
"genExpandOrder" [style=solid];
"genTerms" [style=solid];
"genTerms\'" [style=solid];
"generalize" [style=solid];
"generalizeVar" [style=solid];
"generalizeWith" [style=solid];
"generateConstraints" [style=solid];
"generateConstraintsWithEnv" [style=solid];
"generateHtml" [style=solid];
"geq" [style=solid];
"geqBind" [style=solid];
"get" [style=solid];
"getAllData" [style=solid];
"getAnnMap" [style=solid];
"getAsmSigs" [style=solid];
"getBinds" [style=solid];
"getBody" [style=solid];
"getCallInfoBind" [style=solid];
"getCallInfoExpr" [style=solid];
"getClasses" [style=solid];
"getCompareData" [style=solid];
"getCompareTimeData" [style=solid];
"getConfig" [style=solid];
"getCoreToLogicPath" [style=solid];
"getCssPath" [style=solid];
"getData" [style=solid];
"getDataConVarUnique" [style=solid];
"getDependenciesModuleNames" [style=solid];
"getDnTyCon" [style=solid];
"getEpochTime" [style=solid];
"getExprDict" [style=solid];
"getExprFun" [style=solid];
"getFamInstances" [style=solid];
"getFileBody" [style=solid];
"getFileLines" [style=solid];
"getGlobalSyms" [style=solid];
"getIncludeDir" [style=solid];
"getInterfaceDynFlags" [style=solid];
"getLiquidSpec" [style=solid];
"getLocation" [style=solid];
"getMethodType" [style=solid];
"getModName" [style=solid];
"getModString" [style=solid];
"getModSummary" [style=solid];
"getModuleGraph" [style=solid];
"getNth" [style=solid];
"getOpts" [style=solid];
"getPatSpec" [style=solid];
"getPsSig" [style=solid];
"getPsSigPs" [style=solid];
"getRealSpec" [style=solid];
"getReflectDefs" [style=solid];
"getReflects" [style=solid];
"getRewriteErrors" [style=solid];
"getSDecrTerms" [style=solid];
"getSEMem" [style=solid];
"getSEnv" [style=solid];
"getSFix" [style=solid];
"getSUniVars" [style=solid];
"getShift" [style=solid];
"getSourcePos" [style=solid];
"getSourcePosE" [style=solid];
"getState" [style=solid];
"getSuccessData" [style=solid];
"getTag" [style=solid];
"getTargetInfos" [style=solid];
"getTargetInfos\'" [style=solid];
"getTemplates" [style=solid];
"getTimeData" [style=solid];
"getTopLvlBndrs" [style=solid];
"getType" [style=solid];
"getTypeInfo" [style=solid];
"getUniVars" [style=solid];
"getUniVars0" [style=solid];
"ghcSpecEnv" [style=solid];
"giQuals" [style=solid];
"gitInfo" [style=solid];
"gitMsg" [style=solid];
"globalDiff" [style=solid];
"globalREnv" [style=solid];
"globalize" [style=solid];
"globalsREnv" [style=solid];
"gmap" [style=solid];
"gmapN" [style=solid];
"go" [style=solid];
"goN" [style=solid];
"goPlug" [style=solid];
"goalType" [style=solid];
"goodInvs" [style=solid];
"grabArgs" [style=solid];
"grabBody" [style=solid];
"graphExpand" [style=solid];
"grepDictionary" [style=solid];
"groupBy" [style=solid];
"groupDataCons" [style=solid];
"groupVariances" [style=solid];
"grty" [style=solid];
"grtyTop" [style=solid];
"gt" [style=solid];
"gulpLogs" [style=solid];
"handle" [style=solid];
"handleCommas" [style=solid];
"handler" [style=solid];
"hasBaseTypeVar" [style=solid];
"hasBoolResult" [style=solid];
"hasClassArg" [style=solid];
"hasDataDecl" [style=solid];
"hasDecl" [style=solid];
"hasErrors" [style=solid];
"hasFreshBinSpec" [style=solid];
"hasHole" [style=solid];
"hasHoleTy" [style=solid];
"hasInnerRefinement" [style=solid];
"hasOpt" [style=solid];
"hasTrivial" [style=solid];
"hasTuple" [style=solid];
"hasType" [style=solid];
"hashMapMapKeys" [style=solid];
"hashMapMapWithKey" [style=solid];
"hboundP" [style=solid];
"helpNeeded" [style=solid];
"higherOrderFlag" [style=solid];
"hint" [style=solid];
"hmeasureP" [style=solid];
"hole" [style=solid];
"holeLit" [style=solid];
"holeP" [style=solid];
"holePC" [style=solid];
"holeRefP" [style=solid];
"hsSpecificationP" [style=solid];
"hsannot" [style=solid];
"hsannot\'" [style=solid];
"hscolour" [style=solid];
"htmlClose" [style=solid];
"htmlHeader" [style=solid];
"i" [style=solid];
"iMeasureP" [style=solid];
"idDataConM" [style=solid];
"idTyCon" [style=solid];
"ifM" [style=solid];
"ignoreCoreBinds" [style=solid];
"ignoreInline" [style=solid];
"ignoreLetBinds" [style=solid];
"ignoreOblig" [style=solid];
"ignoreVar" [style=solid];
"importDeclModule" [style=solid];
"importVars" [style=solid];
"imports" [style=solid];
"impossible" [style=solid];
"inLoc" [style=solid];
"inRange" [style=solid];
"inSpan" [style=solid];
"incrCase" [style=solid];
"incrCaseDepth" [style=solid];
"incrSM" [style=solid];
"indent" [style=solid];
"infixBinderIdP" [style=solid];
"infixBinderIdR" [style=solid];
"infixCondIdR" [style=solid];
"infixGenP" [style=solid];
"infixIdP" [style=solid];
"infixIdR" [style=solid];
"infixP" [style=solid];
"infixl" [style=solid];
"infixlP" [style=solid];
"infixr" [style=solid];
"infixrP" [style=solid];
"infoLits" [style=solid];
"init" [style=solid];
"initCGI" [style=solid];
"initCurrentstatus" [style=solid];
"initDependents" [style=solid];
"initDepzise" [style=solid];
"initEnv" [style=solid];
"initExprMem" [style=solid];
"initFEnv" [style=solid];
"initPStateWithList" [style=solid];
"initSSEnv" [style=solid];
"initSrc" [style=solid];
"initState" [style=solid];
"initUniqueST" [style=solid];
"initValues" [style=solid];
"initial" [style=solid];
"inlineFailCases" [style=solid];
"inlineLoopBreaker" [style=solid];
"inlineP" [style=solid];
"inlineSpecType" [style=solid];
"inlines" [style=solid];
"innerScTr" [style=solid];
"ins" [style=solid];
"insEMem0" [style=solid];
"insertAnnotAnchors" [style=solid];
"insertFEnv" [style=solid];
"insertREnv" [style=solid];
"insertSEnv" [style=solid];
"insertsFEnv" [style=solid];
"insertsSEnv" [style=solid];
"instanceLawP" [style=solid];
"instanceP" [style=solid];
"instanceTyCon" [style=solid];
"instantiate" [style=solid];
"instantiateGhosts" [style=solid];
"instantiatePreds" [style=solid];
"instantiatePvs" [style=solid];
"instantiateTL" [style=solid];
"instantiateTy" [style=solid];
"instantiateTys" [style=solid];
"intCSize" [style=solid];
"intToString" [style=solid];
"invaliasP" [style=solid];
"invariantP" [style=solid];
"irrelevantMult" [style=solid];
"is" [style=solid];
"isANF" [style=solid];
"isAnonBinder" [style=solid];
"isApp" [style=solid];
"isAss" [style=solid];
"isBangInteger" [style=solid];
"isBase" [style=solid];
"isBaseDataCon" [style=solid];
"isBaseTy" [style=solid];
"isBaseType" [style=solid];
"isBool" [style=solid];
"isBoolBind" [style=solid];
"isBootInterface" [style=solid];
"isBootSummary" [style=solid];
"isBoundLikePred" [style=solid];
"isCaseArg" [style=solid];
"isCheckedRealSpan" [style=solid];
"isCheckedSpan" [style=solid];
"isClassBTyCon" [style=solid];
"isClassConCo" [style=solid];
"isClassOrSubClass" [style=solid];
"isClassType" [style=solid];
"isCst" [style=solid];
"isDCId" [style=solid];
"isData" [style=solid];
"isDataConId" [style=solid];
"isDead" [style=solid];
"isDecreasing" [style=solid];
"isDecreasing\'" [style=solid];
"isDerivedInstance" [style=solid];
"isDictionary" [style=solid];
"isDictionaryExpression" [style=solid];
"isDiff" [style=solid];
"isEmbedded" [style=solid];
"isEmptySymbol" [style=solid];
"isEqPred" [style=solid];
"isEqPrimPred" [style=solid];
"isEqType" [style=solid];
"isEqualityConstr" [style=solid];
"isErasable" [style=solid];
"isEvVar" [style=solid];
"isEvVarType" [style=solid];
"isEven" [style=solid];
"isExportedVar" [style=solid];
"isFeasible" [style=solid];
"isFractionalClass" [style=solid];
"isFunTy" [style=solid];
"isFunVar" [style=solid];
"isFunction" [style=solid];
"isGadt" [style=solid];
"isGenericVar" [style=solid];
"isGhcSplId" [style=solid];
"isGoodInstance" [style=solid];
"isHaskellOpChar" [style=solid];
"isHaskellOpStartChar" [style=solid];
"isHole" [style=solid];
"isHoleVar" [style=solid];
"isHomeModule" [style=solid];
"isIdTRecBound" [style=solid];
"isIgnore" [style=solid];
"isImp" [style=solid];
"isInCB" [style=solid];
"isIncl" [style=solid];
"isIncludeFile" [style=solid];
"isInline" [style=solid];
"isInline\'" [style=solid];
"isInternal" [style=solid];
"isIrrefutErrorVar" [style=solid];
"isJunkSpan" [style=solid];
"isKind" [style=solid];
"isKut" [style=solid];
"isLocInFile" [style=solid];
"isLocal" [style=solid];
"isManyDataConTy" [style=solid];
"isMeas" [style=solid];
"isMeasureArg" [style=solid];
"isMethod" [style=solid];
"isMoreSpecific" [style=solid];
"isNonPolyRec" [style=solid];
"isNonValueTy" [style=solid];
"isNullPtr" [style=solid];
"isNullString" [style=solid];
"isNumeric" [style=solid];
"isOdd" [style=solid];
"isPApp" [style=solid];
"isPLEVar" [style=solid];
"isParam" [style=solid];
"isParamSubterm" [style=solid];
"isParened" [style=solid];
"isParentModuleOf" [style=solid];
"isPolyCst" [style=solid];
"isPredExpr" [style=solid];
"isPredType" [style=solid];
"isPredVar" [style=solid];
"isPrimBareType" [style=solid];
"isProjection" [style=solid];
"isProp" [style=solid];
"isPropBareType" [style=solid];
"isPropPV" [style=solid];
"isQualified" [style=solid];
"isQualifiedSym" [style=solid];
"isRExprArg" [style=solid];
"isRVar" [style=solid];
"isRecursivenewTyCon" [style=solid];
"isRefined" [style=solid];
"isReflectVar" [style=solid];
"isReflectableTyCon" [style=solid];
"isResolvedDataConP" [style=solid];
"isSensible" [style=solid];
"isSimpleType" [style=solid];
"isSizeable" [style=solid];
"isSmaller" [style=solid];
"isSpecImport" [style=solid];
"isSplSymbol" [style=solid];
"isSrcImport" [style=solid];
"isSymbolOfVar" [style=solid];
"isTarget" [style=solid];
"isTargetModName" [style=solid];
"isTauto_ureft" [style=solid];
"isTmpSymbol" [style=solid];
"isTmpVar" [style=solid];
"isTrivial" [style=solid];
"isTuple" [style=solid];
"isTupleId" [style=solid];
"isType" [style=solid];
"isUndefined" [style=solid];
"isValKind" [style=solid];
"isValid" [style=solid];
"isVar" [style=solid];
"isVarTup" [style=solid];
"isWellTyped" [style=solid];
"isWiredIn" [style=solid];
"isWiredInLoc" [style=solid];
"isWiredInName" [style=solid];
"isWiredInShape" [style=solid];
"isWorker" [style=solid];
"join" [style=solid];
"joinL" [style=solid];
"joinVar" [style=solid];
"kVarId" [style=solid];
"kVarSpan" [style=solid];
"keepPredType" [style=solid];
"keepRawTokenStream" [style=solid];
"keyDiff" [style=solid];
"killHoles" [style=solid];
"killSubst" [style=solid];
"killSubstReft" [style=solid];
"kindArity" [style=solid];
"kindP" [style=solid];
"kindTCArity" [style=solid];
"kindToBRType" [style=solid];
"kindToRType" [style=solid];
"kindToRType_" [style=solid];
"knownGhcDataCon" [style=solid];
"knownGhcTyCon" [style=solid];
"knownGhcType" [style=solid];
"knownGhcVar" [style=solid];
"knownVars" [style=solid];
"knownWiredDataCons" [style=solid];
"knownWiredTyCons" [style=solid];
"lamExpr" [style=solid];
"lambdaSingleton" [style=solid];
"lastModified" [style=solid];
"lazyVarP" [style=solid];
"leg1" [style=solid];
"leg3" [style=solid];
"leg5" [style=solid];
"lem_asgn" [style=solid];
"lem_bsubst" [style=solid];
"lem_conseq_post" [style=solid];
"lem_conseq_pre" [style=solid];
"lem_if" [style=solid];
"lem_post_true" [style=solid];
"lem_pre_false" [style=solid];
"lem_seq" [style=solid];
"lem_skip" [style=solid];
"lem_subst" [style=solid];
"lem_while" [style=solid];
"lemma_get_not_set" [style=solid];
"lemma_get_set" [style=solid];
"lenLocSymbol" [style=solid];
"lenOf" [style=solid];
"leq" [style=solid];
"leqBind" [style=solid];
"libDeps" [style=solid];
"libTarget" [style=solid];
"lift" [style=solid];
"liftA2" [style=solid];
"liftCG" [style=solid];
"liftCG0" [style=solid];
"liftM" [style=solid];
"liftM2" [style=solid];
"liftableTyCons" [style=solid];
"liftedSpecGetter" [style=solid];
"line" [style=solid];
"lineCol" [style=solid];
"lineColor1" [style=solid];
"lineColor2" [style=solid];
"lineDiff" [style=solid];
"lineDiff\'" [style=solid];
"lineE" [style=solid];
"lineSpan" [style=solid];
"lineString" [style=solid];
"lintCoreBindings" [style=solid];
"liquid" [style=solid];
"liquidAssert" [style=solid];
"liquidAssertB" [style=solid];
"liquidAssume" [style=solid];
"liquidAssumeB" [style=solid];
"liquidBegin" [style=solid];
"liquidConstraints" [style=solid];
"liquidEnd" [style=solid];
"liquidError" [style=solid];
"liquidHaskellCheck" [style=solid];
"liquidHaskellMain" [style=solid];
"liquidOne" [style=solid];
"liquidQueries" [style=solid];
"liquidQuery" [style=solid];
"listLMap" [style=solid];
"listTyDataCons" [style=solid];
"litSpans" [style=solid];
"literalConst" [style=solid];
"literalFRefType" [style=solid];
"literalFReft" [style=solid];
"lmapEAlias" [style=solid];
"loadDependencies" [style=solid];
"loadDependenciesOf" [style=solid];
"loadLiftedSpec" [style=solid];
"loadModule\'" [style=solid];
"loadResult" [style=solid];
"locBinderP" [style=solid];
"locFile" [style=solid];
"locInfixCondIdP" [style=solid];
"locNamedThing" [style=solid];
"locSourcePos" [style=solid];
"locUpperIdP\'" [style=solid];
"locUpperOrInfixIdP" [style=solid];
"localBinds" [style=solid];
"localBindsOfType" [style=solid];
"localKey" [style=solid];
"localMaxAppDepth" [style=solid];
"localMaxArgsDepth" [style=solid];
"localMaxMatchDepth" [style=solid];
"localVarMap" [style=solid];
"localVarSymbol" [style=solid];
"locally" [style=solid];
"localsREnv" [style=solid];
"logicType" [style=solid];
"lookupAll" [style=solid];
"lookupAnfEnv" [style=solid];
"lookupCompanionSpec" [style=solid];
"lookupDefaultVar" [style=solid];
"lookupFun" [style=solid];
"lookupGhcDataCon" [style=solid];
"lookupGhcDnCon" [style=solid];
"lookupGhcDnTyCon" [style=solid];
"lookupGhcDnTyConE" [style=solid];
"lookupGhcNamedVar" [style=solid];
"lookupGhcTyCon" [style=solid];
"lookupGhcVar" [style=solid];
"lookupGlobalName" [style=solid];
"lookupInterfaceAnnotations" [style=solid];
"lookupLoadedHomeModule" [style=solid];
"lookupLocalVar" [style=solid];
"lookupModSummary" [style=solid];
"lookupModule" [style=solid];
"lookupName" [style=solid];
"lookupNewType" [style=solid];
"lookupREnv" [style=solid];
"lookupRInv" [style=solid];
"lookupRTEnv" [style=solid];
"lookupRdrName" [style=solid];
"lookupThings" [style=solid];
"lookupTyThing" [style=solid];
"lookupTyThings" [style=solid];
"lower" [style=solid];
"lowerIdTail" [style=solid];
"lq" [style=solid];
"lqDec" [style=solid];
"lt" [style=solid];
"main" [style=solid];
"maintainLParen" [style=solid];
"maintainRParen" [style=solid];
"makeAlt" [style=solid];
"makeApp" [style=solid];
"makeAsmSigs" [style=solid];
"makeAssumeType" [style=solid];
"makeAutoDecrDataCons" [style=solid];
"makeAutoInst" [style=solid];
"makeAutoSize" [style=solid];
"makeAxiom" [style=solid];
"makeAxiomEnvironment" [style=solid];
"makeBound" [style=solid];
"makeBoundType" [style=solid];
"makeCLaws" [style=solid];
"makeCallGraph" [style=solid];
"makeClassMeasureSpec" [style=solid];
"makeClasses" [style=solid];
"makeCompositionExpression" [style=solid];
"makeConTypes" [style=solid];
"makeContext" [style=solid];
"makeContext1" [style=solid];
"makeContextLine" [style=solid];
"makeDataConChecker" [style=solid];
"makeDataConSelector" [style=solid];
"makeDataConSelector\'" [style=solid];
"makeDataConType" [style=solid];
"makeDataConTypes" [style=solid];
"makeDataCtor" [style=solid];
"makeDataDecl" [style=solid];
"makeDataDecls" [style=solid];
"makeDataFields" [style=solid];
"makeDecrIndex" [style=solid];
"makeDecrIndexTy" [style=solid];
"makeDecrType" [style=solid];
"makeDecrs" [style=solid];
"makeDefaultMethods" [style=solid];
"makeDependencies" [style=solid];
"makeDicTypeName" [style=solid];
"makeDictionaries" [style=solid];
"makeDictionary" [style=solid];
"makeDictionaryName" [style=solid];
"makeEmbeds" [style=solid];
"makeEnv" [style=solid];
"makeEquations" [style=solid];
"makeFDataDecls" [style=solid];
"makeFail" [style=solid];
"makeFailErrors" [style=solid];
"makeFailUseErrors" [style=solid];
"makeFamInstEmbeds" [style=solid];
"makeFamInstEnv" [style=solid];
"makeFileName" [style=solid];
"makeFromSet" [style=solid];
"makeGConfig" [style=solid];
"makeGMap" [style=solid];
"makeGhcSpec" [style=solid];
"makeGhcSpec0" [style=solid];
"makeGhcSrc" [style=solid];
"makeHaskellAxioms" [style=solid];
"makeHaskellDataDecls" [style=solid];
"makeHaskellInlines" [style=solid];
"makeHaskellMeasures" [style=solid];
"makeIAliases" [style=solid];
"makeImports" [style=solid];
"makeInlSigs" [style=solid];
"makeInstanceLaw" [style=solid];
"makeInstanceLaws" [style=solid];
"makeInvariants" [style=solid];
"makeLazy" [style=solid];
"makeLexRefa" [style=solid];
"makeLexReft" [style=solid];
"makeLiftedSigs" [style=solid];
"makeLiftedSpec" [style=solid];
"makeLiftedSpec0" [style=solid];
"makeLiftedSpec1" [style=solid];
"makeLocalVars" [style=solid];
"makeLogicMap" [style=solid];
"makeMGIModGuts" [style=solid];
"makeMeasEnv" [style=solid];
"makeMeasureChecker" [style=solid];
"makeMeasureDefinition" [style=solid];
"makeMeasureInline" [style=solid];
"makeMeasureInvariants" [style=solid];
"makeMeasureSelector" [style=solid];
"makeMeasureSelectors" [style=solid];
"makeMeasureSpec" [style=solid];
"makeMeasureSpec\'" [style=solid];
"makeMethod" [style=solid];
"makeMethodTypes" [style=solid];
"makeMsrSigs" [style=solid];
"makeMthSigs" [style=solid];
"makeNewType" [style=solid];
"makeNewTypes" [style=solid];
"makeNumEmbeds" [style=solid];
"makeNumEnv" [style=solid];
"makeNumericInfoOne" [style=solid];
"makePKeys" [style=solid];
"makePluggedDataCon" [style=solid];
"makePluggedSig" [style=solid];
"makeQualifiers" [style=solid];
"makeREAliases" [style=solid];
"makeRTAliases" [style=solid];
"makeRTEnv" [style=solid];
"makeRTVar" [style=solid];
"makeRTypeBase" [style=solid];
"makeRecInvariants" [style=solid];
"makeRecType" [style=solid];
"makeRecordSelectorSigs" [style=solid];
"makeRef" [style=solid];
"makeRewrite" [style=solid];
"makeRewriteOne" [style=solid];
"makeRewriteWith" [style=solid];
"makeRewrites" [style=solid];
"makeSigEnv" [style=solid];
"makeSimplify" [style=solid];
"makeSingleton" [style=solid];
"makeSize" [style=solid];
"makeSizedDataCons" [style=solid];
"makeSpecData" [style=solid];
"makeSpecDictionaries" [style=solid];
"makeSpecDictionary" [style=solid];
"makeSpecDictionaryOne" [style=solid];
"makeSpecLaws" [style=solid];
"makeSpecName" [style=solid];
"makeSpecQual" [style=solid];
"makeSpecRefl" [style=solid];
"makeSpecSig" [style=solid];
"makeSpecTerm" [style=solid];
"makeSpecVars" [style=solid];
"makeSymMap" [style=solid];
"makeTExpr" [style=solid];
"makeTagEnv" [style=solid];
"makeTargetSpec" [style=solid];
"makeTargetSrc" [style=solid];
"makeTermEnvs" [style=solid];
"makeTrans" [style=solid];
"makeTyConEmbeds" [style=solid];
"makeTyConInfo" [style=solid];
"makeTyConVariance" [style=solid];
"makeTySigs" [style=solid];
"makeTyThingMap" [style=solid];
"makeTycEnv" [style=solid];
"makeUnSorted" [style=solid];
"makeVarSubst" [style=solid];
"makeVarTExprs" [style=solid];
"makesub" [style=solid];
"manyDataCon" [style=solid];
"manyDataConKey" [style=solid];
"manyDataConName" [style=solid];
"manyDataConTy" [style=solid];
"manyDataConTyCon" [style=solid];
"mapAccumM" [style=solid];
"mapAlt" [style=solid];
"mapArgumens" [style=solid];
"mapBdM" [style=solid];
"mapBind" [style=solid];
"mapBindRef" [style=solid];
"mapBnd" [style=solid];
"mapBot" [style=solid];
"mapBotRef" [style=solid];
"mapExpr" [style=solid];
"mapExprReft" [style=solid];
"mapFourth4" [style=solid];
"mapFst3" [style=solid];
"mapMWithLog" [style=solid];
"mapN" [style=solid];
"mapNonRec" [style=solid];
"mapNs" [style=solid];
"mapPropM" [style=solid];
"mapRBase" [style=solid];
"mapRTAVars" [style=solid];
"mapRefM" [style=solid];
"mapReft" [style=solid];
"mapReftM" [style=solid];
"mapRight" [style=solid];
"mapSnd3" [style=solid];
"mapSndM" [style=solid];
"mapThd3" [style=solid];
"mapTyRVar" [style=solid];
"mapTyVarValue" [style=solid];
"mapTyVars" [style=solid];
"mapType" [style=solid];
"mapWithFun" [style=solid];
"mappendSortFTC" [style=solid];
"matchImp" [style=solid];
"matchKindArgs" [style=solid];
"matchKindArgs\'" [style=solid];
"matchMod" [style=solid];
"matchOn" [style=solid];
"matchOnExpr" [style=solid];
"matchTyCon" [style=solid];
"matchTypes" [style=solid];
"maxArity" [style=solid];
"maxCaseExpand" [style=solid];
"maxQualParams" [style=solid];
"maybeBind" [style=solid];
"maybeDigit" [style=solid];
"maybeEither" [style=solid];
"maybeParen" [style=solid];
"maybePlug" [style=solid];
"maybeResolveSym" [style=solid];
"maybeSpan" [style=solid];
"maybeTrue" [style=solid];
"mbSrcSpan" [style=solid];
"measEnv" [style=solid];
"measureCtors" [style=solid];
"measureDefP" [style=solid];
"measureFail" [style=solid];
"measureP" [style=solid];
"measurePatP" [style=solid];
"measureSpecType" [style=solid];
"measureToBare" [style=solid];
"measureTypeToInv" [style=solid];
"meetDataConSpec" [style=solid];
"meetListWithPSub" [style=solid];
"meetListWithPSubRef" [style=solid];
"meetListWithPSubs" [style=solid];
"meetListWithPSubsRef" [style=solid];
"meetSpans" [style=solid];
"meetVarTypes" [style=solid];
"meetWorkWrapRep" [style=solid];
"meets" [style=solid];
"memTagEnv" [style=solid];
"memberREnv" [style=solid];
"mergeDataConTypes" [style=solid];
"mergeInputWithCompanion" [style=solid];
"mergecondition" [style=solid];
"mgClsInstances" [style=solid];
"mgNames" [style=solid];
"mg_dir_imps" [style=solid];
"mgi_namestring" [style=solid];
"miModGuts" [style=solid];
"minus" [style=solid];
"mkAlive" [style=solid];
"mkAnnMap" [style=solid];
"mkAnnMapBinders" [style=solid];
"mkAnnMapErr" [style=solid];
"mkAnnMapTyp" [style=solid];
"mkAnonTyConBinders" [style=solid];
"mkArrow" [style=solid];
"mkBTyCon" [style=solid];
"mkBots" [style=solid];
"mkC" [style=solid];
"mkClass" [style=solid];
"mkClassBTyCon" [style=solid];
"mkClassE" [style=solid];
"mkCompanionSpec" [style=solid];
"mkConsPat" [style=solid];
"mkConstr" [style=solid];
"mkDType" [style=solid];
"mkDataConWorkerName" [style=solid];
"mkDecrFun" [style=solid];
"mkDepGraphNode" [style=solid];
"mkDiagnostics" [style=solid];
"mkError" [style=solid];
"mkErrorDoc" [style=solid];
"mkFInstRTyCon" [style=solid];
"mkFreshIds" [style=solid];
"mkFun" [style=solid];
"mkFunInfo" [style=solid];
"mkFunTy" [style=solid];
"mkGraph" [style=solid];
"mkI" [style=solid];
"mkInputSpec" [style=solid];
"mkIntExprInt" [style=solid];
"mkInvariant" [style=solid];
"mkLiquidLib" [style=solid];
"mkLit" [style=solid];
"mkLocalVar" [style=solid];
"mkLongErrAt" [style=solid];
"mkM" [style=solid];
"mkMSpec" [style=solid];
"mkMSpec\'" [style=solid];
"mkMeasureDCon" [style=solid];
"mkMeasureDCon_" [style=solid];
"mkMeasureSort" [style=solid];
"mkNilPat" [style=solid];
"mkOpts" [style=solid];
"mkOutput" [style=solid];
"mkPQual" [style=solid];
"mkParam" [style=solid];
"mkProductTy" [style=solid];
"mkPromotedBTyCon" [style=solid];
"mkPropositionType" [style=solid];
"mkPtr" [style=solid];
"mkQual" [style=solid];
"mkR" [style=solid];
"mkRApp" [style=solid];
"mkRAppTy" [style=solid];
"mkRTE" [style=solid];
"mkRTProp" [style=solid];
"mkRTyCon" [style=solid];
"mkRTyConIAl" [style=solid];
"mkRTyConInv" [style=solid];
"mkRecBinds" [style=solid];
"mkReft" [style=solid];
"mkS" [style=solid];
"mkScaled" [style=solid];
"mkSpec" [style=solid];
"mkSpecDecs" [style=solid];
"mkSrcCall" [style=solid];
"mkStableModule" [style=solid];
"mkStableName" [style=solid];
"mkStatus" [style=solid];
"mkStructCall" [style=solid];
"mkSubC" [style=solid];
"mkSubs" [style=solid];
"mkTVarInfo" [style=solid];
"mkTcData" [style=solid];
"mkTermError" [style=solid];
"mkTupPat" [style=solid];
"mkTyArg" [style=solid];
"mkTyConInfo" [style=solid];
"mkUnivs" [style=solid];
"mkUserLocal" [style=solid];
"mkUserStyle" [style=solid];
"mkVar" [style=solid];
"mkVarExpr" [style=solid];
"mkWarning" [style=solid];
"mkWiredInDataConName" [style=solid];
"mkps" [style=solid];
"mkps_" [style=solid];
"mmonoPredicateP" [style=solid];
"modInfoLookupName" [style=solid];
"modNotLoadedError" [style=solid];
"modSummaryHsFile" [style=solid];
"modSummaryImports" [style=solid];
"modificationTime" [style=solid];
"moduleFile" [style=solid];
"moduleFiles" [style=solid];
"moduleInfoTc" [style=solid];
"moduleUnitId" [style=solid];
"monoPredicate1P" [style=solid];
"monoPredicateP" [style=solid];
"multiplicityTyCon" [style=solid];
"multiplicityTyConKey" [style=solid];
"multiplicityTyConName" [style=solid];
"mungeNames" [style=solid];
"myAsmSig" [style=solid];
"myQualify" [style=solid];
"myRTEnv" [style=solid];
"mySrcThings" [style=solid];
"myTracepp" [style=solid];
"nameDistance" [style=solid];
"nameSetToStableNameSet" [style=solid];
"namedCircleP" [style=solid];
"namedLocSymbol" [style=solid];
"namedPanic" [style=solid];
"needQuals" [style=solid];
"neq" [style=solid];
"nests" [style=solid];
"newPrune" [style=solid];
"nextBinds" [style=solid];
"niceTemps" [style=solid];
"nilPatP" [style=solid];
"nlzP" [style=solid];
"noDummySyms" [style=solid];
"noErrors" [style=solid];
"noHoles" [style=solid];
"noTerm" [style=solid];
"noTyVars" [style=solid];
"noWhere" [style=solid];
"nonPoly" [style=solid];
"nonRecCoreBinds" [style=solid];
"nonTrivial" [style=solid];
"nonTrivials" [style=solid];
"normalize" [style=solid];
"normalizeAlts" [style=solid];
"normalizeBareAlias" [style=solid];
"normalizeBind" [style=solid];
"normalizeField" [style=solid];
"normalizeForAllTys" [style=solid];
"normalizeLiteral" [style=solid];
"normalizeName" [style=solid];
"normalizePattern" [style=solid];
"normalizePds" [style=solid];
"normalizeTopBind" [style=solid];
"normalizeTuples" [style=solid];
"normalizeTyVars" [style=solid];
"normalizeVV" [style=solid];
"notStructural" [style=solid];
"notrace" [style=solid];
"notracePpr" [style=solid];
"nubHashLast" [style=solid];
"nubHashLastM" [style=solid];
"nubHashOn" [style=solid];
"nullPC" [style=solid];
"nullaryConPatP" [style=solid];
"ofBDataCtor" [style=solid];
"ofBDataDecl" [style=solid];
"ofBPVar" [style=solid];
"ofBRType" [style=solid];
"ofBSort" [style=solid];
"ofBSortE" [style=solid];
"ofBareType" [style=solid];
"ofBareTypeE" [style=solid];
"ofLitType" [style=solid];
"ofRSort" [style=solid];
"ofType" [style=solid];
"ofType\'" [style=solid];
"ofType_" [style=solid];
"okUnqualified" [style=solid];
"one" [style=solid];
"oneClassArg" [style=solid];
"oneLine" [style=solid];
"optBindP" [style=solid];
"options" [style=solid];
"ordNub" [style=solid];
"ordSrcSpan" [style=solid];
"orderTargets" [style=solid];
"outerScTr" [style=solid];
"pApp" [style=solid];
"pLen" [style=solid];
"pToRef" [style=solid];
"pVartoRConc" [style=solid];
"pad" [style=solid];
"pandocCmd" [style=solid];
"pandocPreProc" [style=solid];
"panic" [style=solid];
"panicDataCon" [style=solid];
"panicDoc" [style=solid];
"panicError" [style=solid];
"panicFieldNumMismatch" [style=solid];
"panicUnbound" [style=solid];
"pappArity" [style=solid];
"pappSort" [style=solid];
"pappSym" [style=solid];
"paren" [style=solid];
"parens" [style=solid];
"parseErrorBundleToErrors" [style=solid];
"parseErrorError" [style=solid];
"parseLines" [style=solid];
"parseLog" [style=solid];
"parseModule" [style=solid];
"parsePragma" [style=solid];
"parseSpecFile" [style=solid];
"parseSymbolToLogic" [style=solid];
"parseTest\'" [style=solid];
"parseWithError" [style=solid];
"partition" [style=solid];
"partitionArgs" [style=solid];
"partitionLocalBinds" [style=solid];
"partitionMaybe" [style=solid];
"partitionPs" [style=solid];
"pattern" [style=solid];
"patternFlag" [style=solid];
"pay" [style=solid];
"pcDataCon" [style=solid];
"pcTyCon" [style=solid];
"pdAnd" [style=solid];
"pdTrue" [style=solid];
"pdVar" [style=solid];
"pdVarReft" [style=solid];
"pickOneA" [style=solid];
"plainRTyConPVars" [style=solid];
"plotCompareData" [style=solid];
"plotCompareTimeData" [style=solid];
"plotData" [style=solid];
"plotSuccessData" [style=solid];
"plotTimeData" [style=solid];
"plugHoles" [style=solid];
"plugHoles_new" [style=solid];
"plugHoles_old" [style=solid];
"plugMany" [style=solid];
"plugSrc" [style=solid];
"plugin" [style=solid];
"pluginAbort" [style=solid];
"plus" [style=solid];
"plusLoc" [style=solid];
"pointColor1" [style=solid];
"pointColor2" [style=solid];
"posttag" [style=solid];
"powersetUpTo" [style=solid];
"ppAlias" [style=solid];
"ppAllExpr" [style=solid];
"ppAnnotErr" [style=solid];
"ppAnnotTyp" [style=solid];
"ppAsserts" [style=solid];
"ppComm" [style=solid];
"ppContext" [style=solid];
"ppEnv" [style=solid];
"ppEnvDef" [style=solid];
"ppEnvShort" [style=solid];
"ppEqs" [style=solid];
"ppError" [style=solid];
"ppError\'" [style=solid];
"ppExists" [style=solid];
"ppFields" [style=solid];
"ppFull" [style=solid];
"ppList" [style=solid];
"ppMbSizeFun" [style=solid];
"ppMethods" [style=solid];
"ppNames" [style=solid];
"ppOblig" [style=solid];
"ppPat" [style=solid];
"ppPropInContext" [style=solid];
"ppPspec" [style=solid];
"ppRISig" [style=solid];
"ppRefArgs" [style=solid];
"ppRefSym" [style=solid];
"ppReftPs" [style=solid];
"ppReqInContext" [style=solid];
"ppReqModelInContext" [style=solid];
"ppSpecType" [style=solid];
"ppSpecTypeErr" [style=solid];
"ppSrcSpans" [style=solid];
"ppTicks" [style=solid];
"ppTyConB" [style=solid];
"ppTy_ureft" [style=solid];
"ppVars" [style=solid];
"pprAnnInfoBind" [style=solid];
"pprAnnInfoBinds" [style=solid];
"pprCGInfo" [style=solid];
"pprDoc" [style=solid];
"pprManyOrdered" [style=solid];
"pprRealSrcSpan" [style=solid];
"pprShow" [style=solid];
"pprSrcSpan" [style=solid];
"pprXOT" [style=solid];
"ppr_cls" [style=solid];
"ppr_dbind" [style=solid];
"ppr_forall" [style=solid];
"ppr_name" [style=solid];
"ppr_pvar" [style=solid];
"ppr_pvar_def" [style=solid];
"ppr_pvar_kind" [style=solid];
"ppr_pvar_sort" [style=solid];
"ppr_ref" [style=solid];
"ppr_reft" [style=solid];
"ppr_rsubtype" [style=solid];
"ppr_rtvar_def" [style=solid];
"ppr_rty_fun" [style=solid];
"ppr_rtype" [style=solid];
"pprintAlts" [style=solid];
"pprintBind" [style=solid];
"pprintBody" [style=solid];
"pprintCBs" [style=solid];
"pprintFormals" [style=solid];
"pprintLongList" [style=solid];
"pprintMany" [style=solid];
"pprintModel" [style=solid];
"pprintSym" [style=solid];
"pprintSymbol" [style=solid];
"pprintSymbols" [style=solid];
"pprintVar" [style=solid];
"pprints" [style=solid];
"pprt_raw" [style=solid];
"pragmaP" [style=solid];
"pre" [style=solid];
"predFTyCon" [style=solid];
"predMap" [style=solid];
"predName" [style=solid];
"predRTyCon" [style=solid];
"predType" [style=solid];
"predTypeDDP" [style=solid];
"predUReft" [style=solid];
"predVarDefP" [style=solid];
"predVarDefsP" [style=solid];
"predVarIdP" [style=solid];
"predVarUseP" [style=solid];
"predicate1P" [style=solid];
"predicatesP" [style=solid];
"predsUnify" [style=solid];
"pretag" [style=solid];
"primDataCon" [style=solid];
"printError" [style=solid];
"printLiquidHaskellBanner" [style=solid];
"printWarning" [style=solid];
"processModule" [style=solid];
"processModules" [style=solid];
"processTargetModule" [style=solid];
"prodScrutinees" [style=solid];
"projectTypes" [style=solid];
"proofTyConName" [style=solid];
"prop_set" [style=solid];
"propositionSortP" [style=solid];
"propositionTypeP" [style=solid];
"prune" [style=solid];
"pruneFlag" [style=solid];
"pure" [style=solid];
"push" [style=solid];
"put" [style=solid];
"putErrMsg" [style=solid];
"putLogMsg" [style=solid];
"putWarnMsg" [style=solid];
"pvArgs" [style=solid];
"pvType" [style=solid];
"pvarRType" [style=solid];
"pvars" [style=solid];
"pwd" [style=solid];
"qImports" [style=solid];
"qualifiedDataName" [style=solid];
"qualifiedImports" [style=solid];
"qualifiedNameSymbol" [style=solid];
"qualifiedSymbol" [style=solid];
"qualifyBareSpec" [style=solid];
"qualifyDataCtor" [style=solid];
"qualifyExpand" [style=solid];
"qualifyFTycon" [style=solid];
"qualifyField" [style=solid];
"qualifyModName" [style=solid];
"qualifySpec" [style=solid];
"qualifySymMap" [style=solid];
"qualifySymbol" [style=solid];
"qualifySymbolic" [style=solid];
"qualifyTermExpr" [style=solid];
"qualifyTop" [style=solid];
"qualifyTopDummy" [style=solid];
"qualifyingBinders" [style=solid];
"quantifyFreeRTy" [style=solid];
"quantifyRTy" [style=solid];
"quietly" [style=solid];
"rApp" [style=solid];
"rCls" [style=solid];
"rEx" [style=solid];
"rFun" [style=solid];
"rHole" [style=solid];
"rImpF" [style=solid];
"rPred" [style=solid];
"rPropP" [style=solid];
"rRCls" [style=solid];
"rTVar" [style=solid];
"rTVarInfo" [style=solid];
"rTVarToBind" [style=solid];
"rTyConPVs" [style=solid];
"rTyConPropVs" [style=solid];
"rTyConWithPVars" [style=solid];
"rTyVar" [style=solid];
"rTypeReft" [style=solid];
"rTypeSort" [style=solid];
"rTypeSortExp" [style=solid];
"rTypeSortedReft" [style=solid];
"rTypeSortedReft\'" [style=solid];
"rTypeValueVar" [style=solid];
"rVar" [style=solid];
"rankedThings" [style=solid];
"rawAsmSigs" [style=solid];
"rawBodyP" [style=solid];
"reachableModules" [style=solid];
"realSrcSpan" [style=solid];
"realSrcSpanSourcePos" [style=solid];
"realSrcSpanSourcePosE" [style=solid];
"realTargets" [style=solid];
"realTcArity" [style=solid];
"recSelectorsTy" [style=solid];
"recType" [style=solid];
"refAppTyToFun" [style=solid];
"refBindBindP" [style=solid];
"refDefP" [style=solid];
"refP" [style=solid];
"refToken" [style=solid];
"refTopQuals" [style=solid];
"refTypeQuals" [style=solid];
"refaConjuncts" [style=solid];
"refasHoleP" [style=solid];
"refineWithCtorBody" [style=solid];
"refinementEQs" [style=solid];
"reflectedTyCons" [style=solid];
"reflectedVars" [style=solid];
"refreshArgs" [style=solid];
"refreshArgsSub" [style=solid];
"refreshArgsTop" [style=solid];
"refreshArgs\'" [style=solid];
"refreshHoles" [style=solid];
"refreshHoles\'" [style=solid];
"refreshPs" [style=solid];
"refreshRef" [style=solid];
"refreshRefType" [style=solid];
"refreshSymbol" [style=solid];
"refreshSymbols" [style=solid];
"refreshTy" [style=solid];
"refreshVV" [style=solid];
"refreshVVRef" [style=solid];
"reftUReft" [style=solid];
"relevantModules" [style=solid];
"removeInfo" [style=solid];
"removeInvariant" [style=solid];
"renameLocalSig" [style=solid];
"renameRTArgs" [style=solid];
"renameRTVArgs" [style=solid];
"renameTys" [style=solid];
"renameVV" [style=solid];
"render" [style=solid];
"renderAnnotToken" [style=solid];
"renderDirect" [style=solid];
"renderErrAnnot" [style=solid];
"renderHtml" [style=solid];
"renderLinAnnot" [style=solid];
"renderModule" [style=solid];
"renderPandoc" [style=solid];
"renderPandoc\'" [style=solid];
"renderTypAnnot" [style=solid];
"renderWithStyle" [style=solid];
"renvMaps" [style=solid];
"repeatFix" [style=solid];
"replace" [style=solid];
"replaceIrrefutPat" [style=solid];
"replaceIrrefutPat\'" [style=solid];
"replaceN" [style=solid];
"replaceNewLine" [style=solid];
"replacePreds" [style=solid];
"replacePredsWithRefs" [style=solid];
"replaceReft" [style=solid];
"replaceSubset" [style=solid];
"replaceTop" [style=solid];
"replaceTuple" [style=solid];
"replaceVisitor" [style=solid];
"replaceWith" [style=solid];
"reportErrors" [style=solid];
"reportResult" [style=solid];
"reportResultJson" [style=solid];
"resDocs" [style=solid];
"resetChange" [style=solid];
"resolveAsmVar" [style=solid];
"resolveDecls" [style=solid];
"resolveDictionaries" [style=solid];
"resolveLocalBinds" [style=solid];
"resolveQParams" [style=solid];
"resolveReft" [style=solid];
"resolveStringVar" [style=solid];
"resolveTyCons" [style=solid];
"resolveWith" [style=solid];
"restoreInvariant" [style=solid];
"resultTy" [style=solid];
"resultWithContext" [style=solid];
"return" [style=solid];
"returnsTuple" [style=solid];
"rewriteBindWith" [style=solid];
"rewriteBinds" [style=solid];
"rewriteVarP" [style=solid];
"rewriteWith" [style=solid];
"rewriteWithP" [style=solid];
"riMethodSigP" [style=solid];
"rmMeasures" [style=solid];
"rmModName" [style=solid];
"rmTrivials" [style=solid];
"rmTypeAppl" [style=solid];
"rpredType" [style=solid];
"rrTy" [style=solid];
"rsplitC" [style=solid];
"rsplitW" [style=solid];
"rsplitsCWithVariance" [style=solid];
"rtAliasP" [style=solid];
"rtPropPV" [style=solid];
"rtPropTop" [style=solid];
"rtvinfo_is_val" [style=solid];
"rtyVarType" [style=solid];
"rtypeDoc" [style=solid];
"rtypePredBinds" [style=solid];
"runGradual" [style=solid];
"runLiquid" [style=solid];
"runLiquidGhc" [style=solid];
"runLiquidTargets" [style=solid];
"runLiquid\'" [style=solid];
"runMapTyVars" [style=solid];
"runToLogic" [style=solid];
"runToLogicWithBoolBinds" [style=solid];
"s1" [style=solid];
"sDocDoc" [style=solid];
"safeBkArrow" [style=solid];
"safeFromAsserted" [style=solid];
"safeFromJust" [style=solid];
"safeFromLeft" [style=solid];
"safeIxScruts" [style=solid];
"safeLogIndex" [style=solid];
"safeZip3WithError" [style=solid];
"safeZipWith" [style=solid];
"safeZipWithError" [style=solid];
"saveLiftedSpec" [style=solid];
"saveResult" [style=solid];
"sayReadFile" [style=solid];
"scTrans" [style=solid];
"scaledThing" [style=solid];
"scrapeVars" [style=solid];
"script" [style=solid];
"second3M" [style=solid];
"secondHalf" [style=solid];
"secondM" [style=solid];
"selectDD" [style=solid];
"sepModNames" [style=solid];
"sepUnique" [style=solid];
"sepVcat" [style=solid];
"sep\'" [style=solid];
"serialiseBinaryObject" [style=solid];
"serialiseLiquidLib" [style=solid];
"set" [style=solid];
"setBind" [style=solid];
"setBind\'" [style=solid];
"setChange" [style=solid];
"setCurrentFun" [style=solid];
"setIdTRecBound" [style=solid];
"setLocation" [style=solid];
"setPId" [style=solid];
"setREAlias" [style=solid];
"setRTAlias" [style=solid];
"setRecs" [style=solid];
"setRtvPol" [style=solid];
"setShift" [style=solid];
"setTRec" [style=solid];
"setTargetModules" [style=solid];
"shiftVV" [style=solid];
"shortModules" [style=solid];
"shortSymbol" [style=solid];
"shouldNormalize" [style=solid];
"showCBs" [style=solid];
"showCand" [style=solid];
"showCands" [style=solid];
"showCoreAlt" [style=solid];
"showCoreAlts" [style=solid];
"showEmem" [style=solid];
"showEmem\'" [style=solid];
"showGoals" [style=solid];
"showPpr" [style=solid];
"showSDoc" [style=solid];
"showSDocDump" [style=solid];
"showSpan" [style=solid];
"showTy" [style=solid];
"sigQualifiers" [style=solid];
"sigVars" [style=solid];
"simpleSymbolVar" [style=solid];
"simplesymbol" [style=solid];
"simplify" [style=solid];
"simplifyBareType" [style=solid];
"simplifyBareType\'" [style=solid];
"simplifyBareType\'\'" [style=solid];
"simplifyBounds" [style=solid];
"simplifyCore" [style=solid];
"simplifyExpr" [style=solid];
"simplifyLen" [style=solid];
"simplifyPatTuple" [style=solid];
"single" [style=solid];
"singleSpecP" [style=solid];
"singletonApp" [style=solid];
"singletonReft" [style=solid];
"skipTarget" [style=solid];
"slice" [style=solid];
"sliceREnv" [style=solid];
"sliceSaved" [style=solid];
"sliceSaved\'" [style=solid];
"snd4" [style=solid];
"solDelim" [style=solid];
"solveCs" [style=solid];
"solveSInfo" [style=solid];
"sortCases" [style=solid];
"sortDiff" [style=solid];
"sortOn" [style=solid];
"sourceErrors" [style=solid];
"sourceName" [style=solid];
"sourcePos2SrcSpan" [style=solid];
"sourcePosSrcLoc" [style=solid];
"sourcePosSrcSpan" [style=solid];
"spacePrefix" [style=solid];
"spanAnnot" [style=solid];
"spanDiff" [style=solid];
"spanLine" [style=solid];
"spanSrcSpan" [style=solid];
"specAxiomVars" [style=solid];
"specBinders" [style=solid];
"specDefs" [style=solid];
"specExpandType" [style=solid];
"specP" [style=solid];
"specREAlias" [style=solid];
"specSigs" [style=solid];
"specSpecificationP" [style=solid];
"specToBare" [style=solid];
"specToBareTC" [style=solid];
"specToBareTV" [style=solid];
"specTypeCons" [style=solid];
"specTypeEq" [style=solid];
"specTypeKVars" [style=solid];
"specTypeToLogic" [style=solid];
"specTypeToResultRef" [style=solid];
"specificationP" [style=solid];
"splice" [style=solid];
"spliceArgs" [style=solid];
"splitArgs" [style=solid];
"splitC" [style=solid];
"splitConstraints" [style=solid];
"splitDictionary" [style=solid];
"splitFails" [style=solid];
"splitFun" [style=solid];
"splitFunTys" [style=solid];
"splitHeader" [style=solid];
"splitModuleName" [style=solid];
"splitModuleNameExact" [style=solid];
"splitPred" [style=solid];
"splitRPvar" [style=solid];
"splitRType" [style=solid];
"splitRef" [style=solid];
"splitReft" [style=solid];
"splitSortedReft" [style=solid];
"splitSpecs" [style=solid];
"splitSrcAndAnns" [style=solid];
"splitType" [style=solid];
"splitTypeConstraints" [style=solid];
"splitUReft" [style=solid];
"splitW" [style=solid];
"splitXRelatedRefs" [style=solid];
"splitfWithVariance" [style=solid];
"splitsCWithVariance" [style=solid];
"splitters" [style=solid];
"srcDeps" [style=solid];
"srcModuleName" [style=solid];
"srcSpan" [style=solid];
"srcSpanContext" [style=solid];
"srcSpanEndLoc" [style=solid];
"srcSpanFSrcSpan" [style=solid];
"srcSpanFileMb" [style=solid];
"srcSpanFilename" [style=solid];
"srcSpanInfo" [style=solid];
"srcSpanSourcePos" [style=solid];
"srcSpanSourcePosE" [style=solid];
"srcSpanStartLoc" [style=solid];
"srcSpanTick" [style=solid];
"srcThings" [style=solid];
"srcTyCons" [style=solid];
"srcVarTcs" [style=solid];
"srcVars" [style=solid];
"status" [style=solid];
"step" [style=solid];
"step_1" [style=solid];
"step_1_2" [style=solid];
"step_2" [style=solid];
"stitch" [style=solid];
"stitchArgs" [style=solid];
"strengthen" [style=solid];
"strengthenDataConType" [style=solid];
"strengthenMeet" [style=solid];
"strengthenRType" [style=solid];
"strengthenRefType" [style=solid];
"strengthenRefTypeGen" [style=solid];
"strengthenRefType_" [style=solid];
"strengthenRes" [style=solid];
"strengthenResult" [style=solid];
"strengthenSigs" [style=solid];
"strengthenTop" [style=solid];
"strictResolveSym" [style=solid];
"stringClassArg" [style=solid];
"stringEmp" [style=solid];
"stringLen" [style=solid];
"stringTyCon" [style=solid];
"stringTyConWithKind" [style=solid];
"stringTyVar" [style=solid];
"stringVar" [style=solid];
"strip" [style=solid];
"stripAnnotations" [style=solid];
"stripAnnotationsRef" [style=solid];
"stripParens" [style=solid];
"stripParensSym" [style=solid];
"stripRType" [style=solid];
"stripRTypeBase" [style=solid];
"stripReft" [style=solid];
"structCheck" [style=solid];
"structDecreasing" [style=solid];
"structuralCheck" [style=solid];
"structuralTerm" [style=solid];
"subConstraintToLogicOne" [style=solid];
"subRTVar" [style=solid];
"subString" [style=solid];
"subVar" [style=solid];
"subgoals" [style=solid];
"subsFree" [style=solid];
"subsFreeRAppTy" [style=solid];
"subsFreeRef" [style=solid];
"subsFrees" [style=solid];
"subsTyReft" [style=solid];
"subsTyVar" [style=solid];
"subsTyVar_meet" [style=solid];
"subsTyVar_meet\'" [style=solid];
"subsTyVar_nomeet" [style=solid];
"subsTyVars" [style=solid];
"subsTyVarsAll" [style=solid];
"subsTyVars_meet" [style=solid];
"subsTyVars_nomeet" [style=solid];
"subst" [style=solid];
"substCoercion" [style=solid];
"substEnv" [style=solid];
"substExpr" [style=solid];
"substFreeEnv" [style=solid];
"substGrad" [style=solid];
"substInFExpr" [style=solid];
"substParg" [style=solid];
"substPred" [style=solid];
"substPredP" [style=solid];
"substRCon" [style=solid];
"substTuple" [style=solid];
"substType" [style=solid];
"substTysWith" [style=solid];
"subts" [style=solid];
"subvPredicate" [style=solid];
"subvUReft" [style=solid];
"symbolExpr" [style=solid];
"symbolFastString" [style=solid];
"symbolLoc" [style=solid];
"symbolMeasure" [style=solid];
"symbolModules" [style=solid];
"symbolName" [style=solid];
"symbolRTyCon" [style=solid];
"symbolRTyVar" [style=solid];
"symbolToVar" [style=solid];
"symbolTyCon" [style=solid];
"symbolTyConWithKind" [style=solid];
"symbolTyVar" [style=solid];
"symbolType" [style=solid];
"symbols" [style=solid];
"symsP" [style=solid];
"synTyConRhs_maybe" [style=solid];
"synthesize" [style=solid];
"synthesizeBasic" [style=solid];
"synthesizeMatch" [style=solid];
"synthesizeScrut" [style=solid];
"synthesizeScrutinee" [style=solid];
"synthesize\'" [style=solid];
"szFun" [style=solid];
"tRepFields" [style=solid];
"tRepVars" [style=solid];
"tag" [style=solid];
"takeBinds" [style=solid];
"takeFileName" [style=solid];
"takeLast" [style=solid];
"takeModuleNames" [style=solid];
"takeString" [style=solid];
"takeUnique" [style=solid];
"targetFInfo" [style=solid];
"targetSpecGetter" [style=solid];
"targetSrcIso" [style=solid];
"tcRnLookupRdrName" [style=solid];
"tcmTyThings" [style=solid];
"termBareTypeP" [style=solid];
"termTypeP" [style=solid];
"terminationCheck" [style=solid];
"terminationCheck\'" [style=solid];
"terminationVars" [style=solid];
"textToExpQ" [style=solid];
"thin" [style=solid];
"thinWith" [style=solid];
"third3" [style=solid];
"third3M" [style=solid];
"third4" [style=solid];
"thisPackage" [style=solid];
"thisReplace" [style=solid];
"thm_bigstep_det" [style=solid];
"thm_emp" [style=solid];
"thm_size" [style=solid];
"thrd3" [style=solid];
"throw" [style=solid];
"throwErrorInQ" [style=solid];
"tickSrcSpan" [style=solid];
"ticks" [style=solid];
"tidyCBs" [style=solid];
"tidyCtx" [style=solid];
"tidyCtxM" [style=solid];
"tidyDSymbols" [style=solid];
"tidyEqual" [style=solid];
"tidyErrContext" [style=solid];
"tidyError" [style=solid];
"tidyFunBinds" [style=solid];
"tidyInternalRefas" [style=solid];
"tidyLocalRefas" [style=solid];
"tidyREnv" [style=solid];
"tidyREnvM" [style=solid];
"tidySpecType" [style=solid];
"tidySymbols" [style=solid];
"tidyTemps" [style=solid];
"tidyTuples" [style=solid];
"tidyTyVars" [style=solid];
"tidyVV" [style=solid];
"tidyValueVars" [style=solid];
"timeAction" [style=solid];
"timeDataMapper" [style=solid];
"timedAction" [style=solid];
"times" [style=solid];
"toArgs" [style=solid];
"toBenchMap" [style=solid];
"toCached" [style=solid];
"toExpr" [style=solid];
"toFixSDoc" [style=solid];
"toGMap" [style=solid];
"toGhcSrc" [style=solid];
"toListREnv" [style=solid];
"toLogicApp" [style=solid];
"toLogicMap" [style=solid];
"toLogicOneP" [style=solid];
"toLogicP" [style=solid];
"toPredApp" [style=solid];
"toProof" [style=solid];
"toRSort" [style=solid];
"toRTypeRep" [style=solid];
"toStableModule" [style=solid];
"toStructCall" [style=solid];
"toType" [style=solid];
"toUnhelpfulReason" [style=solid];
"toUnoptimised" [style=solid];
"toUsedPVar" [style=solid];
"toUsedPVars" [style=solid];
"toVar" [style=solid];
"to\'" [style=solid];
"todo" [style=solid];
"tokAnnot" [style=solid];
"tokBody" [style=solid];
"tokenModule" [style=solid];
"tokenSpans" [style=solid];
"tokeniseSpec" [style=solid];
"tokeniseWithCommentTransform" [style=solid];
"tokeniseWithLoc" [style=solid];
"tomaybesymbol" [style=solid];
"topAndTail" [style=solid];
"topRTypeBase" [style=solid];
"topSpecType" [style=solid];
"tosymbol" [style=solid];
"tosymbol\'" [style=solid];
"totalityCheck" [style=solid];
"totalityCheck\'" [style=solid];
"totalityError" [style=solid];
"totalityType" [style=solid];
"tpToCons" [style=solid];
"tracePpr" [style=solid];
"traceTy" [style=solid];
"trans" [style=solid];
"transBd" [style=solid];
"transExpr" [style=solid];
"transParseSpecs" [style=solid];
"transPg" [style=solid];
"transformRecExpr" [style=solid];
"transformScope" [style=solid];
"transpose" [style=solid];
"trimLiquidAnnot" [style=solid];
"trivial" [style=solid];
"trueRef" [style=solid];
"trueRefType" [style=solid];
"trueTy" [style=solid];
"trustVar" [style=solid];
"tryIgnore" [style=solid];
"tt" [style=solid];
"tupDataCon" [style=solid];
"tupPatP" [style=solid];
"tupleTyDataCons" [style=solid];
"tvId" [style=solid];
"tx" [style=solid];
"txClosure" [style=solid];
"txExpToBind" [style=solid];
"txPV" [style=solid];
"txParam" [style=solid];
"txPvar" [style=solid];
"txRTV" [style=solid];
"txRType" [style=solid];
"txRefSort" [style=solid];
"tyApp" [style=solid];
"tyBindNoLocP" [style=solid];
"tyBindP" [style=solid];
"tyBindsP" [style=solid];
"tyBindsRemP" [style=solid];
"tyBodyP" [style=solid];
"tyClasses" [style=solid];
"tyCompat" [style=solid];
"tyConBTyCon" [style=solid];
"tyConDataDecl" [style=solid];
"tyConDataName" [style=solid];
"tyConFTyCon" [style=solid];
"tyConLocSymbol" [style=solid];
"tyConName" [style=solid];
"tyConRTyCon" [style=solid];
"tyConRealArity" [style=solid];
"tyConSort" [style=solid];
"tyConSortRaw" [style=solid];
"tyConTyVarsDef" [style=solid];
"tyKindVarIdP" [style=solid];
"tyThingSymbol" [style=solid];
"tyToBind" [style=solid];
"tyVarDefsP" [style=solid];
"tyVarIdP" [style=solid];
"tyVarIdR" [style=solid];
"tyVarSort" [style=solid];
"tyVarVar" [style=solid];
"tyVars" [style=solid];
"tyVarsPosition" [style=solid];
"ty_var_is_val" [style=solid];
"typeEqToLg" [style=solid];
"typeSort" [style=solid];
"typeSortForAll" [style=solid];
"typeSortFun" [style=solid];
"typeToCons" [style=solid];
"typeTyCons" [style=solid];
"typeUniqueString" [style=solid];
"typeUniqueSymbol" [style=solid];
"typecheckHook" [style=solid];
"typecheckModule" [style=solid];
"uError" [style=solid];
"uPVar" [style=solid];
"uRType" [style=solid];
"uRTypeGen" [style=solid];
"uRType\'" [style=solid];
"uReft" [style=solid];
"uTop" [style=solid];
"unClass" [style=solid];
"unDummy" [style=solid];
"unOCons" [style=solid];
"unQualifySymbol" [style=solid];
"unRRTy" [style=solid];
"unStructInfo" [style=solid];
"unTemplate" [style=solid];
"unTick" [style=solid];
"unTickExpr" [style=solid];
"unbind" [style=solid];
"unfoldDep" [style=solid];
"unfoldR" [style=solid];
"unifiable" [style=solid];
"unify" [style=solid];
"unifyVV" [style=solid];
"unifyWith" [style=solid];
"union" [style=solid];
"unionAppend" [style=solid];
"uniqNub" [style=solid];
"uniqueByKey" [style=solid];
"uniqueByKey\'" [style=solid];
"uniqueHash" [style=solid];
"uniquify" [style=solid];
"uniquifyCS" [style=solid];
"unnamedCircleP" [style=solid];
"unpackRealSrcSpan" [style=solid];
"unreachable" [style=solid];
"unsafeError" [style=solid];
"unsafeFromLiftedSpec" [style=solid];
"up" [style=solid];
"updKVProf" [style=solid];
"updLiftedSpec" [style=solid];
"updREnvLocal" [style=solid];
"updSigMap" [style=solid];
"updTargetInfoTermVars" [style=solid];
"updateBEnv" [style=solid];
"updateEnv" [style=solid];
"updateEnvironment" [style=solid];
"updateIncludePaths" [style=solid];
"updateK" [style=solid];
"updateLoc" [style=solid];
"updateLocA" [style=solid];
"updateRTVar" [style=solid];
"upperIdR\'" [style=solid];
"useAlsQuals" [style=solid];
"useQuals" [style=solid];
"useSigQuals" [style=solid];
"useSpcQuals" [style=solid];
"v1" [style=solid];
"v2" [style=solid];
"validQual" [style=solid];
"validTyVar" [style=solid];
"var" [style=solid];
"varAnn" [style=solid];
"varBounds" [style=solid];
"varDefs" [style=solid];
"varError" [style=solid];
"varExpr" [style=solid];
"varExprs" [style=solid];
"varFile" [style=solid];
"varFunSymbol" [style=solid];
"varLocInfo" [style=solid];
"varLocSym" [style=solid];
"varMeasures" [style=solid];
"varRSort" [style=solid];
"varRType" [style=solid];
"varRefType" [style=solid];
"varRefType\'" [style=solid];
"varSignToVariance" [style=solid];
"varSortedReft" [style=solid];
"varSpecType" [style=solid];
"varTemplate" [style=solid];
"varTemplate\'" [style=solid];
"varTuple" [style=solid];
"varTyCons" [style=solid];
"varianceP" [style=solid];
"varsCB" [style=solid];
"varsE" [style=solid];
"varsP" [style=solid];
"vc" [style=solid];
"vc\'" [style=solid];
"verify" [style=solid];
"vimAnnot" [style=solid];
"vimBind" [style=solid];
"vsep" [style=solid];
"wait" [style=solid];
"waitN" [style=solid];
"warnCaseExpand" [style=solid];
"warnMissingLiftedSpec" [style=solid];
"weakenResult" [style=solid];
"wiredDataCons" [style=solid];
"wiredDefs" [style=solid];
"wiredInName" [style=solid];
"wiredInNames" [style=solid];
"wiredReflects" [style=solid];
"wiredSortedSyms" [style=solid];
"wiredTyCons" [style=solid];
"wiredTyDataCons" [style=solid];
"withCache" [style=solid];
"withDepthFill" [style=solid];
"withDepthFillArgs" [style=solid];
"withIncrDepth" [style=solid];
"withPragma" [style=solid];
"withPragmas" [style=solid];
"withProof" [style=solid];
"withSmtSolver" [style=solid];
"withSubgoal" [style=solid];
"withTheorem" [style=solid];
"withTypeEs" [style=solid];
"wmap" [style=solid];
"wmapN" [style=solid];
"wpredName" [style=solid];
"wpredRTyCon" [style=solid];
"wrapParens" [style=solid];
"writeCheckVars" [style=solid];
"writeFilesOrStrings" [style=solid];
"writeResultStdout" [style=solid];
"x" [style=solid];
"xyP" [style=solid];
"zip4" [style=solid];
"zipExact" [style=solid];
"zipMap" [style=solid];
"zipMapMaybe" [style=solid];
"zipMaybe" [style=solid];
"zipWith" [style=solid];
"zipWithDef" [style=solid];
"zipWithDefM" [style=solid];
"zipWithM" [style=solid];
"_" -> "_";
"_" -> "eq";
"_" -> "x";
"_anns" -> "i";
"_checkDuplicateFieldNames" -> "_firstDuplicate";
"_checkDuplicateFieldNames" -> "go";
"_checkDuplicateFieldNames" -> "pprintSymbol";
"_checkDuplicateFieldNames" -> "x";
"_checkQualifiers" -> "checkQualifier";
"_checkRefinedClasses" -> "mkError";
"_definedVars" -> "_";
"_definedVars" -> "x";
"_dumpRdrEnv" -> "fmap";
"_dumpRdrEnv" -> "mgNames";
"_dumpRdrEnv" -> "showPpr";
"_dumpTypeEnv" -> "tcmTyThings";
"_dupBindError" -> "lookupREnv";
"_dupBindError" -> "panic";
"_dupBindError" -> "x";
"_errorSkip" -> "_";
"_errorSkip" -> "x";
"_firstDuplicate" -> "_";
"_firstDuplicate" -> "go";
"_firstDuplicate" -> "x";
"_grepClassAssumes" -> "_";
"_grepClassAssumes" -> "fmap";
"_grepClassAssumes" -> "go";
"_grepClassAssumes" -> "x";
"_highlight" -> "_";
"_highlight" -> "go";
"_highlight" -> "inLoc";
"_impThings" -> "_";
"_impThings" -> "x";
"_isClassOrDict" -> "hasClassArg";
"_isClassOrDict" -> "x";
"_mbId" -> "_";
"_mbId" -> "_mbId";
"_mbId" -> "x";
"_meetable" -> "f";
"_meetable" -> "toRSort";
"_rTypeTyCons" -> "_";
"_rTypeTyCons" -> "f";
"_rTypeTyCons" -> "foldRType";
"_safeSimplifyPatTuple" -> "simplifyPatTuple";
"_showExpr" -> "_";
"_showExpr" -> "_showVar";
"_showExpr" -> "showPpr";
"_showExpr" -> "x";
"_tidyAlt" -> "_";
"_tidyAlt" -> "go";
"_tidyAlt" -> "takeBinds";
"_tidyAlt" -> "x";
"actOrDie" -> "handle";
"action" -> "modificationTime";
"action" -> "timeAction";
"addA" -> "_";
"addA" -> "showPpr";
"addBind" -> "bindSpans";
"addBind" -> "get";
"addBind" -> "i";
"addBind" -> "localKey";
"addBind" -> "put";
"addBind" -> "return";
"addBind" -> "x";
"addBinders" -> "x";
"addC" -> "getLocation";
"addC" -> "panic";
"addC" -> "toType";
"addCC" -> "_";
"addCC" -> "bkUnivClass";
"addCC" -> "err";
"addCC" -> "fmap";
"addCC" -> "mapExprReft";
"addCC" -> "mkArrow";
"addCC" -> "ofType";
"addCC" -> "rFun";
"addCC" -> "rTyVar";
"addCC" -> "subts";
"addCC" -> "toRSort";
"addCC" -> "tt";
"addCC" -> "updateRTVar";
"addCC" -> "x";
"addCGEnv" -> "_";
"addCGEnv" -> "addBind";
"addCGEnv" -> "addCGEnv";
"addCGEnv" -> "addClassBind";
"addCGEnv" -> "getLocation";
"addCGEnv" -> "getTemplates";
"addCGEnv" -> "insertREnv";
"addCGEnv" -> "insertsFEnv";
"addCGEnv" -> "is";
"addCGEnv" -> "localBindsOfType";
"addCGEnv" -> "normalize";
"addCGEnv" -> "rTypeSortedReft\'";
"addCGEnv" -> "return";
"addCGEnv" -> "splitXRelatedRefs";
"addCGEnv" -> "tx";
"addCGEnv" -> "x";
"addCheckedFun" -> "mkFun";
"addClassBind" -> "addBind";
"addClassBind" -> "classBinds";
"addClassEmbeds" -> "makeFamInstEmbeds";
"addClassEmbeds" -> "makeNumEmbeds";
"addDecrTerm" -> "getSDecrTerms";
"addDecrTerm" -> "lookupAll";
"addDecrTerm" -> "thisReplace";
"addDecrTerm" -> "x";
"addEEnv" -> "_";
"addEEnv" -> "addBind";
"addEEnv" -> "addClassBind";
"addEEnv" -> "addRTyConInv";
"addEEnv" -> "deleteREnv";
"addEEnv" -> "getLocation";
"addEEnv" -> "getTemplates";
"addEEnv" -> "insertREnv";
"addEEnv" -> "insertsFEnv";
"addEEnv" -> "is";
"addEEnv" -> "lookupREnv";
"addEEnv" -> "normalize";
"addEEnv" -> "rTypeSortedReft\'";
"addEEnv" -> "return";
"addEEnv" -> "x";
"addEmem" -> "_";
"addEmem" -> "get";
"addEmem" -> "getSFix";
"addEmem" -> "instantiateTL";
"addEmem" -> "toType";
"addEmem" -> "x";
"addEnv" -> "liftCG0";
"addEnv" -> "tx";
"addEnv" -> "x";
"addError" -> "mkTermError";
"addError" -> "x";
"addErrors" -> "_";
"addErrors" -> "allowGlobalPLE";
"addErrors" -> "allowLocalPLE";
"addErrors" -> "allowPLE";
"addErrors" -> "exactDCFlag";
"addErrors" -> "hasOpt";
"addErrors" -> "higherOrderFlag";
"addErrors" -> "maxCaseExpand";
"addErrors" -> "patternFlag";
"addErrors" -> "pruneFlag";
"addErrors" -> "resDocs";
"addErrors" -> "structuralTerm";
"addErrors" -> "terminationCheck";
"addErrors" -> "totalityCheck";
"addExist" -> "ofRSort";
"addExist" -> "strengthen";
"addExist" -> "tx";
"addExist" -> "uTop";
"addExist" -> "x";
"addExists" -> "addExist";
"addExists" -> "getBinds";
"addExists" -> "liftM";
"addForAllConstraint" -> "_";
"addForAllConstraint" -> "addC";
"addForAllConstraint" -> "getLocation";
"addForAllConstraint" -> "impossible";
"addForAllConstraint" -> "return";
"addFunctionConstraint" -> "_";
"addFunctionConstraint" -> "addC";
"addFunctionConstraint" -> "get";
"addFunctionConstraint" -> "getLocation";
"addFunctionConstraint" -> "higherOrderFlag";
"addFunctionConstraint" -> "impossible";
"addFunctionConstraint" -> "lamExpr";
"addFunctionConstraint" -> "typeSort";
"addFunctionConstraint" -> "uTop";
"addFunctionConstraint" -> "x";
"addHole" -> "get";
"addHole" -> "getConfig";
"addHole" -> "return";
"addHole" -> "srcSpan";
"addHole" -> "x";
"addIdA" -> "_";
"addIdA" -> "addA";
"addIdA" -> "boundRecVar";
"addIdA" -> "x";
"addInstIndex" -> "_";
"addInstIndex" -> "go";
"addInstIndex" -> "i";
"addInstIndex" -> "is";
"addInstIndex" -> "x";
"addInvCond" -> "_";
"addInvCond" -> "fromRTypeRep";
"addInvCond" -> "isTauto_ureft";
"addInvCond" -> "ppTy_ureft";
"addInvCond" -> "toRTypeRep";
"addKVars" -> "addKuts";
"addKVars" -> "getConfig";
"addKVars" -> "isKut";
"addKVars" -> "specTypeKVars";
"addKVars" -> "updKVProf";
"addKuts" -> "specTypeKVars";
"addLhsInv" -> "addRTyConInv";
"addLhsInv" -> "constraintToLogic";
"addLhsInv" -> "insertREnv";
"addLhsInv" -> "rTypeValueVar";
"addLhsInv" -> "strengthen";
"addLocA" -> "addA";
"addObligation" -> "bkArrow";
"addObligation" -> "bkUniv";
"addObligation" -> "mkArrow";
"addPToEnv" -> "_";
"addPToEnv" -> "ofRSort";
"addPToEnv" -> "pvarRType";
"addPToEnv" -> "x";
"addParam" -> "mkParam";
"addPds" -> "addPds";
"addPds" -> "rPred";
"addPolyInfo" -> "bkUniv";
"addPolyInfo" -> "go";
"addPolyInfo" -> "mkUnivs";
"addPolyInfo" -> "setRtvPol";
"addPolyInfo" -> "tyVarsPosition";
"addPost" -> "_";
"addPost" -> "addC";
"addPost" -> "addPost";
"addPost" -> "addSEnv";
"addPost" -> "envToSub";
"addPost" -> "return";
"addPost" -> "x";
"addPostTemplate" -> "_";
"addPostTemplate" -> "addPost";
"addPostTemplate" -> "return";
"addRInv" -> "addInvCond";
"addRInv" -> "lookupRInv";
"addRInv" -> "stripRTypeBase";
"addRInv" -> "toRTypeRep";
"addRInv" -> "x";
"addRTyConInv" -> "conjoinInvariantShift";
"addRTyConInv" -> "lookupRInv";
"addReflSigs" -> "_";
"addReflSigs" -> "fmap";
"addReflSigs" -> "x";
"addRefs" -> "_";
"addRefs" -> "addTyConInfo";
"addSEnv" -> "addCGEnv";
"addSEnv" -> "addRTyConInv";
"addSubterms" -> "var";
"addSymSort" -> "_";
"addSymSort" -> "addSymSortRef";
"addSymSort" -> "go";
"addSymSort" -> "stripRTypeBase";
"addSymSortRef" -> "addSymSortRef\'";
"addSymSortRef" -> "i";
"addSymSortRef" -> "isPropPV";
"addSymSortRef" -> "panic";
"addSymSortRef\'" -> "_";
"addSymSortRef\'" -> "i";
"addSymSortRef\'" -> "ofRSort";
"addSymSortRef\'" -> "pvType";
"addSymSortRef\'" -> "spliceArgs";
"addSymSortRef\'" -> "uError";
"addSymSortRef\'" -> "up";
"addTyConInfo" -> "expandRApp";
"addTyConInfo" -> "mapBot";
"addps" -> "_";
"addps" -> "f";
"addps" -> "panic";
"addps" -> "pvars";
"addsEmem" -> "get";
"addsEmem" -> "toType";
"addsEmem" -> "x";
"addsEnv" -> "tx";
"addsEnv" -> "x";
"adjustErrors" -> "adjustSrcSpan";
"adjustOutput" -> "adjustResult";
"adjustOutput" -> "adjustTypes";
"adjustReal" -> "f";
"adjustReal" -> "getShift";
"adjustReal" -> "realSrcSpan";
"adjustReal" -> "unpackRealSrcSpan";
"adjustResult" -> "_";
"adjustResult" -> "adjustErrors";
"adjustResult" -> "errorsResult";
"adjustSpan" -> "_";
"adjustSpan" -> "adjustReal";
"adjustSpan" -> "pure";
"adjustSrcSpan" -> "adjustSpan";
"adjustSrcSpan" -> "isCheckedSpan";
"adjustTypes" -> "adjustSrcSpan";
"adtDataConP" -> "bareTypeP";
"adtDataConP" -> "dataConNameP";
"adtDataConP" -> "return";
"adtDataConP" -> "tRepFields";
"adtDataConP" -> "tRepVars";
"adtDataConP" -> "toRTypeRep";
"adtDataConP" -> "x";
"aliasIdP" -> "aliasIdR";
"aliasP" -> "bareTypeP";
"aliasP" -> "rtAliasP";
"allAsmSigs" -> "getAsmSigs";
"allAsmSigs" -> "resolveAsmVar";
"allAsmSigs" -> "x";
"allBoundVars" -> "allBoundVars";
"allBoundVars" -> "nextBinds";
"allCombinations" -> "_";
"allCombinations" -> "and";
"allCombinations" -> "assert";
"allCombinations" -> "dropModuleNames";
"allCombinations" -> "go";
"allCombinations" -> "simplifyExpr";
"allCombinations" -> "x";
"allDeps" -> "_";
"allProg" -> "classify";
"allProg" -> "go";
"allProg" -> "x";
"allTrivial" -> "hasTrivial";
"allTrivial" -> "x";
"allTyVars" -> "bkUniv";
"allTyVars" -> "fmap";
"allTyVars" -> "freeTyVars";
"allowExtResolution" -> "f";
"allowExtResolution" -> "myTracepp";
"allowLocalPLE" -> "getConfig";
"allowLocalPLE" -> "x";
"allowPLE" -> "allowGlobalPLE";
"allowPLE" -> "allowLocalPLE";
"alsQualifiers" -> "maxQualParams";
"alsQualifiers" -> "refTypeQuals";
"alsQualifiers" -> "validQual";
"altReft" -> "_";
"altReft" -> "getConfig";
"altReft" -> "literalConst";
"altReft" -> "literalFReft";
"altReft" -> "makeDataConChecker";
"altReft" -> "panic";
"altSpans" -> "_";
"altSpans" -> "exprSpans";
"altToLg" -> "_";
"altToLg" -> "coreToLg";
"altToLg" -> "dataConProj";
"altToLg" -> "i";
"altToLg" -> "return";
"altToLg" -> "subst";
"altToLg" -> "x";
"and" -> "hole";
"anfOcc" -> "getConfig";
"anglesCircleP" -> "btP";
"anglesCircleP" -> "monoPredicateP";
"anglesCircleP" -> "parens";
"anglesCircleP" -> "return";
"anglesCircleP" -> "strengthen";
"annTypes" -> "binders";
"annTypes" -> "ins";
"annTypes" -> "x";
"annotParse" -> "parseLines";
"annotTokenise" -> "fmap";
"annotTokenise" -> "spanAnnot";
"annotTokenise" -> "tokenSpans";
"annotTokenise" -> "tokeniseWithCommentTransform";
"annotTokenise" -> "tx";
"annotTokenise" -> "zipWith";
"annotate" -> "doGenerate";
"annotate" -> "mkAnnMap";
"annotate" -> "return";
"annotate" -> "showPpr";
"anormalize" -> "emptyAnfEnv";
"anormalize" -> "err";
"anormalize" -> "normalizeTopBind";
"anormalize" -> "panic";
"anormalize" -> "rewriteBinds";
"anormalize" -> "transformRecExpr";
"anyF" -> "x";
"ap" -> "f";
"ap" -> "x";
"apiComments" -> "allImports";
"apiComments" -> "apiAnnComments";
"apiComments" -> "availableTyCons";
"apiComments" -> "availableVars";
"apiComments" -> "checkFilePragmas";
"apiComments" -> "classCons";
"apiComments" -> "clearSpec";
"apiComments" -> "derivedVars";
"apiComments" -> "extractSpecComments";
"apiComments" -> "extractSpecQuotes\'";
"apiComments" -> "findAndParseSpecFiles";
"apiComments" -> "getInterfaceDynFlags";
"apiComments" -> "getTargetInfos";
"apiComments" -> "ignoreInline";
"apiComments" -> "importVars";
"apiComments" -> "isHomeModule";
"apiComments" -> "keepRawTokenStream";
"apiComments" -> "loadDependenciesOf";
"apiComments" -> "lookupTyThings";
"apiComments" -> "makeFamInstEnv";
"apiComments" -> "makeGhcSrc";
"apiComments" -> "makeLogicMap";
"apiComments" -> "modSummaryHsFile";
"apiComments" -> "noTerm";
"apiComments" -> "panic";
"apiComments" -> "parseSpecFile";
"apiComments" -> "pprintCBs";
"apiComments" -> "qualifiedImports";
"apiComments" -> "realTargets";
"apiComments" -> "runLiquidGhc";
"apiComments" -> "showPpr";
"apiComments" -> "updLiftedSpec";
"apiComments" -> "x";
"appRTyCon" -> "addNumSizeFun";
"appRTyCon" -> "isNumeric";
"appRTyCon" -> "rTyConWithPVars";
"appRTyCon" -> "rTypeSort";
"appRTyCon" -> "rVar";
"appRTyCon" -> "subts";
"appRTyCon" -> "toRSort";
"appRTyCon" -> "toType";
"appSolRefa" -> "f";
"appTysAndIds" -> "x";
"apply" -> "_";
"apply" -> "apply";
"applyArg" -> "_";
"applyArg" -> "incrSM";
"applyArg" -> "mkVar";
"applyArg" -> "return";
"applySolution" -> "appSolRefa";
"applySolution" -> "f";
"applySolution" -> "fmap";
"applySolution" -> "mapReft";
"applySolution" -> "x";
"applyTerm" -> "applyArg";
"applyTerm" -> "return";
"applyTerm" -> "x";
"applyTerms" -> "applyTerm";
"applyTerms" -> "applyTerms";
"applyTerms" -> "return";
"applyTy" -> "_";
"applyTy" -> "applyTy";
"argExpr" -> "_";
"argExpr" -> "argExpr";
"argExpr" -> "literalConst";
"argType" -> "_";
"argType" -> "anyTypeSymbol";
"argType" -> "bytesFS";
"argType" -> "i";
"argType" -> "mkI";
"argType" -> "mkS";
"argType" -> "x";
"argsCB" -> "_";
"argsCB" -> "argsE";
"argsE" -> "_";
"argsE" -> "argsE";
"argsFill" -> "_";
"argsFill" -> "argsFill";
"argsFill" -> "get";
"argsFill" -> "prune";
"argsFill" -> "return";
"argsFill" -> "subgoals";
"argsFill" -> "withSubgoal";
"argsFill" -> "x";
"argsP" -> "argsCB";
"argsP" -> "argsP";
"argsP" -> "isInCB";
"asgn" -> "aval";
"asgn" -> "x";
"asizeP" -> "locBinderP";
"assert" -> "_";
"assert" -> "x";
"assm" -> "assmGrty";
"assmGrty" -> "f";
"assmGrty" -> "x";
"assumeSpec" -> "assm";
"at" -> "coreToDef";
"at" -> "coreToFun";
"at" -> "coreToLogic";
"at" -> "inlineSpecType";
"at" -> "logicType";
"at" -> "measureSpecType";
"at" -> "mkI";
"at" -> "mkLit";
"at" -> "mkS";
"at" -> "normalize";
"at" -> "runToLogic";
"at" -> "runToLogicWithBoolBinds";
"at" -> "tt";
"at" -> "weakenResult";
"autoinstP" -> "i";
"autoinstP" -> "locBinderP";
"autoinstP" -> "return";
"autoinstP" -> "x";
"availableTyCons" -> "availableTyThings";
"availableTyCons" -> "fmap";
"availableTyThings" -> "_";
"availableTyThings" -> "fmap";
"availableTyThings" -> "lookupTyThing";
"availableTyThings" -> "pure";
"availableVars" -> "availableTyThings";
"availableVars" -> "fmap";
"availableVars" -> "var";
"availsToStableNameSet" -> "add";
"availsToStableNameSet" -> "fromList";
"availsToStableNameSet" -> "mkStableName";
"aval" -> "_";
"aval" -> "aval";
"aval" -> "x";
"axiomP" -> "locBinderP";
"axiomType" -> "get";
"axiomType" -> "go";
"axiomType" -> "i";
"axiomType" -> "isClassType";
"axiomType" -> "put";
"axiomType" -> "return";
"axiomType" -> "singletonApp";
"axiomType" -> "strengthen";
"axiomType" -> "tx";
"axiomType" -> "unDummy";
"axiomType" -> "x";
"b1" -> "b1";
"b1" -> "bImp";
"bAnd" -> "b1";
"bApp" -> "tyConBTyCon";
"bAppTy" -> "reftUReft";
"bAppTy" -> "strengthen";
"bImp" -> "b1";
"bImp" -> "bOr";
"bIte" -> "b1";
"bIte" -> "bImp";
"bLst" -> "mkBTyCon";
"bLst" -> "reftUReft";
"bOr" -> "b1";
"bPVar" -> "_";
"bPVar" -> "init";
"bPVar" -> "panic";
"bPVar" -> "x";
"bRProp" -> "_";
"bRProp" -> "bRVar";
"bRProp" -> "init";
"bRProp" -> "panic";
"bRProp" -> "subst";
"bRProp" -> "x";
"bTVar" -> "bTVarInfo";
"bTVarInfo" -> "kindToBRType";
"bTVarInfo" -> "mkTVarInfo";
"bTup" -> "_";
"bTup" -> "i";
"bTup" -> "mapReft";
"bTup" -> "mkBTyCon";
"bTup" -> "reftUReft";
"bTup" -> "strengthen";
"bTup" -> "x";
"bTyConP" -> "mkBTyCon";
"bTyConP" -> "mkPromotedBTyCon";
"bTyConP" -> "return";
"bareAllP" -> "bareTypeP";
"bareAllP" -> "dot";
"bareAllP" -> "makeRTVar";
"bareAllP" -> "predVarDefP";
"bareAllP" -> "return";
"bareAllP" -> "tyVarDefsP";
"bareArgP" -> "bareTypeP";
"bareArgP" -> "bbaseP";
"bareArgP" -> "dummyP";
"bareArgP" -> "holeP";
"bareArgP" -> "parens";
"bareArgP" -> "refDefP";
"bareArgP" -> "refasHoleP";
"bareAtomBindP" -> "bareAtomP";
"bareAtomBindP" -> "refBindBindP";
"bareAtomNoAppP" -> "bbaseNoAppP";
"bareAtomNoAppP" -> "dummyP";
"bareAtomNoAppP" -> "refP";
"bareAtomP" -> "bbaseP";
"bareAtomP" -> "dummyP";
"bareAtomP" -> "holeP";
"bareAtomP" -> "refasHoleP";
"bareExpandType" -> "expandLoc";
"bareMSpec" -> "expandMeasure";
"bareMSpec" -> "force";
"bareOfType" -> "bApp";
"bareOfType" -> "bTVar";
"bareOfType" -> "ofLitType";
"bareOfType" -> "ofType_";
"bareRTyVar" -> "symbolRTyVar";
"bareTCApp" -> "_";
"bareTCApp" -> "err";
"bareTCApp" -> "expandRTypeSynonyms";
"bareTCApp" -> "isTrivial";
"bareTCApp" -> "toRSort";
"bareTCApp" -> "tyApp";
"bareTCApp" -> "zipWith";
"bareTyArgP" -> "bareAtomNoAppP";
"bareTyArgP" -> "bareTypeP";
"bareTyArgP" -> "fmap";
"bareTyArgP" -> "parens";
"bareTySigs" -> "checkDuplicateSigs";
"bareTySigs" -> "x";
"bareTypeBracesP" -> "_";
"bareTypeBracesP" -> "bbaseP";
"bareTypeBracesP" -> "btP";
"bareTypeBracesP" -> "constraintP";
"bareTypeBracesP" -> "hole";
"bareTypeBracesP" -> "nullPC";
"bareTypeBracesP" -> "refasHoleP";
"bareTypeBracesP" -> "return";
"bareTypeBracesP" -> "rrTy";
"bareTypeBracesP" -> "tt";
"bareTypeBracesP" -> "uTop";
"bareTypeBracesP" -> "x";
"bareTypeP" -> "_";
"bareTypeP" -> "btP";
"bareTypeP" -> "return";
"bbaseNoAppP" -> "bCon";
"bbaseNoAppP" -> "bLst";
"bbaseNoAppP" -> "bRVar";
"bbaseNoAppP" -> "bTup";
"bbaseNoAppP" -> "bTyConP";
"bbaseNoAppP" -> "bTyVar";
"bbaseNoAppP" -> "bareTypeP";
"bbaseNoAppP" -> "holeRefP";
"bbaseNoAppP" -> "liftM2";
"bbaseNoAppP" -> "maybeBind";
"bbaseNoAppP" -> "monoPredicateP";
"bbaseNoAppP" -> "parens";
"bbaseNoAppP" -> "predicatesP";
"bbaseNoAppP" -> "return";
"bbaseP" -> "bCon";
"bbaseP" -> "bLst";
"bbaseP" -> "bTup";
"bbaseP" -> "bTyConP";
"bbaseP" -> "bareTyArgP";
"bbaseP" -> "bareTypeP";
"bbaseP" -> "holeRefP";
"bbaseP" -> "liftM2";
"bbaseP" -> "lowerIdTail";
"bbaseP" -> "maybeBind";
"bbaseP" -> "mmonoPredicateP";
"bbaseP" -> "parens";
"bbaseP" -> "predicatesP";
"bchopAlts" -> "firstElems";
"bchopAlts" -> "go";
"bchopAlts" -> "s1";
"bform" -> "classbuttonName";
"bform" -> "i";
"bindEqns" -> "addErrors";
"bindEqns" -> "canonicalizePaths";
"bindEqns" -> "config";
"bindEqns" -> "defConfig";
"bindEqns" -> "exitWithResult";
"bindEqns" -> "getOpts";
"bindEqns" -> "mkOpts";
"bindEqns" -> "printLiquidHaskellBanner";
"bindEqns" -> "reportResult";
"bindEqns" -> "withPragmas";
"bindEqns" -> "x";
"bindRefType_" -> "checkErr";
"bindRefType_" -> "exprRefType_";
"bindRefType_" -> "extend";
"bindRefType_" -> "x";
"bindSpans" -> "exprSpans";
"bindSpans" -> "x";
"binderIdP" -> "binderIdR";
"binderIdR" -> "isHaskellOpStartChar";
"binderP" -> "binderIdP";
"binderP" -> "infixBinderIdP";
"binderP" -> "parens";
"binderP" -> "x";
"binders" -> "_";
"bindersTx" -> "var";
"bindings" -> "_";
"bindings" -> "x";
"bkArrow" -> "bkFun";
"bkArrow" -> "bkImp";
"bkArrowDeep" -> "_";
"bkArrowDeep" -> "bkArrowDeep";
"bkArrowDeep" -> "x";
"bkClass" -> "_";
"bkClass" -> "bkClass";
"bkDataCon" -> "err";
"bkDataCon" -> "makeRTVar";
"bkFun" -> "bkFun";
"bkFun" -> "x";
"bkImp" -> "bkImp";
"bkImp" -> "x";
"bkImplicit" -> "_";
"bkImplicit" -> "bkImplicit";
"bkImplicit" -> "tx";
"bkImplicit" -> "x";
"bkUniv" -> "bkUniv";
"bkUnivClass" -> "bkClass";
"bkUnivClass" -> "bkUniv";
"bodyPred" -> "up";
"bottonCss" -> "classbuttonName";
"bottonCss" -> "i";
"bottonCss" -> "sourceName";
"bottonsCss" -> "bottonCss";
"bottonsCss" -> "colours";
"boundP" -> "bTyVar";
"boundP" -> "fmap";
"boundP" -> "parens";
"boundP" -> "return";
"boundP" -> "tyBindP";
"boundRecVar" -> "_";
"brkFun" -> "_";
"brkFun" -> "brkFun";
"bsplitC" -> "addLhsInv";
"bsplitC" -> "bsplitC\'";
"bsplitC" -> "get";
"bsplitC" -> "getTemplates";
"bsplitC" -> "refreshVV";
"bsplitC" -> "return";
"bsplitC\'" -> "err";
"bsplitC\'" -> "getLocation";
"bsplitC\'" -> "getTag";
"bsplitC\'" -> "mkSubC";
"bsplitC\'" -> "rTypeSortedReft\'";
"bsplitC\'" -> "replaceTop";
"bsplitC\'" -> "tag";
"bsplitW" -> "bsplitW\'";
"bsplitW" -> "get";
"bsplitW" -> "getTemplates";
"bsplitW" -> "return";
"bsplitW\'" -> "f";
"bsplitW\'" -> "getLocation";
"bsplitW\'" -> "rTypeSortedReft\'";
"bsubst" -> "b1";
"bsubst" -> "bsubst";
"bsubst" -> "subst";
"bsubst" -> "x";
"btP" -> "_";
"btP" -> "btP";
"btP" -> "compP";
"btP" -> "getClasses";
"btP" -> "mkBTyCon";
"btP" -> "rFun";
"btP" -> "rImpF";
"btP" -> "return";
"buildAliasGraph" -> "buildAliasNode";
"buildAliasGraph" -> "x";
"buildAliasNode" -> "f";
"buildAliasNode" -> "x";
"buildAliasTable" -> "x";
"buildDepGraph" -> "mkDepGraphNode";
"buildExprEdges" -> "_";
"buildExprEdges" -> "expand";
"buildExprEdges" -> "f";
"buildExprEdges" -> "go";
"buildExprEdges" -> "ordNub";
"buildTypeEdges" -> "_";
"buildTypeEdges" -> "go";
"buildTypeEdges" -> "ordNub";
"bval" -> "_";
"bval" -> "aval";
"bval" -> "b1";
"bval" -> "bval";
"bx1" -> "_";
"bx1" -> "tt";
"bx1" -> "verify";
"bx2" -> "_";
"bx2" -> "bAnd";
"bx2" -> "impossible";
"bx2" -> "toProof";
"bx2" -> "trivial";
"bx2" -> "unreachable";
"bx2" -> "verify";
"bx2" -> "withProof";
"bx4" -> "_";
"bx4" -> "i";
"bx4" -> "tt";
"bx4" -> "verify";
"cMeasureP" -> "return";
"cMeasureP" -> "tyBindP";
"cMeasureP" -> "x";
"cachedBareSpecs" -> "err";
"cachedBareSpecs" -> "impossible";
"cachedBareSpecs" -> "showPpr";
"cachedSpecModule" -> "_";
"cachedSpecStableModuleId" -> "_";
"callGraphRanks" -> "i";
"callGraphRanks" -> "zipWith";
"canRewrite" -> "unify";
"canonicalize" -> "f";
"canonicalize" -> "return";
"canonicalizePaths" -> "canonicalize";
"canonicalizePaths" -> "is";
"canonicalizePaths" -> "pwd";
"canonicalizePaths" -> "return";
"canonizeDecls" -> "_";
"canonizeDecls" -> "dataDeclKey";
"canonizeDecls" -> "err";
"canonizeDecls" -> "errDupSpecs";
"canonizeDecls" -> "impossible";
"canonizeDecls" -> "selectDD";
"canonizeDecls" -> "uError";
"caseEnv" -> "_";
"caseEnv" -> "addBinders";
"caseEnv" -> "altReft";
"caseEnv" -> "checkTyCon";
"caseEnv" -> "dataConMsReft";
"caseEnv" -> "dataConReft";
"caseEnv" -> "projectTypes";
"caseEnv" -> "refreshVV";
"caseEnv" -> "return";
"caseEnv" -> "shiftVV";
"caseEnv" -> "strengthen";
"caseEnv" -> "uTop";
"caseEnv" -> "unfoldR";
"caseEnv" -> "x";
"caseKVKind" -> "_";
"caseVarsE" -> "_";
"caseVarsE" -> "caseVarsE";
"casesToLg" -> "altToLg";
"casesToLg" -> "checkDataAlt";
"casesToLg" -> "go";
"casesToLg" -> "normalizeAlts";
"casesToLg" -> "panic";
"casesToLg" -> "return";
"castTy" -> "_";
"castTy" -> "castTy\'";
"castTy" -> "cconsE";
"castTy" -> "lookupNewType";
"castTy" -> "return";
"castTy" -> "x";
"castTy\'" -> "_";
"castTy\'" -> "castTy\'";
"castTy\'" -> "panic";
"castTy\'" -> "return";
"castTy\'" -> "strengthen";
"castTy\'" -> "trueTy";
"castTy\'" -> "typeSort";
"castTy\'" -> "uTop";
"castTy\'" -> "x";
"catSpans" -> "_";
"catSpans" -> "panic";
"catSpans" -> "showPpr";
"catSpans" -> "varFile";
"catSpans" -> "x";
"cconsCase" -> "caseEnv";
"cconsCase" -> "cconsE";
"cconsCase" -> "x";
"cconsE" -> "cconsE\'";
"cconsE\'" -> "_";
"cconsE\'" -> "addC";
"cconsE\'" -> "addConstraints";
"cconsE\'" -> "addForAllConstraint";
"cconsE\'" -> "addFunctionConstraint";
"cconsE\'" -> "addHole";
"cconsE\'" -> "addIdA";
"cconsE\'" -> "addPost";
"cconsE\'" -> "castTy";
"cconsE\'" -> "cconsCase";
"cconsE\'" -> "cconsE";
"cconsE\'" -> "cconsE\'";
"cconsE\'" -> "cconsLazyLet";
"cconsE\'" -> "consCBLet";
"cconsE\'" -> "consE";
"cconsE\'" -> "f";
"cconsE\'" -> "get";
"cconsE\'" -> "getConfig";
"cconsE\'" -> "insertREnv";
"cconsE\'" -> "instantiatePreds";
"cconsE\'" -> "isClassConCo";
"cconsE\'" -> "isHoleVar";
"cconsE\'" -> "pVartoRConc";
"cconsE\'" -> "rVar";
"cconsE\'" -> "replacePredsWithRefs";
"cconsE\'" -> "setLocation";
"cconsE\'" -> "splitConstraints";
"cconsE\'" -> "subsTyVar_meet\'";
"cconsE\'" -> "tt";
"cconsE\'" -> "uPVar";
"cconsE\'" -> "updateEnvironment";
"cconsE\'" -> "x";
"cconsFreshE" -> "addW";
"cconsFreshE" -> "cconsE";
"cconsFreshE" -> "freshTy_type";
"cconsFreshE" -> "return";
"cconsLazyLet" -> "_";
"cconsLazyLet" -> "cconsE";
"cconsLazyLet" -> "panic";
"cconsLazyLet" -> "trueTy";
"cconsLazyLet" -> "tx";
"cconsLazyLet" -> "x";
"cfgRef" -> "defConfig";
"cgInfoFInfo" -> "return";
"cgInfoFInfo" -> "targetFInfo";
"check" -> "_";
"check" -> "cgInfoFInfo";
"check" -> "generateConstraintsWithEnv";
"check" -> "insertREnv";
"check" -> "x";
"checkAbstractRefs" -> "_";
"checkAbstractRefs" -> "check";
"checkAbstractRefs" -> "checkOne";
"checkAbstractRefs" -> "f";
"checkAbstractRefs" -> "go";
"checkAbstractRefs" -> "pvType";
"checkAbstractRefs" -> "rTyConPVs";
"checkAbstractRefs" -> "s1";
"checkAbstractRefs" -> "toRSort";
"checkAbstractRefs" -> "x";
"checkAll" -> "_";
"checkAll" -> "checkErr";
"checkAll" -> "x";
"checkAppTys" -> "_";
"checkAppTys" -> "checkTcArity";
"checkAppTys" -> "go";
"checkBareSpec" -> "_";
"checkBareSpec" -> "checkDisjoints";
"checkBareSpec" -> "checkUnique";
"checkBareSpec" -> "dataDeclFields";
"checkBareSpec" -> "emptyDiagnostics";
"checkBareSpec" -> "inlines";
"checkBind" -> "checkTy";
"checkBind" -> "deShadowBind";
"checkBind" -> "emptyEnv";
"checkBind" -> "fmap";
"checkBind" -> "getCallInfoBind";
"checkBind" -> "mapWithFun";
"checkBind" -> "structDecreasing";
"checkBind" -> "toStructCall";
"checkBoolAlts" -> "return";
"checkBoolAlts" -> "throw";
"checkClassMeasures" -> "_";
"checkClassMeasures" -> "checkOne";
"checkClassMeasures" -> "impossible";
"checkClassMeasures" -> "makeCLaws";
"checkClassMeasures" -> "makeClasses";
"checkClassMeasures" -> "makeDefaultMethods";
"checkClassMeasures" -> "makeMethodTypes";
"checkClassMeasures" -> "makeSpecDictionaries";
"checkClassMeasures" -> "mkDiagnostics";
"checkClassMethods" -> "_";
"checkClassMethods" -> "emptyDiagnostics";
"checkClassMethods" -> "mkDiagnostics";
"checkClassMethods" -> "x";
"checkCyclicAliases" -> "_";
"checkCyclicAliases" -> "cycleAliasErr";
"checkCyclicAliases" -> "go";
"checkCyclicAliases" -> "x";
"checkDataAlt" -> "_";
"checkDataAlt" -> "makeDataConChecker";
"checkDataAlt" -> "mkLit";
"checkDataAlt" -> "return";
"checkDataAlt" -> "throw";
"checkDataCtorDupField" -> "_";
"checkDataCtorDupField" -> "err";
"checkDataCtorDupField" -> "return";
"checkDataCtorDupField" -> "uError";
"checkDataCtorDupField" -> "x";
"checkDataCtors" -> "checkDataCtorDupField";
"checkDataCtors" -> "dataNameSymbol";
"checkDataCtors" -> "errDataConMismatch";
"checkDataCtors" -> "fmap";
"checkDataCtors" -> "return";
"checkDataCtors" -> "x";
"checkDisjoint" -> "checkUnique";
"checkDisjoint" -> "s1";
"checkDisjoints" -> "_";
"checkDisjoints" -> "checkDisjoint";
"checkDisjoints" -> "checkDisjoints";
"checkDisjoints" -> "emptyDiagnostics";
"checkDupIntersect" -> "mkDiagnostics";
"checkDupIntersect" -> "mkWarning";
"checkDupIntersect" -> "x";
"checkDuplicate" -> "checkUnique\'";
"checkDuplicate" -> "mkDiagnostics";
"checkDuplicateMeasure" -> "err";
"checkDuplicateMeasure" -> "fSrcSpan";
"checkDuplicateMeasure" -> "uError";
"checkDuplicateRTAlias" -> "mkDiagnostics";
"checkDuplicateRTAlias" -> "panic";
"checkDuplicateRTAlias" -> "x";
"checkDuplicateSigs" -> "_";
"checkDuplicateSigs" -> "errDupSpecs";
"checkDuplicateSigs" -> "uError";
"checkDuplicateSigs" -> "x";
"checkErr" -> "getLocation";
"checkErr" -> "panic";
"checkError" -> "hasType";
"checkError" -> "mkIntExprInt";
"checkError" -> "return";
"checkError" -> "toType";
"checkError" -> "varError";
"checkExitCode" -> "_";
"checkExitCode" -> "panic";
"checkExitCode" -> "return";
"checkExtra" -> "_";
"checkExtra" -> "i";
"checkExtra" -> "mkDiagnostics";
"checkExtra" -> "mkError";
"checkExtra" -> "x";
"checkFilePragmas" -> "check";
"checkFilePragmas" -> "err";
"checkFilePragmas" -> "fSrcSpan";
"checkFilePragmas" -> "return";
"checkFilePragmas" -> "throw";
"checkFilePresent" -> "f";
"checkFilePresent" -> "panic";
"checkFun" -> "_";
"checkFun" -> "checkErr";
"checkFun" -> "x";
"checkHint" -> "_";
"checkHint" -> "addWarning";
"checkHint" -> "checkValidHint";
"checkHint" -> "f";
"checkHint" -> "return";
"checkHint" -> "x";
"checkIAl" -> "checkIAlOne";
"checkIAlOne" -> "checkTy";
"checkIAlOne" -> "emptyDiagnostics";
"checkIAlOne" -> "err";
"checkIAlOne" -> "mkDiagnostics";
"checkIAlOne" -> "toRSort";
"checkIndex" -> "safeLogIndex";
"checkIndex" -> "toRTypeRep";
"checkIndex" -> "unOCons";
"checkIndex" -> "unTemplate";
"checkIndex" -> "x";
"checkInv" -> "_";
"checkInv" -> "checkTy";
"checkInv" -> "err";
"checkLawInstances" -> "checkOneInstance";
"checkLawInstances" -> "go";
"checkLiquidHaskellContext" -> "_";
"checkLiquidHaskellContext" -> "errorLogger";
"checkLiquidHaskellContext" -> "processModule";
"checkLiquidHaskellContext" -> "pure";
"checkLiquidHaskellContext" -> "return";
"checkMBody" -> "_";
"checkMBody" -> "bkArrowDeep";
"checkMBody" -> "checkMBodyUnify";
"checkMBody" -> "checkMBody\'";
"checkMBody" -> "dataConWrapperType";
"checkMBody" -> "isClassType";
"checkMBody" -> "ofType";
"checkMBody" -> "rTypeSortedReft";
"checkMBody" -> "snd4";
"checkMBody" -> "subsTyVars_meet";
"checkMBody" -> "toRTypeRep";
"checkMBody" -> "x";
"checkMBodyUnify" -> "_";
"checkMBodyUnify" -> "go";
"checkMBodyUnify" -> "toRSort";
"checkMBodyUnify" -> "zipWith";
"checkMBody\'" -> "dropNArgs";
"checkMBody\'" -> "rTypeSort";
"checkMBody\'" -> "rTypeSortedReft";
"checkMany" -> "_";
"checkMany" -> "checkMany";
"checkMany" -> "checkOne";
"checkMany" -> "return";
"checkMeasure" -> "_";
"checkMeasure" -> "checkMBody";
"checkMeasure" -> "mkDiagnostics";
"checkMeasures" -> "checkMeasure";
"checkMismatch" -> "dropImplicits";
"checkMismatch" -> "emptyDiagnostics";
"checkMismatch" -> "err";
"checkMismatch" -> "errTypeMismatch";
"checkMismatch" -> "mkDiagnostics";
"checkMismatch" -> "tyCompat";
"checkMismatch" -> "x";
"checkMonad" -> "_";
"checkMonad" -> "checkErr";
"checkMonad" -> "go";
"checkMonad" -> "unRRTy";
"checkMonad" -> "x";
"checkOne" -> "actOrDie";
"checkOne" -> "exitWithResult";
"checkOne" -> "liquidOne";
"checkOne" -> "pure";
"checkOne" -> "return";
"checkOneInstance" -> "checkExtra";
"checkOneInstance" -> "checkOneLaw";
"checkOneLaw" -> "_";
"checkOneLaw" -> "mkDiagnostics";
"checkOneLaw" -> "mkError";
"checkOneLaw" -> "unify";
"checkOneLaw" -> "x";
"checkPlugged" -> "hasHoleTy";
"checkPlugged" -> "mkDiagnostics";
"checkPlugged" -> "x";
"checkQualifier" -> "wiredSortedSyms";
"checkQualifier" -> "x";
"checkRTAliases" -> "_";
"checkRTAliases" -> "checkDuplicateRTAlias";
"checkRType" -> "_";
"checkRType" -> "checkAbstractRefs";
"checkRType" -> "checkAppTys";
"checkRType" -> "checkReft";
"checkRType" -> "classBinds";
"checkRType" -> "efoldReft";
"checkRType" -> "err";
"checkRType" -> "f";
"checkRType" -> "insertsSEnv";
"checkRType" -> "isBase";
"checkRType" -> "lt";
"checkRType" -> "pvarRType";
"checkRType" -> "rRCls";
"checkRType" -> "rTypeSortedReft";
"checkRType" -> "tx";
"checkRType" -> "tyToBind";
"checkRType" -> "x";
"checkRecordSelectorSigs" -> "_";
"checkRecordSelectorSigs" -> "impossible";
"checkReft" -> "_";
"checkReft" -> "rTypeSortedReft";
"checkRewrites" -> "getRewriteErrors";
"checkRewrites" -> "mkDiagnostics";
"checkSigTExpr" -> "checkBind";
"checkSigTExpr" -> "checkTerminationExpr";
"checkSigTExpr" -> "empty";
"checkSigTExpr" -> "emptyDiagnostics";
"checkSigTExpr" -> "x";
"checkSizeFun" -> "f";
"checkSizeFun" -> "go";
"checkSizeFun" -> "isWiredIn";
"checkSizeFun" -> "mkDiagnostics";
"checkSizeFun" -> "mkError";
"checkSizeFun" -> "ofType";
"checkSizeFun" -> "rTypeSortedReft";
"checkSizeFun" -> "szFun";
"checkSizeFun" -> "x";
"checkTargetInfo" -> "check";
"checkTargetInfo" -> "getConfig";
"checkTargetInfo" -> "liquidQueries";
"checkTargetInfo" -> "newPrune";
"checkTargetInfo" -> "pure";
"checkTargetInfo" -> "showCBs";
"checkTargetSpec" -> "checkBind";
"checkTargetSpec" -> "checkClassMeasures";
"checkTargetSpec" -> "checkClassMethods";
"checkTargetSpec" -> "checkDupIntersect";
"checkTargetSpec" -> "checkDuplicate";
"checkTargetSpec" -> "checkIAl";
"checkTargetSpec" -> "checkInv";
"checkTargetSpec" -> "checkLawInstances";
"checkTargetSpec" -> "checkMeasures";
"checkTargetSpec" -> "checkMismatch";
"checkTargetSpec" -> "checkPlugged";
"checkTargetSpec" -> "checkRTAliases";
"checkTargetSpec" -> "checkRewrites";
"checkTargetSpec" -> "checkSizeFun";
"checkTargetSpec" -> "checkTySigs";
"checkTargetSpec" -> "condNull";
"checkTargetSpec" -> "emptyDiagnostics";
"checkTargetSpec" -> "fmap";
"checkTargetSpec" -> "getConfig";
"checkTargetSpec" -> "getMethodType";
"checkTargetSpec" -> "higherOrderFlag";
"checkTargetSpec" -> "pruneFlag";
"checkTargetSpec" -> "x";
"checkTargets" -> "_";
"checkTargets" -> "f";
"checkTargets" -> "go";
"checkTargets" -> "return";
"checkTargets" -> "runLiquidTargets";
"checkTcArity" -> "tyConRealArity";
"checkTerminationExpr" -> "_";
"checkTerminationExpr" -> "classBinds";
"checkTerminationExpr" -> "emptyDiagnostics";
"checkTerminationExpr" -> "err";
"checkTerminationExpr" -> "go";
"checkTerminationExpr" -> "mkClass";
"checkTerminationExpr" -> "mkDiagnostics";
"checkTerminationExpr" -> "rRCls";
"checkTerminationExpr" -> "rTypeSortedReft";
"checkTerminationExpr" -> "toRTypeRep";
"checkTerminationExpr" -> "x";
"checkTy" -> "checkRType";
"checkTy" -> "emptyDiagnostics";
"checkTy" -> "mkDiagnostics";
"checkTyCon" -> "_";
"checkTyCon" -> "checkErr";
"checkTyCon" -> "x";
"checkTySigs" -> "_";
"checkTySigs" -> "check";
"checkTySigs" -> "checkSigTExpr";
"checkTySigs" -> "coreVisitor";
"checkTySigs" -> "emptyDiagnostics";
"checkTySigs" -> "x";
"checkUnbound" -> "getLocation";
"checkUnbound" -> "panic";
"checkUnbound" -> "x";
"checkUnique" -> "_";
"checkUnique" -> "checkUnique\'";
"checkUnique" -> "mkDiagnostics";
"checkValid" -> "_";
"checkValid" -> "bImp";
"checkValid" -> "checkValid";
"checkValidHint" -> "addWarning";
"checkValidHint" -> "err";
"checkValidHint" -> "f";
"checkValidHint" -> "return";
"checkValidHint" -> "x";
"checkedItv" -> "_";
"checkedItv" -> "f";
"checkedItv" -> "is";
"checkedItv" -> "render";
"checkedItv" -> "return";
"checkedItv" -> "sourceName";
"checkedVars" -> "_";
"choosen" -> "_";
"choosen" -> "i";
"choosen" -> "impossible";
"chopAltDBG" -> "chopAlts";
"chopAlts" -> "bchopAlts";
"cinfoErr" -> "_";
"cinfoErr" -> "srcSpanEndLoc";
"cinfoErr" -> "srcSpanStartLoc";
"cinfoError" -> "_";
"circleP" -> "anglesCircleP";
"circleP" -> "bareAllP";
"circleP" -> "bareTypeBracesP";
"circleP" -> "bbaseP";
"circleP" -> "dummyP";
"circleP" -> "holePC";
"circleP" -> "namedCircleP";
"circleP" -> "nullPC";
"circleP" -> "unnamedCircleP";
"classBTyConP" -> "mkClassBTyCon";
"classBinds" -> "_";
"classBinds" -> "isEqualityConstr";
"classBinds" -> "rTypeSortedReft";
"classBinds" -> "toType";
"classCons" -> "dataConImplicitIds";
"classP" -> "bTyVar";
"classP" -> "bareAtomBindP";
"classP" -> "classBTyConP";
"classP" -> "fmap";
"classP" -> "parens";
"classP" -> "pure";
"classP" -> "return";
"classP" -> "tyBindP";
"classP" -> "tyVarIdP";
"classP" -> "x";
"classbuttonName" -> "i";
"classify" -> "allProg";
"classify" -> "classify";
"classify" -> "x";
"cloneCase" -> "freshNormalVar";
"cloneCase" -> "return";
"closeA" -> "_";
"closeA" -> "panic";
"closeA" -> "showPpr";
"closeAnnots" -> "closeA";
"closeAnnots" -> "collapseA";
"closeAnnots" -> "filterA";
"cmd_1_2" -> "x";
"cmd_2" -> "cmd_1";
"cmd_2" -> "cmd_2";
"cmpLexRef" -> "_";
"cmpLexRef" -> "f";
"cmpLexRef" -> "x";
"cmpSymbol" -> "dropModuleNamesAndUnique";
"cmpSymbol" -> "dropModuleUnique";
"coSubRReft" -> "coSubReft";
"coSubReft" -> "x";
"coerceToLg" -> "coercionTypeEq";
"coerceToLg" -> "typeEqToLg";
"collapseA" -> "fmap";
"collapseA" -> "pickOneA";
"collectArguments" -> "collectValBinders\'";
"collectArguments" -> "ignoreLetBinds";
"collectNonRecLets" -> "_";
"collectNonRecLets" -> "go";
"collectValBinders\'" -> "_";
"collectValBinders\'" -> "go";
"combinations" -> "_";
"combinations" -> "addBinders";
"combinations" -> "addEEnv";
"combinations" -> "addSEnv";
"combinations" -> "combinations";
"combinations" -> "extendEnvWithVV";
"combinations" -> "fromListREnv";
"combinations" -> "getLocation";
"combinations" -> "globalize";
"combinations" -> "insertREnv";
"combinations" -> "localBindsOfType";
"combinations" -> "lookupREnv";
"combinations" -> "rTypeSortedReft\'";
"combinations" -> "setBind";
"combinations" -> "setLocation";
"combinations" -> "setRecs";
"combinations" -> "setTRec";
"combinations" -> "toListREnv";
"combineDCTypes" -> "ofType";
"combineDCTypes" -> "strengthenRefTypeGen";
"command" -> "getOpts";
"command" -> "loadLiftedSpec";
"command" -> "makeTargetSpec";
"command" -> "saveLiftedSpec";
"compP" -> "btP";
"compP" -> "circleP";
"compP" -> "parens";
"compareRType" -> "_";
"compareRType" -> "and";
"compareRType" -> "blankLine";
"compareRType" -> "dropModel";
"compareRType" -> "empty";
"compareRType" -> "errDupSpecs";
"compareRType" -> "errorsWithContext";
"compareRType" -> "go";
"compareRType" -> "impossible";
"compareRType" -> "liftM2";
"compareRType" -> "panic";
"compareRType" -> "panicDoc";
"compareRType" -> "parens";
"compareRType" -> "ppError";
"compareRType" -> "ppTicks";
"compareRType" -> "realSrcSpan";
"compareRType" -> "return";
"compareRType" -> "sourceErrors";
"compareRType" -> "srcSpanFileMb";
"compareRType" -> "todo";
"compareRType" -> "uError";
"compareRType" -> "unify";
"compareRType" -> "unpackRealSrcSpan";
"compareRType" -> "v1";
"compareRType" -> "v2";
"compareRType" -> "zipWith";
"compareRType" -> "zipWithM";
"compileCFiles" -> "_";
"compileCFiles" -> "updateIncludePaths";
"compileCFiles" -> "x";
"composeM" -> "f";
"composeM" -> "return";
"composeM" -> "x";
"conPatP" -> "dataConNameP";
"concatMapM" -> "f";
"concatMapM" -> "fmap";
"concatString" -> "s1";
"concretize" -> "isGoodInstance";
"concretize" -> "powersetUpTo";
"config" -> "copyright";
"config" -> "defaultMaxParams";
"config" -> "defaultPort";
"config" -> "pwd";
"configSensitiveDependencies" -> "totalityCheck";
"configToRedundantDependencies" -> "_";
"configToRedundantDependencies" -> "configSensitiveDependencies";
"configToRedundantDependencies" -> "lookupModule";
"configToRedundantDependencies" -> "pure";
"configToRedundantDependencies" -> "toStableModule";
"configureDynFlags" -> "_";
"configureDynFlags" -> "return";
"configureDynFlags" -> "updateIncludePaths";
"configureGhcTargets" -> "_";
"configureGhcTargets" -> "isBootInterface";
"configureGhcTargets" -> "isBootSummary";
"configureGhcTargets" -> "return";
"configureGhcTargets" -> "setTargetModules";
"conjoinInvariant" -> "_";
"conjoinInvariant" -> "conjoinInvariantShift";
"conjoinInvariant" -> "zipWith";
"conjoinInvariantShift" -> "conjoinInvariant";
"conjoinInvariantShift" -> "rTypeValueVar";
"conjoinInvariantShift" -> "shiftVV";
"consAct" -> "addW";
"consAct" -> "consCBTop";
"consAct" -> "consClass";
"consAct" -> "get";
"consAct" -> "splitC";
"consAct" -> "splitW";
"consBind" -> "_";
"consBind" -> "addIdA";
"consBind" -> "addKuts";
"consBind" -> "addPToEnv";
"consBind" -> "addW";
"consBind" -> "bkUniv";
"consBind" -> "cconsE";
"consBind" -> "consE";
"consBind" -> "defAnn";
"consBind" -> "elemHEnv";
"consBind" -> "fmap";
"consBind" -> "fromRTypeRep";
"consBind" -> "getLocation";
"consBind" -> "killSubst";
"consBind" -> "return";
"consBind" -> "setBind";
"consBind" -> "toRTypeRep";
"consBind" -> "topSpecType";
"consBind" -> "weakenResult";
"consBind" -> "x";
"consCB" -> "_";
"consCB" -> "addPostTemplate";
"consCB" -> "addW";
"consCB" -> "check";
"consCB" -> "consBind";
"consCB" -> "consCBSizedTys";
"consCB" -> "consCBWithExprs";
"consCB" -> "dinsert";
"consCB" -> "dlookup";
"consCB" -> "dmap";
"consCB" -> "extender";
"consCB" -> "f";
"consCB" -> "fmap";
"consCB" -> "get";
"consCB" -> "getConfig";
"consCB" -> "grepDictionary";
"consCB" -> "i";
"consCB" -> "impossible";
"consCB" -> "isDictionary";
"consCB" -> "isHoleVar";
"consCB" -> "liftM";
"consCB" -> "makeSingleton";
"consCB" -> "panic";
"consCB" -> "return";
"consCB" -> "setRecs";
"consCB" -> "simplify";
"consCB" -> "subsTyVar_meet\'";
"consCB" -> "to\'";
"consCB" -> "trueTy";
"consCB" -> "varTemplate";
"consCB" -> "x";
"consCBLet" -> "consCB";
"consCBLet" -> "doTermCheck";
"consCBLet" -> "get";
"consCBLet" -> "getConfig";
"consCBLet" -> "return";
"consCBSizedTys" -> "_";
"consCBSizedTys" -> "addWarning";
"consCBSizedTys" -> "checkAll";
"consCBSizedTys" -> "checkIndex";
"consCBSizedTys" -> "consBind";
"consCBSizedTys" -> "err";
"consCBSizedTys" -> "extender";
"consCBSizedTys" -> "f";
"consCBSizedTys" -> "get";
"consCBSizedTys" -> "is";
"consCBSizedTys" -> "liftM";
"consCBSizedTys" -> "makeDecrIndex";
"consCBSizedTys" -> "makeRecInvariants";
"consCBSizedTys" -> "recType";
"consCBSizedTys" -> "refreshArgs";
"consCBSizedTys" -> "return";
"consCBSizedTys" -> "setTRec";
"consCBSizedTys" -> "toRSort";
"consCBSizedTys" -> "toRTypeRep";
"consCBSizedTys" -> "unOCons";
"consCBSizedTys" -> "unTemplate";
"consCBSizedTys" -> "varTemplate";
"consCBSizedTys" -> "x";
"consCBSizedTys" -> "zip4";
"consCBSizedTys" -> "zipWith";
"consCBTop" -> "_";
"consCBTop" -> "consCB";
"consCBTop" -> "doTermCheck";
"consCBTop" -> "get";
"consCBTop" -> "getConfig";
"consCBTop" -> "i";
"consCBTop" -> "removeInvariant";
"consCBTop" -> "restoreInvariant";
"consCBTop" -> "return";
"consCBTop" -> "trueTy";
"consCBTop" -> "trustVar";
"consCBTop" -> "tt";
"consCBTop" -> "x";
"consCBWithExprs" -> "consBind";
"consCBWithExprs" -> "err";
"consCBWithExprs" -> "extender";
"consCBWithExprs" -> "get";
"consCBWithExprs" -> "liftM";
"consCBWithExprs" -> "makeTermEnvs";
"consCBWithExprs" -> "refreshArgs";
"consCBWithExprs" -> "return";
"consCBWithExprs" -> "safeFromAsserted";
"consCBWithExprs" -> "varTemplate";
"consCBWithExprs" -> "x";
"consClass" -> "_";
"consClass" -> "addC";
"consClass" -> "return";
"consClass" -> "setLocation";
"consClass" -> "x";
"consE" -> "_";
"consE" -> "addC";
"consE" -> "addIdA";
"consE" -> "addLocA";
"consE" -> "addPost";
"consE" -> "addW";
"consE" -> "argExpr";
"consE" -> "argType";
"consE" -> "bkUniv";
"consE" -> "caseKVKind";
"consE" -> "castTy";
"consE" -> "cconsE";
"consE" -> "cconsFreshE";
"consE" -> "checkAll";
"consE" -> "checkFun";
"consE" -> "checkUnbound";
"consE" -> "consE";
"consE" -> "consPattern";
"consE" -> "dhasinfo";
"consE" -> "dlookup";
"consE" -> "dropConstraints";
"consE" -> "dropExists";
"consE" -> "exprLoc";
"consE" -> "f";
"consE" -> "freshTy_type";
"consE" -> "fromRISig";
"consE" -> "get";
"consE" -> "getConfig";
"consE" -> "getExprDict";
"consE" -> "getExprFun";
"consE" -> "getLocation";
"consE" -> "instantiateGhosts";
"consE" -> "instantiatePreds";
"consE" -> "isClassConCo";
"consE" -> "isGenericVar";
"consE" -> "lambdaSingleton";
"consE" -> "literalFRefType";
"consE" -> "makeRTVar";
"consE" -> "makeSingleton";
"consE" -> "panic";
"consE" -> "patternFlag";
"consE" -> "rTVarToBind";
"consE" -> "rTyVar";
"consE" -> "refreshVV";
"consE" -> "return";
"consE" -> "setLocation";
"consE" -> "simplify";
"consE" -> "subsTyReft";
"consE" -> "subsTyVar_meet\'";
"consE" -> "trueTy";
"consE" -> "tt";
"consE" -> "tx";
"consE" -> "uRType";
"consE" -> "updateEnvironment";
"consE" -> "updateLocA";
"consE" -> "varAnn";
"consE" -> "varRefType";
"consE" -> "x";
"consPatP" -> "mkConsPat";
"consPattern" -> "_";
"consPattern" -> "addC";
"consPattern" -> "addIdA";
"consPattern" -> "addW";
"consPattern" -> "caseEnv";
"consPattern" -> "cconsFreshE";
"consPattern" -> "checkMonad";
"consPattern" -> "consE";
"consPattern" -> "freshTy_type";
"consPattern" -> "i";
"consPattern" -> "mkRAppTy";
"consPattern" -> "return";
"consPattern" -> "trueTy";
"consPattern" -> "tt";
"consPattern" -> "tx";
"consPattern" -> "varRefType";
"consPattern" -> "x";
"constraintEnvP" -> "return";
"constraintEnvP" -> "tyBindNoLocP";
"constraintP" -> "bareTypeP";
"constraintP" -> "constraintEnvP";
"constraintP" -> "fromRTypeRep";
"constraintP" -> "return";
"constraintToLogic" -> "constraintToLogicOne";
"constraintToLogicOne" -> "combinations";
"constraintToLogicOne" -> "init";
"constraintToLogicOne" -> "localBindsOfType";
"constraintToLogicOne" -> "subConstraintToLogicOne";
"constraintToLogicOne" -> "x";
"cookSpecType" -> "cookSpecTypeE";
"cookSpecType" -> "x";
"cookSpecTypeE" -> "addTyConInfo";
"cookSpecTypeE" -> "bareExpandType";
"cookSpecTypeE" -> "bareSpecType";
"cookSpecTypeE" -> "fmap";
"cookSpecTypeE" -> "generalizeWith";
"cookSpecTypeE" -> "i";
"cookSpecTypeE" -> "maybePlug";
"cookSpecTypeE" -> "plugHoles";
"cookSpecTypeE" -> "specExpandType";
"cookSpecTypeE" -> "txExpToBind";
"cookSpecTypeE" -> "x";
"copyright" -> "gitInfo";
"coreAltToDef" -> "_";
"coreAltToDef" -> "coreToLg";
"coreAltToDef" -> "defArgs";
"coreAltToDef" -> "measureFail";
"coreAltToDef" -> "return";
"coreAltToDef" -> "throw";
"coreAltToDef" -> "toArgs";
"coreAltToDef" -> "varRType";
"coreAltToDef" -> "x";
"coreBindLits" -> "_";
"coreBindLits" -> "fmap";
"coreBindLits" -> "freeSyms";
"coreBindLits" -> "hasBaseTypeVar";
"coreBindLits" -> "isDataConId";
"coreBindLits" -> "literalConst";
"coreBindLits" -> "typeSort";
"coreBindLits" -> "x";
"coreBindSymbols" -> "binders";
"coreBindSymbols" -> "dropModuleNames";
"coreBindSymbols" -> "simplesymbol";
"coreDefs" -> "coreExprDefs";
"coreDefs" -> "coreVarExprs";
"coreDefs" -> "varBounds";
"coreDeps" -> "mkGraph";
"coreDeps" -> "x";
"coreExprDef" -> "catSpans";
"coreExprDef" -> "exprSpans";
"coreExprDef" -> "lineSpan";
"coreExprDef" -> "meetSpans";
"coreExprDef" -> "x";
"coreExprDefs" -> "coreExprDef";
"coreExprDefs" -> "x";
"coreToDef" -> "_";
"coreToDef" -> "coreAltToDef";
"coreToDef" -> "go";
"coreToDef" -> "isMeasureArg";
"coreToDef" -> "measureFail";
"coreToDef" -> "simplify";
"coreToDef" -> "x";
"coreToDef\'" -> "coreToDef";
"coreToDef\'" -> "errHMeas";
"coreToDef\'" -> "runToLogic";
"coreToFun" -> "_";
"coreToFun" -> "coreToLg";
"coreToFun" -> "go";
"coreToFun" -> "isErasable";
"coreToFun" -> "normalize";
"coreToFun" -> "x";
"coreToFun\'" -> "coreToFun";
"coreToFun\'" -> "err";
"coreToFun\'" -> "errHMeas";
"coreToFun\'" -> "runToLogic";
"coreToFun\'" -> "x";
"coreToHs" -> "caseIndent";
"coreToHs" -> "countTcConstraints";
"coreToHs" -> "discardModName";
"coreToHs" -> "pprintFormals";
"coreToHs" -> "pprintSymbols";
"coreToIte" -> "coreToLg";
"coreToIte" -> "return";
"coreToLg" -> "_";
"coreToLg" -> "casesToLg";
"coreToLg" -> "checkBoolAlts";
"coreToLg" -> "coerceToLg";
"coreToLg" -> "coreToIte";
"coreToLg" -> "coreToLg";
"coreToLg" -> "eVarWithMap";
"coreToLg" -> "getState";
"coreToLg" -> "i";
"coreToLg" -> "ignoreVar";
"coreToLg" -> "makesub";
"coreToLg" -> "mkLit";
"coreToLg" -> "return";
"coreToLg" -> "throw";
"coreToLg" -> "toPredApp";
"coreToLg" -> "typeSort";
"coreToLg" -> "x";
"coreToLogic" -> "coreToLg";
"coreToLogic" -> "normalize";
"coreVarExprs" -> "varExprs";
"coreVisitor" -> "_";
"coreVisitor" -> "breakS";
"coreVisitor" -> "err";
"coreVisitor" -> "hsannot";
"coreVisitor" -> "hscolour";
"coreVisitor" -> "srcModuleName";
"coreVisitor" -> "status";
"coreVisitor" -> "step";
"coreVisitor" -> "tokeniseWithLoc";
"coreVisitor" -> "x";
"countTcConstraints" -> "_";
"countTcConstraints" -> "x";
"createSubgoals" -> "_";
"createSubgoals" -> "createSubgoals";
"csvOutPass" -> "_";
"csvOutPass" -> "csvOutDate";
"csvOutPass" -> "csvOutName";
"csvOutPass" -> "csvOutPass";
"csvOutPass" -> "csvOutTime";
"customDynFlags" -> "cfgRef";
"customDynFlags" -> "configureDynFlags";
"customDynFlags" -> "pure";
"cycleAliasErr" -> "_";
"cycleAliasErr" -> "fromAliasSymbol";
"cycleAliasErr" -> "panic";
"cycleAliasErr" -> "x";
"dFunIdVars" -> "_";
"dFunIdVars" -> "f";
"dFunIdVars" -> "unfoldDep";
"dFunIdVars" -> "x";
"dataConArgs" -> "toType";
"dataConArgs" -> "x";
"dataConDecl" -> "i";
"dataConDecl" -> "isGadt";
"dataConFieldP" -> "bareTyArgP";
"dataConFieldP" -> "bareTypeP";
"dataConFieldP" -> "dummyBindP";
"dataConFieldP" -> "parens";
"dataConFieldP" -> "predTypeDDP";
"dataConFieldsP" -> "dataConFieldP";
"dataConFieldsP" -> "predTypeDDP";
"dataConFullSig" -> "mkScaled";
"dataConImplicitIds" -> "_";
"dataConImplicitIds" -> "panic";
"dataConImplicitIds" -> "subVar";
"dataConImplicitIds" -> "x";
"dataConInstArgTys" -> "mkScaled";
"dataConMsReft" -> "_";
"dataConMsReft" -> "ignoreOblig";
"dataConMsReft" -> "rTypeReft";
"dataConMsReft" -> "subst";
"dataConMsReft" -> "toRTypeRep";
"dataConMsReft" -> "x";
"dataConNameP" -> "parens";
"dataConOrigArgTys" -> "mkScaled";
"dataConP" -> "dataConFieldsP";
"dataConP" -> "dataConNameP";
"dataConP" -> "return";
"dataConP" -> "x";
"dataConPSpecType" -> "dcWorkSpecType";
"dataConPSpecType" -> "dcWrapSpecType";
"dataConProj" -> "i";
"dataConProj" -> "makeDataConSelector";
"dataConProj" -> "primDataCon";
"dataConProj" -> "x";
"dataConReft" -> "_";
"dataConReft" -> "isBaseDataCon";
"dataConReft" -> "x";
"dataConRepArgTys" -> "mkScaled";
"dataConResultTy" -> "_";
"dataConSel" -> "_";
"dataConSel" -> "bareBool";
"dataConSel" -> "bkDataCon";
"dataConSel" -> "err";
"dataConSel" -> "i";
"dataConSel" -> "mkArrow";
"dataConSel" -> "panic";
"dataConSig" -> "dataConOrigArgTys";
"dataConSig" -> "irrelevantMult";
"dataConSpec\'" -> "dataConPSpecType";
"dataConSpec\'" -> "tx";
"dataConSpec\'" -> "x";
"dataConToBare" -> "dropModuleNames";
"dataConToBare" -> "locNamedThing";
"dataConTy" -> "_";
"dataConTy" -> "dataConTy";
"dataConTy" -> "makeRTVar";
"dataConTy" -> "panic";
"dataConTy" -> "rApp";
"dataConTy" -> "rFun";
"dataConTy" -> "rVar";
"dataConTypes" -> "makeDataConType";
"dataConWorkRep" -> "ofType";
"dataConWorkRep" -> "toRTypeRep";
"dataConsOfTyCon" -> "_";
"dataConsOfTyCon" -> "empty";
"dataConsOfTyCon" -> "go";
"dataConsOfTyCon" -> "irrelevantMult";
"dataConsOfTyCon" -> "parens";
"dataConsOfTyCon" -> "ppFields";
"dataConsOfTyCon" -> "ppMbSizeFun";
"dataConsOfTyCon" -> "ppVars";
"dataCtorFields" -> "f";
"dataCtorFields" -> "isGadt";
"dataCtorsP" -> "adtDataConP";
"dataCtorsP" -> "dataConP";
"dataCtorsP" -> "dataPropTyP";
"dataCtorsP" -> "return";
"dataDeclBodyP" -> "dataCtorsP";
"dataDeclBodyP" -> "dataDeclName";
"dataDeclBodyP" -> "noWhere";
"dataDeclBodyP" -> "predVarDefsP";
"dataDeclBodyP" -> "return";
"dataDeclBodyP" -> "x";
"dataDeclFields" -> "dataCtorFields";
"dataDeclKey" -> "_";
"dataDeclKey" -> "checkDataCtors";
"dataDeclKey" -> "return";
"dataDeclName" -> "_";
"dataDeclName" -> "sourcePosSrcSpan";
"dataDeclName" -> "uError";
"dataDeclName" -> "x";
"dataDeclP" -> "dataDeclBodyP";
"dataDeclP" -> "dataSizeP";
"dataDeclP" -> "emptyDecl";
"dataDeclP" -> "getSourcePos";
"dataDeclP" -> "locUpperOrInfixIdP";
"dataDeclP" -> "return";
"dataDeclP" -> "x";
"dataNameSymbol" -> "x";
"dataPropTyP" -> "bareTypeP";
"dataSizeP" -> "return";
"dataToExpQ\'" -> "extQ";
"dataToExpQ\'" -> "textToExpQ";
"datavarianceP" -> "liftM2";
"datavarianceP" -> "varianceP";
"dcWorkSpecType" -> "dataConWorkRep";
"dcWorkSpecType" -> "fromRTypeRep";
"dcWorkSpecType" -> "meetWorkWrapRep";
"dcWorkSpecType" -> "toRTypeRep";
"dcWrapSpecType" -> "_";
"dcWrapSpecType" -> "mkArrow";
"dcWrapSpecType" -> "panic";
"dcWrapSpecType" -> "ppComm";
"dcWrapSpecType" -> "rTVarInfo";
"dcWrapSpecType" -> "tx";
"dcWrapSpecType" -> "x";
"dcWrapSpecType" -> "zipWith";
"debugLog" -> "debugLogs";
"decrType" -> "_";
"decrType" -> "go";
"decrType" -> "isDecreasing";
"decrType" -> "tx";
"decrType" -> "x";
"decreaseP" -> "f";
"decreaseP" -> "liftM2";
"decreaseP" -> "locBinderP";
"deepSplitProductType_maybe" -> "mkScaled";
"deepSplitProductType_maybe" -> "pure";
"defArgs" -> "i";
"defArgs" -> "ofType";
"defArgs" -> "x";
"defArgs" -> "zipWith";
"defBounds" -> "_";
"defBounds" -> "defBounds";
"defBounds" -> "x";
"defConfig" -> "defaultMaxParams";
"defConfig" -> "defaultPort";
"defRefType" -> "f";
"defRefType" -> "fSrcSpan";
"defRefType" -> "generalize";
"defRefType" -> "makeRTVar";
"defRefType" -> "mkArrow";
"defRefType" -> "ofType";
"defRefType" -> "rTyVar";
"defRefType" -> "refineWithCtorBody";
"defRefType" -> "splitType";
"defRefType" -> "stitchArgs";
"defaultDataCons" -> "_";
"defaultDataCons" -> "irrelevantMult";
"defaultDataCons" -> "keyDiff";
"defaultDataCons" -> "return";
"defaultDataCons" -> "showPpr";
"defaultTyConInfo" -> "_";
"defaultTyConInfo" -> "defaultTyConInfo";
"defaultTyConInfo" -> "x";
"defineP" -> "binderP";
"defineP" -> "locBinderP";
"deleteREnv" -> "updREnvLocal";
"deleteREnv" -> "x";
"dependsOn" -> "pure";
"derivedVar" -> "x";
"derivedVars" -> "dFunIdVars";
"derivedVars" -> "isDerivedInstance";
"derivedVars" -> "mgClsInstances";
"derivingClasses" -> "lq";
"derivingClasses" -> "plugin";
"deserialiseLiquidLib" -> "deserialiseBinaryObject";
"deserialiseLiquidLib" -> "lift";
"deserialiseLiquidLib" -> "lower";
"deserialiseLiquidLib" -> "ppPat";
"desugarModule" -> "_";
"desugarModule" -> "return";
"desugarModule" -> "set";
"devModeHooks" -> "_";
"devModeHooks" -> "addConstraints";
"devModeHooks" -> "constraintToLogic";
"devModeHooks" -> "return";
"devModeHooks" -> "x";
"dhasinfo" -> "_";
"dhasinfo" -> "compareRType";
"dhasinfo" -> "x";
"dictionaryBind" -> "dictionaryTyVar";
"dictionaryBind" -> "dictionaryVar";
"dictionaryTyVar" -> "stringTyVar";
"dictionaryVar" -> "dictionaryTyVar";
"dictionaryVar" -> "stringVar";
"diffLines" -> "_";
"diffLines" -> "diffLines";
"diffMap" -> "f";
"diffMap" -> "x";
"diffShifts" -> "_";
"diffShifts" -> "go";
"diffVars" -> "_";
"diffVars" -> "go";
"diffVars" -> "i";
"diffVars" -> "is";
"dinsert" -> "x";
"dlookup" -> "x";
"dmap" -> "f";
"dmap" -> "x";
"dmapty" -> "f";
"dmapty" -> "fmap";
"doExpand" -> "isPLEVar";
"doExpand" -> "subVar";
"doGenerate" -> "generateHtml";
"doGenerate" -> "vimAnnot";
"doTermCheck" -> "get";
"doTermCheck" -> "return";
"doTermCheck" -> "structuralTerm";
"doTermCheck" -> "x";
"dropApp" -> "_";
"dropApp" -> "dropApp";
"dropApp" -> "i";
"dropBoundLike" -> "isBoundLikePred";
"dropConstraints" -> "_";
"dropConstraints" -> "addC";
"dropConstraints" -> "addSEnv";
"dropConstraints" -> "dropConstraints";
"dropConstraints" -> "envToSub";
"dropConstraints" -> "return";
"dropConstraints" -> "tx";
"dropConstraints" -> "x";
"dropErrorLoc" -> "_";
"dropErrorLoc" -> "annErrors";
"dropErrorLoc" -> "annTypes";
"dropErrorLoc" -> "srcSpanEndLoc";
"dropErrorLoc" -> "srcSpanStartLoc";
"dropErrorLoc" -> "x";
"dropExists" -> "return";
"dropExists" -> "tx";
"dropExists" -> "x";
"dropFst3" -> "_";
"dropFst3" -> "x";
"dropImplicits" -> "_";
"dropImplicits" -> "dropImplicits";
"dropImplicits" -> "dropImplicitsRP";
"dropImplicits" -> "i";
"dropImplicits" -> "x";
"dropImplicitsRP" -> "dropImplicits";
"dropModel" -> "_";
"dropModel" -> "pprSrcSpan";
"dropModuleNames" -> "dropModuleNamesCorrect";
"dropModuleNamesAndUnique" -> "dropModuleNames";
"dropModuleNamesAndUnique" -> "dropModuleUnique";
"dropModuleNamesCorrect" -> "go";
"dropModuleUnique" -> "mungeNames";
"dropModuleUnique" -> "sepUnique";
"dropNArgs" -> "fromRTypeRep";
"dropNArgs" -> "i";
"dropNArgs" -> "toRTypeRep";
"dropString" -> "i";
"dropThd3" -> "_";
"dropThd3" -> "x";
"dropUniv" -> "bkUniv";
"dummyP" -> "ap";
"dummyP" -> "dummyReft";
"dummyP" -> "return";
"dummySourcePos" -> "_";
"dummySourcePos" -> "qualifySymbol";
"dummySourcePos" -> "tx";
"dummySourcePos" -> "x";
"dummyTyId" -> "ppPspec";
"dumpCs" -> "pprintMany";
"dumpCs" -> "render";
"dumpLogs" -> "csvOutDate";
"dumpLogs" -> "csvOutName";
"dumpLogs" -> "csvOutPass";
"dumpLogs" -> "csvOutTime";
"dumpLogs" -> "fmap";
"e2u" -> "fmap";
"e2u" -> "tidyError";
"eAppWithMap" -> "_";
"eAppWithMap" -> "dropApp";
"eAppWithMap" -> "f";
"eAppWithMap" -> "isApp";
"eVarWithMap" -> "eAppWithMap";
"eVarWithMap" -> "return";
"eVarWithMap" -> "tosymbol\'";
"eVarWithMap" -> "varExpr";
"eVarWithMap" -> "x";
"ealiasP" -> "rtAliasP";
"efoldReft" -> "_";
"efoldReft" -> "f";
"efoldReft" -> "go";
"efoldReft" -> "init";
"efoldReft" -> "insertSEnv";
"efoldReft" -> "insertsSEnv";
"efoldReft" -> "ofRSort";
"efoldReft" -> "rFun";
"efoldReft" -> "rTypeValueVar";
"efoldReft" -> "ty_var_is_val";
"efoldReft" -> "x";
"elemHEnv" -> "x";
"emapExprArg" -> "_";
"emapExprArg" -> "f";
"emapExprArg" -> "go";
"emapExprArg" -> "x";
"emapRef" -> "emapReft";
"emapRef" -> "f";
"emapReft" -> "_";
"emapReft" -> "emapRef";
"emapReft" -> "emapReft";
"emapReft" -> "f";
"emapReft" -> "x";
"embedP" -> "_";
"embedP" -> "fTyConP";
"embedP" -> "return";
"embedP" -> "x";
"emptyDecl" -> "_";
"emptyDecl" -> "sourcePosSrcSpan";
"emptyDecl" -> "uError";
"emptyDecl" -> "x";
"emptyLiquidLib" -> "emptyLiftedSpec";
"emptyLiquidLib" -> "mkLiquidLib";
"emptyOutput" -> "emptyOutput";
"emptyOutput" -> "ordSrcSpan";
"envCfg" -> "defConfig";
"envCfg" -> "parsePragma";
"envCfg" -> "return";
"envSort" -> "_";
"envSort" -> "envToSub";
"envSort" -> "i";
"envSort" -> "panicUnbound";
"envSort" -> "splitC";
"envSort" -> "splitW";
"envSort" -> "x";
"envToSub" -> "_";
"envToSub" -> "giQuals";
"envToSub" -> "go";
"envToSub" -> "impossible";
"envToSub" -> "useSpcQuals";
"eq" -> "eq";
"eq" -> "x";
"eqBind" -> "_";
"eqBind" -> "f";
"eqBind" -> "x";
"eqRSort" -> "_";
"eqRSort" -> "and";
"eqRSort" -> "eqRSort";
"eqRSort" -> "i";
"eqRSort" -> "zipWith";
"eqSubst" -> "_";
"eqType\'" -> "_";
"eqType\'" -> "and";
"eqType\'" -> "eqType\'";
"eqType\'" -> "subst";
"eqType\'" -> "v1";
"eqType\'" -> "v2";
"eqType\'" -> "zipWith";
"equationBody" -> "f";
"equationBody" -> "specTypeToLogic";
"erase" -> "_";
"erase" -> "erase";
"erase" -> "x";
"errDataConMismatch" -> "ppTicks";
"errDupSpecs" -> "_";
"errDupSpecs" -> "errSpan";
"errDupSpecs" -> "impossible";
"errHMeas" -> "x";
"errMsgErrors" -> "_";
"errMsgErrors" -> "panic";
"errMsgErrors" -> "refreshArgs";
"errMsgErrors" -> "refreshArgsSub";
"errMsgErrors" -> "refreshHoles";
"errMsgErrors" -> "refreshRefType";
"errMsgErrors" -> "refreshTy";
"errMsgErrors" -> "refreshVV";
"errMsgErrors" -> "return";
"errMsgErrors" -> "single";
"errMsgErrors" -> "trueRefType";
"errSpan" -> "empty";
"errSpan" -> "fmap";
"errSpan" -> "ppError";
"errToFCrash" -> "tx";
"errTypeMismatch" -> "toType";
"errTypeMismatch" -> "x";
"errorExprPp" -> "_";
"errorExprPp" -> "err";
"errorLogger" -> "mkLongErrAt";
"errorToUserError" -> "fmap";
"errorToUserError" -> "ppSpecTypeErr";
"errorWithContext" -> "srcSpanContext";
"errorsResult" -> "_";
"errorsResult" -> "f";
"errorsWithContext" -> "fileErrors";
"errorsWithContext" -> "srcSpanFileMb";
"evalSM" -> "return";
"ex1" -> "_";
"ex1" -> "tt";
"ex1" -> "verify";
"ex10" -> "_";
"ex10" -> "i";
"ex10" -> "verify";
"ex2" -> "_";
"ex2" -> "verify";
"ex2a" -> "_";
"ex2a" -> "verify";
"ex4" -> "_";
"ex4" -> "tt";
"ex4" -> "verify";
"ex5" -> "_";
"ex5" -> "bAnd";
"ex5" -> "verify";
"ex8" -> "_";
"ex8" -> "ff";
"ex8" -> "i";
"ex8" -> "tt";
"ex8" -> "verify";
"ex9" -> "_";
"ex9" -> "bOr";
"ex9" -> "i";
"ex9" -> "verify";
"exactDCFlag" -> "getConfig";
"exactDCFlag" -> "x";
"existingSpan" -> "_";
"existingSpan" -> "go";
"existingSpan" -> "inSpan";
"existingSpan" -> "isSmaller";
"existingSpan" -> "return";
"existingSpan" -> "spanDiff";
"existingSpan" -> "updateK";
"existingSpan" -> "updateLoc";
"existingSpan" -> "x";
"exitWithResult" -> "reportResult";
"exitWithResult" -> "writeResultStdout";
"expToBind" -> "expToBindParg";
"expToBind" -> "get";
"expToBind" -> "liftM";
"expToBind" -> "panic";
"expToBind" -> "return";
"expToBindExpr" -> "_";
"expToBindExpr" -> "freshSymbol";
"expToBindExpr" -> "return";
"expToBindParg" -> "expToBindExpr";
"expToBindParg" -> "liftM";
"expToBindRef" -> "expToBind";
"expToBindRef" -> "return";
"expToBindReft" -> "expToBindRef";
"expToBindReft" -> "expToBindT";
"expToBindReft" -> "rPropP";
"expToBindT" -> "addExists";
"expToBindT" -> "expToBindRef";
"expToBindT" -> "expToBindReft";
"expToBindT" -> "expToBindT";
"expToBindT" -> "liftM";
"expToBindT" -> "return";
"expToBindT" -> "x";
"expand" -> "allCombinations";
"expand" -> "f";
"expand2" -> "allCombinations";
"expand2" -> "f";
"expand3" -> "allCombinations";
"expand3" -> "f";
"expandApp" -> "err";
"expandBareSpec" -> "expand";
"expandBareSpec" -> "f";
"expandBareSpec" -> "x";
"expandBareType" -> "_";
"expandBareType" -> "expandRTAliasApp";
"expandBareType" -> "go";
"expandBareType" -> "lookupRTEnv";
"expandBareType" -> "x";
"expandDefault" -> "maxCaseExpand";
"expandDefaultCase" -> "_";
"expandDefaultCase" -> "expandDefault";
"expandDefaultCase" -> "expandDefaultCase\'";
"expandDefaultCase" -> "expandMessage";
"expandDefaultCase" -> "maxCaseExpand";
"expandDefaultCase" -> "return";
"expandDefaultCase\'" -> "_";
"expandDefaultCase\'" -> "cloneCase";
"expandDefaultCase\'" -> "return";
"expandDefaultCase\'" -> "sortCases";
"expandDefaultCase\'" -> "warnCaseExpand";
"expandEApp" -> "_";
"expandEApp" -> "expandApp";
"expandEApp" -> "expandExpr";
"expandEApp" -> "f";
"expandExpr" -> "_";
"expandExpr" -> "expandEApp";
"expandExpr" -> "expandSym";
"expandExpr" -> "go";
"expandExpr" -> "i";
"expandExpr" -> "x";
"expandFix" -> "f";
"expandFix" -> "go";
"expandFix" -> "x";
"expandLoc" -> "expand";
"expandLoc" -> "expandExpr";
"expandLoc" -> "fmap";
"expandMeasure" -> "expandMeasureDef";
"expandMessage" -> "expand";
"expandMessage" -> "showPpr";
"expandMessage" -> "v1";
"expandMessage" -> "v2";
"expandProductType" -> "fromRTypeRep";
"expandProductType" -> "irrelevantMult";
"expandProductType" -> "isTrivial";
"expandProductType" -> "mkProductTy";
"expandProductType" -> "ofType";
"expandProductType" -> "splitFunTys";
"expandProductType" -> "toRSort";
"expandProductType" -> "toRTypeRep";
"expandProductType" -> "toType";
"expandProductType" -> "x";
"expandProductType" -> "zip4";
"expandRApp" -> "_";
"expandRApp" -> "appRTyCon";
"expandRApp" -> "choosen";
"expandRApp" -> "rTyConPVs";
"expandRApp" -> "rVar";
"expandRApp" -> "rtPropPV";
"expandRApp" -> "rtPropTop";
"expandRTAliasApp" -> "_";
"expandRTAliasApp" -> "err";
"expandRTAliasApp" -> "errRTAliasApp";
"expandRTAliasApp" -> "exprArg";
"expandRTAliasApp" -> "isRExprArg";
"expandRTAliasApp" -> "toRSort";
"expandRTAliasApp" -> "zipWith";
"expandReft" -> "_";
"expandReft" -> "expand";
"expandReft" -> "expandBareSpec";
"expandReft" -> "expandBareType";
"expandReft" -> "expandLoc";
"expandReft" -> "expandReft";
"expandReft" -> "fmap";
"expandReft" -> "x";
"expandSym" -> "expandEApp";
"expandVarDefs" -> "_";
"expandVarDefs" -> "go";
"expandVarDefs" -> "x";
"expandWF" -> "i";
"exportedVarSymbol" -> "showPpr";
"exportedVarSymbol" -> "x";
"exportedVars" -> "isExportedVar";
"exprArg" -> "_";
"exprArg" -> "f";
"exprArg" -> "go";
"exprArg" -> "panic";
"exprArg" -> "x";
"exprArgs" -> "_";
"exprArgs" -> "i";
"exprArgs" -> "is";
"exprArgs" -> "x";
"exprFreeVars" -> "_";
"exprFreeVars" -> "bindings";
"exprFreeVars" -> "extendEnv";
"exprFreeVars" -> "go";
"exprFreeVars" -> "x";
"exprLetVars" -> "_";
"exprLetVars" -> "go";
"exprLetVars" -> "x";
"exprLiterals" -> "_";
"exprLiterals" -> "bytesFS";
"exprLiterals" -> "extendEnv";
"exprLiterals" -> "go";
"exprLiterals" -> "i";
"exprLiterals" -> "x";
"exprLoc" -> "_";
"exprLoc" -> "exprLoc";
"exprLoc" -> "isType";
"exprLoc" -> "tt";
"exprReadVars" -> "_";
"exprReadVars" -> "go";
"exprReadVars" -> "x";
"exprRefType" -> "exprRefType_";
"exprRefType_" -> "_";
"exprRefType_" -> "bindRefType_";
"exprRefType_" -> "exprRefType_";
"exprRefType_" -> "makeRTVar";
"exprRefType_" -> "ofType";
"exprRefType_" -> "rFun";
"exprRefType_" -> "rTyVar";
"exprRefType_" -> "x";
"exprSpans" -> "_";
"exprSpans" -> "altSpans";
"exprSpans" -> "bindSpans";
"exprSpans" -> "exprSpans";
"exprSpans" -> "isJunkSpan";
"exprSpans" -> "tickSrcSpan";
"exprSpans" -> "x";
"exprmemToExpr" -> "_";
"exprmemToExpr" -> "fromAnf";
"exprmemToExpr" -> "i";
"extQ" -> "f";
"extend" -> "mapArgumens";
"extend" -> "noDummySyms";
"extend" -> "resultTy";
"extend" -> "strengthenResult";
"extend" -> "stripRTypeBase";
"extend" -> "subst";
"extendAnfEnv" -> "x";
"extendEnvWithVV" -> "memberREnv";
"extendEnvWithVV" -> "rTypeValueVar";
"extendEnvWithVV" -> "return";
"extender" -> "_";
"extender" -> "lookupREnv";
"extender" -> "return";
"extender" -> "x";
"extractModuleAnnotations" -> "_";
"extractModuleAnnotations" -> "partitionMaybe";
"extractSpecComment" -> "_";
"extractSpecComment" -> "file";
"extractSpecComment" -> "line";
"extractSpecComment" -> "srcSpanSourcePos";
"extractSpecComments" -> "extractModuleAnnotations";
"extractSpecComments" -> "extractSpecComment";
"extractSpecQuote" -> "refreshSymbols";
"extractSpecQuotes" -> "extractSpecQuotes\'";
"extractSpecQuotes\'" -> "_";
"extractSpecQuotes\'" -> "extractSpecQuote";
"fSrcSpan" -> "fSrcSpanSrcSpan";
"fSrcSpanSrcSpan" -> "sourcePos2SrcSpan";
"fTyConP" -> "return";
"failMaybe" -> "isTargetModName";
"failVarP" -> "locBinderP";
"failingBinds" -> "checkBind";
"failingBinds" -> "findStructBinds";
"failingBinds" -> "hasErrors";
"failingBinds" -> "structuralTerm";
"fallbackSpecP" -> "_";
"fallbackSpecP" -> "liftM";
"fallbackSpecP" -> "tyBindsRemP";
"famInstTyConType" -> "famInstArgs";
"fastStringText" -> "bytesFS";
"feasibles" -> "_";
"feasibles" -> "feasible";
"feasibles" -> "feasibles";
"feasibles" -> "i";
"fieldName" -> "x";
"file" -> "sourceName";
"fileErrors" -> "errorWithContext";
"fileErrors" -> "getFileBody";
"fileErrors" -> "return";
"fill" -> "_";
"fill" -> "fill";
"fill" -> "genArgs";
"fill" -> "get";
"fill" -> "i";
"fill" -> "isFunction";
"fill" -> "liftCG";
"fill" -> "prune";
"fill" -> "return";
"fill" -> "subgoals";
"fill" -> "trueTy";
"fill" -> "withSubgoal";
"fill" -> "x";
"fillOne" -> "_";
"fillOne" -> "applyTerms";
"fillOne" -> "return";
"fillOne" -> "subgoals";
"filterA" -> "_";
"filterA" -> "ff";
"filterBinds" -> "_";
"filterBinds" -> "f";
"filterBinds" -> "x";
"filterElseM" -> "f";
"filterElseM" -> "return";
"filterExprArgs" -> "_";
"filterExprArgs" -> "check";
"filterREnv" -> "_";
"filterREnv" -> "f";
"filterREnv" -> "showTy";
"filterREnv" -> "toType";
"filterREnv" -> "updREnvLocal";
"findAndParseSpecFiles" -> "getPatSpec";
"findAndParseSpecFiles" -> "getRealSpec";
"findAndParseSpecFiles" -> "isHomeModule";
"findAndParseSpecFiles" -> "modSummaryImports";
"findAndParseSpecFiles" -> "moduleFiles";
"findAndParseSpecFiles" -> "totalityCheck";
"findAndParseSpecFiles" -> "transParseSpecs";
"findCandidates" -> "get";
"findCandidates" -> "goalType";
"findCandidates" -> "return";
"findCompanionSpec" -> "lookupCompanionSpec";
"findCompanionSpec" -> "pure";
"findFeasibles" -> "f";
"findFeasibles" -> "i";
"findFeasibles" -> "isFeasible";
"findM" -> "_";
"findM" -> "findM";
"findM" -> "return";
"findM" -> "x";
"findModule" -> "_";
"findModule" -> "err";
"findModule" -> "fsToUnitId";
"findModule" -> "lookupLoadedHomeModule";
"findModule" -> "modNotLoadedError";
"findModule" -> "moduleUnitId";
"findModule" -> "return";
"findModule" -> "thisPackage";
"findPVar" -> "_";
"findPVar" -> "panic";
"findPVar" -> "zipWith";
"findRelevantSpecs" -> "lookupInterfaceAnnotations";
"findRelevantSpecs" -> "pure";
"findStructBinds" -> "_";
"findStructBinds" -> "f";
"findVarDef" -> "_";
"findVarDef" -> "coreBindSymbols";
"findVarDef" -> "x";
"findVarDefType" -> "findVarDef";
"findVarDefType" -> "mkError";
"findVarDefType" -> "x";
"first3M" -> "f";
"firstElems" -> "is";
"firstElems" -> "splitters";
"firstGroup" -> "sortOn";
"firstJust" -> "f";
"firstM" -> "f";
"fixApplication" -> "fixCommas";
"fixApplication" -> "fixParen";
"fixApplication" -> "handleCommas";
"fixApplication" -> "replaceNewLine";
"fixApplication" -> "rmModName";
"fixApplication" -> "rmTypeAppl";
"fixCands" -> "i";
"fixCands" -> "replace";
"fixCands" -> "toExpr";
"fixCase" -> "x";
"fixCommas" -> "fixCommas";
"fixCommas" -> "x";
"fixConfig" -> "canonConfig";
"fixConfig" -> "canonicalizePaths";
"fixConfig" -> "higherOrderFlag";
"fixConfig" -> "pwd";
"fixConfig" -> "return";
"fixEMem" -> "_";
"fixEMem" -> "get";
"fixEMem" -> "instantiateTy";
"fixEMem" -> "return";
"fixEMem" -> "toType";
"fixEMem" -> "unifyWith";
"fixParen" -> "fixParen";
"fixParen" -> "init";
"fixParen" -> "x";
"fixReftTyVars" -> "coSubRReft";
"fixTy" -> "addTyConInfo";
"fixTy" -> "get";
"fixTy" -> "return";
"flatten" -> "allCombinations";
"flatten" -> "i";
"fmap" -> "f";
"fmap" -> "pure";
"fmap" -> "x";
"foldRType" -> "_";
"foldRType" -> "f";
"foldRType" -> "go";
"foldRType" -> "step";
"foldReft" -> "_";
"foldReft" -> "f";
"foldReft" -> "foldReft\'";
"foldReft\'" -> "_";
"foldReft\'" -> "efoldReft";
"foldReft\'" -> "f";
"forallExprRefType" -> "forallExprReft";
"forallExprRefType" -> "rTypeSortedReft";
"forallExprRefType" -> "strengthen";
"forallExprRefType" -> "uTop";
"forallExprReft" -> "forallExprReft_";
"forallExprReftLookup" -> "bkArrow";
"forallExprReftLookup" -> "bkUniv";
"forallExprReftLookup" -> "ignoreOblig";
"forallExprReftLookup" -> "mapFourth4";
"forallExprReftLookup" -> "panicUnbound";
"forallExprReftLookup" -> "x";
"forallExprReft_" -> "_";
"forallExprReft_" -> "f";
"forallExprReft_" -> "forallExprReftLookup";
"forallExprReft_" -> "rTypeSortedReft";
"forallExprReft_" -> "x";
"formButton" -> "_";
"formButton" -> "bform";
"formButton" -> "formButton";
"formButton" -> "i";
"fourth4" -> "x";
"freeArgsPs" -> "_";
"freeArgsPs" -> "freeArgsPs";
"freeArgsPs" -> "freeArgsPsRef";
"freeArgsPsRef" -> "_";
"freeArgsPsRef" -> "f";
"freeArgsPsRef" -> "uPVar";
"freeArgsPsRef" -> "x";
"freeSymbols" -> "freeSyms";
"freeSymbols" -> "x";
"freeSyms" -> "_";
"freeSyms" -> "efoldReft";
"freeSyms" -> "f";
"freeSyms" -> "x";
"freeTyVars" -> "_";
"freeTyVars" -> "freeTyVars";
"freeTyVars" -> "makeRTVar";
"freeTyVars" -> "tx";
"freshInt" -> "get";
"freshInt" -> "put";
"freshInt" -> "return";
"freshK" -> "freshK\'\'";
"freshK" -> "get";
"freshK" -> "return";
"freshK" -> "setChange";
"freshK\'" -> "addCache";
"freshK\'" -> "addK";
"freshK\'" -> "get";
"freshK\'" -> "i";
"freshK\'" -> "return";
"freshK\'\'" -> "existingSpan";
"freshK\'\'" -> "freshK\'";
"freshK\'\'" -> "get";
"freshK\'\'" -> "return";
"freshName" -> "i";
"freshNormalVar" -> "anfOcc";
"freshNormalVar" -> "i";
"freshNormalVar" -> "mkUserLocal";
"freshNormalVar" -> "return";
"freshPredRef" -> "_";
"freshPredRef" -> "addW";
"freshPredRef" -> "freshTy_type";
"freshPredRef" -> "ofRSort";
"freshPredRef" -> "return";
"freshPredRef" -> "toType";
"freshPredRef" -> "todo";
"freshPredRef" -> "x";
"freshSym" -> "_";
"freshSymbol" -> "get";
"freshSymbol" -> "return";
"freshTy_expr" -> "_";
"freshTy_expr" -> "exprRefType";
"freshTy_expr" -> "freshTy_reftype";
"freshTy_reftype" -> "addKVars";
"freshTy_reftype" -> "fixTy";
"freshTy_type" -> "freshTy_reftype";
"freshTy_type" -> "ofType";
"freshUnique" -> "freshInt";
"freshUnique" -> "liftM";
"freshVar" -> "freshVarType";
"freshVar" -> "toType";
"freshVarType" -> "i";
"freshVarType" -> "incrSM";
"freshVarType" -> "mkVar";
"fromAliasSymbol" -> "err";
"fromAliasSymbol" -> "panic";
"fromAliasSymbol" -> "x";
"fromAnf" -> "fromAnf\'";
"fromAnf\'" -> "_";
"fromAnf\'" -> "fromAnf\'";
"fromAnf\'" -> "var";
"fromFirstMaybes" -> "firstMaybes";
"fromFirstMaybes" -> "v1";
"fromFirstMaybes" -> "v2";
"fromFirstMaybes" -> "x";
"fromList" -> "empty";
"fromList" -> "fromList";
"fromList" -> "put";
"fromList" -> "x";
"fromRISig" -> "v1";
"fromRISig" -> "v2";
"fromRTypeRep" -> "mkArrow";
"fromRTypeRep" -> "safeZip3WithError";
"fstByRank" -> "sortOn";
"funArgsP" -> "predVarIdP";
"funArgsP" -> "return";
"funBinds" -> "_";
"funBinds" -> "funBinds";
"funExpr" -> "_";
"funExpr" -> "argExpr";
"funExpr" -> "funExpr";
"functionCands" -> "findCandidates";
"functionCands" -> "isFunction";
"functionCands" -> "return";
"functionComposisionSymbol" -> "dataConPSpecType";
"functionComposisionSymbol" -> "dataConTy";
"functionComposisionSymbol" -> "dataConWorkRep";
"functionComposisionSymbol" -> "makeTyConInfo";
"functionComposisionSymbol" -> "pApp";
"functionComposisionSymbol" -> "pVartoRConc";
"functionComposisionSymbol" -> "pappArity";
"functionComposisionSymbol" -> "pappSort";
"functionComposisionSymbol" -> "parens";
"functionComposisionSymbol" -> "predType";
"functionComposisionSymbol" -> "pvarRType";
"functionComposisionSymbol" -> "replacePreds";
"functionComposisionSymbol" -> "replacePredsWithRefs";
"functionComposisionSymbol" -> "showPpr";
"functionComposisionSymbol" -> "substParg";
"gApp" -> "pdVarReft";
"gApp" -> "rApp";
"gApp" -> "rPropP";
"gApp" -> "rVar";
"gSpanToDeps" -> "i";
"gSpanToDeps" -> "kVarSpan";
"gcatch" -> "mkStableModule";
"gcatch" -> "renderModule";
"gcatch" -> "toStableModule";
"genArgs" -> "_";
"genArgs" -> "fixEMem";
"genArgs" -> "functionCands";
"genArgs" -> "get";
"genArgs" -> "return";
"genArgs" -> "toType";
"genArgs" -> "withDepthFillArgs";
"genBareTypeP" -> "bareTypeP";
"genExpandOrder" -> "_";
"genExpandOrder" -> "fromAliasSymbol";
"genTerms" -> "genTerms\'";
"genTerms\'" -> "_";
"genTerms\'" -> "checkError";
"genTerms\'" -> "err";
"genTerms\'" -> "filterElseM";
"genTerms\'" -> "fixEMem";
"genTerms\'" -> "functionCands";
"genTerms\'" -> "get";
"genTerms\'" -> "hasType";
"genTerms\'" -> "i";
"genTerms\'" -> "return";
"genTerms\'" -> "structuralCheck";
"genTerms\'" -> "toType";
"genTerms\'" -> "withDepthFill";
"genTerms\'" -> "withTypeEs";
"generalize" -> "freeTyVars";
"generalize" -> "mkUnivs";
"generalizeVar" -> "_";
"generalizeVar" -> "freeTyVars";
"generalizeVar" -> "mkUnivs";
"generalizeWith" -> "_";
"generalizeWith" -> "generalizeVar";
"generateConstraints" -> "consAct";
"generateConstraints" -> "getConfig";
"generateConstraints" -> "initCGI";
"generateConstraints" -> "initEnv";
"generateConstraintsWithEnv" -> "consAct";
"generateConstraintsWithEnv" -> "getConfig";
"generateHtml" -> "copyFileCreateParentDirIfMissing";
"generateHtml" -> "getCssPath";
"generateHtml" -> "renderHtml";
"generateHtml" -> "takeFileName";
"generateHtml" -> "tokAnnot";
"geq" -> "from\'";
"geq" -> "geq";
"geq" -> "x";
"geqBind" -> "_";
"geqBind" -> "f";
"geqBind" -> "x";
"get" -> "_";
"get" -> "get";
"getAllData" -> "_";
"getAllData" -> "concretize";
"getAllData" -> "flatten";
"getAllData" -> "getData";
"getAllData" -> "i";
"getAllData" -> "mapThd3";
"getAllData" -> "substGrad";
"getAllData" -> "x";
"getAnnMap" -> "cinfoError";
"getAnnMap" -> "errorToUserError";
"getAnnMap" -> "fmap";
"getAnnMap" -> "panicError";
"getAnnMap" -> "tidySpecType";
"getAsmSigs" -> "fmap";
"getAsmSigs" -> "x";
"getBinds" -> "get";
"getBinds" -> "return";
"getBody" -> "_";
"getCallInfoBind" -> "_";
"getCallInfoBind" -> "addCheckedFun";
"getCallInfoBind" -> "addError";
"getCallInfoBind" -> "clearCurrentFun";
"getCallInfoBind" -> "f";
"getCallInfoBind" -> "getCallInfoExpr";
"getCallInfoBind" -> "pure";
"getCallInfoBind" -> "setCurrentFun";
"getCallInfoExpr" -> "_";
"getCallInfoExpr" -> "addArg";
"getCallInfoExpr" -> "addError";
"getCallInfoExpr" -> "addParam";
"getCallInfoExpr" -> "addSubterms";
"getCallInfoExpr" -> "addSynonym";
"getCallInfoExpr" -> "clearCurrentArgs";
"getCallInfoExpr" -> "clearCurrentFun";
"getCallInfoExpr" -> "getCallInfoBind";
"getCallInfoExpr" -> "getCallInfoExpr";
"getCallInfoExpr" -> "lookupFun";
"getCallInfoExpr" -> "mkFunInfo";
"getCallInfoExpr" -> "mkSrcCall";
"getCallInfoExpr" -> "pure";
"getCallInfoExpr" -> "toVar";
"getCallInfoExpr" -> "var";
"getCallInfoExpr" -> "x";
"getCallInfoExpr" -> "zipExact";
"getClasses" -> "getClasses";
"getClasses" -> "isTuple";
"getCompareData" -> "f";
"getCompareData" -> "fmap";
"getCompareData" -> "getData";
"getCompareData" -> "return";
"getCompareTimeData" -> "getCompareData";
"getCompareTimeData" -> "timeDataMapper";
"getConfig" -> "cfgRef";
"getConfig" -> "config";
"getConfig" -> "return";
"getCoreToLogicPath" -> "fmap";
"getCoreToLogicPath" -> "getIncludeDir";
"getCoreToLogicPath" -> "return";
"getData" -> "_";
"getData" -> "f";
"getData" -> "fmap";
"getData" -> "gulpLogs";
"getData" -> "return";
"getData" -> "toBenchMap";
"getData" -> "unionAppend";
"getDataConVarUnique" -> "isDataConId";
"getDependenciesModuleNames" -> "f";
"getDnTyCon" -> "impossible";
"getEpochTime" -> "return";
"getExprDict" -> "_";
"getExprDict" -> "dlookup";
"getExprDict" -> "go";
"getExprDict" -> "x";
"getExprFun" -> "_";
"getExprFun" -> "getLocation";
"getExprFun" -> "go";
"getExprFun" -> "panic";
"getExprFun" -> "x";
"getFamInstances" -> "_";
"getFamInstances" -> "configToRedundantDependencies";
"getFamInstances" -> "findCompanionSpec";
"getFamInstances" -> "findRelevantSpecs";
"getFamInstances" -> "lookupModSummary";
"getFamInstances" -> "return";
"getFileBody" -> "f";
"getFileBody" -> "return";
"getFileLines" -> "i";
"getFileLines" -> "slice";
"getGlobalSyms" -> "_";
"getInterfaceDynFlags" -> "runLiquidGhc";
"getLiquidSpec" -> "_";
"getLiquidSpec" -> "bareSpecIso";
"getLiquidSpec" -> "debugLog";
"getLiquidSpec" -> "hsSpecificationP";
"getLiquidSpec" -> "pure";
"getLiquidSpec" -> "renderModule";
"getLocation" -> "addKuts";
"getLocation" -> "freshTy_expr";
"getLocation" -> "freshTy_type";
"getLocation" -> "get";
"getLocation" -> "put";
"getLocation" -> "refreshArgsTop";
"getLocation" -> "return";
"getLocation" -> "trueTy";
"getMethodType" -> "_";
"getMethodType" -> "showPpr";
"getMethodType" -> "x";
"getModName" -> "_";
"getModString" -> "getModName";
"getModSummary" -> "isBootInterface";
"getModSummary" -> "isBootSummary";
"getModSummary" -> "liftM";
"getModSummary" -> "return";
"getModuleGraph" -> "liftM";
"getNth" -> "_";
"getNth" -> "getNth";
"getNth" -> "x";
"getOpts" -> "cmdArgsRun\'";
"getOpts" -> "config";
"getOpts" -> "envCfg";
"getOpts" -> "fixConfig";
"getOpts" -> "mkOpts";
"getOpts" -> "withSmtSolver";
"getPatSpec" -> "moduleFiles";
"getPatSpec" -> "return";
"getPsSig" -> "_";
"getPsSig" -> "addps";
"getPsSig" -> "getPsSig";
"getPsSig" -> "getPsSigPs";
"getPsSig" -> "panic";
"getPsSigPs" -> "_";
"getPsSigPs" -> "addps";
"getPsSigPs" -> "getPsSig";
"getRealSpec" -> "moduleFiles";
"getReflectDefs" -> "findVarDefType";
"getReflects" -> "fmap";
"getRewriteErrors" -> "_";
"getRewriteErrors" -> "canRewrite";
"getRewriteErrors" -> "hasInnerRefinement";
"getRewriteErrors" -> "refinementEQs";
"getRewriteErrors" -> "toRTypeRep";
"getSDecrTerms" -> "get";
"getSEMem" -> "get";
"getSEnv" -> "get";
"getSFix" -> "get";
"getSUniVars" -> "get";
"getShift" -> "fmap";
"getSourcePos" -> "srcSpanSourcePos";
"getSourcePosE" -> "srcSpanSourcePosE";
"getState" -> "get";
"getSuccessData" -> "getData";
"getSuccessData" -> "x";
"getTag" -> "defaultTag";
"getTag" -> "x";
"getTargetInfos" -> "_";
"getTargetInfos" -> "checkFilePresent";
"getTargetInfos" -> "createTempDirectoryIfMissing";
"getTargetInfos" -> "getTargetInfos\'";
"getTargetInfos" -> "makeLogicMap";
"getTargetInfos" -> "runLiquidGhc";
"getTargetInfos\'" -> "_";
"getTargetInfos\'" -> "buildDepGraph";
"getTargetInfos\'" -> "compileCFiles";
"getTargetInfos\'" -> "configureGhcTargets";
"getTargetInfos\'" -> "processModules";
"getTargetInfos\'" -> "return";
"getTemplates" -> "get";
"getTemplates" -> "pprCGInfo";
"getTemplates" -> "return";
"getTimeData" -> "getData";
"getTimeData" -> "timeDataMapper";
"getTopLvlBndrs" -> "_";
"getType" -> "action";
"getType" -> "getAnnMap";
"getType" -> "getTypeInfo";
"getType" -> "line";
"getType" -> "return";
"getTypeInfo" -> "_";
"getUniVars" -> "_";
"getUniVars" -> "getBody";
"getUniVars" -> "getUniVars0";
"getUniVars" -> "isInCB";
"getUniVars0" -> "_";
"getUniVars0" -> "getUniVars0";
"ghcSpecEnv" -> "_";
"ghcSpecEnv" -> "rTypeSortedReft";
"ghcSpecEnv" -> "wiredSortedSyms";
"ghcSpecEnv" -> "x";
"giQuals" -> "alsQualifiers";
"giQuals" -> "condNull";
"giQuals" -> "sigQualifiers";
"giQuals" -> "useAlsQuals";
"giQuals" -> "useSigQuals";
"giQuals" -> "useSpcQuals";
"gitInfo" -> "_";
"gitInfo" -> "gitMsg";
"globalDiff" -> "isDiff";
"globalREnv" -> "_";
"globalize" -> "addCGEnv";
"globalize" -> "addRTyConInv";
"globalize" -> "globalREnv";
"globalize" -> "x";
"gmap" -> "f";
"gmap" -> "x";
"gmapN" -> "f";
"gmapN" -> "x";
"go" -> "x";
"goN" -> "x";
"goPlug" -> "_";
"goPlug" -> "addHole";
"goPlug" -> "addRefs";
"goPlug" -> "err";
"goPlug" -> "f";
"goPlug" -> "go";
"goPlug" -> "hole";
"goPlug" -> "i";
"goPlug" -> "uReft";
"goPlug" -> "x";
"goalType" -> "goalType";
"goodInvs" -> "_";
"goodInvs" -> "and";
"goodInvs" -> "toRSort";
"goodInvs" -> "unifiable";
"goodInvs" -> "zipWith";
"grabArgs" -> "_";
"grabArgs" -> "grabArgs";
"grabArgs" -> "isNonValueTy";
"grabArgs" -> "mapType";
"grabArgs" -> "stringClassArg";
"grabBody" -> "_";
"grabBody" -> "grabBody";
"grabBody" -> "i";
"grabBody" -> "splitFun";
"grabBody" -> "stringVar";
"grabBody" -> "tx";
"grabBody" -> "x";
"graphExpand" -> "buildAliasGraph";
"graphExpand" -> "buildAliasTable";
"graphExpand" -> "checkCyclicAliases";
"graphExpand" -> "genExpandOrder";
"graphExpand" -> "x";
"grepDictionary" -> "_";
"grepDictionary" -> "go";
"groupBy" -> "eq";
"groupBy" -> "groupBy";
"groupBy" -> "x";
"groupDataCons" -> "_";
"groupDataCons" -> "isResolvedDataConP";
"groupVariances" -> "x";
"grty" -> "assmGrty";
"grtyTop" -> "isExportedVar";
"grtyTop" -> "trueTy";
"gt" -> "x";
"gulpLogs" -> "f";
"gulpLogs" -> "fmap";
"gulpLogs" -> "parseLog";
"gulpLogs" -> "return";
"handle" -> "return";
"handleCommas" -> "handleCommas";
"handleCommas" -> "init";
"handler" -> "runLiquid\'";
"hasBaseTypeVar" -> "isBaseType";
"hasBoolResult" -> "_";
"hasBoolResult" -> "hasBoolResult";
"hasBoolResult" -> "makePluggedDataCon";
"hasBoolResult" -> "makePluggedSig";
"hasClassArg" -> "x";
"hasDataDecl" -> "fmap";
"hasDataDecl" -> "hasDecl";
"hasDataDecl" -> "qualifiedDataName";
"hasDataDecl" -> "tyConDataName";
"hasDecl" -> "_";
"hasDecl" -> "dataNameSymbol";
"hasDecl" -> "i";
"hasDecl" -> "sourcePosSrcSpan";
"hasDecl" -> "srcSpan";
"hasDecl" -> "srcSpanFSrcSpan";
"hasDecl" -> "x";
"hasFreshBinSpec" -> "_";
"hasFreshBinSpec" -> "return";
"hasHole" -> "_";
"hasHole" -> "isHole";
"hasHole" -> "showPpr";
"hasHoleTy" -> "_";
"hasHoleTy" -> "hasHoleTy";
"hasInnerRefinement" -> "_";
"hasInnerRefinement" -> "isRefined";
"hasOpt" -> "f";
"hasOpt" -> "getConfig";
"hasTrivial" -> "trivial";
"hasTrivial" -> "x";
"hasTuple" -> "_";
"hasTuple" -> "go";
"hasTuple" -> "isVarTup";
"hasType" -> "check";
"hasType" -> "freshVar";
"hasType" -> "get";
"hasType" -> "notrace";
"hasType" -> "quietly";
"hasType" -> "showTy";
"hasType" -> "toType";
"hasType" -> "tx";
"hasType" -> "x";
"hashMapMapKeys" -> "f";
"hashMapMapKeys" -> "fmap";
"hashMapMapWithKey" -> "f";
"hboundP" -> "locBinderP";
"higherOrderFlag" -> "getConfig";
"higherOrderFlag" -> "x";
"hint" -> "_";
"hint" -> "empty";
"hint" -> "go";
"hmeasureP" -> "genBareTypeP";
"hmeasureP" -> "locBinderP";
"hmeasureP" -> "measureDefP";
"hmeasureP" -> "rawBodyP";
"hmeasureP" -> "return";
"hmeasureP" -> "tyBodyP";
"holeP" -> "hole";
"holeP" -> "return";
"holeP" -> "uTop";
"holePC" -> "dummyBindP";
"holePC" -> "holeP";
"holePC" -> "return";
"holeRefP" -> "return";
"holeRefP" -> "uTop";
"hsSpecificationP" -> "_";
"hsSpecificationP" -> "err";
"hsSpecificationP" -> "go";
"hsSpecificationP" -> "initPStateWithList";
"hsSpecificationP" -> "mkSpec";
"hsSpecificationP" -> "parseErrorBundleToErrors";
"hsSpecificationP" -> "parseWithError";
"hsSpecificationP" -> "specP";
"hsannot" -> "_";
"hsannot" -> "classify";
"hsannot" -> "hsannot\'";
"hsannot" -> "inlines";
"hsannot" -> "joinL";
"hsannot" -> "litSpans";
"hsannot" -> "tx";
"hsannot\'" -> "annotTokenise";
"hsannot\'" -> "insertAnnotAnchors";
"hsannot\'" -> "renderAnnotToken";
"hsannot\'" -> "tx";
"hscolour" -> "hsannot";
"hscolour" -> "splitSrcAndAnns";
"htmlHeader" -> "bottonsCss";
"htmlHeader" -> "cssHTML";
"htmlHeader" -> "initSrc";
"i" -> "defaultTag";
"i" -> "getTag";
"i" -> "makeTagEnv";
"i" -> "memTagEnv";
"iMeasureP" -> "measureP";
"idDataConM" -> "_";
"idDataConM" -> "x";
"idTyCon" -> "fmap";
"idTyCon" -> "idDataConM";
"ifM" -> "x";
"ignoreCoreBinds" -> "_";
"ignoreCoreBinds" -> "go";
"ignoreCoreBinds" -> "x";
"ignoreInline" -> "_";
"ignoreInline" -> "go";
"ignoreInline" -> "x";
"ignoreLetBinds" -> "_";
"ignoreLetBinds" -> "ignoreLetBinds";
"ignoreOblig" -> "_";
"ignoreVar" -> "i";
"ignoreVar" -> "simpleSymbolVar";
"importDeclModule" -> "_";
"importDeclModule" -> "return";
"impossible" -> "_";
"impossible" -> "ap";
"impossible" -> "eqBind";
"impossible" -> "fmap";
"impossible" -> "geqBind";
"impossible" -> "gmap";
"impossible" -> "gmapN";
"impossible" -> "go";
"impossible" -> "goN";
"impossible" -> "leqBind";
"impossible" -> "liftA2";
"impossible" -> "liftM";
"impossible" -> "liftM2";
"impossible" -> "panic";
"impossible" -> "pay";
"impossible" -> "pure";
"impossible" -> "return";
"impossible" -> "step";
"impossible" -> "wait";
"impossible" -> "waitN";
"impossible" -> "wmap";
"impossible" -> "wmapN";
"impossible" -> "zipWithM";
"incrCase" -> "get";
"incrCase" -> "put";
"incrCase" -> "return";
"incrCaseDepth" -> "_";
"incrSM" -> "get";
"incrSM" -> "put";
"incrSM" -> "return";
"indent" -> "i";
"infixBinderIdP" -> "infixBinderIdR";
"infixBinderIdR" -> "isHaskellOpChar";
"infixCondIdR" -> "isHaskellOpChar";
"infixGenP" -> "infixIdP";
"infixGenP" -> "maybeDigit";
"infixIdP" -> "infixIdR";
"infixIdR" -> "isHaskellOpChar";
"infixP" -> "infixGenP";
"infixl" -> "_";
"infixl" -> "f";
"infixl" -> "x";
"infixlP" -> "infixGenP";
"infixr" -> "impossible";
"infixr" -> "toProof";
"infixr" -> "trivial";
"infixr" -> "unreachable";
"infixr" -> "withProof";
"infixrP" -> "infixGenP";
"infoLits" -> "coreBindLits";
"infoLits" -> "rTypeSortedReft";
"initCGI" -> "_";
"initCGI" -> "bindSpans";
"initCGI" -> "dictionaryVar";
"initCGI" -> "emptyKVProf";
"initCGI" -> "higherOrderFlag";
"initCGI" -> "infoLits";
"initCGI" -> "terminationCheck";
"initCurrentstatus" -> "script";
"initDependents" -> "go";
"initDependents" -> "i";
"initDependents" -> "is";
"initDependents" -> "script";
"initDepzise" -> "i";
"initDepzise" -> "script";
"initEnv" -> "addPolyInfo";
"initEnv" -> "addRInv";
"initEnv" -> "assm";
"initEnv" -> "exactDCFlag";
"initEnv" -> "f";
"initEnv" -> "get";
"initEnv" -> "getConfig";
"initEnv" -> "getMethodType";
"initEnv" -> "globalize";
"initEnv" -> "grty";
"initEnv" -> "grtyTop";
"initEnv" -> "is";
"initEnv" -> "isDataConId";
"initEnv" -> "liftM";
"initEnv" -> "makeAutoDecrDataCons";
"initEnv" -> "makeDataConTypes";
"initEnv" -> "mapSndM";
"initEnv" -> "measEnv";
"initEnv" -> "mergeDataConTypes";
"initEnv" -> "mkRTyConIAl";
"initEnv" -> "mkRTyConInv";
"initEnv" -> "predsUnify";
"initEnv" -> "rTypeSort";
"initEnv" -> "recSelectorsTy";
"initEnv" -> "refreshArgs\'";
"initEnv" -> "refreshHoles";
"initEnv" -> "return";
"initEnv" -> "strengthenDataConType";
"initEnv" -> "trueTy";
"initEnv" -> "tx";
"initEnv" -> "x";
"initExprMem" -> "_";
"initExprMem" -> "toType";
"initFEnv" -> "_";
"initFEnv" -> "apiAnnComments";
"initFEnv" -> "bytesFS";
"initFEnv" -> "dataConExTyVars";
"initFEnv" -> "dataConFullSig";
"initFEnv" -> "dataConInstArgTys";
"initFEnv" -> "dataConOrigArgTys";
"initFEnv" -> "dataConRepArgTys";
"initFEnv" -> "dataConSig";
"initFEnv" -> "dataConWrapperType";
"initFEnv" -> "deepSplitProductType_maybe";
"initFEnv" -> "fsToUnitId";
"initFEnv" -> "gcatch";
"initFEnv" -> "getDependenciesModuleNames";
"initFEnv" -> "irrelevantMult";
"initFEnv" -> "isBootSummary";
"initFEnv" -> "isEqPred";
"initFEnv" -> "isEqPrimPred";
"initFEnv" -> "isEvVarType";
"initFEnv" -> "mkFunTy";
"initFEnv" -> "mkIntExprInt";
"initFEnv" -> "mkLocalVar";
"initFEnv" -> "mkScaled";
"initFEnv" -> "mkUserLocal";
"initFEnv" -> "mkUserStyle";
"initFEnv" -> "moduleUnitId";
"initFEnv" -> "pattern";
"initFEnv" -> "renderWithStyle";
"initFEnv" -> "scaledThing";
"initFEnv" -> "splitFunTys";
"initFEnv" -> "thisPackage";
"initFEnv" -> "tyConRealArity";
"initFEnv" -> "wiredSortedSyms";
"initFEnv" -> "x";
"initPStateWithList" -> "functionComposisionSymbol";
"initSSEnv" -> "_";
"initSSEnv" -> "lt";
"initSSEnv" -> "typeToCons";
"initSrc" -> "initCurrentstatus";
"initSrc" -> "initDependents";
"initSrc" -> "initDepzise";
"initSrc" -> "initValues";
"initSrc" -> "kVarId";
"initState" -> "initExprMem";
"initState" -> "return";
"initValues" -> "go";
"initValues" -> "script";
"initValues" -> "zipWith";
"initial" -> "status";
"inlineFailCases" -> "_";
"inlineFailCases" -> "go";
"inlineFailCases" -> "impossible";
"inlineFailCases" -> "x";
"inlineLoopBreaker" -> "_";
"inlineLoopBreaker" -> "x";
"inlineP" -> "locBinderP";
"inlineSpecType" -> "f";
"inlineSpecType" -> "fromRTypeRep";
"inlineSpecType" -> "isBool";
"inlineSpecType" -> "isClassType";
"inlineSpecType" -> "mkR";
"inlineSpecType" -> "ofType";
"inlineSpecType" -> "strengthen";
"inlineSpecType" -> "toRTypeRep";
"innerScTr" -> "mapBnd";
"innerScTr" -> "scTrans";
"ins" -> "x";
"insEMem0" -> "_";
"insEMem0" -> "get";
"insEMem0" -> "getSFix";
"insEMem0" -> "i";
"insEMem0" -> "initExprMem";
"insEMem0" -> "instantiate";
"insEMem0" -> "instantiateTL";
"insEMem0" -> "instantiateTy";
"insEMem0" -> "return";
"insertAnnotAnchors" -> "stitch";
"insertFEnv" -> "i";
"insertFEnv" -> "x";
"insertREnv" -> "updREnvLocal";
"insertREnv" -> "x";
"insertsFEnv" -> "insertFEnv";
"insertsSEnv" -> "insertSEnv";
"insertsSEnv" -> "x";
"instanceLawP" -> "bareAtomBindP";
"instanceLawP" -> "bareTypeP";
"instanceLawP" -> "classBTyConP";
"instanceLawP" -> "fmap";
"instanceLawP" -> "getSourcePos";
"instanceLawP" -> "locBinderP";
"instanceLawP" -> "parens";
"instanceLawP" -> "pure";
"instanceLawP" -> "return";
"instanceLawP" -> "x";
"instanceLawP" -> "xyP";
"instanceP" -> "_";
"instanceP" -> "bTyVar";
"instanceP" -> "bareAtomBindP";
"instanceP" -> "bareTypeP";
"instanceP" -> "classBTyConP";
"instanceP" -> "fmap";
"instanceP" -> "mkVar";
"instanceP" -> "oneClassArg";
"instanceP" -> "parens";
"instanceP" -> "pure";
"instanceP" -> "return";
"instanceP" -> "riMethodSigP";
"instanceP" -> "tyVarIdP";
"instanceP" -> "x";
"instanceTyCon" -> "_";
"instanceTyCon" -> "go";
"instantiate" -> "apply";
"instantiate" -> "tyVars";
"instantiateGhosts" -> "addEEnv";
"instantiateGhosts" -> "bkImplicit";
"instantiateGhosts" -> "return";
"instantiatePreds" -> "_";
"instantiatePreds" -> "freshPredRef";
"instantiatePreds" -> "instantiatePreds";
"instantiatePreds" -> "replacePreds";
"instantiatePreds" -> "return";
"instantiatePvs" -> "_";
"instantiatePvs" -> "go";
"instantiatePvs" -> "replacePreds";
"instantiateTL" -> "apply";
"instantiateTL" -> "getSFix";
"instantiateTL" -> "getSUniVars";
"instantiateTL" -> "return";
"instantiateTy" -> "applyTy";
"instantiateTys" -> "_";
"instantiateTys" -> "go";
"instantiateTys" -> "panic";
"instantiateTys" -> "subsTyVar_meet\'";
"invaliasP" -> "genBareTypeP";
"invaliasP" -> "return";
"invariantP" -> "genBareTypeP";
"irrelevantMult" -> "scaledThing";
"isANF" -> "simpleSymbolVar";
"isAnonBinder" -> "_";
"isApp" -> "_";
"isApp" -> "i";
"isApp" -> "isApp";
"isApp" -> "srcSpan";
"isBangInteger" -> "_";
"isBase" -> "_";
"isBase" -> "isBase";
"isBaseDataCon" -> "and";
"isBaseDataCon" -> "dataConOrigArgTys";
"isBaseDataCon" -> "dataConRepArgTys";
"isBaseDataCon" -> "irrelevantMult";
"isBaseDataCon" -> "isBaseTy";
"isBaseTy" -> "_";
"isBaseTy" -> "and";
"isBaseTy" -> "isBaseTy";
"isBaseType" -> "_";
"isBaseType" -> "isBaseType";
"isBool" -> "_";
"isBoolBind" -> "isBool";
"isBoolBind" -> "ofType";
"isBoolBind" -> "toRTypeRep";
"isBoundLikePred" -> "_";
"isBoundLikePred" -> "isImp";
"isBoundLikePred" -> "simplifyLen";
"isCaseArg" -> "_";
"isCaseArg" -> "f";
"isCaseArg" -> "x";
"isCheckedSpan" -> "_";
"isCheckedSpan" -> "isCheckedRealSpan";
"isClassConCo" -> "_";
"isClassConCo" -> "irrelevantMult";
"isClassOrSubClass" -> "_";
"isClassOrSubClass" -> "angleBrackets";
"isClassOrSubClass" -> "empty";
"isClassOrSubClass" -> "isClassBTyCon";
"isClassOrSubClass" -> "isClassOrSubClass";
"isClassOrSubClass" -> "isTuple";
"isClassOrSubClass" -> "ppEnv";
"isClassOrSubClass" -> "ppRISig";
"isClassOrSubClass" -> "showPpr";
"isClassOrSubClass" -> "srcSpan";
"isClassOrSubClass" -> "x";
"isClassType" -> "_";
"isCst" -> "_";
"isCst" -> "isCst";
"isDCId" -> "_";
"isData" -> "spacePrefix";
"isDataConId" -> "idDataConM";
"isDead" -> "_";
"isDead" -> "isANF";
"isDead" -> "isBangInteger";
"isDead" -> "isDead";
"isDead" -> "isErasable";
"isDead" -> "isUndefined";
"isDead" -> "normalize";
"isDead" -> "simplify";
"isDead" -> "x";
"isDecreasing" -> "_";
"isDecreasing" -> "isSizeable";
"isDerivedInstance" -> "derivingClasses";
"isDerivedInstance" -> "i";
"isDictionary" -> "dropModuleNames";
"isDictionaryExpression" -> "_";
"isDictionaryExpression" -> "isDictionary";
"isDictionaryExpression" -> "isDictionaryExpression";
"isDictionaryExpression" -> "x";
"isDiff" -> "file";
"isDiff" -> "i";
"isDiff" -> "line";
"isDiff" -> "lineE";
"isDiff" -> "x";
"isEmptySymbol" -> "x";
"isEqType" -> "_";
"isEqualityConstr" -> "toType";
"isErasable" -> "isDCId";
"isErasable" -> "isGhcSplId";
"isEvVar" -> "isPredVar";
"isEvVar" -> "x";
"isEven" -> "x";
"isExportedVar" -> "getConfig";
"isExportedVar" -> "mkStableName";
"isFeasible" -> "feasibles";
"isFunTy" -> "_";
"isFunTy" -> "isFunTy";
"isFunVar" -> "isDataConId";
"isFunction" -> "_";
"isFunction" -> "fmap";
"isGenericVar" -> "freeTyVars";
"isGenericVar" -> "initCGI";
"isGenericVar" -> "initEnv";
"isGenericVar" -> "panic";
"isGenericVar" -> "tyClasses";
"isGhcSplId" -> "simpleSymbolVar";
"isGoodInstance" -> "isLocal";
"isGoodInstance" -> "isMoreSpecific";
"isGoodInstance" -> "isSensible";
"isGoodInstance" -> "return";
"isHole" -> "_";
"isHoleVar" -> "x";
"isHomeModule" -> "moduleUnitId";
"isHomeModule" -> "return";
"isHomeModule" -> "thisPackage";
"isIdTRecBound" -> "_";
"isIdTRecBound" -> "freshInt";
"isIdTRecBound" -> "freshUnique";
"isIdTRecBound" -> "liftM";
"isImp" -> "_";
"isInCB" -> "_";
"isIncl" -> "spacePrefix";
"isInline" -> "isInline\'";
"isInline" -> "x";
"isInline\'" -> "strengthen";
"isInline\'" -> "stripRType";
"isInternal" -> "dropModuleNames";
"isIrrefutErrorVar" -> "x";
"isJunkSpan" -> "_";
"isKut" -> "_";
"isKut" -> "higherOrderFlag";
"isLocInFile" -> "f";
"isLocInFile" -> "locFile";
"isLocal" -> "i";
"isLocal" -> "isEmptySymbol";
"isLocal" -> "isValid";
"isManyDataConTy" -> "_";
"isManyDataConTy" -> "manyDataConKey";
"isMeas" -> "spacePrefix";
"isMeasureArg" -> "x";
"isMethod" -> "dropModuleNames";
"isMoreSpecific" -> "i";
"isMoreSpecific" -> "isValid";
"isNonPolyRec" -> "_";
"isNonPolyRec" -> "nonPoly";
"isNumeric" -> "tyConName";
"isOdd" -> "x";
"isPApp" -> "_";
"isPApp" -> "isPApp";
"isPLEVar" -> "x";
"isParam" -> "isParam";
"isParam" -> "var";
"isParamSubterm" -> "isParamSubterm";
"isParamSubterm" -> "var";
"isParened" -> "stripParens";
"isParentModuleOf" -> "isEmptySymbol";
"isPolyCst" -> "_";
"isPolyCst" -> "isCst";
"isPredExpr" -> "isPredType";
"isPredType" -> "anyF";
"isPredType" -> "isEqPred";
"isPredType" -> "isEqPrimPred";
"isPredVar" -> "isPredType";
"isPrimBareType" -> "_";
"isProjection" -> "_";
"isProjection" -> "lift";
"isProp" -> "_";
"isPropBareType" -> "isPrimBareType";
"isPropPV" -> "isProp";
"isQualifiedSym" -> "isQualified";
"isQualifiedSym" -> "x";
"isRExprArg" -> "_";
"isRVar" -> "_";
"isRecursivenewTyCon" -> "_";
"isRecursivenewTyCon" -> "go";
"isRefined" -> "stripRTypeBase";
"isSensible" -> "_";
"isSpecImport" -> "_";
"isSplSymbol" -> "_";
"isSplSymbol" -> "fmap";
"isSplSymbol" -> "isWiredInName";
"isSplSymbol" -> "qualifyBareSpec";
"isSplSymbol" -> "x";
"isSrcImport" -> "_";
"isSymbolOfVar" -> "x";
"isTarget" -> "_";
"isTmpSymbol" -> "x";
"isTmpVar" -> "dropModuleNamesAndUnique";
"isTmpVar" -> "isTmpSymbol";
"isTrivial" -> "_";
"isTrivial" -> "foldReft";
"isTuple" -> "isTupleId";
"isTuple" -> "isVar";
"isTuple" -> "secondHalf";
"isTupleId" -> "idDataConM";
"isType" -> "_";
"isType" -> "predType";
"isType" -> "spacePrefix";
"isUndefined" -> "_";
"isUndefined" -> "innerScTr";
"isUndefined" -> "isIdTRecBound";
"isUndefined" -> "outerScTr";
"isUndefined" -> "setIdTRecBound";
"isUndefined" -> "simplify";
"isUndefined" -> "transformRecExpr";
"isUndefined" -> "transformScope";
"isUndefined" -> "x";
"isValKind" -> "x";
"isValid" -> "return";
"isVar" -> "_";
"isVar" -> "x";
"isVarTup" -> "_";
"isVarTup" -> "eqVars";
"isVarTup" -> "isTuple";
"isWellTyped" -> "hasType";
"isWellTyped" -> "liftCG";
"isWellTyped" -> "trueTy";
"isWiredIn" -> "isWiredInLoc";
"isWiredIn" -> "isWiredInName";
"isWiredIn" -> "isWiredInShape";
"isWiredIn" -> "x";
"isWiredInLoc" -> "_";
"isWiredInLoc" -> "x";
"isWiredInName" -> "wiredInNames";
"isWiredInName" -> "x";
"isWiredInShape" -> "dcPrefix";
"isWiredInShape" -> "x";
"joinL" -> "annErrors";
"joinL" -> "annotate";
"joinL" -> "joinL";
"joinL" -> "mkOutput";
"joinL" -> "tokeniseWithLoc";
"joinVar" -> "showPpr";
"kVarId" -> "x";
"kVarSpan" -> "symbolLoc";
"kVarSpan" -> "takeFileName";
"keepPredType" -> "_";
"keepPredType" -> "eqSubst";
"keyDiff" -> "f";
"keyDiff" -> "x";
"killHoles" -> "errResolve";
"killHoles" -> "isHole";
"killHoles" -> "knownGhcDataCon";
"killHoles" -> "knownGhcTyCon";
"killHoles" -> "knownGhcType";
"killHoles" -> "knownGhcVar";
"killHoles" -> "lookupGhcDataCon";
"killHoles" -> "lookupGhcDnTyCon";
"killHoles" -> "lookupGhcNamedVar";
"killHoles" -> "lookupGhcTyCon";
"killHoles" -> "lookupGhcVar";
"killHoles" -> "makeEnv";
"killHoles" -> "maybeResolveSym";
"killHoles" -> "ofBPVar";
"killHoles" -> "ofBareType";
"killHoles" -> "ofBareTypeE";
"killHoles" -> "partitionLocalBinds";
"killHoles" -> "qualifyTop";
"killHoles" -> "qualifyTopDummy";
"killHoles" -> "resolveLocalBinds";
"killHoles" -> "srcVars";
"killHoles" -> "tx";
"killHoles" -> "txRefSort";
"killSubst" -> "fmap";
"killSubst" -> "killSubstReft";
"killSubstReft" -> "_";
"killSubstReft" -> "trans";
"kindArity" -> "_";
"kindArity" -> "kindArity";
"kindP" -> "bareAtomBindP";
"kindTCArity" -> "_";
"kindTCArity" -> "go";
"kindToBRType" -> "bareOfType";
"kindToBRType" -> "kindToRType_";
"kindToRType" -> "kindToRType_";
"kindToRType" -> "ofType";
"kindToRType_" -> "go";
"kindToRType_" -> "ofType";
"knownGhcDataCon" -> "_";
"knownGhcDataCon" -> "maybeResolveSym";
"knownGhcDataCon" -> "myTracepp";
"knownGhcDataCon" -> "resolveWith";
"knownGhcDataCon" -> "x";
"knownGhcTyCon" -> "maybeResolveSym";
"knownGhcTyCon" -> "myTracepp";
"knownGhcType" -> "_";
"knownGhcType" -> "myTracepp";
"knownGhcType" -> "ofBareTypeE";
"knownGhcVar" -> "maybeResolveSym";
"knownGhcVar" -> "myTracepp";
"knownVars" -> "_";
"knownWiredDataCons" -> "wiredDataCons";
"knownWiredTyCons" -> "wiredTyCons";
"lamExpr" -> "_";
"lamExpr" -> "consE";
"lamExpr" -> "lamExpr";
"lamExpr" -> "literalConst";
"lamExpr" -> "ofType";
"lamExpr" -> "refreshTy";
"lamExpr" -> "tt";
"lamExpr" -> "tx";
"lamExpr" -> "typeSort";
"lamExpr" -> "x";
"lambdaSingleton" -> "_";
"lambdaSingleton" -> "higherOrderFlag";
"lambdaSingleton" -> "lamExpr";
"lambdaSingleton" -> "typeSort";
"lambdaSingleton" -> "uTop";
"lambdaSingleton" -> "x";
"lastModified" -> "f";
"lastModified" -> "hsSpecificationP";
"lastModified" -> "parseSymbolToLogic";
"lastModified" -> "parseTest\'";
"lastModified" -> "return";
"lastModified" -> "singleSpecP";
"lastModified" -> "specSpecificationP";
"lazyVarP" -> "locBinderP";
"leg3" -> "_";
"leg5" -> "_";
"lem_asgn" -> "lem_bsubst";
"lem_asgn" -> "x";
"lem_bsubst" -> "_";
"lem_bsubst" -> "b1";
"lem_bsubst" -> "lem_bsubst";
"lem_bsubst" -> "lem_subst";
"lem_bsubst" -> "x";
"lem_if" -> "_";
"lem_seq" -> "_";
"lem_subst" -> "aval";
"lem_subst" -> "b1";
"lem_subst" -> "i";
"lem_subst" -> "lem_subst";
"lem_subst" -> "x";
"lem_while" -> "_";
"lem_while" -> "lem_while";
"lemma_get_not_set" -> "_";
"lemma_get_set" -> "_";
"lenOf" -> "lenLocSymbol";
"lenOf" -> "x";
"leq" -> "x";
"leqBind" -> "_";
"leqBind" -> "f";
"leqBind" -> "x";
"libDeps" -> "f";
"lift" -> "exprArgs";
"liftA2" -> "f";
"liftA2" -> "return";
"liftA2" -> "x";
"liftCG" -> "get";
"liftCG" -> "return";
"liftCG" -> "x";
"liftCG0" -> "get";
"liftM" -> "f";
"liftM" -> "x";
"liftM2" -> "f";
"liftM2" -> "x";
"liftableTyCons" -> "tyConDataName";
"liftableTyCons" -> "zipMapMaybe";
"liftedSpecGetter" -> "imports";
"lineDiff" -> "fmap";
"lineDiff" -> "lineDiff\'";
"lineDiff\'" -> "diffLines";
"lineDiff\'" -> "diffMap";
"lineDiff\'" -> "diffShifts";
"lineDiff\'" -> "setShift";
"lineSpan" -> "_";
"lineString" -> "i";
"lineString" -> "is";
"liquid" -> "_";
"liquid" -> "getOpts";
"liquid" -> "printLiquidHaskellBanner";
"liquid" -> "runLiquid";
"liquidAssert" -> "_";
"liquidAssert" -> "x";
"liquidAssume" -> "x";
"liquidAssumeB" -> "x";
"liquidConstraints" -> "_";
"liquidConstraints" -> "actOrDie";
"liquidConstraints" -> "exitWithResult";
"liquidConstraints" -> "generateConstraints";
"liquidConstraints" -> "getTargetInfos";
"liquidConstraints" -> "return";
"liquidEnd" -> "_";
"liquidEnd" -> "err";
"liquidEnd" -> "f";
"liquidEnd" -> "fSrcSpan";
"liquidEnd" -> "fmap";
"liquidEnd" -> "ppEnv";
"liquidEnd" -> "ppRefArgs";
"liquidEnd" -> "showPpr";
"liquidEnd" -> "uError";
"liquidHaskellCheck" -> "checkLiquidHaskellContext";
"liquidHaskellCheck" -> "debugLog";
"liquidHaskellCheck" -> "emptyLiquidLib";
"liquidHaskellCheck" -> "getConfig";
"liquidHaskellCheck" -> "getLiquidSpec";
"liquidHaskellCheck" -> "isIgnore";
"liquidHaskellCheck" -> "pure";
"liquidHaskellCheck" -> "relevantModules";
"liquidHaskellCheck" -> "renderModule";
"liquidHaskellMain" -> "devModeHooks";
"liquidOne" -> "checkTargetInfo";
"liquidOne" -> "exitWithResult";
"liquidOne" -> "getConfig";
"liquidOne" -> "pure";
"liquidQueries" -> "liquidQuery";
"liquidQuery" -> "dumpCs";
"liquidQuery" -> "generateConstraints";
"liquidQuery" -> "return";
"liquidQuery" -> "solveCs";
"liquidQuery" -> "timedAction";
"liquidQuery" -> "updTargetInfoTermVars";
"listLMap" -> "dropModuleUnique";
"listLMap" -> "pprDoc";
"listLMap" -> "pprintCBs";
"listLMap" -> "pprintLongList";
"listLMap" -> "targetSrcIso";
"listLMap" -> "toLogicMap";
"listLMap" -> "x";
"listTyDataCons" -> "lt";
"listTyDataCons" -> "pdVarReft";
"listTyDataCons" -> "rApp";
"listTyDataCons" -> "rPropP";
"listTyDataCons" -> "rVar";
"listTyDataCons" -> "tyConTyVarsDef";
"listTyDataCons" -> "wiredInName";
"litSpans" -> "tokenSpans";
"literalConst" -> "mkLit";
"literalConst" -> "typeSort";
"literalFRefType" -> "literalFReft";
"literalFRefType" -> "makeRTypeBase";
"literalFReft" -> "mkLit";
"literalFReft" -> "mkReft";
"loadDependencies" -> "_";
"loadDependencies" -> "configToRedundantDependencies";
"loadDependencies" -> "debugLog";
"loadDependencies" -> "dropDependency";
"loadDependencies" -> "libDeps";
"loadDependencies" -> "libTarget";
"loadDependencies" -> "pure";
"loadDependencies" -> "renderModule";
"loadDependencies" -> "toStableModule";
"loadDependenciesOf" -> "loadResult";
"loadDependenciesOf" -> "showPpr";
"loadLiftedSpec" -> "return";
"loadLiftedSpec" -> "warnMissingLiftedSpec";
"loadResult" -> "f";
"loadResult" -> "return";
"locBinderP" -> "binderP";
"locInfixCondIdP" -> "infixCondIdR";
"locInfixCondIdP" -> "synthesize";
"locNamedThing" -> "getSourcePos";
"locNamedThing" -> "getSourcePosE";
"locNamedThing" -> "srcSpan";
"locNamedThing" -> "x";
"locUpperIdP\'" -> "upperIdR\'";
"locUpperOrInfixIdP" -> "locInfixCondIdP";
"locUpperOrInfixIdP" -> "locUpperIdP\'";
"localBinds" -> "_";
"localBinds" -> "add";
"localBinds" -> "go";
"localBinds" -> "localKey";
"localBinds" -> "x";
"localBindsOfType" -> "filterREnv";
"localBindsOfType" -> "localsREnv";
"localBindsOfType" -> "toRSort";
"localBindsOfType" -> "tx";
"localKey" -> "isLocal";
"localKey" -> "splitModuleNameExact";
"localKey" -> "x";
"localMaxAppDepth" -> "get";
"localMaxAppDepth" -> "getConfig";
"localMaxArgsDepth" -> "get";
"localMaxArgsDepth" -> "getConfig";
"localMaxMatchDepth" -> "get";
"localMaxMatchDepth" -> "getConfig";
"localVarMap" -> "i";
"localVarMap" -> "localKey";
"localVarMap" -> "x";
"localVarSymbol" -> "exportedVarSymbol";
"localVarSymbol" -> "getDataConVarUnique";
"localVarSymbol" -> "showPpr";
"locally" -> "get";
"locally" -> "return";
"logicType" -> "fromRTypeRep";
"logicType" -> "isClassType";
"logicType" -> "ofType";
"logicType" -> "toRTypeRep";
"lookupAll" -> "_";
"lookupAll" -> "get";
"lookupAll" -> "i";
"lookupAll" -> "lookupAll";
"lookupAll" -> "thisReplace";
"lookupAll" -> "x";
"lookupAnfEnv" -> "x";
"lookupCompanionSpec" -> "_";
"lookupCompanionSpec" -> "bareSpecIso";
"lookupCompanionSpec" -> "file";
"lookupCompanionSpec" -> "lift";
"lookupCompanionSpec" -> "pluginAbort";
"lookupCompanionSpec" -> "pure";
"lookupCompanionSpec" -> "specSpecificationP";
"lookupDefaultVar" -> "addClassEmbeds";
"lookupDefaultVar" -> "dataConMap";
"lookupDefaultVar" -> "makeConTypes";
"lookupDefaultVar" -> "makeDataConChecker";
"lookupDefaultVar" -> "makeDataConSelector";
"lookupDefaultVar" -> "makeDataDecls";
"lookupDefaultVar" -> "makeRecordSelectorSigs";
"lookupDefaultVar" -> "meetDataConSpec";
"lookupGhcDataCon" -> "strictResolveSym";
"lookupGhcDnCon" -> "fmap";
"lookupGhcDnTyCon" -> "failMaybe";
"lookupGhcDnTyCon" -> "lookupGhcDnTyConE";
"lookupGhcDnTyConE" -> "_";
"lookupGhcDnTyConE" -> "lookupGhcDnCon";
"lookupGhcNamedVar" -> "maybeResolveSym";
"lookupGhcTyCon" -> "myTracepp";
"lookupGhcTyCon" -> "strictResolveSym";
"lookupGhcVar" -> "err";
"lookupGhcVar" -> "lookupLocalVar";
"lookupInterfaceAnnotations" -> "deserialiseLiquidLib";
"lookupInterfaceAnnotations" -> "pure";
"lookupLoadedHomeModule" -> "return";
"lookupLocalVar" -> "_";
"lookupLocalVar" -> "unQualifySymbol";
"lookupLocalVar" -> "x";
"lookupModSummary" -> "_";
"lookupModSummary" -> "isBootInterface";
"lookupModSummary" -> "isBootSummary";
"lookupModSummary" -> "liftM";
"lookupModSummary" -> "pure";
"lookupModule" -> "_";
"lookupModule" -> "err";
"lookupModule" -> "findModule";
"lookupModule" -> "lookupLoadedHomeModule";
"lookupModule" -> "return";
"lookupNewType" -> "get";
"lookupREnv" -> "renvMaps";
"lookupREnv" -> "x";
"lookupRInv" -> "_";
"lookupRInv" -> "goodInvs";
"lookupRdrName" -> "_";
"lookupRdrName" -> "err";
"lookupRdrName" -> "return";
"lookupThings" -> "get";
"lookupThings" -> "myTracepp";
"lookupThings" -> "x";
"lookupTyThing" -> "allowExtResolution";
"lookupTyThing" -> "lookupThings";
"lookupTyThing" -> "matchMod";
"lookupTyThing" -> "myTracepp";
"lookupTyThing" -> "return";
"lookupTyThing" -> "symbolModules";
"lookupTyThing" -> "x";
"lookupTyThings" -> "fmap";
"lookupTyThings" -> "lookupTyThing";
"lower" -> "empty";
"lower" -> "i";
"lower" -> "push";
"lower" -> "showSpan";
"lower" -> "srcSpan";
"lower" -> "x";
"lowerIdTail" -> "bAppTy";
"lowerIdTail" -> "bRVar";
"lowerIdTail" -> "bTyVar";
"lowerIdTail" -> "bareTyArgP";
"lowerIdTail" -> "liftM2";
"lowerIdTail" -> "monoPredicateP";
"lowerIdTail" -> "return";
"lq" -> "lqDec";
"lqDec" -> "dataToExpQ\'";
"lqDec" -> "err";
"lqDec" -> "locSourcePos";
"lqDec" -> "mkSpecDecs";
"lqDec" -> "return";
"lqDec" -> "singleSpecP";
"lqDec" -> "throwErrorInQ";
"lt" -> "x";
"main" -> "_";
"main" -> "client";
"main" -> "command";
"main" -> "daemonName";
"main" -> "dumpLogs";
"main" -> "getAllData";
"main" -> "getCompareTimeData";
"main" -> "getConfig";
"main" -> "getOpts";
"main" -> "getTimeData";
"main" -> "helpNeeded";
"main" -> "liquidConstraints";
"main" -> "options";
"main" -> "partition";
"main" -> "partitionArgs";
"main" -> "plotCompareTimeData";
"main" -> "plotTimeData";
"main" -> "printLiquidHaskellBanner";
"main" -> "quietly";
"main" -> "runGradual";
"main" -> "set";
"main" -> "x";
"makeAlt" -> "_";
"makeAlt" -> "addDecrTerm";
"makeAlt" -> "addsEmem";
"makeAlt" -> "addsEnv";
"makeAlt" -> "caseEnv";
"makeAlt" -> "freshVar";
"makeAlt" -> "liftCG";
"makeAlt" -> "liftCG0";
"makeAlt" -> "locally";
"makeAlt" -> "return";
"makeAlt" -> "synthesizeBasic";
"makeAlt" -> "synthesizeScrut";
"makeAlt" -> "trueTy";
"makeAlt" -> "x";
"makeApp" -> "_";
"makeApp" -> "bops";
"makeApp" -> "eAppWithMap";
"makeApp" -> "f";
"makeAsmSigs" -> "rawAsmSigs";
"makeAsmSigs" -> "x";
"makeAssumeType" -> "at";
"makeAssumeType" -> "axiomType";
"makeAssumeType" -> "coreToLogic";
"makeAssumeType" -> "grabBody";
"makeAssumeType" -> "isBoolBind";
"makeAssumeType" -> "normalize";
"makeAssumeType" -> "ofType";
"makeAssumeType" -> "panic";
"makeAssumeType" -> "rTypeSort";
"makeAssumeType" -> "rTypeSortExp";
"makeAssumeType" -> "runToLogicWithBoolBinds";
"makeAssumeType" -> "simplesymbol";
"makeAssumeType" -> "sourcePosSrcSpan";
"makeAssumeType" -> "strengthenRes";
"makeAssumeType" -> "x";
"makeAutoDecrDataCons" -> "_";
"makeAutoDecrDataCons" -> "fmap";
"makeAutoDecrDataCons" -> "go";
"makeAutoDecrDataCons" -> "idTyCon";
"makeAutoDecrDataCons" -> "lenOf";
"makeAutoDecrDataCons" -> "makeSizedDataCons";
"makeAutoDecrDataCons" -> "simplify";
"makeAutoDecrDataCons" -> "strengthen";
"makeAutoDecrDataCons" -> "zipWith";
"makeAxiom" -> "makeAssumeType";
"makeAxiom" -> "x";
"makeAxiomEnvironment" -> "doExpand";
"makeAxiomEnvironment" -> "getConfig";
"makeAxiomEnvironment" -> "makeEquations";
"makeAxiomEnvironment" -> "makeRewrites";
"makeAxiomEnvironment" -> "makeSimplify";
"makeAxiomEnvironment" -> "specTypeEq";
"makeBound" -> "_";
"makeBound" -> "bkImp";
"makeBound" -> "makeBoundType";
"makeBound" -> "subsTyVar_meet";
"makeBound" -> "toRSort";
"makeBound" -> "x";
"makeBoundType" -> "_";
"makeBoundType" -> "go";
"makeBoundType" -> "makeRef";
"makeBoundType" -> "ofRSort";
"makeBoundType" -> "panic";
"makeBoundType" -> "partitionPs";
"makeBoundType" -> "strengthen";
"makeBoundType" -> "x";
"makeCLaws" -> "mkClass";
"makeCallGraph" -> "bindEqns";
"makeCallGraph" -> "fmap";
"makeClassMeasureSpec" -> "_";
"makeClassMeasureSpec" -> "freeSymbols";
"makeClassMeasureSpec" -> "hasBoolResult";
"makeClassMeasureSpec" -> "isKind";
"makeClassMeasureSpec" -> "joinVar";
"makeClassMeasureSpec" -> "mapReft";
"makeClassMeasureSpec" -> "matchKindArgs";
"makeClassMeasureSpec" -> "mkVarExpr";
"makeClassMeasureSpec" -> "runMapTyVars";
"makeClassMeasureSpec" -> "simpleSymbolVar";
"makeClassMeasureSpec" -> "symbolRTyVar";
"makeClassMeasureSpec" -> "tx";
"makeClasses" -> "mkClass";
"makeCompositionExpression" -> "_";
"makeCompositionExpression" -> "checkBareSpec";
"makeCompositionExpression" -> "checkTargetSpec";
"makeCompositionExpression" -> "empty";
"makeCompositionExpression" -> "f";
"makeCompositionExpression" -> "go";
"makeCompositionExpression" -> "isWiredIn";
"makeCompositionExpression" -> "panic";
"makeCompositionExpression" -> "stringVar";
"makeCompositionExpression" -> "tx";
"makeCompositionExpression" -> "x";
"makeConTypes" -> "canonizeDecls";
"makeConTypes" -> "groupVariances";
"makeConTypes" -> "ofBDataDecl";
"makeConTypes" -> "x";
"makeContext" -> "_";
"makeContext" -> "empty";
"makeContext" -> "makeContext1";
"makeContext" -> "makeContextLine";
"makeContext" -> "zipWith";
"makeContext1" -> "_";
"makeContext1" -> "ppOblig";
"makeDataConSelector" -> "i";
"makeDataConSelector" -> "makeDataConSelector\'";
"makeDataConSelector\'" -> "dcSymbol";
"makeDataConSelector\'" -> "i";
"makeDataConSelector\'" -> "symbolMeasure";
"makeDataConType" -> "combineDCTypes";
"makeDataConType" -> "defRefType";
"makeDataConType" -> "extend";
"makeDataConType" -> "splitFunTys";
"makeDataConTypes" -> "trueTy";
"makeDataConTypes" -> "x";
"makeDataCtor" -> "fieldName";
"makeDataCtor" -> "makeDataFields";
"makeDataCtor" -> "x";
"makeDataDecl" -> "makeDataCtor";
"makeDataDecl" -> "tyConLocSymbol";
"makeDataDecls" -> "exactDCFlag";
"makeDataDecls" -> "groupDataCons";
"makeDataDecls" -> "makeFDataDecls";
"makeDataDecls" -> "resolveTyCons";
"makeDataFields" -> "x";
"makeDecrIndex" -> "_";
"makeDecrIndex" -> "addWarning";
"makeDecrIndex" -> "i";
"makeDecrIndex" -> "makeDecrIndexTy";
"makeDecrIndex" -> "return";
"makeDecrIndex" -> "x";
"makeDecrIndexTy" -> "checkHint";
"makeDecrIndexTy" -> "get";
"makeDecrIndexTy" -> "hint";
"makeDecrIndexTy" -> "i";
"makeDecrIndexTy" -> "isDecreasing";
"makeDecrIndexTy" -> "isIdTRecBound";
"makeDecrIndexTy" -> "makeNumEnv";
"makeDecrIndexTy" -> "return";
"makeDecrIndexTy" -> "toRTypeRep";
"makeDecrIndexTy" -> "unOCons";
"makeDecrIndexTy" -> "x";
"makeDecrType" -> "mkDType";
"makeDefaultMethods" -> "lookupDefaultVar";
"makeDependencies" -> "_";
"makeDependencies" -> "cachedBareSpecs";
"makeDependencies" -> "findAndParseSpecFiles";
"makeDependencies" -> "getModName";
"makeDependencies" -> "liftedSpecGetter";
"makeDependencies" -> "mkStableModule";
"makeDependencies" -> "moduleUnitId";
"makeDependencies" -> "reachableModules";
"makeDependencies" -> "return";
"makeDependencies" -> "zipWith";
"makeDicTypeName" -> "_";
"makeDicTypeName" -> "panic";
"makeDictionaries" -> "makeDictionary";
"makeDictionary" -> "makeDictionaryName";
"makeDictionaryName" -> "dropUniv";
"makeDictionaryName" -> "makeDicTypeName";
"makeEmbeds" -> "makeTyConEmbeds";
"makeEnv" -> "getGlobalSyms";
"makeEnv" -> "makeLocalVars";
"makeEnv" -> "makeTyThingMap";
"makeEnv" -> "makeVarSubst";
"makeEnv" -> "srcVars";
"makeEquations" -> "_";
"makeEquations" -> "equationBody";
"makeEquations" -> "f";
"makeFDataDecls" -> "makeDataDecl";
"makeFail" -> "x";
"makeFailErrors" -> "mkError";
"makeFailErrors" -> "x";
"makeFailUseErrors" -> "go";
"makeFailUseErrors" -> "mkError";
"makeFailUseErrors" -> "x";
"makeFromSet" -> "f";
"makeGConfig" -> "defConfig";
"makeGMap" -> "concretize";
"makeGMap" -> "toGMap";
"makeGhcSpec" -> "allWarnings";
"makeGhcSpec" -> "ghcSpecEnv";
"makeGhcSpec" -> "makeGhcSpec0";
"makeGhcSpec" -> "noErrors";
"makeGhcSpec" -> "pure";
"makeGhcSpec" -> "targetSpecGetter";
"makeGhcSpec" -> "targetSrcIso";
"makeGhcSpec0" -> "addReflSigs";
"makeGhcSpec0" -> "makeEmbeds";
"makeGhcSpec0" -> "makeImports";
"makeGhcSpec0" -> "makeLiftedSpec";
"makeGhcSpec0" -> "makeLiftedSpec0";
"makeGhcSpec0" -> "makeLiftedSpec1";
"makeGhcSpec0" -> "makeMeasEnv";
"makeGhcSpec0" -> "makeSigEnv";
"makeGhcSpec0" -> "makeSpecData";
"makeGhcSpec0" -> "makeSpecLaws";
"makeGhcSpec0" -> "makeSpecName";
"makeGhcSpec0" -> "makeSpecQual";
"makeGhcSpec0" -> "makeSpecRefl";
"makeGhcSpec0" -> "makeSpecSig";
"makeGhcSpec0" -> "makeSpecTerm";
"makeGhcSpec0" -> "makeSpecVars";
"makeGhcSpec0" -> "makeTycEnv";
"makeGhcSpec0" -> "measEnv";
"makeGhcSpec0" -> "myRTEnv";
"makeGhcSpec0" -> "splitSpecs";
"makeGhcSrc" -> "_";
"makeGhcSrc" -> "allImports";
"makeGhcSrc" -> "anormalize";
"makeGhcSrc" -> "availableTyCons";
"makeGhcSrc" -> "classCons";
"makeGhcSrc" -> "derivedVars";
"makeGhcSrc" -> "file";
"makeGhcSrc" -> "getFamInstances";
"makeGhcSrc" -> "importVars";
"makeGhcSrc" -> "lookupTyThings";
"makeGhcSrc" -> "makeFamInstEnv";
"makeGhcSrc" -> "makeMGIModGuts";
"makeGhcSrc" -> "qualifiedImports";
"makeGhcSrc" -> "return";
"makeHaskellAxioms" -> "fmap";
"makeHaskellAxioms" -> "getReflectDefs";
"makeHaskellAxioms" -> "makeAxiom";
"makeHaskellAxioms" -> "wiredDefs";
"makeHaskellDataDecls" -> "exactDCFlag";
"makeHaskellDataDecls" -> "hasDataDecl";
"makeHaskellDataDecls" -> "isReflectableTyCon";
"makeHaskellDataDecls" -> "liftableTyCons";
"makeHaskellDataDecls" -> "tyConDataDecl";
"makeHaskellDataDecls" -> "zipMap";
"makeHaskellInlines" -> "makeMeasureInline";
"makeHaskellInlines" -> "nonRecCoreBinds";
"makeHaskellMeasures" -> "makeMeasureDefinition";
"makeHaskellMeasures" -> "nonRecCoreBinds";
"makeIAliases" -> "mkI";
"makeImports" -> "isSrcImport";
"makeInlSigs" -> "makeFromSet";
"makeInlSigs" -> "makeLiftedSigs";
"makeInstanceLaw" -> "_";
"makeInstanceLaw" -> "fmap";
"makeInstanceLaw" -> "join";
"makeInstanceLaw" -> "makeClassMeasureSpec";
"makeInstanceLaw" -> "makeHaskellDataDecls";
"makeInstanceLaw" -> "makeHaskellInlines";
"makeInstanceLaw" -> "makeHaskellMeasures";
"makeInstanceLaw" -> "makeMeasureSelectors";
"makeInstanceLaw" -> "makeMeasureSpec";
"makeInstanceLaw" -> "makeMeasureSpec\'";
"makeInstanceLaw" -> "mkVar";
"makeInstanceLaw" -> "ofType";
"makeInstanceLaw" -> "varMeasures";
"makeInstanceLaw" -> "x";
"makeInstanceLaws" -> "makeInstanceLaw";
"makeInvariants" -> "_";
"makeLexRefa" -> "makeLexReft";
"makeLexRefa" -> "uTop";
"makeLexReft" -> "_";
"makeLexReft" -> "makeLexReft";
"makeLexReft" -> "panic";
"makeLiftedSigs" -> "expand";
"makeLiftedSigs" -> "f";
"makeLiftedSigs" -> "lt";
"makeLiftedSigs" -> "x";
"makeLiftedSpec" -> "isExportedVar";
"makeLiftedSpec" -> "isLocInFile";
"makeLiftedSpec" -> "sigVars";
"makeLiftedSpec" -> "targetSrcIso";
"makeLiftedSpec" -> "varLocSym";
"makeLiftedSpec" -> "x";
"makeLiftedSpec0" -> "lmapEAlias";
"makeLiftedSpec0" -> "reflectedTyCons";
"makeLiftedSpec0" -> "uniqNub";
"makeLiftedSpec1" -> "_";
"makeLocalVars" -> "localBinds";
"makeLocalVars" -> "localVarMap";
"makeLogicMap" -> "listLMap";
"makeLogicMap" -> "panic";
"makeLogicMap" -> "parseSymbolToLogic";
"makeLogicMap" -> "return";
"makeMGIModGuts" -> "miModGuts";
"makeMeasEnv" -> "x";
"makeMeasureChecker" -> "x";
"makeMeasureDefinition" -> "coreToDef\'";
"makeMeasureDefinition" -> "errHMeas";
"makeMeasureDefinition" -> "logicType";
"makeMeasureDefinition" -> "makeUnSorted";
"makeMeasureDefinition" -> "x";
"makeMeasureInline" -> "coreToFun\'";
"makeMeasureInline" -> "errHMeas";
"makeMeasureInline" -> "x";
"makeMeasureInvariants" -> "isSymbolOfVar";
"makeMeasureInvariants" -> "measureTypeToInv";
"makeMeasureInvariants" -> "x";
"makeMeasureSelector" -> "i";
"makeMeasureSelector" -> "x";
"makeMeasureSelectors" -> "dataConSel";
"makeMeasureSelectors" -> "exactDCFlag";
"makeMeasureSelectors" -> "go";
"makeMeasureSelectors" -> "higherOrderFlag";
"makeMeasureSelectors" -> "i";
"makeMeasureSelectors" -> "isFunTy";
"makeMeasureSelectors" -> "isGadt";
"makeMeasureSelectors" -> "makeMeasureChecker";
"makeMeasureSelectors" -> "makeMeasureSelector";
"makeMeasureSelectors" -> "x";
"makeMeasureSpec" -> "bareMSpec";
"makeMeasureSpec" -> "mkMeasureDCon";
"makeMeasureSpec" -> "mkMeasureSort";
"makeMeasureSpec\'" -> "mapReft";
"makeMethodTypes" -> "_";
"makeMethodTypes" -> "addCC";
"makeMethodTypes" -> "fmap";
"makeMethodTypes" -> "fromRISig";
"makeMethodTypes" -> "splitDictionary";
"makeMethodTypes" -> "subsTyVar_meet\'";
"makeMethodTypes" -> "subst";
"makeMethodTypes" -> "x";
"makeMsrSigs" -> "makeFromSet";
"makeMsrSigs" -> "makeLiftedSigs";
"makeMthSigs" -> "_";
"makeMthSigs" -> "measEnv";
"makeNewType" -> "_";
"makeNewType" -> "err";
"makeNewTypes" -> "makeNewType";
"makeNumEmbeds" -> "is";
"makeNumEmbeds" -> "makeNumericInfoOne";
"makeNumEmbeds" -> "x";
"makeNumEnv" -> "_";
"makeNumEnv" -> "go";
"makeNumericInfoOne" -> "instanceTyCon";
"makeNumericInfoOne" -> "is";
"makeNumericInfoOne" -> "mappendSortFTC";
"makePluggedDataCon" -> "_";
"makePluggedDataCon" -> "err";
"makePluggedDataCon" -> "freeTyVars";
"makePluggedDataCon" -> "isClassType";
"makePluggedDataCon" -> "plugMany";
"makePluggedSig" -> "maybeTrue";
"makePluggedSig" -> "plugHoles";
"makePluggedSig" -> "x";
"makeQualifiers" -> "fmap";
"makeQualifiers" -> "resolveQParams";
"makeREAliases" -> "buildExprEdges";
"makeREAliases" -> "expandLoc";
"makeREAliases" -> "f";
"makeREAliases" -> "graphExpand";
"makeREAliases" -> "setREAlias";
"makeRTAliases" -> "buildTypeEdges";
"makeRTAliases" -> "expandLoc";
"makeRTAliases" -> "f";
"makeRTAliases" -> "graphExpand";
"makeRTAliases" -> "setRTAlias";
"makeRTEnv" -> "_";
"makeRTEnv" -> "lmapEAlias";
"makeRTEnv" -> "makeREAliases";
"makeRTEnv" -> "makeRTAliases";
"makeRTEnv" -> "renameRTArgs";
"makeRTEnv" -> "specREAlias";
"makeRTypeBase" -> "_";
"makeRTypeBase" -> "makeRTypeBase";
"makeRTypeBase" -> "panic";
"makeRTypeBase" -> "rApp";
"makeRTypeBase" -> "rTyVar";
"makeRTypeBase" -> "x";
"makeRecInvariants" -> "_";
"makeRecInvariants" -> "f";
"makeRecInvariants" -> "i";
"makeRecInvariants" -> "is";
"makeRecInvariants" -> "szFun";
"makeRecInvariants" -> "toType";
"makeRecInvariants" -> "x";
"makeRecType" -> "fromRTypeRep";
"makeRecType" -> "is";
"makeRecType" -> "makeDecrType";
"makeRecType" -> "mergecondition";
"makeRecType" -> "replaceN";
"makeRecType" -> "safeFromLeft";
"makeRecType" -> "toRTypeRep";
"makeRecType" -> "unOCons";
"makeRecordSelectorSigs" -> "checkRecordSelectorSigs";
"makeRecordSelectorSigs" -> "cookSpecType";
"makeRecordSelectorSigs" -> "cookSpecTypeE";
"makeRecordSelectorSigs" -> "fmap";
"makeRecordSelectorSigs" -> "higherOrderFlag";
"makeRecordSelectorSigs" -> "isFunTy";
"makeRecordSelectorSigs" -> "makeRTEnv";
"makeRecordSelectorSigs" -> "makeRTVar";
"makeRecordSelectorSigs" -> "mkArrow";
"makeRecordSelectorSigs" -> "plugHoles";
"makeRecordSelectorSigs" -> "qualifyExpand";
"makeRecordSelectorSigs" -> "rTypeValueVar";
"makeRecordSelectorSigs" -> "specExpandType";
"makeRecordSelectorSigs" -> "x";
"makeRef" -> "_";
"makeRef" -> "dfromList";
"makeRef" -> "dhasinfo";
"makeRef" -> "dinsert";
"makeRef" -> "dlookup";
"makeRef" -> "dmap";
"makeRef" -> "dmapty";
"makeRef" -> "fromRISig";
"makeRef" -> "isPApp";
"makeRef" -> "makeDictionaries";
"makeRef" -> "makeDictionary";
"makeRef" -> "partition";
"makeRef" -> "toUsedPVar";
"makeRewrite" -> "x";
"makeRewriteOne" -> "canRewrite";
"makeRewriteOne" -> "rTypeSort";
"makeRewriteOne" -> "refinementEQs";
"makeRewriteOne" -> "return";
"makeRewriteOne" -> "stripRTypeBase";
"makeRewriteOne" -> "toRTypeRep";
"makeRewriteWith" -> "x";
"makeRewrites" -> "allDeps";
"makeRewrites" -> "coreDeps";
"makeRewrites" -> "dependsOn";
"makeRewrites" -> "makeRewriteOne";
"makeRewrites" -> "return";
"makeRewrites" -> "subVar";
"makeRewrites" -> "var";
"makeSimplify" -> "_";
"makeSimplify" -> "eq";
"makeSimplify" -> "f";
"makeSimplify" -> "go";
"makeSimplify" -> "impossible";
"makeSimplify" -> "specTypeToResultRef";
"makeSimplify" -> "toRTypeRep";
"makeSimplify" -> "x";
"makeSingleton" -> "_";
"makeSingleton" -> "argExpr";
"makeSingleton" -> "f";
"makeSingleton" -> "funExpr";
"makeSingleton" -> "getConfig";
"makeSingleton" -> "higherOrderFlag";
"makeSingleton" -> "simplify";
"makeSingleton" -> "strengthenMeet";
"makeSingleton" -> "uTop";
"makeSingleton" -> "x";
"makeSize" -> "f";
"makeSize" -> "x";
"makeSizedDataCons" -> "fromRTypeRep";
"makeSizedDataCons" -> "impossible";
"makeSizedDataCons" -> "lenOf";
"makeSizedDataCons" -> "strengthen";
"makeSizedDataCons" -> "toRSort";
"makeSizedDataCons" -> "toRTypeRep";
"makeSizedDataCons" -> "x";
"makeSpecData" -> "makeIAliases";
"makeSpecData" -> "makeInvariants";
"makeSpecData" -> "makeMeasureInvariants";
"makeSpecData" -> "measEnv";
"makeSpecData" -> "tt";
"makeSpecData" -> "uRType";
"makeSpecData" -> "x";
"makeSpecDictionaries" -> "dfromList";
"makeSpecDictionaries" -> "fmap";
"makeSpecDictionaries" -> "makeSpecDictionary";
"makeSpecDictionary" -> "fmap";
"makeSpecDictionary" -> "makeSpecDictionaryOne";
"makeSpecDictionary" -> "resolveDictionaries";
"makeSpecDictionaryOne" -> "_";
"makeSpecDictionaryOne" -> "bkUniv";
"makeSpecDictionaryOne" -> "f";
"makeSpecDictionaryOne" -> "fmap";
"makeSpecDictionaryOne" -> "makeDictionary";
"makeSpecDictionaryOne" -> "mkUnivs";
"makeSpecDictionaryOne" -> "x";
"makeSpecName" -> "measEnv";
"makeSpecQual" -> "makeQualifiers";
"makeSpecQual" -> "measEnv";
"makeSpecQual" -> "wiredSortedSyms";
"makeSpecRefl" -> "getReflects";
"makeSpecRefl" -> "isReflectVar";
"makeSpecRefl" -> "lt";
"makeSpecRefl" -> "makeAutoInst";
"makeSpecRefl" -> "makeRewrite";
"makeSpecRefl" -> "makeRewriteWith";
"makeSpecRefl" -> "sigVars";
"makeSpecRefl" -> "x";
"makeSpecSig" -> "_";
"makeSpecSig" -> "makeAsmSigs";
"makeSpecSig" -> "makeInlSigs";
"makeSpecSig" -> "makeMsrSigs";
"makeSpecSig" -> "makeMthSigs";
"makeSpecSig" -> "makeNewTypes";
"makeSpecSig" -> "makeTySigs";
"makeSpecSig" -> "measEnv";
"makeSpecSig" -> "strengthenSigs";
"makeSpecSig" -> "x";
"makeSpecTerm" -> "dictionaryVar";
"makeSpecTerm" -> "makeAutoSize";
"makeSpecTerm" -> "makeDecrs";
"makeSpecTerm" -> "makeFail";
"makeSpecTerm" -> "makeLazy";
"makeSpecTerm" -> "makeSize";
"makeSpecTerm" -> "structuralTerm";
"makeSpecVars" -> "measEnv";
"makeSpecVars" -> "resolveStringVar";
"makeSymMap" -> "qualifiedSymbol";
"makeSymMap" -> "srcVars";
"makeSymMap" -> "x";
"makeTExpr" -> "makeVarTExprs";
"makeTExpr" -> "qualifyTermExpr";
"makeTagEnv" -> "callGraphRanks";
"makeTagEnv" -> "makeCallGraph";
"makeTargetSpec" -> "allWarnings";
"makeTargetSpec" -> "bareSpecIso";
"makeTargetSpec" -> "makeGhcSpec";
"makeTargetSpec" -> "noErrors";
"makeTargetSpec" -> "pure";
"makeTargetSpec" -> "targetSpecGetter";
"makeTargetSpec" -> "targetSrcIso";
"makeTargetSpec" -> "unsafeFromLiftedSpec";
"makeTargetSrc" -> "_";
"makeTargetSrc" -> "anormalize";
"makeTargetSrc" -> "debugLog";
"makeTargetSrc" -> "file";
"makeTargetSrc" -> "getFamInstances";
"makeTargetSrc" -> "miModGuts";
"makeTargetSrc" -> "return";
"makeTermEnvs" -> "addObligation";
"makeTermEnvs" -> "bkArrowDeep";
"makeTermEnvs" -> "err";
"makeTermEnvs" -> "fst4";
"makeTermEnvs" -> "makeLexRefa";
"makeTermEnvs" -> "safeFromJust";
"makeTermEnvs" -> "setTRec";
"makeTermEnvs" -> "toRTypeRep";
"makeTermEnvs" -> "x";
"makeTermEnvs" -> "zipWith";
"makeTrans" -> "_";
"makeTrans" -> "appTysAndIds";
"makeTrans" -> "mkFreshIds";
"makeTrans" -> "mkRecBinds";
"makeTrans" -> "mkSubs";
"makeTrans" -> "panic";
"makeTrans" -> "return";
"makeTrans" -> "zipWith";
"makeTyConInfo" -> "mkFInstRTyCon";
"makeTyConInfo" -> "mkRTyCon";
"makeTyConVariance" -> "_";
"makeTyConVariance" -> "dataConsOfTyCon";
"makeTyConVariance" -> "go";
"makeTyConVariance" -> "irrelevantMult";
"makeTyConVariance" -> "makeTyConVariance";
"makeTyConVariance" -> "varSignToVariance";
"makeTyConVariance" -> "zipWith";
"makeTySigs" -> "bareTySigs";
"makeTySigs" -> "makeTExpr";
"makeTySigs" -> "x";
"makeTyThingMap" -> "isLocal";
"makeTyThingMap" -> "qualifiedSymbol";
"makeTyThingMap" -> "srcThings";
"makeTyThingMap" -> "tyThingSymbol";
"makeTyThingMap" -> "x";
"makeTycEnv" -> "knownWiredDataCons";
"makeTycEnv" -> "knownWiredTyCons";
"makeTycEnv" -> "makeTyConInfo";
"makeUnSorted" -> "_";
"makeUnSorted" -> "go";
"makeVarSubst" -> "isWiredInName";
"makeVarSubst" -> "makeSymMap";
"makeVarSubst" -> "mkVarExpr";
"makeVarSubst" -> "okUnqualified";
"makeVarSubst" -> "x";
"makeVarTExprs" -> "x";
"makesub" -> "_";
"makesub" -> "coreToLg";
"makesub" -> "throw";
"makesub" -> "x";
"manyDataCon" -> "manyDataConName";
"manyDataCon" -> "multiplicityTyCon";
"manyDataCon" -> "pcDataCon";
"manyDataConName" -> "manyDataCon";
"manyDataConName" -> "manyDataConKey";
"manyDataConName" -> "mkWiredInDataConName";
"manyDataConTy" -> "manyDataConTyCon";
"manyDataConTyCon" -> "manyDataCon";
"mapAccumM" -> "f";
"mapAccumM" -> "x";
"mapAlt" -> "f";
"mapAlt" -> "mapExpr";
"mapArgumens" -> "_";
"mapArgumens" -> "and";
"mapArgumens" -> "go";
"mapArgumens" -> "isClassType";
"mapArgumens" -> "isEqType";
"mapArgumens" -> "panic";
"mapArgumens" -> "sourcePosSrcSpan";
"mapArgumens" -> "toRSort";
"mapArgumens" -> "toRTypeRep";
"mapArgumens" -> "x";
"mapArgumens" -> "zipWith";
"mapBdM" -> "_";
"mapBdM" -> "return";
"mapBdM" -> "splitXRelatedRefs";
"mapBind" -> "_";
"mapBind" -> "f";
"mapBind" -> "mapBind";
"mapBind" -> "mapBindRef";
"mapBindRef" -> "f";
"mapBindRef" -> "mapBind";
"mapBnd" -> "f";
"mapBnd" -> "mapExpr";
"mapBot" -> "f";
"mapBot" -> "mapBot";
"mapBot" -> "mapBotRef";
"mapBot" -> "x";
"mapBotRef" -> "_";
"mapBotRef" -> "f";
"mapBotRef" -> "mapBot";
"mapExpr" -> "_";
"mapExpr" -> "f";
"mapExpr" -> "mapAlt";
"mapExpr" -> "mapBnd";
"mapExpr" -> "mapExpr";
"mapExpr" -> "x";
"mapExprReft" -> "f";
"mapExprReft" -> "mapReft";
"mapExprReft" -> "x";
"mapFourth4" -> "f";
"mapFourth4" -> "x";
"mapFst3" -> "f";
"mapFst3" -> "x";
"mapMWithLog" -> "_";
"mapMWithLog" -> "f";
"mapMWithLog" -> "go";
"mapMWithLog" -> "i";
"mapMWithLog" -> "return";
"mapMWithLog" -> "x";
"mapN" -> "_";
"mapN" -> "f";
"mapN" -> "mapN";
"mapN" -> "x";
"mapNonRec" -> "_";
"mapNonRec" -> "f";
"mapNonRec" -> "mapNonRec";
"mapNonRec" -> "x";
"mapNs" -> "f";
"mapNs" -> "mapN";
"mapPropM" -> "_";
"mapPropM" -> "f";
"mapPropM" -> "liftM";
"mapPropM" -> "liftM2";
"mapPropM" -> "mapPropM";
"mapPropM" -> "mapSndM";
"mapPropM" -> "return";
"mapPropM" -> "x";
"mapRBase" -> "_";
"mapRBase" -> "f";
"mapRBase" -> "ppr_pvar";
"mapRBase" -> "x";
"mapRTAVars" -> "f";
"mapRefM" -> "f";
"mapRefM" -> "liftM";
"mapRefM" -> "mapReftM";
"mapReft" -> "emapReft";
"mapReft" -> "f";
"mapReftM" -> "_";
"mapReftM" -> "f";
"mapReftM" -> "liftM";
"mapReftM" -> "liftM2";
"mapReftM" -> "mapRefM";
"mapReftM" -> "mapReftM";
"mapReftM" -> "mapSndM";
"mapReftM" -> "return";
"mapReftM" -> "x";
"mapRight" -> "_";
"mapRight" -> "f";
"mapRight" -> "x";
"mapSnd3" -> "f";
"mapSnd3" -> "x";
"mapSndM" -> "f";
"mapSndM" -> "x";
"mapThd3" -> "f";
"mapThd3" -> "x";
"mapTyRVar" -> "err";
"mapTyRVar" -> "return";
"mapTyVarValue" -> "f";
"mapTyVarValue" -> "s1";
"mapTyVars" -> "_";
"mapTyVars" -> "err";
"mapTyVars" -> "get";
"mapTyVars" -> "isKind";
"mapTyVars" -> "mapTyRVar";
"mapTyVars" -> "mapTyVars";
"mapTyVars" -> "matchKindArgs\'";
"mapTyVars" -> "put";
"mapTyVars" -> "return";
"mapType" -> "_";
"mapType" -> "f";
"mapType" -> "go";
"mapWithFun" -> "f";
"mapWithFun" -> "x";
"mappendSortFTC" -> "_";
"mappendSortFTC" -> "panic";
"mappendSortFTC" -> "s1";
"mappendSortFTC" -> "x";
"matchImp" -> "i";
"matchKindArgs" -> "_";
"matchKindArgs" -> "go";
"matchKindArgs\'" -> "_";
"matchKindArgs\'" -> "go";
"matchKindArgs\'" -> "isKind";
"matchKindArgs\'" -> "ofType";
"matchMod" -> "go";
"matchMod" -> "isEmptySymbol";
"matchMod" -> "isParentModuleOf";
"matchMod" -> "matchImp";
"matchOn" -> "makeAlt";
"matchOn" -> "tx";
"matchOnExpr" -> "addEnv";
"matchOnExpr" -> "freshVarType";
"matchOnExpr" -> "liftCG";
"matchOnExpr" -> "matchOn";
"matchOnExpr" -> "return";
"matchOnExpr" -> "trueTy";
"matchOnExpr" -> "tx";
"matchTyCon" -> "_";
"matchTyCon" -> "isTuple";
"matchTypes" -> "isProjection";
"matchTypes" -> "safeZipWithError";
"maxCaseExpand" -> "getConfig";
"maxQualParams" -> "getConfig";
"maybeBind" -> "bbindP";
"maybeBind" -> "return";
"maybeDigit" -> "pure";
"maybeEither" -> "_";
"maybeEither" -> "x";
"maybeParen" -> "parens";
"maybePlug" -> "_";
"maybePlug" -> "plugHoles";
"maybeResolveSym" -> "_";
"maybeResolveSym" -> "x";
"maybeTrue" -> "getModName";
"maybeTrue" -> "isFunTy";
"maybeTrue" -> "killHoles";
"maybeTrue" -> "mkStableName";
"maybeTrue" -> "x";
"mbSrcSpan" -> "fmap";
"measEnv" -> "dmapty";
"measEnv" -> "fromListHEnv";
"measEnv" -> "fromListREnv";
"measEnv" -> "higherOrderFlag";
"measEnv" -> "initFEnv";
"measEnv" -> "mkRTyConIAl";
"measEnv" -> "rTypeSort";
"measureCtors" -> "fmap";
"measureDefP" -> "measurePatP";
"measureDefP" -> "return";
"measureFail" -> "panic";
"measureFail" -> "x";
"measureP" -> "measureDefP";
"measureP" -> "rawBodyP";
"measureP" -> "return";
"measureP" -> "tyBindP";
"measureP" -> "tyBodyP";
"measureP" -> "x";
"measurePatP" -> "conPatP";
"measurePatP" -> "consPatP";
"measurePatP" -> "nilPatP";
"measurePatP" -> "nullaryConPatP";
"measurePatP" -> "parens";
"measurePatP" -> "tupPatP";
"measureSpecType" -> "_";
"measureSpecType" -> "f";
"measureSpecType" -> "go";
"measureSpecType" -> "i";
"measureSpecType" -> "isBool";
"measureSpecType" -> "isClassType";
"measureSpecType" -> "mkR";
"measureSpecType" -> "ofType";
"measureSpecType" -> "strengthen";
"measureSpecType" -> "toRTypeRep";
"measureSpecType" -> "x";
"measureToBare" -> "dataConToBare";
"measureToBare" -> "fmap";
"measureToBare" -> "specToBare";
"measureTypeToInv" -> "_";
"measureTypeToInv" -> "isRVar";
"measureTypeToInv" -> "mkInvariant";
"measureTypeToInv" -> "mkReft";
"measureTypeToInv" -> "toRTypeRep";
"measureTypeToInv" -> "uError";
"measureTypeToInv" -> "x";
"meetDataConSpec" -> "dataConSpec\'";
"meetDataConSpec" -> "meetVarTypes";
"meetDataConSpec" -> "x";
"meetListWithPSub" -> "_";
"meetListWithPSub" -> "panic";
"meetListWithPSub" -> "x";
"meetListWithPSubRef" -> "_";
"meetListWithPSubRef" -> "panic";
"meetListWithPSubRef" -> "s1";
"meetListWithPSubRef" -> "x";
"meetListWithPSubs" -> "meetListWithPSub";
"meetListWithPSubsRef" -> "meetListWithPSubRef";
"meetSpans" -> "_";
"meetVarTypes" -> "anyTypeSymbol";
"meetVarTypes" -> "functionComposisionSymbol";
"meetVarTypes" -> "lenLocSymbol";
"meetVarTypes" -> "lq";
"meetWorkWrapRep" -> "_";
"meetWorkWrapRep" -> "pad";
"meetWorkWrapRep" -> "panic";
"meetWorkWrapRep" -> "showPpr";
"meetWorkWrapRep" -> "strengthenRType";
"meetWorkWrapRep" -> "zipWith";
"meets" -> "panic";
"meets" -> "zipWith";
"memberREnv" -> "renvMaps";
"memberREnv" -> "x";
"mergeDataConTypes" -> "f";
"mergeDataConTypes" -> "meetVarTypes";
"mergeDataConTypes" -> "tx";
"mergeDataConTypes" -> "x";
"mergeInputWithCompanion" -> "s1";
"mergecondition" -> "_";
"mergecondition" -> "mergecondition";
"mgNames" -> "fmap";
"mg_dir_imps" -> "getDependenciesModuleNames";
"mgi_namestring" -> "handler";
"mgi_namestring" -> "initial";
"miModGuts" -> "availsToStableNameSet";
"miModGuts" -> "mg_dir_imps";
"minus" -> "x";
"mkAlive" -> "x";
"mkAnnMap" -> "mkAnnMapBinders";
"mkAnnMap" -> "mkAnnMapErr";
"mkAnnMap" -> "mkAnnMapTyp";
"mkAnnMap" -> "mkStatus";
"mkAnnMapBinders" -> "_";
"mkAnnMapBinders" -> "dropModuleNames";
"mkAnnMapBinders" -> "lineCol";
"mkAnnMapBinders" -> "oneLine";
"mkAnnMapBinders" -> "render";
"mkAnnMapBinders" -> "x";
"mkAnnMapErr" -> "_";
"mkAnnMapErr" -> "cinfoErr";
"mkAnnMapTyp" -> "mkAnnMapBinders";
"mkAnnMapTyp" -> "srcSpanStartLoc";
"mkAnonTyConBinders" -> "_";
"mkArrow" -> "f";
"mkArrow" -> "mkUnivs";
"mkBTyCon" -> "x";
"mkBots" -> "_";
"mkBots" -> "ordSrcSpan";
"mkBots" -> "rTypeReft";
"mkClass" -> "mkClassE";
"mkClassBTyCon" -> "x";
"mkClassE" -> "_";
"mkClassE" -> "bareRTyVar";
"mkClassE" -> "makeMethod";
"mkClassE" -> "mkConstr";
"mkClassE" -> "plugSrc";
"mkClassE" -> "rCls";
"mkClassE" -> "rFun";
"mkClassE" -> "rVar";
"mkClassE" -> "return";
"mkClassE" -> "unClass";
"mkConsPat" -> "_";
"mkConsPat" -> "x";
"mkConstr" -> "_";
"mkConstr" -> "bkUniv";
"mkConstr" -> "dropUniv";
"mkConstr" -> "fmap";
"mkDType" -> "_";
"mkDType" -> "cmpLexRef";
"mkDType" -> "f";
"mkDType" -> "mkDType";
"mkDType" -> "mkDecrFun";
"mkDType" -> "strengthen";
"mkDType" -> "uTop";
"mkDType" -> "x";
"mkDecrFun" -> "_";
"mkDecrFun" -> "f";
"mkDecrFun" -> "isSizeable";
"mkDecrFun" -> "lenLocSymbol";
"mkDecrFun" -> "panic";
"mkDecrFun" -> "szFun";
"mkDepGraphNode" -> "isHomeModule";
"mkDepGraphNode" -> "modSummaryImports";
"mkError" -> "sourcePosSrcSpan";
"mkError" -> "x";
"mkFInstRTyCon" -> "famInstArgs";
"mkFInstRTyCon" -> "typeSort";
"mkFreshIds" -> "return";
"mkFreshIds" -> "setIdTRecBound";
"mkFreshIds" -> "x";
"mkFunInfo" -> "x";
"mkFunTy" -> "_";
"mkGraph" -> "fmap";
"mkIntExprInt" -> "_";
"mkInvariant" -> "mkReft";
"mkInvariant" -> "strengthen";
"mkInvariant" -> "x";
"mkLit" -> "_";
"mkLit" -> "mkC";
"mkLit" -> "mkI";
"mkLit" -> "mkR";
"mkLit" -> "mkS";
"mkLocalVar" -> "_";
"mkLongErrAt" -> "fromPJDoc";
"mkLongErrAt" -> "panic";
"mkLongErrAt" -> "showPpr";
"mkLongErrAt" -> "showSDoc";
"mkLongErrAt" -> "showSDocDump";
"mkLongErrAt" -> "sourceName";
"mkLongErrAt" -> "srcSpan";
"mkM" -> "panic";
"mkMSpec" -> "checkDuplicateMeasure";
"mkMeasureDCon" -> "measureCtors";
"mkMeasureDCon" -> "mkMeasureDCon_";
"mkMeasureDCon_" -> "fmap";
"mkMeasureDCon_" -> "tx";
"mkMeasureSort" -> "tx";
"mkNilPat" -> "_";
"mkOpts" -> "gHC_VERSION";
"mkOpts" -> "getIncludeDir";
"mkOpts" -> "return";
"mkOutput" -> "applySolution";
"mkOutput" -> "closeAnnots";
"mkOutput" -> "mkBots";
"mkOutput" -> "rtypeDoc";
"mkOutput" -> "tidySpecType";
"mkPQual" -> "insertSEnv";
"mkPQual" -> "mkQual";
"mkPQual" -> "rTypeSort";
"mkProductTy" -> "deepSplitProductType_maybe";
"mkProductTy" -> "f";
"mkProductTy" -> "irrelevantMult";
"mkProductTy" -> "ofType";
"mkProductTy" -> "pure";
"mkProductTy" -> "third4";
"mkProductTy" -> "x";
"mkPromotedBTyCon" -> "x";
"mkPropositionType" -> "err";
"mkPropositionType" -> "isPropBareType";
"mkPropositionType" -> "toRTypeRep";
"mkPropositionType" -> "x";
"mkQual" -> "_";
"mkQual" -> "envSort";
"mkQual" -> "zipWith";
"mkRApp" -> "refAppTyToFun";
"mkRApp" -> "subsFrees";
"mkRApp" -> "toRSort";
"mkRAppTy" -> "_";
"mkRAppTy" -> "panic";
"mkRTProp" -> "ofRSort";
"mkRTProp" -> "pvArgs";
"mkRTProp" -> "pvType";
"mkRTProp" -> "strengthen";
"mkRTyCon" -> "_";
"mkRTyCon" -> "mkTyConInfo";
"mkRTyCon" -> "rVar";
"mkRTyCon" -> "subts";
"mkRTyCon" -> "tyConTyVarsDef";
"mkRTyConIAl" -> "fmap";
"mkRTyConIAl" -> "mkRTyConInv";
"mkRTyConInv" -> "_";
"mkRTyConInv" -> "bkUniv";
"mkRTyConInv" -> "go";
"mkRTyConInv" -> "isRVar";
"mkRTyConInv" -> "strip";
"mkRTyConInv" -> "thrd3";
"mkRTyConInv" -> "toRSort";
"mkRecBinds" -> "f";
"mkRecBinds" -> "x";
"mkReft" -> "_";
"mkReft" -> "stripRTypeBase";
"mkReft" -> "subst";
"mkReft" -> "x";
"mkSpec" -> "_";
"mkSpec" -> "i";
"mkSpec" -> "qualifySpec";
"mkSpecDecs" -> "_";
"mkSpecDecs" -> "quantifyFreeRTy";
"mkSpecDecs" -> "return";
"mkSpecDecs" -> "simplifyBareType";
"mkSpecDecs" -> "symbolName";
"mkStableModule" -> "apiComments";
"mkStableModule" -> "desugarModule";
"mkStableModule" -> "findModule";
"mkStableModule" -> "getModSummary";
"mkStableModule" -> "getModuleGraph";
"mkStableModule" -> "isBootInterface";
"mkStableModule" -> "lookupGlobalName";
"mkStableModule" -> "lookupModSummary";
"mkStableModule" -> "lookupModule";
"mkStableModule" -> "lookupName";
"mkStableModule" -> "modInfoLookupName";
"mkStableModule" -> "moduleInfoTc";
"mkStableModule" -> "parseModule";
"mkStableModule" -> "pure";
"mkStableModule" -> "typecheckModule";
"mkStatus" -> "_";
"mkStructCall" -> "isDecreasing";
"mkStructCall" -> "unStructInfo";
"mkSubC" -> "splitSortedReft";
"mkSubC" -> "tag";
"mkSubs" -> "appTysAndIds";
"mkSubs" -> "s1";
"mkTVarInfo" -> "isValKind";
"mkTcData" -> "deserialiseLiquidLib";
"mkTcData" -> "extractSpecComments";
"mkTcData" -> "partitionMaybe";
"mkTcData" -> "pluginAbort";
"mkTcData" -> "serialiseLiquidLib";
"mkTermError" -> "ap";
"mkTermError" -> "f";
"mkTermError" -> "fmap";
"mkTermError" -> "liftM";
"mkTermError" -> "pure";
"mkTermError" -> "showPpr";
"mkTermError" -> "x";
"mkTupPat" -> "tupDataCon";
"mkTyArg" -> "eqType\'";
"mkTyConInfo" -> "f";
"mkTyConInfo" -> "makeTyConVariance";
"mkUserLocal" -> "srcSpan";
"mkUserStyle" -> "_";
"mkVar" -> "freshName";
"mkVar" -> "i";
"mkVar" -> "x";
"mkVarExpr" -> "isFunVar";
"mkVarExpr" -> "varFunSymbol";
"mkWarning" -> "emptyDiagnostics";
"mkps" -> "_";
"mkps" -> "f";
"mkps" -> "mkps_";
"mkps" -> "panic";
"mkps" -> "x";
"mkps_" -> "_";
"mkps_" -> "f";
"mkps_" -> "mkps_";
"mkps_" -> "panic";
"mkps_" -> "x";
"mmonoPredicateP" -> "monoPredicate1P";
"mmonoPredicateP" -> "return";
"modInfoLookupName" -> "return";
"modNotLoadedError" -> "parens";
"modNotLoadedError" -> "showSDoc";
"modSummaryHsFile" -> "panic";
"modSummaryHsFile" -> "showPpr";
"modSummaryImports" -> "importDeclModule";
"modificationTime" -> "f";
"modificationTime" -> "handler";
"modificationTime" -> "return";
"moduleFile" -> "isBootInterface";
"moduleFile" -> "isBootSummary";
"moduleFile" -> "return";
"moduleFiles" -> "moduleFile";
"moduleInfoTc" -> "pure";
"monoPredicate1P" -> "parens";
"monoPredicate1P" -> "pdVar";
"monoPredicate1P" -> "predVarUseP";
"monoPredicate1P" -> "return";
"monoPredicateP" -> "monoPredicate1P";
"monoPredicateP" -> "return";
"multiplicityTyCon" -> "manyDataCon";
"multiplicityTyCon" -> "multiplicityTyConName";
"multiplicityTyCon" -> "pcTyCon";
"multiplicityTyConName" -> "multiplicityTyCon";
"multiplicityTyConName" -> "multiplicityTyConKey";
"mungeNames" -> "_";
"mungeNames" -> "f";
"mungeNames" -> "stripParens";
"myAsmSig" -> "err";
"myAsmSig" -> "impossible";
"myAsmSig" -> "nameDistance";
"myAsmSig" -> "takeUnique";
"myRTEnv" -> "isLocInFile";
"myRTEnv" -> "mkRTE";
"myRTEnv" -> "normalizeBareAlias";
"myRTEnv" -> "x";
"mySrcThings" -> "dataConVars";
"mySrcThings" -> "srcTyCons";
"mySrcThings" -> "srcVars";
"mySrcThings" -> "x";
"nameSetToStableNameSet" -> "fromList";
"nameSetToStableNameSet" -> "mkStableName";
"namedCircleP" -> "_";
"namedCircleP" -> "bareArgP";
"namedCircleP" -> "dummyBindP";
"namedCircleP" -> "dummyP";
"namedCircleP" -> "lowerIdTail";
"namedLocSymbol" -> "locNamedThing";
"namedPanic" -> "panic";
"namedPanic" -> "x";
"needQuals" -> "getConfig";
"neq" -> "x";
"nests" -> "empty";
"newPrune" -> "exportedVars";
"newPrune" -> "ignoreCoreBinds";
"newPrune" -> "maybeEither";
"newPrune" -> "return";
"nextBinds" -> "_";
"nextBinds" -> "nextBinds";
"nilPatP" -> "mkNilPat";
"nilPatP" -> "pure";
"nlzP" -> "_";
"nlzP" -> "nlzP";
"nlzP" -> "panic";
"noDummySyms" -> "_";
"noDummySyms" -> "fromRTypeRep";
"noDummySyms" -> "i";
"noDummySyms" -> "subst";
"noDummySyms" -> "toRTypeRep";
"noDummySyms" -> "zipWith";
"noHoles" -> "_";
"noHoles" -> "and";
"noHoles" -> "foldReft";
"noHoles" -> "from\'";
"noHoles" -> "get";
"noHoles" -> "hasHole";
"noHoles" -> "put";
"noHoles" -> "to\'";
"noTyVars" -> "exportedVarSymbol";
"noTyVars" -> "localVarSymbol";
"noTyVars" -> "pprDoc";
"noTyVars" -> "qualifiedNameSymbol";
"noTyVars" -> "uniqueHash";
"noWhere" -> "return";
"noWhere" -> "tyVarIdP";
"nonRecCoreBinds" -> "_";
"nonRecCoreBinds" -> "go";
"nonRecCoreBinds" -> "x";
"nonTrivial" -> "_";
"nonTrivials" -> "nonTrivial";
"nonTrivials" -> "x";
"normalize" -> "_";
"normalize" -> "at";
"normalize" -> "expandDefaultCase";
"normalize" -> "extendAnfEnv";
"normalize" -> "freshNormalVar";
"normalize" -> "incrCaseDepth";
"normalize" -> "lift";
"normalize" -> "liftM";
"normalize" -> "lookupAnfEnv";
"normalize" -> "normalize";
"normalize" -> "normalizeBind";
"normalize" -> "normalizeName";
"normalize" -> "normalizePattern";
"normalize" -> "normalizePds";
"normalize" -> "normalizeVV";
"normalize" -> "return";
"normalize" -> "stitch";
"normalize" -> "tt";
"normalize" -> "x";
"normalizeBareAlias" -> "fmap";
"normalizeBareAlias" -> "mapRTAVars";
"normalizeBind" -> "add";
"normalizeBind" -> "normalize";
"normalizeBind" -> "stitch";
"normalizeBind" -> "x";
"normalizeField" -> "i";
"normalizeField" -> "makeDataConSelector";
"normalizeField" -> "x";
"normalizeForAllTys" -> "_";
"normalizeLiteral" -> "add";
"normalizeLiteral" -> "freshNormalVar";
"normalizeLiteral" -> "lift";
"normalizeLiteral" -> "return";
"normalizeLiteral" -> "x";
"normalizeName" -> "_";
"normalizeName" -> "add";
"normalizeName" -> "at";
"normalizeName" -> "freshNormalVar";
"normalizeName" -> "lift";
"normalizeName" -> "lookupAnfEnv";
"normalizeName" -> "normalize";
"normalizeName" -> "normalizeLiteral";
"normalizeName" -> "normalizeName";
"normalizeName" -> "return";
"normalizeName" -> "shouldNormalize";
"normalizeName" -> "tt";
"normalizeName" -> "x";
"normalizePattern" -> "_";
"normalizePattern" -> "normalize";
"normalizePattern" -> "return";
"normalizePattern" -> "stitch";
"normalizePds" -> "addPds";
"normalizePds" -> "nlzP";
"normalizeTopBind" -> "normalizeBind";
"normalizeTopBind" -> "normalizeTyVars";
"normalizeTopBind" -> "return";
"normalizeTopBind" -> "stitch";
"normalizeTopBind" -> "x";
"normalizeTuples" -> "_";
"normalizeTuples" -> "go";
"normalizeTuples" -> "mapThd3";
"normalizeTuples" -> "substTuple";
"normalizeTuples" -> "unTickExpr";
"normalizeTuples" -> "x";
"normalizeTyVars" -> "normalizeForAllTys";
"normalizeTyVars" -> "normalizeTyVars";
"normalizeTyVars" -> "subst";
"normalizeTyVars" -> "x";
"normalizeVV" -> "_";
"normalizeVV" -> "rTypeValueVar";
"normalizeVV" -> "return";
"normalizeVV" -> "shiftVV";
"normalizeVV" -> "x";
"notStructural" -> "_";
"notStructural" -> "isDecreasing\'";
"notStructural" -> "structCheck";
"notStructural" -> "x";
"notrace" -> "_";
"notrace" -> "notrace";
"notrace" -> "trueTy";
"notracePpr" -> "_";
"notracePpr" -> "x";
"nubHashLast" -> "f";
"nubHashLast" -> "x";
"nubHashLastM" -> "f";
"nubHashOn" -> "f";
"nullaryConPatP" -> "dataConNameP";
"nullaryConPatP" -> "nilPatP";
"ofBDataCtor" -> "_";
"ofBDataCtor" -> "dataConResultTy";
"ofBDataCtor" -> "getConfig";
"ofBDataCtor" -> "isGadt";
"ofBDataCtor" -> "keepPredType";
"ofBDataCtor" -> "normalizeField";
"ofBDataCtor" -> "qualifyDataCtor";
"ofBDataCtor" -> "zipWith";
"ofBDataDecl" -> "_";
"ofBDataDecl" -> "checkDataDecl";
"ofBDataDecl" -> "dataNameSymbol";
"ofBDataDecl" -> "err";
"ofBDataDecl" -> "f";
"ofBDataDecl" -> "getDnTyCon";
"ofBDataDecl" -> "getPsSig";
"ofBDataDecl" -> "is";
"ofBDataDecl" -> "ofBDataCtor";
"ofBDataDecl" -> "panic";
"ofBDataDecl" -> "uError";
"ofBDataDecl" -> "varSignToVariance";
"ofBPVar" -> "fmap";
"ofBPVar" -> "ofBSort";
"ofBRType" -> "bareTCApp";
"ofBRType" -> "dropTyVarInfo";
"ofBRType" -> "f";
"ofBRType" -> "go";
"ofBRType" -> "mapTyVarValue";
"ofBRType" -> "matchTyCon";
"ofBRType" -> "ofBPVar";
"ofBRType" -> "ofBSortE";
"ofBRType" -> "pure";
"ofBRType" -> "rPropP";
"ofBRType" -> "rTypeValueVar";
"ofBRType" -> "return";
"ofBRType" -> "x";
"ofBSort" -> "ofBSortE";
"ofBSortE" -> "ofBRType";
"ofBareType" -> "ofBareTypeE";
"ofBareTypeE" -> "ofBRType";
"ofBareTypeE" -> "resolveReft";
"ofLitType" -> "_";
"ofLitType" -> "holeLit";
"ofRSort" -> "fmap";
"ofType" -> "ofLitType";
"ofType" -> "ofType_";
"ofType" -> "rApp";
"ofType" -> "rTVar";
"ofType" -> "rVar";
"ofType\'" -> "fixTy";
"ofType\'" -> "ofType";
"ofType_" -> "_";
"ofType_" -> "go";
"ofType_" -> "ofType_";
"ofType_" -> "rFun";
"ofType_" -> "tx";
"ofType_" -> "x";
"okUnqualified" -> "_";
"okUnqualified" -> "go";
"okUnqualified" -> "x";
"one" -> "addLibDependencies";
"one" -> "allDeps";
"one" -> "at";
"one" -> "cachedSpecModule";
"one" -> "cachedSpecStableModuleId";
"one" -> "downcastSpec";
"one" -> "fromCached";
"one" -> "is";
"one" -> "libDeps";
"one" -> "libTarget";
"one" -> "mergeInputWithCompanion";
"one" -> "mkCompanionSpec";
"one" -> "mkInputSpec";
"one" -> "mkLiquidLib";
"one" -> "mkTcData";
"one" -> "one";
"one" -> "toCached";
"one" -> "toUnoptimised";
"oneClassArg" -> "bTyVar";
"oneClassArg" -> "classBTyConP";
"oneClassArg" -> "fmap";
"oneClassArg" -> "return";
"oneClassArg" -> "x";
"optBindP" -> "return";
"optBindP" -> "x";
"ordNub" -> "x";
"ordSrcSpan" -> "_";
"orderTargets" -> "configureGhcTargets";
"orderTargets" -> "modSummaryHsFile";
"orderTargets" -> "return";
"orderTargets" -> "runLiquidGhc";
"outerScTr" -> "_";
"outerScTr" -> "go";
"outerScTr" -> "isCaseArg";
"outerScTr" -> "mapNonRec";
"outerScTr" -> "x";
"pApp" -> "pappSym";
"pToRef" -> "pApp";
"pVartoRConc" -> "pApp";
"pad" -> "_";
"pad" -> "f";
"pad" -> "panic";
"pandocPreProc" -> "strip";
"pandocPreProc" -> "x";
"panic" -> "panicDoc";
"panicDataCon" -> "panicError";
"panicError" -> "empty";
"panicError" -> "fmap";
"panicError" -> "ppError";
"panicError" -> "ppSpecTypeErr";
"panicFieldNumMismatch" -> "panicDataCon";
"panicUnbound" -> "canRewrite";
"panicUnbound" -> "cgInfoFInfo";
"panicUnbound" -> "fixConfig";
"panicUnbound" -> "getLocation";
"panicUnbound" -> "refinementEQs";
"panicUnbound" -> "x";
"pappSort" -> "predFTyCon";
"paren" -> "paren";
"parseErrorBundleToErrors" -> "_";
"parseErrorBundleToErrors" -> "parseErrorError";
"parseErrorError" -> "sourceName";
"parseErrorError" -> "sourcePosSrcSpan";
"parseLines" -> "_";
"parseLines" -> "f";
"parseLines" -> "i";
"parseLines" -> "line";
"parseLines" -> "panic";
"parseLines" -> "parseLines";
"parseLines" -> "ppAnnotErr";
"parseLines" -> "ppAnnotTyp";
"parseLines" -> "x";
"parseLog" -> "delimiter";
"parseLog" -> "file";
"parseLog" -> "fmap";
"parseLog" -> "getEpochTime";
"parseLog" -> "return";
"parseLog" -> "splitHeader";
"parseModule" -> "return";
"parsePragma" -> "defConfig";
"parsePragma" -> "withPragma";
"parseSpecFile" -> "file";
"parseSpecFile" -> "panic";
"parseSpecFile" -> "pure";
"parseSpecFile" -> "specSpecificationP";
"parseSpecFile" -> "x";
"parseSymbolToLogic" -> "f";
"parseSymbolToLogic" -> "initPStateWithList";
"parseSymbolToLogic" -> "mapRight";
"parseSymbolToLogic" -> "parseWithError";
"parseSymbolToLogic" -> "toLogicP";
"parseTest\'" -> "initPStateWithList";
"partition" -> "f";
"partition" -> "partition";
"partition" -> "zipWith";
"partitionArgs" -> "config";
"partitionLocalBinds" -> "localKey";
"partitionLocalBinds" -> "measureToBare";
"partitionLocalBinds" -> "specToBare";
"partitionMaybe" -> "f";
"partitionMaybe" -> "x";
"partitionPs" -> "isPApp";
"partitionPs" -> "partition";
"partitionPs" -> "toUsedPVars";
"pattern" -> "_";
"pattern" -> "f";
"pattern" -> "fromUnhelpfulReason";
"pattern" -> "isManyDataConTy";
"pattern" -> "manyDataConTy";
"pattern" -> "toUnhelpfulReason";
"pattern" -> "var";
"patternFlag" -> "getConfig";
"pay" -> "x";
"pcDataCon" -> "mkDataConWorkerName";
"pcTyCon" -> "mkAnonTyConBinders";
"pdAnd" -> "pvars";
"pdVar" -> "uPVar";
"pdVarReft" -> "pdVar";
"pickOneA" -> "_";
"pickOneA" -> "x";
"plainRTyConPVars" -> "rTyConPVs";
"plotCompareData" -> "fileOptions";
"plotCompareData" -> "fmap";
"plotCompareData" -> "options";
"plotCompareTimeData" -> "line";
"plotCompareTimeData" -> "lineColor1";
"plotCompareTimeData" -> "lineColor2";
"plotCompareTimeData" -> "plotCompareData";
"plotCompareTimeData" -> "pointColor1";
"plotCompareTimeData" -> "pointColor2";
"plotData" -> "fileOptions";
"plotData" -> "fmap";
"plotData" -> "options";
"plotSuccessData" -> "fmap";
"plotSuccessData" -> "line";
"plotSuccessData" -> "plotData";
"plotTimeData" -> "line";
"plotTimeData" -> "lineColor1";
"plotTimeData" -> "plotData";
"plotTimeData" -> "pointColor1";
"plugHoles" -> "_";
"plugHoles" -> "plugHoles_new";
"plugHoles" -> "plugHoles_old";
"plugHoles" -> "x";
"plugHoles_new" -> "bkUnivClass";
"plugHoles_new" -> "err";
"plugHoles_new" -> "f";
"plugHoles_new" -> "goPlug";
"plugHoles_new" -> "mkArrow";
"plugHoles_new" -> "ofType";
"plugHoles_new" -> "rFun";
"plugHoles_new" -> "rTyVar";
"plugHoles_new" -> "subRTVar";
"plugHoles_new" -> "subts";
"plugHoles_new" -> "toRSort";
"plugHoles_new" -> "toType";
"plugHoles_new" -> "tx";
"plugHoles_new" -> "updateRTVar";
"plugHoles_new" -> "x";
"plugHoles_old" -> "_";
"plugHoles_old" -> "bkUnivClass";
"plugHoles_old" -> "err";
"plugHoles_old" -> "f";
"plugHoles_old" -> "fmap";
"plugHoles_old" -> "goPlug";
"plugHoles_old" -> "mapExprReft";
"plugHoles_old" -> "mkArrow";
"plugHoles_old" -> "ofType";
"plugHoles_old" -> "rFun";
"plugHoles_old" -> "rTyVar";
"plugHoles_old" -> "subts";
"plugHoles_old" -> "toRSort";
"plugHoles_old" -> "toType";
"plugHoles_old" -> "updateRTVar";
"plugHoles_old" -> "x";
"plugMany" -> "bkArrow";
"plugMany" -> "f";
"plugMany" -> "killHoles";
"plugMany" -> "plugHoles";
"plugMany" -> "rFun";
"plugMany" -> "x";
"plugSrc" -> "_";
"plugSrc" -> "getConfig";
"plugin" -> "customDynFlags";
"plugin" -> "mkWarning";
"plugin" -> "printWarning";
"plugin" -> "pure";
"plugin" -> "typecheckHook";
"plus" -> "x";
"plusLoc" -> "is";
"posttag" -> "i";
"powersetUpTo" -> "_";
"powersetUpTo" -> "i";
"ppAlias" -> "pprints";
"ppAllExpr" -> "dot";
"ppAllExpr" -> "ppr_dbind";
"ppAllExpr" -> "ppr_rtype";
"ppAllExpr" -> "x";
"ppAnnotTyp" -> "x";
"ppAsserts" -> "splice";
"ppComm" -> "_";
"ppComm" -> "fmap";
"ppComm" -> "isGadt";
"ppComm" -> "parens";
"ppContext" -> "empty";
"ppContext" -> "nests";
"ppContext" -> "pprintBind";
"ppContext" -> "vsep";
"ppEnv" -> "ppEnvDef";
"ppEnvShort" -> "x";
"ppEqs" -> "parens";
"ppEqs" -> "x";
"ppError" -> "ppError\'";
"ppError\'" -> "_";
"ppError\'" -> "blankLine";
"ppError\'" -> "empty";
"ppError\'" -> "err";
"ppError\'" -> "hint";
"ppError\'" -> "i";
"ppError\'" -> "is";
"ppError\'" -> "parens";
"ppError\'" -> "ppFull";
"ppError\'" -> "ppNames";
"ppError\'" -> "ppPropInContext";
"ppError\'" -> "ppReqInContext";
"ppError\'" -> "ppReqModelInContext";
"ppError\'" -> "ppSrcSpans";
"ppError\'" -> "ppTicks";
"ppError\'" -> "sepVcat";
"ppError\'" -> "totalityType";
"ppError\'" -> "x";
"ppExists" -> "dot";
"ppExists" -> "ppr_dbind";
"ppExists" -> "ppr_rtype";
"ppExists" -> "x";
"ppFull" -> "_";
"ppFull" -> "empty";
"ppList" -> "blankLine";
"ppList" -> "sepVcat";
"ppMethods" -> "_";
"ppMethods" -> "f";
"ppMethods" -> "fmap";
"ppMethods" -> "parens";
"ppMethods" -> "ppRISig";
"ppMethods" -> "x";
"ppNames" -> "ppList";
"ppOblig" -> "var";
"ppPat" -> "_";
"ppPropInContext" -> "blankLine";
"ppPropInContext" -> "f";
"ppPropInContext" -> "nests";
"ppPropInContext" -> "sepVcat";
"ppPropInContext" -> "unpackRealSrcSpan";
"ppPspec" -> "_";
"ppPspec" -> "f";
"ppPspec" -> "ppAsserts";
"ppPspec" -> "splice";
"ppPspec" -> "x";
"ppRISig" -> "ppMethods";
"ppRISig" -> "x";
"ppRefArgs" -> "_";
"ppRefArgs" -> "empty";
"ppRefArgs" -> "ppRefSym";
"ppRefSym" -> "_";
"ppRefSym" -> "bindings";
"ppRefSym" -> "coreVisitor";
"ppRefSym" -> "exprFreeVars";
"ppRefSym" -> "exprLetVars";
"ppRefSym" -> "exprLiterals";
"ppRefSym" -> "exprReadVars";
"ppRefSym" -> "extendEnv";
"ppRefSym" -> "x";
"ppReftPs" -> "_";
"ppReftPs" -> "angleBrackets";
"ppReftPs" -> "empty";
"ppReftPs" -> "ppEnv";
"ppReftPs" -> "ppr_ref";
"ppReqInContext" -> "blankLine";
"ppReqInContext" -> "nests";
"ppReqInContext" -> "ppContext";
"ppReqInContext" -> "sepVcat";
"ppReqModelInContext" -> "blankLine";
"ppReqModelInContext" -> "nests";
"ppReqModelInContext" -> "pprintModel";
"ppReqModelInContext" -> "sepVcat";
"ppReqModelInContext" -> "vsep";
"ppSpecType" -> "_";
"ppSpecType" -> "combineProofsName";
"ppSpecType" -> "dcPrefix";
"ppSpecType" -> "dictionaryBind";
"ppSpecType" -> "dictionaryTyVar";
"ppSpecType" -> "dictionaryVar";
"ppSpecType" -> "fmap";
"ppSpecType" -> "isDerivedInstance";
"ppSpecType" -> "isWiredIn";
"ppSpecType" -> "isWiredInName";
"ppSpecType" -> "proofTyConName";
"ppSpecType" -> "render";
"ppSpecType" -> "rtypeDoc";
"ppSpecType" -> "tidySpecType";
"ppSpecType" -> "wiredDataCons";
"ppSpecType" -> "wiredSortedSyms";
"ppSpecType" -> "wiredTyCons";
"ppSpecType" -> "x";
"ppSpecTypeErr" -> "ppSpecType";
"ppSrcSpans" -> "ppList";
"ppTicks" -> "ticks";
"ppTy_ureft" -> "isTauto_ureft";
"ppTy_ureft" -> "ppr_reft";
"pprAnnInfoBind" -> "_";
"pprAnnInfoBind" -> "empty";
"pprAnnInfoBind" -> "pprDoc";
"pprAnnInfoBind" -> "pprXOT";
"pprAnnInfoBind" -> "render";
"pprAnnInfoBinds" -> "pprAnnInfoBind";
"pprDoc" -> "sDocDoc";
"pprRealSrcSpan" -> "parens";
"pprSrcSpan" -> "_";
"pprSrcSpan" -> "pprRealSrcSpan";
"pprXOT" -> "_";
"pprXOT" -> "ppAlias";
"pprXOT" -> "rtypeDoc";
"pprXOT" -> "x";
"ppr_cls" -> "dropModuleNames";
"ppr_cls" -> "ppr_rtype";
"ppr_cls" -> "render";
"ppr_dbind" -> "ppr_rtype";
"ppr_dbind" -> "x";
"ppr_forall" -> "_";
"ppr_forall" -> "angleBrackets";
"ppr_forall" -> "bkClass";
"ppr_forall" -> "dot";
"ppr_forall" -> "empty";
"ppr_forall" -> "fromRTypeRep";
"ppr_forall" -> "maybeParen";
"ppr_forall" -> "parens";
"ppr_forall" -> "ppr_cls";
"ppr_forall" -> "ppr_pvar_def";
"ppr_forall" -> "ppr_rtvar_def";
"ppr_forall" -> "ppr_rtype";
"ppr_forall" -> "toRTypeRep";
"ppr_pvar" -> "_";
"ppr_pvar" -> "f";
"ppr_pvar" -> "fmap";
"ppr_pvar" -> "x";
"ppr_pvar_def" -> "_";
"ppr_pvar_def" -> "ppr_pvar_kind";
"ppr_pvar_def" -> "ppr_pvar_sort";
"ppr_pvar_kind" -> "_";
"ppr_pvar_kind" -> "panic";
"ppr_pvar_kind" -> "ppr_name";
"ppr_pvar_kind" -> "ppr_pvar_sort";
"ppr_pvar_sort" -> "ppr_rtype";
"ppr_ref" -> "ppRefArgs";
"ppr_reft" -> "_";
"ppr_reft" -> "angleBrackets";
"ppr_reft" -> "emapExprArg";
"ppr_reft" -> "emapReft";
"ppr_reft" -> "f";
"ppr_reft" -> "foldReft";
"ppr_reft" -> "mapReft";
"ppr_reft" -> "pToRef";
"ppr_reft" -> "panic";
"ppr_reft" -> "ppEnv";
"ppr_reft" -> "subst";
"ppr_reft" -> "todo";
"ppr_rsubtype" -> "init";
"ppr_rsubtype" -> "ppr_rtype";
"ppr_rsubtype" -> "x";
"ppr_rty_fun" -> "brkFun";
"ppr_rty_fun" -> "ppr_dbind";
"ppr_rty_fun" -> "ppr_rtype";
"ppr_rtype" -> "_";
"ppr_rtype" -> "empty";
"ppr_rtype" -> "isTuple";
"ppr_rtype" -> "maybeParen";
"ppr_rtype" -> "parens";
"ppr_rtype" -> "ppAllExpr";
"ppr_rtype" -> "ppExists";
"ppr_rtype" -> "ppReftPs";
"ppr_rtype" -> "ppTyConB";
"ppr_rtype" -> "ppr_forall";
"ppr_rtype" -> "ppr_rsubtype";
"ppr_rtype" -> "ppr_rty_fun";
"ppr_rtype" -> "ppr_rtype";
"ppr_rtype" -> "x";
"pprintAlts" -> "_";
"pprintAlts" -> "i";
"pprintAlts" -> "indent";
"pprintAlts" -> "pprintBody";
"pprintBody" -> "_";
"pprintBody" -> "caseIndent";
"pprintBody" -> "errorExprPp";
"pprintBody" -> "fixApplication";
"pprintBody" -> "i";
"pprintBody" -> "indent";
"pprintBody" -> "pprintAlts";
"pprintBody" -> "pprintBody";
"pprintBody" -> "pprintFormals";
"pprintBody" -> "pprintVar";
"pprintBody" -> "x";
"pprintCBs" -> "_";
"pprintCBs" -> "fromPJDoc";
"pprintCBs" -> "mkLongErrAt";
"pprintCBs" -> "pprDoc";
"pprintCBs" -> "putErrMsg";
"pprintCBs" -> "putWarnMsg";
"pprintCBs" -> "sourceErrors";
"pprintCBs" -> "tidyCBs";
"pprintFormals" -> "_";
"pprintFormals" -> "i";
"pprintFormals" -> "pprintBody";
"pprintFormals" -> "pprintFormals";
"pprintMany" -> "solDelim";
"pprintMany" -> "x";
"pprintSym" -> "symbols";
"pprintSymbol" -> "_";
"pprintSymbol" -> "pprAnnInfoBinds";
"pprintSymbol" -> "pprDoc";
"pprintSymbol" -> "shortModules";
"pprintSymbol" -> "x";
"pprintSymbols" -> "pprintSym";
"pprintSymbols" -> "symbols";
"pprintSymbols" -> "x";
"pprintVar" -> "discardModName";
"pprt_raw" -> "render";
"pprt_raw" -> "rtypeDoc";
"pre" -> "_";
"pre" -> "bIte";
"pre" -> "bsubst";
"pre" -> "i";
"pre" -> "pre";
"pre" -> "x";
"predFTyCon" -> "pprManyOrdered";
"predFTyCon" -> "pprintLongList";
"predFTyCon" -> "pprintSymbol";
"predFTyCon" -> "predName";
"predFTyCon" -> "printError";
"predFTyCon" -> "printWarning";
"predFTyCon" -> "reportErrors";
"predFTyCon" -> "rtypeDoc";
"predMap" -> "rtypePredBinds";
"predRTyCon" -> "predName";
"predRTyCon" -> "symbolRTyCon";
"predType" -> "predName";
"predType" -> "symbolType";
"predTypeDDP" -> "bareTypeP";
"predTypeDDP" -> "bbindP";
"predUReft" -> "dummyReft";
"predVarDefP" -> "bPVar";
"predVarDefP" -> "predVarIdP";
"predVarDefP" -> "propositionSortP";
"predVarDefsP" -> "predVarDefP";
"predVarDefsP" -> "return";
"predVarIdP" -> "tyVarIdP";
"predVarUseP" -> "dummyTyId";
"predVarUseP" -> "funArgsP";
"predVarUseP" -> "return";
"predVarUseP" -> "x";
"predicate1P" -> "bRProp";
"predicate1P" -> "bbaseP";
"predicate1P" -> "monoPredicate1P";
"predicate1P" -> "predUReft";
"predicate1P" -> "rPropP";
"predicate1P" -> "refP";
"predicate1P" -> "return";
"predicate1P" -> "symsP";
"predicatesP" -> "predicate1P";
"predicatesP" -> "return";
"predsUnify" -> "addTyConInfo";
"printError" -> "empty";
"printError" -> "err";
"printError" -> "ppError";
"printError" -> "putErrMsg";
"printLiquidHaskellBanner" -> "copyright";
"printWarning" -> "_";
"printWarning" -> "i";
"printWarning" -> "srcSpan";
"printWarning" -> "srcSpanFSrcSpan";
"processModule" -> "_";
"processModule" -> "addLibDependencies";
"processModule" -> "allErrors";
"processModule" -> "allWarnings";
"processModule" -> "bareSpecIso";
"processModule" -> "checkFilePragmas";
"processModule" -> "debugLog";
"processModule" -> "debugLogs";
"processModule" -> "extractSpecComments";
"processModule" -> "extractSpecQuotes";
"processModule" -> "file";
"processModule" -> "gcatch";
"processModule" -> "hsSpecificationP";
"processModule" -> "ignoreInline";
"processModule" -> "isTarget";
"processModule" -> "keepRawTokenStream";
"processModule" -> "loadDependencies";
"processModule" -> "loadDependenciesOf";
"processModule" -> "loadLiftedSpec";
"processModule" -> "loadModule\'";
"processModule" -> "makeTargetSpec";
"processModule" -> "makeTargetSrc";
"processModule" -> "mkLiquidLib";
"processModule" -> "modSummaryHsFile";
"processModule" -> "noTerm";
"processModule" -> "parseModule";
"processModule" -> "printWarning";
"processModule" -> "processTargetModule";
"processModule" -> "pure";
"processModule" -> "renderModule";
"processModule" -> "return";
"processModule" -> "throw";
"processModule" -> "typecheckModule";
"processModule" -> "updLiftedSpec";
"processModule" -> "withPragmas";
"processModules" -> "go";
"processModules" -> "processModule";
"processTargetModule" -> "_";
"processTargetModule" -> "allErrors";
"processTargetModule" -> "allWarnings";
"processTargetModule" -> "bareSpecIso";
"processTargetModule" -> "file";
"processTargetModule" -> "makeDependencies";
"processTargetModule" -> "makeGhcSrc";
"processTargetModule" -> "makeTargetSpec";
"processTargetModule" -> "printWarning";
"processTargetModule" -> "return";
"processTargetModule" -> "saveLiftedSpec";
"processTargetModule" -> "targetSrcIso";
"processTargetModule" -> "throw";
"processTargetModule" -> "unsafeFromLiftedSpec";
"processTargetModule" -> "withPragmas";
"prodScrutinees" -> "_";
"prodScrutinees" -> "fillOne";
"prodScrutinees" -> "prodScrutinees";
"prodScrutinees" -> "return";
"projectTypes" -> "is";
"projectTypes" -> "return";
"propositionSortP" -> "propositionTypeP";
"propositionSortP" -> "toRSort";
"propositionTypeP" -> "bareTypeP";
"propositionTypeP" -> "mkPropositionType";
"propositionTypeP" -> "return";
"prune" -> "findFeasibles";
"prune" -> "is";
"prune" -> "repeatFix";
"pruneFlag" -> "getConfig";
"pure" -> "x";
"push" -> "showPpr";
"push" -> "spanSrcSpan";
"push" -> "tt";
"push" -> "x";
"put" -> "get";
"putErrMsg" -> "putLogMsg";
"putErrMsg" -> "srcSpan";
"putLogMsg" -> "defaultErrStyle";
"putLogMsg" -> "srcSpan";
"putWarnMsg" -> "defaultErrStyle";
"putWarnMsg" -> "putLogMsg";
"putWarnMsg" -> "srcSpan";
"pvArgs" -> "_";
"pvType" -> "_";
"pvType" -> "and";
"pvType" -> "panic";
"pvType" -> "pdAnd";
"pvType" -> "pdTrue";
"pvType" -> "x";
"pvarRType" -> "_";
"pvarRType" -> "rpredType";
"pvars" -> "_";
"pvars" -> "f";
"pvars" -> "fromString";
"pvars" -> "mapThd3";
"pvars" -> "subst";
"pvars" -> "x";
"pwd" -> "pwd";
"qualifiedDataName" -> "qualifyModName";
"qualifiedImports" -> "i";
"qualifiedImports" -> "qImports";
"qualifiedNameSymbol" -> "fastStringText";
"qualifiedNameSymbol" -> "showPpr";
"qualifiedNameSymbol" -> "showSDoc";
"qualifiedSymbol" -> "splitModuleNameExact";
"qualifyBareSpec" -> "_";
"qualifyBareSpec" -> "f";
"qualifyBareSpec" -> "substEnv";
"qualifyBareSpec" -> "x";
"qualifyDataCtor" -> "_";
"qualifyDataCtor" -> "qualifyField";
"qualifyDataCtor" -> "x";
"qualifyExpand" -> "expand";
"qualifyFTycon" -> "tyConSort";
"qualifyField" -> "isWiredIn";
"qualifyField" -> "qualifyModName";
"qualifyField" -> "x";
"qualifyModName" -> "_";
"qualifyModName" -> "f";
"qualifyModName" -> "fmap";
"qualifyModName" -> "parens";
"qualifyModName" -> "ppEqs";
"qualifyModName" -> "ppMethods";
"qualifyModName" -> "qualifySymbol";
"qualifyModName" -> "srcSpan";
"qualifyModName" -> "subst";
"qualifyModName" -> "x";
"qualifySpec" -> "fmap";
"qualifySpec" -> "qualifySymbol";
"qualifySpec" -> "tx";
"qualifySpec" -> "x";
"qualifySymMap" -> "x";
"qualifySymbol" -> "_";
"qualifySymbol" -> "isParened";
"qualifySymbol" -> "isQualified";
"qualifySymbol" -> "isSplSymbol";
"qualifySymbol" -> "stripParens";
"qualifySymbol" -> "wrapParens";
"qualifySymbol" -> "x";
"qualifyTermExpr" -> "toRTypeRep";
"qualifyTopDummy" -> "dummySourcePos";
"qualifyTopDummy" -> "qualifyTop";
"qualifyingBinders" -> "getConfig";
"qualifyingBinders" -> "scrapeVars";
"qualifyingBinders" -> "specAxiomVars";
"quantifyFreeRTy" -> "freeTyVars";
"quantifyFreeRTy" -> "quantifyRTy";
"quietly" -> "return";
"rApp" -> "tyConRTyCon";
"rCls" -> "defaultTyConInfo";
"rEx" -> "tx";
"rEx" -> "x";
"rHole" -> "uTop";
"rPropP" -> "isClassOrSubClass";
"rPropP" -> "isFractionalClass";
"rPropP" -> "isTuple";
"rPropP" -> "showPpr";
"rTVar" -> "rTVarInfo";
"rTVarInfo" -> "kindToRType";
"rTVarInfo" -> "mkTVarInfo";
"rTVarToBind" -> "_";
"rTVarToBind" -> "go";
"rTyConPropVs" -> "isPropPV";
"rTyConWithPVars" -> "famInstTyConMb";
"rTyConWithPVars" -> "plainRTyConPVars";
"rTyConWithPVars" -> "rTyConPVs";
"rTyVar" -> "i";
"rTypeReft" -> "fmap";
"rTypeReft" -> "stripRTypeBase";
"rTypeSort" -> "f";
"rTypeSort" -> "toType";
"rTypeSort" -> "typeSort";
"rTypeSortExp" -> "toType";
"rTypeSortExp" -> "typeSort";
"rTypeSortedReft" -> "rTypeReft";
"rTypeSortedReft" -> "rTypeSort";
"rTypeSortedReft\'" -> "f";
"rTypeSortedReft\'" -> "rTypeSortedReft";
"rTypeValueVar" -> "rTypeReft";
"rankedThings" -> "f";
"rankedThings" -> "x";
"rawAsmSigs" -> "allAsmSigs";
"rawAsmSigs" -> "myAsmSig";
"rawBodyP" -> "return";
"realSrcSpan" -> "f";
"realSrcSpanSourcePos" -> "file";
"realSrcSpanSourcePos" -> "line";
"realSrcSpanSourcePosE" -> "file";
"realSrcSpanSourcePosE" -> "line";
"realTargets" -> "check";
"realTargets" -> "f";
"realTargets" -> "orderTargets";
"realTargets" -> "return";
"realTargets" -> "skipTarget";
"recSelectorsTy" -> "isExportedVar";
"recSelectorsTy" -> "trueTy";
"recType" -> "_";
"recType" -> "makeRecType";
"recType" -> "toRTypeRep";
"recType" -> "unOCons";
"refAppTyToFun" -> "panic";
"refBindBindP" -> "_";
"refBindBindP" -> "return";
"refBindBindP" -> "uTop";
"refBindBindP" -> "x";
"refDefP" -> "optBindP";
"refDefP" -> "return";
"refDefP" -> "uTop";
"refDefP" -> "x";
"refP" -> "refBindBindP";
"refTopQuals" -> "_";
"refTopQuals" -> "findPVar";
"refTopQuals" -> "insertSEnv";
"refTopQuals" -> "isHole";
"refTopQuals" -> "mkPQual";
"refTopQuals" -> "mkQual";
"refTopQuals" -> "panic";
"refTopQuals" -> "rTypeSortedReft";
"refTopQuals" -> "srcSpan";
"refTopQuals" -> "stripRTypeBase";
"refTopQuals" -> "toRTypeRep";
"refTypeQuals" -> "_";
"refTypeQuals" -> "add";
"refTypeQuals" -> "go";
"refTypeQuals" -> "insertSEnv";
"refTypeQuals" -> "insertsSEnv";
"refTypeQuals" -> "pvarRType";
"refTypeQuals" -> "rTyConPVs";
"refTypeQuals" -> "rTypeSort";
"refTypeQuals" -> "rTypeValueVar";
"refTypeQuals" -> "refTopQuals";
"refTypeQuals" -> "x";
"refTypeQuals" -> "zipWith";
"refasHoleP" -> "hole";
"refasHoleP" -> "return";
"refineWithCtorBody" -> "_";
"refineWithCtorBody" -> "bodyPred";
"refineWithCtorBody" -> "f";
"refineWithCtorBody" -> "panic";
"refineWithCtorBody" -> "showPpr";
"refineWithCtorBody" -> "strengthen";
"refineWithCtorBody" -> "stripRTypeBase";
"refinementEQs" -> "stripRTypeBase";
"refinementEQs" -> "toRTypeRep";
"reflectedTyCons" -> "exactDCFlag";
"reflectedTyCons" -> "isEmbedded";
"reflectedTyCons" -> "reflectedVars";
"reflectedTyCons" -> "varTyCons";
"reflectedVars" -> "fmap";
"refreshArgs" -> "refreshArgsSub";
"refreshArgsSub" -> "fromRTypeRep";
"refreshArgsSub" -> "refreshArgs";
"refreshArgsSub" -> "refreshPs";
"refreshArgsSub" -> "return";
"refreshArgsSub" -> "toRTypeRep";
"refreshArgsSub" -> "zipWith";
"refreshArgsTop" -> "refreshArgsSub";
"refreshArgsTop" -> "return";
"refreshArgsTop" -> "x";
"refreshArgs\'" -> "mapSndM";
"refreshArgs\'" -> "refreshArgs";
"refreshHoles" -> "f";
"refreshHoles" -> "refreshHoles\'";
"refreshHoles\'" -> "hasHole";
"refreshHoles\'" -> "mapReftM";
"refreshHoles\'" -> "noHoles";
"refreshHoles\'" -> "return";
"refreshHoles\'" -> "tx";
"refreshHoles\'" -> "x";
"refreshPs" -> "_";
"refreshPs" -> "f";
"refreshPs" -> "go";
"refreshPs" -> "mapPropM";
"refreshPs" -> "refreshPs";
"refreshPs" -> "return";
"refreshPs" -> "x";
"refreshRef" -> "_";
"refreshRef" -> "f";
"refreshRef" -> "freshSym";
"refreshRef" -> "panic";
"refreshRef" -> "refreshRefType";
"refreshRefType" -> "_";
"refreshRefType" -> "f";
"refreshRefType" -> "rFun";
"refreshRefType" -> "rImpF";
"refreshRefType" -> "rRCls";
"refreshRefType" -> "refreshRef";
"refreshRefType" -> "refreshRefType";
"refreshRefType" -> "return";
"refreshRefType" -> "tx";
"refreshSymbols" -> "refreshSymbol";
"refreshTy" -> "refreshArgs";
"refreshTy" -> "refreshVV";
"refreshVV" -> "refreshVV";
"refreshVV" -> "refreshVVRef";
"refreshVV" -> "return";
"refreshVV" -> "shiftVV";
"refreshVV" -> "x";
"refreshVVRef" -> "refreshVV";
"refreshVVRef" -> "return";
"relevantModules" -> "_";
"relevantModules" -> "getDependenciesModuleNames";
"relevantModules" -> "isBootInterface";
"relevantModules" -> "mkStableModule";
"relevantModules" -> "moduleUnitId";
"removeInfo" -> "x";
"removeInvariant" -> "_";
"removeInvariant" -> "f";
"removeInvariant" -> "i";
"removeInvariant" -> "x";
"renameLocalSig" -> "qualifySymMap";
"renameLocalSig" -> "toRTypeRep";
"renameRTArgs" -> "fmap";
"renameRTArgs" -> "renameRTVArgs";
"renameRTArgs" -> "renameTys";
"renameRTArgs" -> "renameVV";
"renameRTVArgs" -> "i";
"renameRTVArgs" -> "x";
"renameRTVArgs" -> "zipWith";
"renameTys" -> "subts";
"renameVV" -> "x";
"render" -> "gSpanToDeps";
"render" -> "initSrc";
"render" -> "makeFileName";
"render" -> "makePKeys";
"render" -> "renderHtml";
"render" -> "tokeniseWithLoc";
"renderAnnotToken" -> "err";
"renderAnnotToken" -> "renderErrAnnot";
"renderAnnotToken" -> "renderLinAnnot";
"renderAnnotToken" -> "renderTypAnnot";
"renderAnnotToken" -> "x";
"renderDirect" -> "topAndTail";
"renderErrAnnot" -> "_";
"renderHtml" -> "formButton";
"renderHtml" -> "initSrc";
"renderHtml" -> "renderDirect";
"renderHtml" -> "renderPandoc";
"renderHtml" -> "srcDeps";
"renderHtml" -> "tag";
"renderHtml" -> "topAndTail";
"renderHtml" -> "x";
"renderLinAnnot" -> "lineString";
"renderModule" -> "get";
"renderModule" -> "i";
"renderModule" -> "mkStableModule";
"renderModule" -> "moduleUnitId";
"renderModule" -> "pure";
"renderModule" -> "put";
"renderModule" -> "renderModule";
"renderPandoc" -> "renderDirect";
"renderPandoc" -> "renderPandoc\'";
"renderPandoc\'" -> "_";
"renderPandoc\'" -> "checkExitCode";
"renderPandoc\'" -> "cssHTML";
"renderPandoc\'" -> "pandocCmd";
"renderPandoc\'" -> "pandocPreProc";
"renderPandoc\'" -> "writeFilesOrStrings";
"repeatFix" -> "_";
"repeatFix" -> "fillOne";
"repeatFix" -> "fixCands";
"repeatFix" -> "i";
"repeatFix" -> "is";
"repeatFix" -> "isWellTyped";
"repeatFix" -> "repeatFix";
"repeatFix" -> "return";
"repeatFix" -> "structuralCheck";
"replace" -> "i";
"replace" -> "x";
"replaceIrrefutPat" -> "_";
"replaceIrrefutPat" -> "replaceIrrefutPat\'";
"replaceIrrefutPat\'" -> "isIrrefutErrorVar";
"replaceIrrefutPat\'" -> "x";
"replaceN" -> "i";
"replaceN" -> "x";
"replaceNewLine" -> "replaceNewLine";
"replacePreds" -> "_";
"replacePreds" -> "go";
"replacePreds" -> "panic";
"replacePreds" -> "substPred";
"replaceReft" -> "_";
"replaceTop" -> "_";
"replaceTop" -> "replaceReft";
"replaceTuple" -> "_";
"replaceTuple" -> "err";
"replaceTuple" -> "fixCase";
"replaceTuple" -> "go";
"replaceTuple" -> "isVarTup";
"replaceTuple" -> "replaceIrrefutPat";
"replaceTuple" -> "substTuple";
"replaceTuple" -> "x";
"replaceVisitor" -> "_";
"replaceVisitor" -> "addBind";
"replaceVisitor" -> "updSigMap";
"replaceWith" -> "f";
"replaceWith" -> "replaceSubset";
"replaceWith" -> "x";
"reportErrors" -> "addTyConInfo";
"reportErrors" -> "allTyVars";
"reportErrors" -> "appRTyCon";
"reportErrors" -> "applySolution";
"reportErrors" -> "bTyVar";
"reportErrors" -> "bareOfType";
"reportErrors" -> "bareRTyVar";
"reportErrors" -> "classBinds";
"reportErrors" -> "dataConMsReft";
"reportErrors" -> "dataConReft";
"reportErrors" -> "empty";
"reportErrors" -> "err";
"reportErrors" -> "expandProductType";
"reportErrors" -> "famInstArgs";
"reportErrors" -> "famInstTyConType";
"reportErrors" -> "findPVar";
"reportErrors" -> "freeTyVars";
"reportErrors" -> "gApp";
"reportErrors" -> "generalize";
"reportErrors" -> "isBaseTy";
"reportErrors" -> "isDecreasing";
"reportErrors" -> "isNumeric";
"reportErrors" -> "isSizeable";
"reportErrors" -> "isValKind";
"reportErrors" -> "kindToRType";
"reportErrors" -> "makeDecrType";
"reportErrors" -> "makeLexRefa";
"reportErrors" -> "makeNumEnv";
"reportErrors" -> "mapType";
"reportErrors" -> "mkLongErrAt";
"reportErrors" -> "mkTyConInfo";
"reportErrors" -> "normalizePds";
"reportErrors" -> "ofType";
"reportErrors" -> "panic";
"reportErrors" -> "parens";
"reportErrors" -> "pdVar";
"reportErrors" -> "pdVarReft";
"reportErrors" -> "ppError";
"reportErrors" -> "quantifyFreeRTy";
"reportErrors" -> "quantifyRTy";
"reportErrors" -> "rApp";
"reportErrors" -> "rEx";
"reportErrors" -> "rTVarInfo";
"reportErrors" -> "rTyVar";
"reportErrors" -> "rTypeSort";
"reportErrors" -> "rTypeSortedReft";
"reportErrors" -> "rVar";
"reportErrors" -> "shiftVV";
"reportErrors" -> "strengthen";
"reportErrors" -> "strengthenDataConType";
"reportErrors" -> "strengthenRefTypeGen";
"reportErrors" -> "subsTyVar_meet";
"reportErrors" -> "subsTyVar_meet\'";
"reportErrors" -> "subsTyVar_nomeet";
"reportErrors" -> "subsTyVars_meet";
"reportErrors" -> "subsTyVars_nomeet";
"reportErrors" -> "subts";
"reportErrors" -> "subvPredicate";
"reportErrors" -> "subvUReft";
"reportErrors" -> "symbolRTyVar";
"reportErrors" -> "toType";
"reportErrors" -> "tyClasses";
"reportErrors" -> "tyConBTyCon";
"reportErrors" -> "tyConName";
"reportErrors" -> "tyVarsPosition";
"reportErrors" -> "typeSort";
"reportErrors" -> "typeUniqueSymbol";
"reportErrors" -> "uPVar";
"reportErrors" -> "uRType";
"reportErrors" -> "uRTypeGen";
"reportErrors" -> "uRType\'";
"reportErrors" -> "uReft";
"reportErrors" -> "uTop";
"reportErrors" -> "updateRTVar";
"reportResult" -> "annotate";
"reportResult" -> "pure";
"reportResult" -> "render";
"reportResult" -> "reportResultJson";
"reportResult" -> "resDocs";
"reportResult" -> "resultWithContext";
"reportResult" -> "writeCheckVars";
"reportResultJson" -> "annErrors";
"resDocs" -> "_";
"resDocs" -> "cErrToSpanned";
"resDocs" -> "errToFCrash";
"resolveDictionaries" -> "addInstIndex";
"resolveDictionaries" -> "fmap";
"resolveDictionaries" -> "x";
"resolveLocalBinds" -> "coreVisitor";
"resolveLocalBinds" -> "partitionLocalBinds";
"resolveLocalBinds" -> "replace";
"resolveLocalBinds" -> "replaceVisitor";
"resolveLocalBinds" -> "x";
"resolveQParams" -> "go";
"resolveQParams" -> "i";
"resolveQParams" -> "qualifyFTycon";
"resolveQParams" -> "return";
"resolveQParams" -> "s1";
"resolveReft" -> "fixReftTyVars";
"resolveReft" -> "toRTypeRep";
"resolveReft" -> "txParam";
"resolveStringVar" -> "qualifySymbolic";
"resolveTyCons" -> "resolveDecls";
"resolveWith" -> "errResolve";
"resolveWith" -> "f";
"resolveWith" -> "lookupTyThing";
"resolveWith" -> "myTracepp";
"resolveWith" -> "rankedThings";
"resolveWith" -> "x";
"restoreInvariant" -> "is";
"resultTy" -> "toRTypeRep";
"resultWithContext" -> "errorsWithContext";
"resultWithContext" -> "return";
"return" -> "x";
"returnsTuple" -> "_";
"returnsTuple" -> "subgoals";
"rewriteBindWith" -> "rewriteWith";
"rewriteBindWith" -> "x";
"rewriteBinds" -> "fmap";
"rewriteBinds" -> "normalizeTuples";
"rewriteBinds" -> "rewriteBindWith";
"rewriteBinds" -> "simplifyCore";
"rewriteBinds" -> "simplifyPatTuple";
"rewriteBinds" -> "tidyTuples";
"rewriteVarP" -> "locBinderP";
"rewriteWith" -> "_";
"rewriteWith" -> "go";
"rewriteWith" -> "mapThd3";
"rewriteWith" -> "step";
"rewriteWith" -> "tx";
"rewriteWith" -> "x";
"rewriteWithP" -> "locBinderP";
"riMethodSigP" -> "return";
"riMethodSigP" -> "tyBindP";
"riMethodSigP" -> "x";
"rmMeasures" -> "_";
"rmModName" -> "maintainLParen";
"rmModName" -> "maintainRParen";
"rmTrivials" -> "trivial";
"rmTypeAppl" -> "paren";
"rmTypeAppl" -> "rmTypeAppl";
"rpredType" -> "predRTyCon";
"rpredType" -> "uRTypeGen";
"rpredType" -> "wpredRTyCon";
"rrTy" -> "toRTypeRep";
"rsplitC" -> "_";
"rsplitC" -> "ofRSort";
"rsplitC" -> "panic";
"rsplitC" -> "s1";
"rsplitC" -> "splitC";
"rsplitC" -> "x";
"rsplitW" -> "_";
"rsplitW" -> "ofRSort";
"rsplitW" -> "panic";
"rsplitW" -> "splitW";
"rsplitW" -> "x";
"rsplitsCWithVariance" -> "_";
"rsplitsCWithVariance" -> "concatMapM";
"rsplitsCWithVariance" -> "return";
"rsplitsCWithVariance" -> "rsplitC";
"rsplitsCWithVariance" -> "splitfWithVariance";
"rtAliasP" -> "aliasIdP";
"rtAliasP" -> "f";
"rtAliasP" -> "getSourcePos";
"rtAliasP" -> "partition";
"rtAliasP" -> "return";
"rtPropPV" -> "mkRTProp";
"rtPropPV" -> "zipWith";
"rtPropTop" -> "ofRSort";
"rtPropTop" -> "pvArgs";
"rtypeDoc" -> "_";
"rtypeDoc" -> "ppEnv";
"rtypeDoc" -> "ppEnvShort";
"rtypeDoc" -> "ppr_rtype";
"rtypePredBinds" -> "toRTypeRep";
"runGradual" -> "cgInfoFInfo";
"runGradual" -> "fixConfig";
"runGradual" -> "makeGConfig";
"runGradual" -> "mapMWithLog";
"runGradual" -> "quietly";
"runGradual" -> "setPId";
"runGradual" -> "solveSInfo";
"runGradual" -> "uniquify";
"runLiquid" -> "checkTargets";
"runLiquid" -> "realTargets";
"runLiquidGhc" -> "configureDynFlags";
"runLiquidGhc" -> "return";
"runLiquidTargets" -> "actOrDie";
"runLiquidTargets" -> "checkMany";
"runLiquidTargets" -> "exitWithResult";
"runLiquidTargets" -> "getTargetInfos";
"runLiquidTargets" -> "return";
"runLiquid\'" -> "return";
"runLiquid\'" -> "runLiquid";
"runLiquid\'" -> "status";
"runMapTyVars" -> "err";
"runMapTyVars" -> "mapTyVars";
"runToLogic" -> "runToLogicWithBoolBinds";
"sDocDoc" -> "showSDoc";
"safeBkArrow" -> "_";
"safeBkArrow" -> "bkArrow";
"safeFromAsserted" -> "_";
"safeFromAsserted" -> "panic";
"safeFromJust" -> "_";
"safeFromJust" -> "err";
"safeFromJust" -> "x";
"safeFromLeft" -> "_";
"safeFromLeft" -> "err";
"safeIxScruts" -> "i";
"safeLogIndex" -> "addWarning";
"safeLogIndex" -> "err";
"safeLogIndex" -> "return";
"safeZip3WithError" -> "_";
"safeZip3WithError" -> "safeZip3WithError";
"safeZipWith" -> "_";
"safeZipWith" -> "f";
"safeZipWith" -> "safeZipWith";
"safeZipWithError" -> "_";
"safeZipWithError" -> "safeZipWithError";
"sayReadFile" -> "f";
"scTrans" -> "_";
"scTrans" -> "go";
"scTrans" -> "isCaseArg";
"scTrans" -> "mapExpr";
"scTrans" -> "scTrans";
"scTrans" -> "x";
"scaledThing" -> "_";
"scrapeVars" -> "hasOpt";
"second3M" -> "f";
"secondM" -> "f";
"selectDD" -> "_";
"sep\'" -> "_";
"sep\'" -> "sep\'";
"sep\'" -> "subst";
"sep\'" -> "substType";
"sep\'" -> "x";
"serialiseLiquidLib" -> "serialiseBinaryObject";
"setBind" -> "setBind\'";
"setBind" -> "setLocation";
"setBind" -> "x";
"setPId" -> "i";
"setREAlias" -> "x";
"setRTAlias" -> "x";
"setRtvPol" -> "i";
"setTRec" -> "setRecs";
"shiftVV" -> "_";
"shiftVV" -> "f";
"shiftVV" -> "rTypeValueVar";
"shortModules" -> "dropModuleNames";
"shortModules" -> "render";
"shortSymbol" -> "_";
"shouldNormalize" -> "_";
"showCBs" -> "showPpr";
"showCBs" -> "tidyCBs";
"showCand" -> "_";
"showCand" -> "showTy";
"showCands" -> "showCand";
"showCoreAlt" -> "_";
"showCoreAlts" -> "notrace";
"showCoreAlts" -> "showCoreAlt";
"showEmem" -> "showEmem\'";
"showEmem\'" -> "i";
"showEmem\'" -> "showTy";
"showGoals" -> "showGoals";
"showPpr" -> "showSDoc";
"showSDoc" -> "myQualify";
"showSpan" -> "mkTyArg";
"showSpan" -> "showTy";
"showTy" -> "_";
"showTy" -> "sep\'";
"showTy" -> "showPpr";
"showTy" -> "showTy";
"sigQualifiers" -> "getSourcePos";
"sigQualifiers" -> "maxQualParams";
"sigQualifiers" -> "qualifyingBinders";
"sigQualifiers" -> "refTypeQuals";
"sigQualifiers" -> "specBinders";
"sigQualifiers" -> "x";
"sigVars" -> "isDiff";
"sigVars" -> "specSigs";
"simpleSymbolVar" -> "dropModuleNames";
"simpleSymbolVar" -> "showPpr";
"simplify" -> "_";
"simplify" -> "f";
"simplify" -> "simplify";
"simplify" -> "x";
"simplifyBareType" -> "fSrcSpan";
"simplifyBareType" -> "simplifyBareType\'";
"simplifyBareType\'" -> "simplifyBareType\'\'";
"simplifyBareType\'\'" -> "_";
"simplifyBareType\'\'" -> "f";
"simplifyBareType\'\'" -> "fSrcSpan";
"simplifyBareType\'\'" -> "filterExprArgs";
"simplifyBareType\'\'" -> "i";
"simplifyBareType\'\'" -> "isClassType";
"simplifyBareType\'\'" -> "isTuple";
"simplifyBareType\'\'" -> "pure";
"simplifyBareType\'\'" -> "return";
"simplifyBareType\'\'" -> "simplifyBareType\'";
"simplifyBareType\'\'" -> "simplifyBareType\'\'";
"simplifyBareType\'\'" -> "symbolName";
"simplifyBareType\'\'" -> "x";
"simplifyBounds" -> "dropBoundLike";
"simplifyBounds" -> "fmap";
"simplifyBounds" -> "go";
"simplifyBounds" -> "x";
"simplifyExpr" -> "_";
"simplifyExpr" -> "dropModuleNames";
"simplifyExpr" -> "go";
"simplifyExpr" -> "x";
"simplifyLen" -> "_";
"simplifyLen" -> "b1";
"simplifyLen" -> "f";
"simplifyLen" -> "i";
"simplifyLen" -> "makeBound";
"simplifyPatTuple" -> "_";
"simplifyPatTuple" -> "hasTuple";
"simplifyPatTuple" -> "matchTypes";
"simplifyPatTuple" -> "replaceTuple";
"simplifyPatTuple" -> "takeBinds";
"simplifyPatTuple" -> "varTuple";
"simplifyPatTuple" -> "x";
"single" -> "x";
"singleSpecP" -> "initPStateWithList";
"singleSpecP" -> "mapRight";
"singleSpecP" -> "parseWithError";
"singleSpecP" -> "specP";
"singletonReft" -> "uTop";
"skipTarget" -> "f";
"skipTarget" -> "hasFreshBinSpec";
"skipTarget" -> "return";
"slice" -> "i";
"slice" -> "return";
"slice" -> "sliceSaved";
"sliceREnv" -> "expandFix";
"sliceREnv" -> "isFunTy";
"sliceREnv" -> "rTypeReft";
"sliceREnv" -> "x";
"sliceSaved" -> "is";
"sliceSaved" -> "lineDiff";
"sliceSaved" -> "loadResult";
"sliceSaved" -> "return";
"sliceSaved" -> "sliceSaved\'";
"sliceSaved\'" -> "adjustOutput";
"sliceSaved\'" -> "assumeSpec";
"sliceSaved\'" -> "checkedItv";
"sliceSaved\'" -> "coreDefs";
"sliceSaved\'" -> "diffVars";
"sliceSaved\'" -> "globalDiff";
"sliceSaved\'" -> "is";
"sliceSaved\'" -> "sigVars";
"sliceSaved\'" -> "specDefs";
"sliceSaved\'" -> "thinWith";
"solveCs" -> "_";
"solveCs" -> "addErrors";
"solveCs" -> "applySolution";
"solveCs" -> "cgInfoFInfo";
"solveCs" -> "cinfoError";
"solveCs" -> "e2u";
"solveCs" -> "fixConfig";
"solveCs" -> "makeFailErrors";
"solveCs" -> "makeFailUseErrors";
"solveCs" -> "mkOutput";
"solveCs" -> "return";
"solveCs" -> "splitFails";
"solveCs" -> "synthesize";
"solveSInfo" -> "_";
"solveSInfo" -> "concretize";
"solveSInfo" -> "fromGSub";
"solveSInfo" -> "gmap";
"solveSInfo" -> "makeGMap";
"solveSInfo" -> "mapSndM";
"solveSInfo" -> "quietly";
"solveSInfo" -> "return";
"solveSInfo" -> "x";
"sortDiff" -> "_";
"sortDiff" -> "go";
"sortDiff" -> "x";
"sortOn" -> "f";
"sourceErrors" -> "errMsgErrors";
"sourceName" -> "i";
"sourcePos2SrcSpan" -> "_";
"sourcePos2SrcSpan" -> "f";
"sourcePos2SrcSpan" -> "realSrcSpan";
"sourcePosSrcLoc" -> "file";
"sourcePosSrcLoc" -> "line";
"sourcePosSrcSpan" -> "file";
"sourcePosSrcSpan" -> "line";
"sourcePosSrcSpan" -> "sourcePos2SrcSpan";
"spacePrefix" -> "_";
"spacePrefix" -> "spacePrefix";
"spanAnnot" -> "_";
"spanAnnot" -> "fmap";
"spanAnnot" -> "inRange";
"spanAnnot" -> "spanLine";
"spanDiff" -> "_";
"spanSrcSpan" -> "go";
"spanSrcSpan" -> "maybeSpan";
"spanSrcSpan" -> "tickSrcSpan";
"spanSrcSpan" -> "tt";
"spanSrcSpan" -> "x";
"specBinders" -> "hasOpt";
"specDefs" -> "file";
"specDefs" -> "line";
"specDefs" -> "lineE";
"specDefs" -> "specSigs";
"specDefs" -> "x";
"specExpandType" -> "expandLoc";
"specP" -> "aliasP";
"specP" -> "asizeP";
"specP" -> "autoinstP";
"specP" -> "axiomP";
"specP" -> "boundP";
"specP" -> "cMeasureP";
"specP" -> "classP";
"specP" -> "dataDeclP";
"specP" -> "datavarianceP";
"specP" -> "decreaseP";
"specP" -> "defineP";
"specP" -> "ealiasP";
"specP" -> "embedP";
"specP" -> "failVarP";
"specP" -> "fallbackSpecP";
"specP" -> "filePathP";
"specP" -> "hboundP";
"specP" -> "hmeasureP";
"specP" -> "iMeasureP";
"specP" -> "infixP";
"specP" -> "infixlP";
"specP" -> "infixrP";
"specP" -> "inlineP";
"specP" -> "instanceLawP";
"specP" -> "instanceP";
"specP" -> "invaliasP";
"specP" -> "invariantP";
"specP" -> "lazyVarP";
"specP" -> "liftM";
"specP" -> "pragmaP";
"specP" -> "rewriteVarP";
"specP" -> "rewriteWithP";
"specP" -> "tyBindP";
"specP" -> "tyBindsP";
"specSigs" -> "_";
"specSpecificationP" -> "f";
"specSpecificationP" -> "initPStateWithList";
"specSpecificationP" -> "mapRight";
"specSpecificationP" -> "parseWithError";
"specSpecificationP" -> "specificationP";
"specToBare" -> "specToBareTC";
"specToBare" -> "specToBareTV";
"specToBare" -> "txRType";
"specToBareTC" -> "tyConBTyCon";
"specTypeCons" -> "_";
"specTypeCons" -> "foldRType";
"specTypeEq" -> "f";
"specTypeEq" -> "specTypeToResultRef";
"specTypeEq" -> "toRTypeRep";
"specTypeKVars" -> "_";
"specTypeKVars" -> "foldReft";
"specTypeToLogic" -> "_";
"specTypeToLogic" -> "mkReft";
"specTypeToLogic" -> "specTypeToResultRef";
"specTypeToLogic" -> "stripRTypeBase";
"specTypeToLogic" -> "toRTypeRep";
"specTypeToLogic" -> "zipWith";
"specTypeToResultRef" -> "addRInv";
"specTypeToResultRef" -> "addRTyConInv";
"specTypeToResultRef" -> "elemHEnv";
"specTypeToResultRef" -> "fromListHEnv";
"specTypeToResultRef" -> "getConfig";
"specTypeToResultRef" -> "getTemplates";
"specTypeToResultRef" -> "initFEnv";
"specTypeToResultRef" -> "insertsFEnv";
"specTypeToResultRef" -> "makeRecInvariants";
"specTypeToResultRef" -> "mkRTyConIAl";
"specTypeToResultRef" -> "mkRTyConInv";
"specTypeToResultRef" -> "parens";
"specTypeToResultRef" -> "removeInvariant";
"specTypeToResultRef" -> "restoreInvariant";
"specTypeToResultRef" -> "stripRTypeBase";
"specTypeToResultRef" -> "subVar";
"specTypeToResultRef" -> "toRTypeRep";
"specificationP" -> "mkSpec";
"specificationP" -> "return";
"specificationP" -> "specP";
"spliceArgs" -> "go";
"spliceArgs" -> "panic";
"spliceArgs" -> "x";
"splitArgs" -> "f";
"splitArgs" -> "go";
"splitArgs" -> "i";
"splitArgs" -> "ignoreVar";
"splitArgs" -> "isErasable";
"splitC" -> "_";
"splitC" -> "addSEnv";
"splitC" -> "bsplitC";
"splitC" -> "envToSub";
"splitC" -> "err";
"splitC" -> "extendEnvWithVV";
"splitC" -> "fmap";
"splitC" -> "forallExprRefType";
"splitC" -> "getConfig";
"splitC" -> "getLocation";
"splitC" -> "getTag";
"splitC" -> "getTemplates";
"splitC" -> "pVartoRConc";
"splitC" -> "panic";
"splitC" -> "rHole";
"splitC" -> "rTVarToBind";
"splitC" -> "replacePredsWithRefs";
"splitC" -> "return";
"splitC" -> "rsplitsCWithVariance";
"splitC" -> "splitC";
"splitC" -> "splitsCWithVariance";
"splitC" -> "subsTyVar_meet\'";
"splitC" -> "tag";
"splitC" -> "traceTy";
"splitC" -> "tx";
"splitC" -> "uPVar";
"splitC" -> "unifyVV";
"splitC" -> "updateEnv";
"splitC" -> "x";
"splitConstraints" -> "_";
"splitConstraints" -> "splitConstraints";
"splitConstraints" -> "tx";
"splitConstraints" -> "x";
"splitDictionary" -> "_";
"splitDictionary" -> "go";
"splitDictionary" -> "x";
"splitFails" -> "_";
"splitFails" -> "bodyPred";
"splitFails" -> "dataConTypes";
"splitFails" -> "defRefType";
"splitFails" -> "mkM";
"splitFails" -> "mkMSpec";
"splitFails" -> "mkMSpec\'";
"splitFun" -> "go";
"splitFun" -> "tx";
"splitFunTys" -> "mkScaled";
"splitHeader" -> "_";
"splitModuleName" -> "dropModuleNamesAndUnique";
"splitModuleName" -> "takeModuleNames";
"splitModuleName" -> "x";
"splitModuleNameExact" -> "myTracepp";
"splitModuleNameExact" -> "x";
"splitPred" -> "f";
"splitPred" -> "partition";
"splitPred" -> "render";
"splitPred" -> "rewriteBinds";
"splitPred" -> "x";
"splitRPvar" -> "uPVar";
"splitRPvar" -> "x";
"splitRType" -> "_";
"splitRType" -> "f";
"splitRType" -> "go";
"splitRType" -> "splitRType";
"splitRType" -> "splitRef";
"splitRType" -> "splitUReft";
"splitRType" -> "tx";
"splitRType" -> "x";
"splitRef" -> "f";
"splitRef" -> "splitPred";
"splitRef" -> "splitReft";
"splitReft" -> "f";
"splitReft" -> "partition";
"splitSortedReft" -> "refaConjuncts";
"splitSpecs" -> "fmap";
"splitSrcAndAnns" -> "annotParse";
"splitSrcAndAnns" -> "breakS";
"splitSrcAndAnns" -> "i";
"splitType" -> "irrelevantMult";
"splitType" -> "splitFunTys";
"splitTypeConstraints" -> "_";
"splitTypeConstraints" -> "checkTargetInfo";
"splitTypeConstraints" -> "go";
"splitTypeConstraints" -> "liquid";
"splitTypeConstraints" -> "liquidConstraints";
"splitTypeConstraints" -> "runLiquid";
"splitTypeConstraints" -> "shiftVV";
"splitTypeConstraints" -> "x";
"splitUReft" -> "splitRType";
"splitUReft" -> "splitRef";
"splitUReft" -> "x";
"splitW" -> "_";
"splitW" -> "bsplitW";
"splitW" -> "extendEnvWithVV";
"splitW" -> "getConfig";
"splitW" -> "panic";
"splitW" -> "return";
"splitW" -> "rsplitW";
"splitW" -> "splitW";
"splitW" -> "tx";
"splitW" -> "updateEnv";
"splitW" -> "x";
"splitXRelatedRefs" -> "splitRType";
"splitXRelatedRefs" -> "x";
"splitfWithVariance" -> "f";
"splitsCWithVariance" -> "concatMapM";
"splitsCWithVariance" -> "s1";
"splitsCWithVariance" -> "splitC";
"splitsCWithVariance" -> "splitfWithVariance";
"splitters" -> "i";
"srcDeps" -> "x";
"srcModuleName" -> "tokenModule";
"srcSpan" -> "mbSrcSpan";
"srcSpan" -> "showSpan";
"srcSpanContext" -> "empty";
"srcSpanContext" -> "getFileLines";
"srcSpanContext" -> "makeContext";
"srcSpanContext" -> "srcSpanInfo";
"srcSpanFSrcSpan" -> "srcSpanSourcePos";
"srcSpanFSrcSpan" -> "srcSpanSourcePosE";
"srcSpanFileMb" -> "_";
"srcSpanFileMb" -> "empty";
"srcSpanFileMb" -> "errSaved";
"srcSpanFileMb" -> "ppError\'";
"srcSpanFileMb" -> "pure";
"srcSpanFileMb" -> "render";
"srcSpanFileMb" -> "return";
"srcSpanFileMb" -> "tag";
"srcSpanInfo" -> "_";
"srcSpanSourcePos" -> "_";
"srcSpanSourcePos" -> "realSrcSpanSourcePos";
"srcSpanSourcePosE" -> "_";
"srcSpanSourcePosE" -> "realSrcSpanSourcePosE";
"srcThings" -> "mySrcThings";
"srcThings" -> "myTracepp";
"srcTyCons" -> "srcVarTcs";
"srcVarTcs" -> "srcVars";
"srcVarTcs" -> "varTyCons";
"srcVars" -> "_";
"srcVars" -> "fmap";
"srcVars" -> "i";
"srcVars" -> "myTracepp";
"srcVars" -> "x";
"step" -> "x";
"step_1_2" -> "s1";
"step_2" -> "cmd_1";
"step_2" -> "cmd_2";
"step_2" -> "s1";
"step_2" -> "step_1";
"step_2" -> "step_2";
"stitch" -> "_";
"stitch" -> "get";
"stitch" -> "impossible";
"stitch" -> "normalize";
"stitch" -> "panic";
"stitch" -> "put";
"stitch" -> "return";
"stitch" -> "stitch";
"stitch" -> "x";
"stitchArgs" -> "_";
"stitchArgs" -> "ofType";
"stitchArgs" -> "panicFieldNumMismatch";
"stitchArgs" -> "toType";
"stitchArgs" -> "x";
"stitchArgs" -> "zipWith";
"strengthen" -> "_";
"strengthenDataConType" -> "dataConArgs";
"strengthenDataConType" -> "fromRTypeRep";
"strengthenDataConType" -> "strengthen";
"strengthenDataConType" -> "toRTypeRep";
"strengthenDataConType" -> "x";
"strengthenMeet" -> "_";
"strengthenMeet" -> "strengthenMeet";
"strengthenRType" -> "strengthen";
"strengthenRType" -> "stripRTypeBase";
"strengthenRefType" -> "_";
"strengthenRefType" -> "panic";
"strengthenRefType" -> "strengthenRefType_";
"strengthenRefType" -> "toRSort";
"strengthenRefType" -> "x";
"strengthenRefTypeGen" -> "_";
"strengthenRefTypeGen" -> "f";
"strengthenRefTypeGen" -> "panic";
"strengthenRefTypeGen" -> "pprt_raw";
"strengthenRefTypeGen" -> "strengthen";
"strengthenRefTypeGen" -> "stripRTypeBase";
"strengthenRefTypeGen" -> "toRSort";
"strengthenRefTypeGen" -> "v1";
"strengthenRefType_" -> "_";
"strengthenRefType_" -> "f";
"strengthenRefType_" -> "meets";
"strengthenRefType_" -> "strengthenRefType_";
"strengthenRefType_" -> "subsTyVar_meet";
"strengthenRefType_" -> "toRSort";
"strengthenRefType_" -> "tx";
"strengthenRefType_" -> "v1";
"strengthenRefType_" -> "v2";
"strengthenRefType_" -> "x";
"strengthenRefType_" -> "zipWith";
"strengthenRes" -> "_";
"strengthenRes" -> "f";
"strengthenRes" -> "go";
"strengthenRes" -> "strengthen";
"strengthenRes" -> "subst";
"strengthenRes" -> "tx";
"strengthenRes" -> "x";
"strengthenResult" -> "fromRTypeRep";
"strengthenResult" -> "strengthen";
"strengthenResult" -> "toRTypeRep";
"strengthenSigs" -> "fmap";
"strengthenSigs" -> "go";
"strengthenTop" -> "_";
"strictResolveSym" -> "err";
"strictResolveSym" -> "x";
"stringClassArg" -> "_";
"stringClassArg" -> "isBootInterface";
"stringClassArg" -> "isFunTy";
"stringClassArg" -> "plugin";
"stringClassArg" -> "tyConName";
"stringTyCon" -> "stringTyConWithKind";
"stringVar" -> "mkLocalVar";
"strip" -> "_";
"strip" -> "strip";
"strip" -> "x";
"stripAnnotations" -> "_";
"stripAnnotations" -> "stripAnnotations";
"stripAnnotations" -> "stripAnnotationsRef";
"stripAnnotations" -> "x";
"stripAnnotationsRef" -> "stripAnnotations";
"stripParens" -> "strip";
"stripParensSym" -> "stripParens";
"stripRType" -> "fmap";
"stripRType" -> "simplifyBounds";
"stripRType" -> "stripRTypeBase";
"stripRType" -> "uTop";
"stripRTypeBase" -> "_";
"stripRTypeBase" -> "x";
"stripReft" -> "strengthen";
"stripReft" -> "stripRType";
"structCheck" -> "_";
"structCheck" -> "structCheck";
"structCheck" -> "var";
"structDecreasing" -> "_";
"structDecreasing" -> "addError";
"structDecreasing" -> "panic";
"structDecreasing" -> "showPpr";
"structDecreasing" -> "structDecreasing";
"structuralCheck" -> "get";
"structuralCheck" -> "notStructural";
"structuralCheck" -> "return";
"structuralTerm" -> "checkedVars";
"structuralTerm" -> "coreDeps";
"structuralTerm" -> "dependsOn";
"structuralTerm" -> "filterBinds";
"structuralTerm" -> "getConfig";
"structuralTerm" -> "i";
"structuralTerm" -> "panic";
"structuralTerm" -> "saveResult";
"structuralTerm" -> "showPpr";
"structuralTerm" -> "slice";
"structuralTerm" -> "sourceName";
"structuralTerm" -> "thin";
"structuralTerm" -> "x";
"subConstraintToLogicOne" -> "_";
"subConstraintToLogicOne" -> "go";
"subConstraintToLogicOne" -> "stripRTypeBase";
"subConstraintToLogicOne" -> "subst";
"subConstraintToLogicOne" -> "x";
"subRTVar" -> "i";
"subVar" -> "_";
"subVar" -> "bindSpans";
"subVar" -> "panic";
"subVar" -> "parens";
"subVar" -> "substTysWith";
"subVar" -> "x";
"subgoals" -> "createSubgoals";
"subsFree" -> "_";
"subsFree" -> "strengthen";
"subsFree" -> "subsFree";
"subsFree" -> "subsFreeRAppTy";
"subsFree" -> "subsFreeRef";
"subsFree" -> "x";
"subsFreeRAppTy" -> "_";
"subsFreeRAppTy" -> "mkRApp";
"subsFreeRef" -> "_";
"subsFreeRef" -> "fmap";
"subsFreeRef" -> "subsFree";
"subsFrees" -> "subsFree";
"subsTyReft" -> "_";
"subsTyReft" -> "mapExprReft";
"subsTyReft" -> "typeSort";
"subsTyVar" -> "subsFree";
"subsTyVar_meet" -> "subsTyVar";
"subsTyVar_meet\'" -> "subsTyVar_meet";
"subsTyVar_meet\'" -> "toRSort";
"subsTyVar_nomeet" -> "subsTyVar";
"subsTyVars" -> "subsTyVar";
"subsTyVarsAll" -> "_";
"subsTyVarsAll" -> "go";
"subsTyVarsAll" -> "makeRTVar";
"subsTyVarsAll" -> "subsTyVars_meet";
"subsTyVars_meet" -> "subsTyVars";
"subsTyVars_nomeet" -> "subsTyVars";
"subst" -> "_";
"subst" -> "mkTyArg";
"subst" -> "subst";
"subst" -> "x";
"substCoercion" -> "_";
"substCoercion" -> "eq";
"substCoercion" -> "i";
"substCoercion" -> "subst";
"substCoercion" -> "tx";
"substCoercion" -> "x";
"substEnv" -> "emapReft";
"substEnv" -> "qualifySymbol";
"substEnv" -> "substFreeEnv";
"substExpr" -> "go";
"substExpr" -> "x";
"substFreeEnv" -> "qualifySymbol";
"substGrad" -> "_";
"substGrad" -> "i";
"substGrad" -> "subst";
"substGrad" -> "substGrad";
"substGrad" -> "x";
"substParg" -> "fmap";
"substParg" -> "mapThd3";
"substParg" -> "subvPredicate";
"substParg" -> "x";
"substPred" -> "_";
"substPred" -> "meetListWithPSubs";
"substPred" -> "panic";
"substPred" -> "splitRPvar";
"substPred" -> "substPred";
"substPred" -> "substPredP";
"substPred" -> "substRCon";
"substPred" -> "x";
"substPredP" -> "_";
"substPredP" -> "freeArgsPs";
"substPredP" -> "panic";
"substPredP" -> "substPred";
"substRCon" -> "_";
"substRCon" -> "foldReft";
"substRCon" -> "meetListWithPSubs";
"substRCon" -> "meetListWithPSubsRef";
"substRCon" -> "pad";
"substRCon" -> "s1";
"substRCon" -> "safeZipWith";
"substRCon" -> "zipWith";
"substTuple" -> "substExpr";
"substType" -> "_";
"substType" -> "f";
"substType" -> "subst";
"substType" -> "substCoercion";
"substType" -> "tx";
"substType" -> "x";
"substTysWith" -> "_";
"substTysWith" -> "substTysWith";
"subts" -> "_";
"subts" -> "fmap";
"subts" -> "i";
"subts" -> "ofRSort";
"subts" -> "ofType";
"subts" -> "rTyConPVs";
"subts" -> "subsTyVar_meet";
"subts" -> "toType";
"subts" -> "typeSort";
"subts" -> "x";
"subvPredicate" -> "f";
"subvUReft" -> "f";
"subvUReft" -> "subvPredicate";
"symbolExpr" -> "i";
"symbolExpr" -> "incrSM";
"symbolExpr" -> "mkVar";
"symbolExpr" -> "return";
"symbolExpr" -> "x";
"symbolLoc" -> "_";
"symbolLoc" -> "line";
"symbolLoc" -> "x";
"symbolMeasure" -> "dcPrefix";
"symbolMeasure" -> "f";
"symbolModules" -> "unQualifySymbol";
"symbolModules" -> "x";
"symbolRTyCon" -> "stringTyCon";
"symbolRTyVar" -> "rTyVar";
"symbolToVar" -> "caseVarsE";
"symbolToVar" -> "getTopLvlBndrs";
"symbolToVar" -> "varsE";
"symbolToVar" -> "varsP";
"symbolToVar" -> "x";
"symbolTyCon" -> "i";
"symbolTyCon" -> "stringTyCon";
"symbolTyCon" -> "x";
"symbolTyConWithKind" -> "i";
"symbolTyConWithKind" -> "stringTyConWithKind";
"symbolTyConWithKind" -> "x";
"symbolTyVar" -> "stringTyVar";
"symbolType" -> "f";
"symbolType" -> "symbolTyVar";
"symsP" -> "dummyRSort";
"symsP" -> "return";
"synthesize" -> "_";
"synthesize" -> "coreToHs";
"synthesize" -> "filterREnv";
"synthesize" -> "fromAnf";
"synthesize" -> "getUniVars";
"synthesize" -> "go";
"synthesize" -> "initSSEnv";
"synthesize" -> "initState";
"synthesize" -> "pprintMany";
"synthesize" -> "return";
"synthesize" -> "rmMeasures";
"synthesize" -> "symbolToVar";
"synthesize" -> "synthesize\'";
"synthesize" -> "toType";
"synthesize" -> "x";
"synthesizeBasic" -> "fixEMem";
"synthesizeBasic" -> "genTerms";
"synthesizeBasic" -> "return";
"synthesizeBasic" -> "synthesizeMatch";
"synthesizeBasic" -> "toType";
"synthesizeBasic" -> "unifyWith";
"synthesizeMatch" -> "get";
"synthesizeMatch" -> "i";
"synthesizeMatch" -> "incrCase";
"synthesizeMatch" -> "matchOnExpr";
"synthesizeMatch" -> "return";
"synthesizeMatch" -> "safeIxScruts";
"synthesizeMatch" -> "withIncrDepth";
"synthesizeScrut" -> "_";
"synthesizeScrut" -> "return";
"synthesizeScrut" -> "synthesizeScrutinee";
"synthesizeScrutinee" -> "get";
"synthesizeScrutinee" -> "instantiate";
"synthesizeScrutinee" -> "isFunction";
"synthesizeScrutinee" -> "prodScrutinees";
"synthesizeScrutinee" -> "returnsTuple";
"synthesizeScrutinee" -> "subgoals";
"synthesizeScrutinee" -> "withSubgoal";
"synthesize\'" -> "_";
"synthesize\'" -> "addDecrTerm";
"synthesize\'" -> "addEmem";
"synthesize\'" -> "addEnv";
"synthesize\'" -> "argsP";
"synthesize\'" -> "bkArrow";
"synthesize\'" -> "decrType";
"synthesize\'" -> "evalSM";
"synthesize\'" -> "freshVar";
"synthesize\'" -> "getSEnv";
"synthesize\'" -> "go";
"synthesize\'" -> "goalType";
"synthesize\'" -> "insEMem0";
"synthesize\'" -> "subst";
"synthesize\'" -> "synthesizeBasic";
"synthesize\'" -> "synthesizeScrut";
"synthesize\'" -> "toType";
"synthesize\'" -> "tx";
"synthesize\'" -> "tyVarVar";
"synthesize\'" -> "unifyWith";
"szFun" -> "_";
"szFun" -> "f";
"szFun" -> "parens";
"szFun" -> "x";
"tag" -> "_";
"tag" -> "go";
"tag" -> "i";
"tag" -> "inLoc";
"tag" -> "posttag";
"tag" -> "pretag";
"tag" -> "sourceName";
"takeBinds" -> "_";
"takeBinds" -> "go";
"takeBinds" -> "x";
"takeFileName" -> "_";
"takeModuleNames" -> "go";
"takeString" -> "i";
"takeUnique" -> "_";
"takeUnique" -> "f";
"takeUnique" -> "x";
"targetFInfo" -> "bindSpans";
"targetFInfo" -> "giQuals";
"targetFInfo" -> "higherOrderFlag";
"targetFInfo" -> "makeAxiomEnvironment";
"targetFInfo" -> "x";
"targetSpecGetter" -> "liftedSpecGetter";
"termBareTypeP" -> "genBareTypeP";
"termBareTypeP" -> "return";
"termBareTypeP" -> "termTypeP";
"termTypeP" -> "return";
"terminationCheck" -> "getConfig";
"terminationCheck" -> "terminationCheck\'";
"terminationVars" -> "allBoundVars";
"terminationVars" -> "failingBinds";
"thin" -> "assumeSpec";
"thin" -> "coreDeps";
"thin" -> "filterBinds";
"thin" -> "specSigs";
"thin" -> "txClosure";
"thinWith" -> "coreDeps";
"thinWith" -> "filterBinds";
"thinWith" -> "txClosure";
"third3" -> "f";
"third3M" -> "f";
"third4" -> "x";
"thisReplace" -> "i";
"thisReplace" -> "x";
"thm_bigstep_det" -> "_";
"thm_bigstep_det" -> "impossible";
"thm_bigstep_det" -> "s1";
"thm_bigstep_det" -> "thm_bigstep_det";
"thm_bigstep_det" -> "x";
"thm_emp" -> "get";
"thm_emp" -> "x";
"thm_size" -> "_";
"throw" -> "get";
"throwErrorInQ" -> "err";
"throwErrorInQ" -> "errorsWithContext";
"tickSrcSpan" -> "_";
"tidyCBs" -> "unTick";
"tidyCtx" -> "shiftVV";
"tidyCtx" -> "sliceREnv";
"tidyCtx" -> "tidyREnv";
"tidyCtx" -> "tidySpecType";
"tidyCtx" -> "tidyTemps";
"tidyCtx" -> "x";
"tidyCtxM" -> "fmap";
"tidyCtxM" -> "shiftVV";
"tidyCtxM" -> "stripReft";
"tidyCtxM" -> "tidyREnvM";
"tidyCtxM" -> "tidyTemps";
"tidyCtxM" -> "x";
"tidyDSymbols" -> "bindersTx";
"tidyDSymbols" -> "mapBind";
"tidyDSymbols" -> "tx";
"tidyDSymbols" -> "x";
"tidyEqual" -> "mapReft";
"tidyErrContext" -> "_";
"tidyErrContext" -> "fmap";
"tidyErrContext" -> "tidyCtx";
"tidyErrContext" -> "tidyCtxM";
"tidyError" -> "configTidy";
"tidyError" -> "fmap";
"tidyError" -> "tidyErrContext";
"tidyError" -> "tidySpecType";
"tidyFunBinds" -> "bindersTx";
"tidyFunBinds" -> "funBinds";
"tidyFunBinds" -> "mapBind";
"tidyFunBinds" -> "tx";
"tidyInternalRefas" -> "mapReft";
"tidyInternalRefas" -> "x";
"tidyLocalRefas" -> "mapReft";
"tidyLocalRefas" -> "x";
"tidyREnv" -> "expandVarDefs";
"tidyREnv" -> "isInline";
"tidyREnvM" -> "dropModel";
"tidyREnvM" -> "expandFix";
"tidyREnvM" -> "isFunTy";
"tidyREnvM" -> "rTypeReft";
"tidyREnvM" -> "x";
"tidySpecType" -> "tidyDSymbols";
"tidySpecType" -> "tidyEqual";
"tidySpecType" -> "tidyFunBinds";
"tidySpecType" -> "tidyInternalRefas";
"tidySpecType" -> "tidyLocalRefas";
"tidySpecType" -> "tidySymbols";
"tidySpecType" -> "tidyTyVars";
"tidySpecType" -> "tidyValueVars";
"tidySymbols" -> "mapBind";
"tidySymbols" -> "shortSymbol";
"tidySymbols" -> "x";
"tidyTemps" -> "niceTemps";
"tidyTemps" -> "x";
"tidyTuples" -> "get";
"tidyTuples" -> "go";
"tidyTuples" -> "mkAlive";
"tidyTuples" -> "return";
"tidyTuples" -> "substTuple";
"tidyTuples" -> "x";
"tidyTyVars" -> "i";
"tidyTyVars" -> "rVar";
"tidyTyVars" -> "subsTyVarsAll";
"tidyTyVars" -> "toRSort";
"tidyTyVars" -> "tyVars";
"tidyTyVars" -> "zipWith";
"tidyVV" -> "shiftVV";
"tidyValueVars" -> "mapReft";
"tidyValueVars" -> "tidyVV";
"timeAction" -> "_";
"timeDataMapper" -> "x";
"timedAction" -> "_";
"timedAction" -> "return";
"timedAction" -> "x";
"times" -> "x";
"toArgs" -> "f";
"toArgs" -> "varRType";
"toArgs" -> "x";
"toBenchMap" -> "f";
"toBenchMap" -> "pure";
"toBenchMap" -> "return";
"toCached" -> "toStableModule";
"toExpr" -> "i";
"toExpr" -> "is";
"toGhcSrc" -> "decrType";
"toListREnv" -> "globalsREnv";
"toListREnv" -> "localsREnv";
"toLogicApp" -> "_";
"toLogicApp" -> "coreToLg";
"toLogicApp" -> "f";
"toLogicApp" -> "getState";
"toLogicApp" -> "makeApp";
"toLogicApp" -> "return";
"toLogicApp" -> "splitArgs";
"toLogicApp" -> "tosymbol";
"toLogicApp" -> "tosymbol\'";
"toLogicApp" -> "x";
"toLogicMap" -> "x";
"toLogicOneP" -> "return";
"toLogicOneP" -> "x";
"toLogicP" -> "toLogicMap";
"toLogicP" -> "toLogicOneP";
"toPredApp" -> "_";
"toPredApp" -> "brels";
"toPredApp" -> "coreToLg";
"toPredApp" -> "f";
"toPredApp" -> "fmap";
"toPredApp" -> "go";
"toPredApp" -> "splitArgs";
"toPredApp" -> "toLogicApp";
"toPredApp" -> "tomaybesymbol";
"toProof" -> "_";
"toRSort" -> "fmap";
"toRSort" -> "mapBind";
"toRSort" -> "stripAnnotations";
"toRTypeRep" -> "bkArrow";
"toRTypeRep" -> "bkUniv";
"toStructCall" -> "_";
"toStructCall" -> "isParam";
"toStructCall" -> "isParamSubterm";
"toStructCall" -> "mkStructCall";
"toStructCall" -> "toVar";
"toType" -> "_";
"toType" -> "expand";
"toType" -> "holeLit";
"toType" -> "impossible";
"toType" -> "toType";
"toType" -> "x";
"toUnhelpfulReason" -> "_";
"toUsedPVar" -> "_";
"toUsedPVar" -> "impossible";
"toUsedPVar" -> "init";
"toUsedPVars" -> "_";
"toUsedPVars" -> "impossible";
"toUsedPVars" -> "toUsedPVar";
"toUsedPVars" -> "todo";
"toUsedPVars" -> "x";
"toVar" -> "_";
"toVar" -> "toVar";
"toVar" -> "x";
"to\'" -> "literalConst";
"to\'" -> "literalFRefType";
"to\'" -> "literalFReft";
"to\'" -> "mkI";
"to\'" -> "mkS";
"todo" -> "panic";
"tokAnnot" -> "refToken";
"tokAnnot" -> "tokBody";
"tokAnnot" -> "trimLiquidAnnot";
"tokBody" -> "isData";
"tokBody" -> "isIncl";
"tokBody" -> "isMeas";
"tokBody" -> "isType";
"tokBody" -> "tokeniseSpec";
"tokenModule" -> "_";
"tokenModule" -> "i";
"tokenModule" -> "return";
"tokenSpans" -> "plusLoc";
"tokeniseSpec" -> "_";
"tokeniseSpec" -> "chopAltDBG";
"tokeniseSpec" -> "refToken";
"tokeniseWithCommentTransform" -> "_";
"tokeniseWithCommentTransform" -> "expand";
"tokeniseWithCommentTransform" -> "f";
"tokeniseWithLoc" -> "tokAnnot";
"tokeniseWithLoc" -> "tokenSpans";
"tokeniseWithLoc" -> "tokeniseWithCommentTransform";
"tokeniseWithLoc" -> "tx";
"tokeniseWithLoc" -> "x";
"tokeniseWithLoc" -> "zipWith";
"tomaybesymbol" -> "_";
"tomaybesymbol" -> "x";
"topAndTail" -> "_";
"topAndTail" -> "htmlClose";
"topAndTail" -> "htmlHeader";
"topAndTail" -> "initSrc";
"topRTypeBase" -> "mapRBase";
"topSpecType" -> "derivedVar";
"topSpecType" -> "get";
"topSpecType" -> "return";
"topSpecType" -> "topRTypeBase";
"topSpecType" -> "x";
"tosymbol" -> "_";
"tosymbol" -> "return";
"tosymbol" -> "throw";
"tosymbol" -> "tomaybesymbol";
"tosymbol" -> "x";
"tosymbol\'" -> "return";
"tosymbol\'" -> "throw";
"tosymbol\'" -> "x";
"totalityCheck" -> "getConfig";
"totalityCheck" -> "totalityCheck\'";
"totalityError" -> "_";
"tpToCons" -> "_";
"tpToCons" -> "tpToCons";
"tracePpr" -> "showPpr";
"tracePpr" -> "x";
"traceTy" -> "_";
"traceTy" -> "parens";
"traceTy" -> "traceTy";
"traceTy" -> "tx";
"trans" -> "_";
"trans" -> "liftM";
"trans" -> "makeTrans";
"trans" -> "mkAlive";
"trans" -> "panic";
"transBd" -> "liftM";
"transBd" -> "mapBdM";
"transBd" -> "mapSndM";
"transBd" -> "transBd";
"transBd" -> "transExpr";
"transBd" -> "x";
"transExpr" -> "collectNonRecLets";
"transExpr" -> "isNonPolyRec";
"transExpr" -> "return";
"transExpr" -> "trans";
"transParseSpecs" -> "_";
"transParseSpecs" -> "moduleFiles";
"transParseSpecs" -> "noTerm";
"transParseSpecs" -> "parseSpecFile";
"transParseSpecs" -> "return";
"transParseSpecs" -> "transParseSpecs";
"transPg" -> "transBd";
"transformRecExpr" -> "initEnv";
"transformRecExpr" -> "inlineFailCases";
"transformRecExpr" -> "inlineLoopBreaker";
"transformRecExpr" -> "transPg";
"transformScope" -> "innerScTr";
"transformScope" -> "outerScTr";
"transpose" -> "_";
"transpose" -> "liquidError";
"transpose" -> "transpose";
"transpose" -> "x";
"trimLiquidAnnot" -> "_";
"trimLiquidAnnot" -> "liquidBegin";
"trimLiquidAnnot" -> "liquidEnd";
"trivial" -> "_";
"trueRef" -> "_";
"trueRef" -> "f";
"trueRef" -> "panic";
"trueRef" -> "trueRefType";
"trueRefType" -> "_";
"trueRefType" -> "f";
"trueRefType" -> "rFun";
"trueRefType" -> "rImpF";
"trueRefType" -> "rRCls";
"trueRefType" -> "return";
"trueRefType" -> "trueRef";
"trueRefType" -> "trueRefType";
"trueRefType" -> "tx";
"trueTy" -> "ofType\'";
"trustVar" -> "derivedVar";
"trustVar" -> "x";
"tryIgnore" -> "err";
"tryIgnore" -> "return";
"tupPatP" -> "mkTupPat";
"tupleTyDataCons" -> "i";
"tupleTyDataCons" -> "lt";
"tupleTyDataCons" -> "mkps";
"tupleTyDataCons" -> "pdVarReft";
"tupleTyDataCons" -> "rApp";
"tupleTyDataCons" -> "rPropP";
"tupleTyDataCons" -> "rVar";
"tupleTyDataCons" -> "tyConTyVarsDef";
"tupleTyDataCons" -> "uPVar";
"tupleTyDataCons" -> "wiredInName";
"tupleTyDataCons" -> "x";
"tupleTyDataCons" -> "zipWith";
"tvId" -> "showPpr";
"tx" -> "_";
"tx" -> "mapThd3";
"tx" -> "tx";
"tx" -> "unbind";
"txClosure" -> "fmap";
"txClosure" -> "go";
"txClosure" -> "x";
"txExpToBind" -> "expToBindT";
"txExpToBind" -> "toRTypeRep";
"txPV" -> "_";
"txPV" -> "failMaybe";
"txPV" -> "plugSrc";
"txPV" -> "tx";
"txPV" -> "txRType";
"txPV" -> "varRSort";
"txPV" -> "varSortedReft";
"txPV" -> "x";
"txParam" -> "f";
"txParam" -> "predMap";
"txParam" -> "txPvar";
"txPvar" -> "_";
"txPvar" -> "err";
"txPvar" -> "uError";
"txPvar" -> "x";
"txPvar" -> "zipWith";
"txRTV" -> "txRType";
"txRType" -> "go";
"txRType" -> "txPV";
"txRType" -> "txRTV";
"txRType" -> "txRType";
"txRType" -> "x";
"txRefSort" -> "addSymSort";
"txRefSort" -> "mapBot";
"tyApp" -> "_";
"tyApp" -> "panic";
"tyBindNoLocP" -> "tyBindP";
"tyBindP" -> "genBareTypeP";
"tyBindP" -> "locBinderP";
"tyBindsP" -> "locBinderP";
"tyBindsP" -> "termBareTypeP";
"tyBindsP" -> "xyP";
"tyBindsRemP" -> "return";
"tyBindsRemP" -> "termBareTypeP";
"tyBodyP" -> "_";
"tyBodyP" -> "isPropBareType";
"tyClasses" -> "_";
"tyClasses" -> "panic";
"tyClasses" -> "tyClasses";
"tyCompat" -> "ofType";
"tyCompat" -> "toRSort";
"tyCompat" -> "x";
"tyConBTyCon" -> "fmap";
"tyConBTyCon" -> "mkBTyCon";
"tyConBTyCon" -> "tyConName";
"tyConDataDecl" -> "_";
"tyConDataDecl" -> "dataConDecl";
"tyConFTyCon" -> "tyConName";
"tyConRTyCon" -> "mkTyConInfo";
"tyConRealArity" -> "_";
"tyConRealArity" -> "fmap";
"tyConRealArity" -> "get";
"tyConRealArity" -> "go";
"tyConRealArity" -> "return";
"tyConSort" -> "tyConSortRaw";
"tyConSortRaw" -> "fmap";
"tyConTyVarsDef" -> "noTyVars";
"tyKindVarIdP" -> "_";
"tyKindVarIdP" -> "kindP";
"tyKindVarIdP" -> "return";
"tyKindVarIdP" -> "tyVarIdP";
"tyThingSymbol" -> "conLikeSymbol";
"tyThingSymbol" -> "x";
"tyToBind" -> "go";
"tyToBind" -> "rTypeSortedReft";
"tyVarDefsP" -> "bTyVar";
"tyVarDefsP" -> "parens";
"tyVarDefsP" -> "tyKindVarIdP";
"tyVarDefsP" -> "tyVarIdP";
"tyVarIdP" -> "tyVarIdR";
"tyVarVar" -> "_";
"tyVars" -> "_";
"tyVars" -> "tyVars";
"tyVarsPosition" -> "_";
"tyVarsPosition" -> "bareSpecIso";
"tyVarsPosition" -> "dropDependency";
"tyVarsPosition" -> "emptyLiftedSpec";
"tyVarsPosition" -> "fmap";
"tyVarsPosition" -> "getConfig";
"tyVarsPosition" -> "go";
"tyVarsPosition" -> "imports";
"tyVarsPosition" -> "inlines";
"tyVarsPosition" -> "isExportedVar";
"tyVarsPosition" -> "isPLEVar";
"tyVarsPosition" -> "liftedSpecGetter";
"tyVarsPosition" -> "rewriteWith";
"tyVarsPosition" -> "s1";
"tyVarsPosition" -> "targetSpecGetter";
"tyVarsPosition" -> "targetSrcIso";
"tyVarsPosition" -> "unsafeFromLiftedSpec";
"tyVarsPosition" -> "zipWith";
"ty_var_is_val" -> "rtvinfo_is_val";
"typeEqToLg" -> "return";
"typeEqToLg" -> "tx";
"typeEqToLg" -> "typeSort";
"typeSort" -> "_";
"typeSort" -> "go";
"typeSort" -> "isRecursivenewTyCon";
"typeSort" -> "tyConFTyCon";
"typeSort" -> "tyVarSort";
"typeSort" -> "typeSortForAll";
"typeSort" -> "typeSortFun";
"typeSort" -> "typeUniqueSymbol";
"typeSortForAll" -> "i";
"typeSortForAll" -> "typeSort";
"typeSortFun" -> "grabArgs";
"typeSortFun" -> "typeSort";
"typeToCons" -> "tpToCons";
"typeTyCons" -> "typeTyCons";
"typeUniqueString" -> "_";
"typeUniqueString" -> "i";
"typeUniqueString" -> "showSDocDump";
"typecheckHook" -> "_";
"typecheckHook" -> "debugLog";
"typecheckHook" -> "liquidHaskellCheck";
"typecheckHook" -> "mkTcData";
"typecheckHook" -> "toStableModule";
"typecheckHook" -> "toUnoptimised";
"typecheckModule" -> "return";
"typecheckModule" -> "x";
"uRType" -> "fmap";
"uRType" -> "uTop";
"uRTypeGen" -> "fmap";
"uRType\'" -> "fmap";
"uReft" -> "uTop";
"uTop" -> "_";
"uTop" -> "eqRSort";
"uTop" -> "f";
"uTop" -> "isTrivial";
"uTop" -> "mapReft";
"uTop" -> "panic";
"uTop" -> "s1";
"uTop" -> "strengthenRefType";
"uTop" -> "subst";
"unClass" -> "bkClass";
"unClass" -> "bkUniv";
"unClass" -> "thrd3";
"unDummy" -> "i";
"unDummy" -> "x";
"unOCons" -> "_";
"unOCons" -> "tx";
"unOCons" -> "unOCons";
"unOCons" -> "x";
"unQualifySymbol" -> "splitModuleNameExact";
"unRRTy" -> "_";
"unRRTy" -> "unRRTy";
"unTemplate" -> "_";
"unTemplate" -> "panic";
"unTick" -> "unTickExpr";
"unTickExpr" -> "_";
"unTickExpr" -> "unTick";
"unTickExpr" -> "unTickExpr";
"unTickExpr" -> "x";
"unbind" -> "unbind";
"unbind" -> "x";
"unfoldDep" -> "_";
"unfoldDep" -> "exprDep";
"unfoldR" -> "_";
"unfoldR" -> "ignoreOblig";
"unfoldR" -> "init";
"unfoldR" -> "instantiatePvs";
"unfoldR" -> "instantiateTys";
"unfoldR" -> "ofType";
"unfoldR" -> "panic";
"unfoldR" -> "rVar";
"unfoldR" -> "safeBkArrow";
"unfoldR" -> "x";
"unfoldR" -> "zipWith";
"unifiable" -> "toType";
"unify" -> "_";
"unify" -> "emptyDiagnostics";
"unify" -> "err";
"unify" -> "fromRTypeRep";
"unify" -> "mkDiagnostics";
"unify" -> "mkError";
"unify" -> "splitTypeConstraints";
"unify" -> "subts";
"unify" -> "toRTypeRep";
"unify" -> "toType";
"unify" -> "tx";
"unify" -> "x";
"unifyVV" -> "_";
"unifyVV" -> "panic";
"unifyVV" -> "return";
"unifyVV" -> "shiftVV";
"unifyWith" -> "_";
"unifyWith" -> "showTy";
"unionAppend" -> "f";
"unionAppend" -> "fmap";
"uniqNub" -> "x";
"uniqueByKey" -> "_";
"uniqueByKey" -> "tx";
"uniqueByKey" -> "uniqueByKey\'";
"uniqueByKey\'" -> "tx";
"uniqueHash" -> "i";
"uniquify" -> "expandWF";
"uniquify" -> "uniquifyCS";
"uniquifyCS" -> "freshK";
"uniquifyCS" -> "get";
"uniquifyCS" -> "go";
"uniquifyCS" -> "i";
"uniquifyCS" -> "initUniqueST";
"uniquifyCS" -> "resetChange";
"uniquifyCS" -> "return";
"uniquifyCS" -> "srcSpan";
"uniquifyCS" -> "updateBEnv";
"uniquifyCS" -> "updateLoc";
"uniquifyCS" -> "withCache";
"uniquifyCS" -> "x";
"unnamedCircleP" -> "bareArgP";
"unnamedCircleP" -> "dummyBindP";
"unnamedCircleP" -> "return";
"unpackRealSrcSpan" -> "_";
"unpackRealSrcSpan" -> "f";
"unpackRealSrcSpan" -> "realSrcSpan";
"unsafeFromLiftedSpec" -> "addInvCond";
"unsafeFromLiftedSpec" -> "allErrors";
"unsafeFromLiftedSpec" -> "allWarnings";
"unsafeFromLiftedSpec" -> "angleBrackets";
"unsafeFromLiftedSpec" -> "bkArrow";
"unsafeFromLiftedSpec" -> "bkArrowDeep";
"unsafeFromLiftedSpec" -> "bkClass";
"unsafeFromLiftedSpec" -> "bkUniv";
"unsafeFromLiftedSpec" -> "bkUnivClass";
"unsafeFromLiftedSpec" -> "blankLine";
"unsafeFromLiftedSpec" -> "dataNameSymbol";
"unsafeFromLiftedSpec" -> "defaultTyConInfo";
"unsafeFromLiftedSpec" -> "dropImplicits";
"unsafeFromLiftedSpec" -> "dropTyVarInfo";
"unsafeFromLiftedSpec" -> "eAppWithMap";
"unsafeFromLiftedSpec" -> "efoldReft";
"unsafeFromLiftedSpec" -> "emapReft";
"unsafeFromLiftedSpec" -> "empty";
"unsafeFromLiftedSpec" -> "emptyDiagnostics";
"unsafeFromLiftedSpec" -> "emptyKVProf";
"unsafeFromLiftedSpec" -> "foldRType";
"unsafeFromLiftedSpec" -> "foldReft";
"unsafeFromLiftedSpec" -> "foldReft\'";
"unsafeFromLiftedSpec" -> "fromRTypeRep";
"unsafeFromLiftedSpec" -> "getMethodType";
"unsafeFromLiftedSpec" -> "getModName";
"unsafeFromLiftedSpec" -> "getModString";
"unsafeFromLiftedSpec" -> "hasDecl";
"unsafeFromLiftedSpec" -> "hasHole";
"unsafeFromLiftedSpec" -> "hasHoleTy";
"unsafeFromLiftedSpec" -> "hole";
"unsafeFromLiftedSpec" -> "ignoreOblig";
"unsafeFromLiftedSpec" -> "imports";
"unsafeFromLiftedSpec" -> "inlines";
"unsafeFromLiftedSpec" -> "insertsSEnv";
"unsafeFromLiftedSpec" -> "isBase";
"unsafeFromLiftedSpec" -> "isBool";
"unsafeFromLiftedSpec" -> "isClassBTyCon";
"unsafeFromLiftedSpec" -> "isClassType";
"unsafeFromLiftedSpec" -> "isEqType";
"unsafeFromLiftedSpec" -> "isFunTy";
"unsafeFromLiftedSpec" -> "isHole";
"unsafeFromLiftedSpec" -> "isPropPV";
"unsafeFromLiftedSpec" -> "isRVar";
"unsafeFromLiftedSpec" -> "isSpecImport";
"unsafeFromLiftedSpec" -> "isSrcImport";
"unsafeFromLiftedSpec" -> "isTarget";
"unsafeFromLiftedSpec" -> "isTrivial";
"unsafeFromLiftedSpec" -> "liquidBegin";
"unsafeFromLiftedSpec" -> "liquidEnd";
"unsafeFromLiftedSpec" -> "lmapEAlias";
"unsafeFromLiftedSpec" -> "makeRTVar";
"unsafeFromLiftedSpec" -> "mapBind";
"unsafeFromLiftedSpec" -> "mapBot";
"unsafeFromLiftedSpec" -> "mapExprReft";
"unsafeFromLiftedSpec" -> "mapPropM";
"unsafeFromLiftedSpec" -> "mapRTAVars";
"unsafeFromLiftedSpec" -> "mapReft";
"unsafeFromLiftedSpec" -> "mapReftM";
"unsafeFromLiftedSpec" -> "mapSndM";
"unsafeFromLiftedSpec" -> "mapTyVarValue";
"unsafeFromLiftedSpec" -> "mkArrow";
"unsafeFromLiftedSpec" -> "mkBTyCon";
"unsafeFromLiftedSpec" -> "mkDiagnostics";
"unsafeFromLiftedSpec" -> "mkUnivs";
"unsafeFromLiftedSpec" -> "mkWarning";
"unsafeFromLiftedSpec" -> "noErrors";
"unsafeFromLiftedSpec" -> "ofRSort";
"unsafeFromLiftedSpec" -> "ordSrcSpan";
"unsafeFromLiftedSpec" -> "pApp";
"unsafeFromLiftedSpec" -> "panic";
"unsafeFromLiftedSpec" -> "pappSym";
"unsafeFromLiftedSpec" -> "parens";
"unsafeFromLiftedSpec" -> "ppEnv";
"unsafeFromLiftedSpec" -> "ppEnvShort";
"unsafeFromLiftedSpec" -> "printWarning";
"unsafeFromLiftedSpec" -> "pvType";
"unsafeFromLiftedSpec" -> "pvars";
"unsafeFromLiftedSpec" -> "qualifyModName";
"unsafeFromLiftedSpec" -> "rCls";
"unsafeFromLiftedSpec" -> "rFun";
"unsafeFromLiftedSpec" -> "rImpF";
"unsafeFromLiftedSpec" -> "rPropP";
"unsafeFromLiftedSpec" -> "rRCls";
"unsafeFromLiftedSpec" -> "rTVarToBind";
"unsafeFromLiftedSpec" -> "rTyConPVs";
"unsafeFromLiftedSpec" -> "rTyConPropVs";
"unsafeFromLiftedSpec" -> "rTypeReft";
"unsafeFromLiftedSpec" -> "rTypeValueVar";
"unsafeFromLiftedSpec" -> "rewriteWith";
"unsafeFromLiftedSpec" -> "rtyVarType";
"unsafeFromLiftedSpec" -> "safeBkArrow";
"unsafeFromLiftedSpec" -> "setRtvPol";
"unsafeFromLiftedSpec" -> "showPpr";
"unsafeFromLiftedSpec" -> "stripRTypeBase";
"unsafeFromLiftedSpec" -> "szFun";
"unsafeFromLiftedSpec" -> "toLogicMap";
"unsafeFromLiftedSpec" -> "toRSort";
"unsafeFromLiftedSpec" -> "toRTypeRep";
"unsafeFromLiftedSpec" -> "topRTypeBase";
"unsafeFromLiftedSpec" -> "tyVarVar";
"unsafeFromLiftedSpec" -> "updKVProf";
"up" -> "f";
"up" -> "x";
"updKVProf" -> "_";
"updLiftedSpec" -> "clearSpec";
"updLiftedSpec" -> "s1";
"updREnvLocal" -> "f";
"updSigMap" -> "myTracepp";
"updSigMap" -> "renameLocalSig";
"updTargetInfoTermVars" -> "i";
"updateBEnv" -> "i";
"updateEnv" -> "fmap";
"updateEnv" -> "rTVarToBind";
"updateEnv" -> "return";
"updateEnv" -> "x";
"updateEnvironment" -> "isValKind";
"updateEnvironment" -> "kindToRType";
"updateEnvironment" -> "return";
"updateK" -> "f";
"updateLoc" -> "x";
"updateLocA" -> "_";
"updateLocA" -> "addLocA";
"updateLocA" -> "return";
"updateRTVar" -> "_";
"updateRTVar" -> "rTVarInfo";
"useAlsQuals" -> "hasOpt";
"useAlsQuals" -> "higherOrderFlag";
"useAlsQuals" -> "i";
"useAlsQuals" -> "needQuals";
"useAlsQuals" -> "useQuals";
"useQuals" -> "getConfig";
"useSigQuals" -> "i";
"useSigQuals" -> "useAlsQuals";
"useSigQuals" -> "useQuals";
"useSpcQuals" -> "i";
"useSpcQuals" -> "useAlsQuals";
"useSpcQuals" -> "useQuals";
"v1" -> "_";
"v2" -> "_";
"validQual" -> "srcSpan";
"validTyVar" -> "_";
"var" -> "f";
"var" -> "fmap";
"varAnn" -> "x";
"varBounds" -> "defBounds";
"varBounds" -> "varDefs";
"varDefs" -> "_";
"varDefs" -> "lineSpan";
"varDefs" -> "x";
"varError" -> "get";
"varError" -> "return";
"varError" -> "toGhcSrc";
"varExpr" -> "isPolyCst";
"varExpr" -> "x";
"varExprs" -> "x";
"varFile" -> "_";
"varFile" -> "panic";
"varFile" -> "showPpr";
"varLocInfo" -> "f";
"varLocInfo" -> "locNamedThing";
"varLocInfo" -> "x";
"varMeasures" -> "isSimpleType";
"varMeasures" -> "knownVars";
"varMeasures" -> "varSpecType";
"varRType" -> "ofType";
"varRefType" -> "return";
"varRefType" -> "varRefType\'";
"varRefType" -> "x";
"varRefType\'" -> "higherOrderFlag";
"varRefType\'" -> "singletonReft";
"varRefType\'" -> "strengthen";
"varRefType\'" -> "strengthenMeet";
"varRefType\'" -> "strengthenTop";
"varRefType\'" -> "x";
"varSignToVariance" -> "_";
"varSignToVariance" -> "i";
"varSortedReft" -> "varRSort";
"varSpecType" -> "fmap";
"varTemplate" -> "topSpecType";
"varTemplate" -> "varTemplate\'";
"varTemplate" -> "x";
"varTemplate\'" -> "_";
"varTemplate\'" -> "addW";
"varTemplate\'" -> "freshTy_expr";
"varTemplate\'" -> "lookupREnv";
"varTemplate\'" -> "refreshArgsTop";
"varTemplate\'" -> "return";
"varTemplate\'" -> "x";
"varTuple" -> "x";
"varTyCons" -> "ofType";
"varTyCons" -> "specTypeCons";
"varTyCons" -> "typeTyCons";
"varianceP" -> "return";
"varsCB" -> "_";
"varsCB" -> "f";
"varsCB" -> "notrace";
"varsE" -> "_";
"varsE" -> "varsE";
"varsP" -> "_";
"varsP" -> "f";
"varsP" -> "isInCB";
"varsP" -> "varsCB";
"vc" -> "_";
"vc" -> "bAnd";
"vc" -> "bImp";
"vc" -> "i";
"vc" -> "pre";
"vc" -> "tt";
"vc" -> "vc";
"vc\'" -> "bAnd";
"vc\'" -> "bImp";
"vc\'" -> "pre";
"vc\'" -> "vc";
"verify" -> "_";
"vimAnnot" -> "mkAnnMapBinders";
"vimAnnot" -> "vimBind";
"vimBind" -> "dropErrorLoc";
"vimBind" -> "i";
"wait" -> "x";
"waitN" -> "x";
"warnCaseExpand" -> "expandMessage";
"warnMissingLiftedSpec" -> "errMissingSpec";
"weakenResult" -> "fromRTypeRep";
"weakenResult" -> "isClassType";
"weakenResult" -> "mapExprReft";
"weakenResult" -> "toRTypeRep";
"weakenResult" -> "x";
"wiredDataCons" -> "wiredTyDataCons";
"wiredDefs" -> "fmap";
"wiredDefs" -> "functionComposisionSymbol";
"wiredDefs" -> "makeCompositionExpression";
"wiredDefs" -> "x";
"wiredReflects" -> "_";
"wiredReflects" -> "wiredDefs";
"wiredSortedSyms" -> "pappSort";
"wiredSortedSyms" -> "pappSym";
"wiredTyCons" -> "wiredTyDataCons";
"wiredTyDataCons" -> "listTyDataCons";
"wiredTyDataCons" -> "tupleTyDataCons";
"withCache" -> "emptyCache";
"withCache" -> "return";
"withDepthFill" -> "fill";
"withDepthFill" -> "filterElseM";
"withDepthFill" -> "hasType";
"withDepthFill" -> "i";
"withDepthFill" -> "localMaxAppDepth";
"withDepthFill" -> "return";
"withDepthFill" -> "withDepthFill";
"withDepthFillArgs" -> "argsFill";
"withDepthFillArgs" -> "filterElseM";
"withDepthFillArgs" -> "get";
"withDepthFillArgs" -> "hasType";
"withDepthFillArgs" -> "localMaxArgsDepth";
"withDepthFillArgs" -> "return";
"withDepthFillArgs" -> "withDepthFillArgs";
"withIncrDepth" -> "get";
"withIncrDepth" -> "localMaxMatchDepth";
"withIncrDepth" -> "put";
"withIncrDepth" -> "return";
"withPragma" -> "config";
"withPragmas" -> "canonConfig";
"withPragmas" -> "canonicalizePaths";
"withPragmas" -> "return";
"withPragmas" -> "withPragma";
"withProof" -> "_";
"withProof" -> "x";
"withSmtSolver" -> "_";
"withSmtSolver" -> "findSmtSolver";
"withSmtSolver" -> "panic";
"withSmtSolver" -> "return";
"withSubgoal" -> "_";
"withSubgoal" -> "i";
"withSubgoal" -> "withSubgoal";
"withTheorem" -> "_";
"withTheorem" -> "x";
"withTypeEs" -> "get";
"withTypeEs" -> "return";
"withTypeEs" -> "toType";
"withTypeEs" -> "x";
"wmap" -> "f";
"wmap" -> "x";
"wmapN" -> "f";
"wmapN" -> "x";
"wpredRTyCon" -> "symbolRTyCon";
"wpredRTyCon" -> "wpredName";
"wrapParens" -> "x";
"writeCheckVars" -> "dropModuleNames";
"writeCheckVars" -> "return";
"writeFilesOrStrings" -> "copyFileCreateParentDirIfMissing";
"writeResultStdout" -> "mkErrorDoc";
"writeResultStdout" -> "render";
"x" -> "s1";
"zip4" -> "_";
"zip4" -> "zip4";
"zipExact" -> "_";
"zipExact" -> "x";
"zipExact" -> "zipExact";
"zipMap" -> "f";
"zipMapMaybe" -> "f";
"zipMapMaybe" -> "x";
"zipWith" -> "_";
"zipWith" -> "liquidError";
"zipWithDef" -> "_";
"zipWithDef" -> "f";
"zipWithDef" -> "x";
"zipWithDef" -> "zipWithDef";
"zipWithDefM" -> "_";
"zipWithDefM" -> "f";
"zipWithDefM" -> "return";
"zipWithDefM" -> "x";
"zipWithDefM" -> "zipWithDefM";
"zipWithM" -> "assert";
"zipWithM" -> "eq";
"zipWithM" -> "f";
"zipWithM" -> "isAss";
"zipWithM" -> "toProof";
"zipWithM" -> "trivial";
"zipWithM" -> "withTheorem";
"zipWithM" -> "x";
}
