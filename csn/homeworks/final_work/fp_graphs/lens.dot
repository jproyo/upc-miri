strict digraph deps {
"_10\'" [style=solid];
"_11\'" [style=solid];
"_12\'" [style=solid];
"_13\'" [style=solid];
"_14\'" [style=solid];
"_15\'" [style=solid];
"_16\'" [style=solid];
"_17\'" [style=solid];
"_18\'" [style=solid];
"_19\'" [style=solid];
"_1\'" [style=solid];
"_2\'" [style=solid];
"_3\'" [style=solid];
"_4\'" [style=solid];
"_5\'" [style=solid];
"_6\'" [style=solid];
"_7\'" [style=solid];
"_8\'" [style=solid];
"_9\'" [style=solid];
"_AllPhases" [style=solid];
"_AlreadyExists" [style=solid];
"_AnnP" [style=solid];
"_AnyclassStrategy" [style=solid];
"_AppE" [style=solid];
"_AppKindT" [style=solid];
"_AppT" [style=solid];
"_AppTypeE" [style=solid];
"_ArithSeqE" [style=solid];
"_ArrowT" [style=solid];
"_AsP" [style=solid];
"_BangP" [style=solid];
"_BeforePhase" [style=solid];
"_BindS" [style=solid];
"_BytesPrimL" [style=solid];
"_CApi" [style=solid];
"_CCall" [style=solid];
"_CaseE" [style=solid];
"_CharL" [style=solid];
"_CharPrimL" [style=solid];
"_ClassD" [style=solid];
"_ClassI" [style=solid];
"_ClassOpI" [style=solid];
"_ClassP" [style=solid];
"_ClosedTypeFamilyD" [style=solid];
"_CompE" [style=solid];
"_CompleteP" [style=solid];
"_ConE" [style=solid];
"_ConLike" [style=solid];
"_ConP" [style=solid];
"_ConT" [style=solid];
"_CondE" [style=solid];
"_ConstraintT" [style=solid];
"_DataConI" [style=solid];
"_DataD" [style=solid];
"_DataFam" [style=solid];
"_DataFamilyD" [style=solid];
"_DataInstD" [style=solid];
"_DecidedLazy" [style=solid];
"_DecidedStrict" [style=solid];
"_DecidedUnpack" [style=solid];
"_DefaultSigD" [style=solid];
"_Denormal" [style=solid];
"_DivideByZero" [style=solid];
"_DoE" [style=solid];
"_DoublePrimL" [style=solid];
"_EOF" [style=solid];
"_EqualP" [style=solid];
"_EqualityT" [style=solid];
"_ExitFailure" [style=solid];
"_ExitSuccess" [style=solid];
"_ExplBidir" [style=solid];
"_ExportF" [style=solid];
"_FamilyD" [style=solid];
"_FamilyI" [style=solid];
"_FloatPrimL" [style=solid];
"_ForallC" [style=solid];
"_ForallT" [style=solid];
"_ForallVisT" [style=solid];
"_ForeignD" [style=solid];
"_FromPhase" [style=solid];
"_FromR" [style=solid];
"_FromThenR" [style=solid];
"_FromThenToR" [style=solid];
"_FromToR" [style=solid];
"_FunD" [style=solid];
"_FunDep" [style=solid];
"_FunLike" [style=solid];
"_GWrapped\'" [style=solid];
"_GadtC" [style=solid];
"_GuardedB" [style=solid];
"_HardwareFault" [style=solid];
"_HeapOverflow" [style=solid];
"_IllegalOperation" [style=solid];
"_ImplBidir" [style=solid];
"_ImplicitParamBindD" [style=solid];
"_ImplicitParamT" [style=solid];
"_ImplicitParamVarE" [style=solid];
"_ImportF" [style=solid];
"_InappropriateType" [style=solid];
"_Incoherent" [style=solid];
"_IndexOutOfBounds" [style=solid];
"_InferR" [style=solid];
"_InferredSpec" [style=solid];
"_InfixC" [style=solid];
"_InfixD" [style=solid];
"_InfixE" [style=solid];
"_InfixL" [style=solid];
"_InfixN" [style=solid];
"_InfixP" [style=solid];
"_InfixPatSyn" [style=solid];
"_InfixR" [style=solid];
"_InfixT" [style=solid];
"_Inlinable" [style=solid];
"_Inline" [style=solid];
"_InlineP" [style=solid];
"_InstanceD" [style=solid];
"_IntPrimL" [style=solid];
"_IntegerL" [style=solid];
"_Interrupted" [style=solid];
"_Interruptible" [style=solid];
"_InvalidArgument" [style=solid];
"_IsStrict" [style=solid];
"_JavaScript" [style=solid];
"_Just" [style=solid];
"_K1" [style=solid];
"_KindSig" [style=solid];
"_KindedTV" [style=solid];
"_L1" [style=solid];
"_LabelE" [style=solid];
"_LamCaseE" [style=solid];
"_LamE" [style=solid];
"_Left" [style=solid];
"_LetE" [style=solid];
"_LetS" [style=solid];
"_LineP" [style=solid];
"_ListE" [style=solid];
"_ListP" [style=solid];
"_ListT" [style=solid];
"_LitE" [style=solid];
"_LitP" [style=solid];
"_LitT" [style=solid];
"_LossOfPrecision" [style=solid];
"_M1" [style=solid];
"_MDoE" [style=solid];
"_ModuleAnnotation" [style=solid];
"_MulArrowT" [style=solid];
"_MultiIfE" [style=solid];
"_Naturals" [style=solid];
"_NewtypeD" [style=solid];
"_NewtypeInstD" [style=solid];
"_NewtypeStrategy" [style=solid];
"_NoBindS" [style=solid];
"_NoInline" [style=solid];
"_NoSig" [style=solid];
"_NoSourceStrictness" [style=solid];
"_NoSourceUnpackedness" [style=solid];
"_NoSuchThing" [style=solid];
"_NominalR" [style=solid];
"_NormalB" [style=solid];
"_NormalC" [style=solid];
"_NormalG" [style=solid];
"_NotStrict" [style=solid];
"_Nothing" [style=solid];
"_NumTyLit" [style=solid];
"_OpenTypeFamilyD" [style=solid];
"_OtherError" [style=solid];
"_Overflow" [style=solid];
"_Overlappable" [style=solid];
"_Overlapping" [style=solid];
"_Overlaps" [style=solid];
"_Pair" [style=solid];
"_Par1" [style=solid];
"_ParS" [style=solid];
"_ParensE" [style=solid];
"_ParensP" [style=solid];
"_ParensT" [style=solid];
"_PatG" [style=solid];
"_PatSynD" [style=solid];
"_PatSynI" [style=solid];
"_PatSynSigD" [style=solid];
"_PermissionDenied" [style=solid];
"_PhantomR" [style=solid];
"_PlainTV" [style=solid];
"_PragmaD" [style=solid];
"_PrefixPatSyn" [style=solid];
"_Prim" [style=solid];
"_PrimTyConI" [style=solid];
"_PromotedConsT" [style=solid];
"_PromotedNilT" [style=solid];
"_PromotedT" [style=solid];
"_PromotedTupleT" [style=solid];
"_ProtocolError" [style=solid];
"_R1" [style=solid];
"_RatioZeroDenominator" [style=solid];
"_RationalL" [style=solid];
"_Rec1" [style=solid];
"_RecC" [style=solid];
"_RecConE" [style=solid];
"_RecGadtC" [style=solid];
"_RecP" [style=solid];
"_RecS" [style=solid];
"_RecUpdE" [style=solid];
"_RecordPatSyn" [style=solid];
"_RepresentationalR" [style=solid];
"_ResourceBusy" [style=solid];
"_ResourceExhausted" [style=solid];
"_ResourceVanished" [style=solid];
"_Right" [style=solid];
"_RoleAnnotD" [style=solid];
"_RuleP" [style=solid];
"_RuleVar" [style=solid];
"_Safe" [style=solid];
"_Show" [style=solid];
"_SigD" [style=solid];
"_SigE" [style=solid];
"_SigP" [style=solid];
"_SigT" [style=solid];
"_SourceLazy" [style=solid];
"_SourceNoUnpack" [style=solid];
"_SourceStrict" [style=solid];
"_SourceUnpack" [style=solid];
"_SpecialiseInstP" [style=solid];
"_SpecialiseP" [style=solid];
"_SpecifiedSpec" [style=solid];
"_StackOverflow" [style=solid];
"_StandaloneDerivD" [style=solid];
"_StarT" [style=solid];
"_StaticE" [style=solid];
"_StdCall" [style=solid];
"_StockStrategy" [style=solid];
"_StrTyLit" [style=solid];
"_StringL" [style=solid];
"_StringPrimL" [style=solid];
"_Sum" [style=solid];
"_SystemError" [style=solid];
"_Text" [style=solid];
"_ThreadKilled" [style=solid];
"_TildeP" [style=solid];
"_TimeExpired" [style=solid];
"_TupE" [style=solid];
"_TupP" [style=solid];
"_TupleT" [style=solid];
"_TyConI" [style=solid];
"_TySynD" [style=solid];
"_TySynInstD" [style=solid];
"_TyVarI" [style=solid];
"_TyVarSig" [style=solid];
"_TypeAnnotation" [style=solid];
"_TypeFam" [style=solid];
"_TypedRuleVar" [style=solid];
"_U1" [style=solid];
"_UAddr" [style=solid];
"_UChar" [style=solid];
"_UDouble" [style=solid];
"_UFloat" [style=solid];
"_UInfixE" [style=solid];
"_UInfixP" [style=solid];
"_UInfixT" [style=solid];
"_UInt" [style=solid];
"_UWord" [style=solid];
"_UnboundVarE" [style=solid];
"_UnboxedSumE" [style=solid];
"_UnboxedSumP" [style=solid];
"_UnboxedSumT" [style=solid];
"_UnboxedTupE" [style=solid];
"_UnboxedTupP" [style=solid];
"_UnboxedTupleT" [style=solid];
"_UndefinedElement" [style=solid];
"_Underflow" [style=solid];
"_Unidir" [style=solid];
"_Unpacked" [style=solid];
"_Unsafe" [style=solid];
"_UnsatisfiedConstraints" [style=solid];
"_UnsupportedOperation" [style=solid];
"_Unwrapped" [style=solid];
"_Unwrapped\'" [style=solid];
"_Unwrapping" [style=solid];
"_Unwrapping\'" [style=solid];
"_UserError" [style=solid];
"_UserInterrupt" [style=solid];
"_V1" [style=solid];
"_ValD" [style=solid];
"_ValueAnnotation" [style=solid];
"_VarE" [style=solid];
"_VarI" [style=solid];
"_VarP" [style=solid];
"_VarT" [style=solid];
"_ViewP" [style=solid];
"_Void" [style=solid];
"_WildCardT" [style=solid];
"_WildP" [style=solid];
"_WordPrimL" [style=solid];
"_Wrapped" [style=solid];
"_Wrapping" [style=solid];
"_Wrapping\'" [style=solid];
"_cast" [style=solid];
"_conjugate" [style=solid];
"_gcast" [style=solid];
"_head" [style=solid];
"_imagPart" [style=solid];
"_init" [style=solid];
"_last" [style=solid];
"_magnitude" [style=solid];
"_phase" [style=solid];
"_polar" [style=solid];
"_realPart" [style=solid];
"_tail" [style=solid];
"_wrapped\'ValName" [style=solid];
"a" [style=solid];
"abbreviatedFields" [style=solid];
"abbreviatedNamer" [style=solid];
"addFieldClassName" [style=solid];
"adding" [style=solid];
"adjoin" [style=solid];
"after" [style=solid];
"ala" [style=solid];
"alaf" [style=solid];
"allOf" [style=solid];
"alongside" [style=solid];
"andOf" [style=solid];
"anon" [style=solid];
"anyOf" [style=solid];
"apValName" [style=solid];
"applyTypeSubst" [style=solid];
"apps" [style=solid];
"appsE1" [style=solid];
"appsT" [style=solid];
"argument" [style=solid];
"as" [style=solid];
"asIndex" [style=solid];
"asStream" [style=solid];
"asStreamR" [style=solid];
"aside" [style=solid];
"assign" [style=solid];
"assignA" [style=solid];
"asumOf" [style=solid];
"au" [style=solid];
"auf" [style=solid];
"backwards" [style=solid];
"bangSourceStrictness" [style=solid];
"bangSourceUnpackedness" [style=solid];
"base" [style=solid];
"basename" [style=solid];
"below" [style=solid];
"beside" [style=solid];
"bimapping" [style=solid];
"binary" [style=solid];
"biplate" [style=solid];
"biplateData" [style=solid];
"bitAt" [style=solid];
"bits" [style=solid];
"both" [style=solid];
"both1" [style=solid];
"branches" [style=solid];
"buildScaffold" [style=solid];
"buildStab" [style=solid];
"builder" [style=solid];
"byteAt" [style=solid];
"bytes" [style=solid];
"bytewise" [style=solid];
"c2w" [style=solid];
"cache" [style=solid];
"camelCaseFields" [style=solid];
"camelCaseNamer" [style=solid];
"catchJust" [style=solid];
"catches" [style=solid];
"catching" [style=solid];
"catching_" [style=solid];
"censoring" [style=solid];
"chars" [style=solid];
"check" [style=solid];
"children" [style=solid];
"choosing" [style=solid];
"chosen" [style=solid];
"classUnderscoreNoPrefixFields" [style=solid];
"classUnderscoreNoPrefixNamer" [style=solid];
"classyRules" [style=solid];
"classyRulesFor" [style=solid];
"classyRules_" [style=solid];
"clauseBody" [style=solid];
"clauseDecs" [style=solid];
"clausePattern" [style=solid];
"cloneEquality" [style=solid];
"cloneIndexPreservingLens" [style=solid];
"cloneIndexPreservingSetter" [style=solid];
"cloneIndexPreservingTraversal" [style=solid];
"cloneIndexPreservingTraversal1" [style=solid];
"cloneIndexedLens" [style=solid];
"cloneIndexedSetter" [style=solid];
"cloneIndexedTraversal" [style=solid];
"cloneIndexedTraversal1" [style=solid];
"cloneIso" [style=solid];
"cloneLens" [style=solid];
"clonePrism" [style=solid];
"cloneSetter" [style=solid];
"cloneTraversal" [style=solid];
"cloneTraversal1" [style=solid];
"cloned" [style=solid];
"coarr" [style=solid];
"coerce\'" [style=solid];
"coerced" [style=solid];
"composOpFold" [style=solid];
"composeValName" [style=solid];
"computeIsoType" [style=solid];
"computeOpticType" [style=solid];
"computePrismType" [style=solid];
"computeReviewType" [style=solid];
"conAppsT" [style=solid];
"conFields" [style=solid];
"conNamedFields" [style=solid];
"concatMapOf" [style=solid];
"concatOf" [style=solid];
"confusing" [style=solid];
"cons" [style=solid];
"contexts" [style=solid];
"contextsOf" [style=solid];
"contextsOn" [style=solid];
"contextsOnOf" [style=solid];
"contramapped" [style=solid];
"contramapping" [style=solid];
"converted" [style=solid];
"cosmos" [style=solid];
"cosmosOf" [style=solid];
"cosmosOn" [style=solid];
"cosmosOnOf" [style=solid];
"create" [style=solid];
"createClass" [style=solid];
"curried" [style=solid];
"cycled" [style=solid];
"dataBox" [style=solid];
"datatypeTypeKinded" [style=solid];
"deNewtype" [style=solid];
"deRecord" [style=solid];
"decimal" [style=solid];
"declareClassy" [style=solid];
"declareClassyFor" [style=solid];
"declareFields" [style=solid];
"declareLenses" [style=solid];
"declareLensesFor" [style=solid];
"declareLensesWith" [style=solid];
"declarePrisms" [style=solid];
"declareWith" [style=solid];
"declareWrapped" [style=solid];
"deep" [style=solid];
"deepOf" [style=solid];
"deepening" [style=solid];
"defaultFieldRules" [style=solid];
"derivClauseCxt" [style=solid];
"derivClauseStrategy" [style=solid];
"description" [style=solid];
"devoid" [style=solid];
"digitToIntMay" [style=solid];
"digitToInt\'" [style=solid];
"dimapping" [style=solid];
"directory" [style=solid];
"dividing" [style=solid];
"dropFieldName" [style=solid];
"dropping" [style=solid];
"droppingWhile" [style=solid];
"elemIndexOf" [style=solid];
"elemIndicesOf" [style=solid];
"elemOf" [style=solid];
"element" [style=solid];
"elementOf" [style=solid];
"elements" [style=solid];
"elementsOf" [style=solid];
"emit" [style=solid];
"emptyHitMap" [style=solid];
"enum" [style=solid];
"equality" [style=solid];
"equality\'" [style=solid];
"errno" [style=solid];
"errorType" [style=solid];
"evalOf" [style=solid];
"exception" [style=solid];
"exponentiating" [style=solid];
"extension" [style=solid];
"f" [style=solid];
"fab" [style=solid];
"failedAssertion" [style=solid];
"failing" [style=solid];
"failover" [style=solid];
"fieldExpExpression" [style=solid];
"fieldExpName" [style=solid];
"fieldPatName" [style=solid];
"fieldPatPattern" [style=solid];
"fileName" [style=solid];
"filename" [style=solid];
"filtered" [style=solid];
"filteredBy" [style=solid];
"findIndexOf" [style=solid];
"findIndicesOf" [style=solid];
"findMOf" [style=solid];
"findOf" [style=solid];
"first1Of" [style=solid];
"firstOf" [style=solid];
"firsting" [style=solid];
"fixEq" [style=solid];
"fixityDirection" [style=solid];
"fixityPrecedence" [style=solid];
"flipped" [style=solid];
"fmapValName" [style=solid];
"foldByOf" [style=solid];
"foldMapByOf" [style=solid];
"foldMapOf" [style=solid];
"foldOf" [style=solid];
"foldTypeName" [style=solid];
"folded" [style=solid];
"folded64" [style=solid];
"folding" [style=solid];
"foldl1Of" [style=solid];
"foldl1Of\'" [style=solid];
"foldlMOf" [style=solid];
"foldlOf" [style=solid];
"foldlOf\'" [style=solid];
"foldr1Of" [style=solid];
"foldr1Of\'" [style=solid];
"foldrMOf" [style=solid];
"foldrOf" [style=solid];
"foldrOf\'" [style=solid];
"foldring" [style=solid];
"follower" [style=solid];
"for1Of_" [style=solid];
"forMOf" [style=solid];
"forMOf_" [style=solid];
"forOf" [style=solid];
"forOf_" [style=solid];
"forced" [style=solid];
"freshMap" [style=solid];
"from" [style=solid];
"fromEq" [style=solid];
"fromIso" [style=solid];
"fromLeibniz" [style=solid];
"fromLeibniz\'" [style=solid];
"fromLens" [style=solid];
"fromList" [style=solid];
"fromPrism" [style=solid];
"fromSetter" [style=solid];
"fromTraversal" [style=solid];
"funDepInputs" [style=solid];
"funDepOutputs" [style=solid];
"fusing" [style=solid];
"generateLazyPatterns" [style=solid];
"generateSignatures" [style=solid];
"generateUpdateableOptics" [style=solid];
"generic" [style=solid];
"generic1" [style=solid];
"getArrowMonad" [style=solid];
"getCompactionFailed" [style=solid];
"getErrorCall" [style=solid];
"getFirst1" [style=solid];
"getLeftmost" [style=solid];
"getNoMethodError" [style=solid];
"getPatternMatchFail" [style=solid];
"getRecConError" [style=solid];
"getRecSelError" [style=solid];
"getRecUpdError" [style=solid];
"getRightmost" [style=solid];
"getTypeError" [style=solid];
"getterTypeName" [style=solid];
"getting" [style=solid];
"gplate" [style=solid];
"gplate1" [style=solid];
"grain" [style=solid];
"gtraverse" [style=solid];
"handle" [style=solid];
"handlerCatchIO" [style=solid];
"handlerIO" [style=solid];
"handling" [style=solid];
"handling_" [style=solid];
"has" [style=solid];
"hasn\'t" [style=solid];
"head1" [style=solid];
"hex" [style=solid];
"hitTest" [style=solid];
"holeInOne" [style=solid];
"holeInOne1" [style=solid];
"holes" [style=solid];
"holes1Of" [style=solid];
"holesOf" [style=solid];
"holesOn" [style=solid];
"holesOnOf" [style=solid];
"iallOf" [style=solid];
"ianyOf" [style=solid];
"iat" [style=solid];
"icensoring" [style=solid];
"icompose" [style=solid];
"iconcatMapOf" [style=solid];
"icontains" [style=solid];
"idValName" [style=solid];
"idroppingWhile" [style=solid];
"ifailover" [style=solid];
"ifiltered" [style=solid];
"ifindMOf" [style=solid];
"ifindOf" [style=solid];
"ifoldMapBy" [style=solid];
"ifoldMapByOf" [style=solid];
"ifoldMapOf" [style=solid];
"ifolded" [style=solid];
"ifolding" [style=solid];
"ifoldlMOf" [style=solid];
"ifoldlOf" [style=solid];
"ifoldlOf\'" [style=solid];
"ifoldr" [style=solid];
"ifoldr64" [style=solid];
"ifoldrB" [style=solid];
"ifoldrB8" [style=solid];
"ifoldrBL" [style=solid];
"ifoldrBL8" [style=solid];
"ifoldrLazy" [style=solid];
"ifoldrMOf" [style=solid];
"ifoldrOf" [style=solid];
"ifoldrOf\'" [style=solid];
"ifoldrStrict" [style=solid];
"ifoldring" [style=solid];
"iforMOf" [style=solid];
"iforMOf_" [style=solid];
"iforOf" [style=solid];
"iforOf_" [style=solid];
"ignored" [style=solid];
"iix" [style=solid];
"ilens" [style=solid];
"ilevelIns" [style=solid];
"ilevelOuts" [style=solid];
"ilevels" [style=solid];
"ilike" [style=solid];
"ilistening" [style=solid];
"ilistenings" [style=solid];
"ilocally" [style=solid];
"iloci" [style=solid];
"imagma" [style=solid];
"imapAccumLOf" [style=solid];
"imapAccumROf" [style=solid];
"imapB" [style=solid];
"imapB8" [style=solid];
"imapBL" [style=solid];
"imapBL8" [style=solid];
"imapLazy" [style=solid];
"imapList" [style=solid];
"imapMOf" [style=solid];
"imapMOf_" [style=solid];
"imapOf" [style=solid];
"imapStrict" [style=solid];
"imapped" [style=solid];
"imodifying" [style=solid];
"index" [style=solid];
"indexing" [style=solid];
"indexing64" [style=solid];
"indices" [style=solid];
"infix" [style=solid];
"infixl" [style=solid];
"infixr" [style=solid];
"injectivityAnnInputs" [style=solid];
"injectivityAnnOutput" [style=solid];
"inlinePerformIO" [style=solid];
"inlinePragma" [style=solid];
"inoneOf" [style=solid];
"ins" [style=solid];
"insert2" [style=solid];
"insertHitMap" [style=solid];
"inside" [style=solid];
"intToDigit\'" [style=solid];
"integral" [style=solid];
"involuted" [style=solid];
"iover" [style=solid];
"ipartsOf" [style=solid];
"ipartsOf\'" [style=solid];
"ipassing" [style=solid];
"iplens" [style=solid];
"ipre" [style=solid];
"ipreuse" [style=solid];
"ipreuses" [style=solid];
"ipreview" [style=solid];
"ipreviews" [style=solid];
"is" [style=solid];
"isDataFamily" [style=solid];
"isDigit\'" [style=solid];
"isIso" [style=solid];
"isLens" [style=solid];
"isPrism" [style=solid];
"isSetter" [style=solid];
"isTraversal" [style=solid];
"iset" [style=solid];
"isets" [style=solid];
"isn\'t" [style=solid];
"iso" [style=solid];
"isoTypeName" [style=solid];
"isoValName" [style=solid];
"iso\'TypeName" [style=solid];
"iso_hither" [style=solid];
"iso_yon" [style=solid];
"itakingWhile" [style=solid];
"iterated" [style=solid];
"ito" [style=solid];
"itoListOf" [style=solid];
"itraverseBy" [style=solid];
"itraverseByOf" [style=solid];
"itraverseOf" [style=solid];
"itraverseOf_" [style=solid];
"itraversed" [style=solid];
"iunsafePartsOf" [style=solid];
"iunsafePartsOf\'" [style=solid];
"iuse" [style=solid];
"iuses" [style=solid];
"iview" [style=solid];
"iviews" [style=solid];
"ix" [style=solid];
"ixAt" [style=solid];
"ixmapped" [style=solid];
"l" [style=solid];
"lappend" [style=solid];
"last1" [style=solid];
"last1Of" [style=solid];
"lastOf" [style=solid];
"lazy" [style=solid];
"leftDataName" [style=solid];
"length" [style=solid];
"lengthOf" [style=solid];
"lens" [style=solid];
"lensClass" [style=solid];
"lensField" [style=solid];
"lensPackageKey" [style=solid];
"lensProduct" [style=solid];
"lensRules" [style=solid];
"lensRulesFor" [style=solid];
"lensTypeName" [style=solid];
"lens\'TypeName" [style=solid];
"lens_set_view" [style=solid];
"lens_view_set" [style=solid];
"levelIns" [style=solid];
"levelOuts" [style=solid];
"levels" [style=solid];
"liftDeclare" [style=solid];
"lifted" [style=solid];
"like" [style=solid];
"limitedSubst" [style=solid];
"lined" [style=solid];
"listening" [style=solid];
"listenings" [style=solid];
"lmapping" [style=solid];
"locEnd" [style=solid];
"locFileName" [style=solid];
"locModule" [style=solid];
"locPackage" [style=solid];
"locStart" [style=solid];
"locally" [style=solid];
"location" [style=solid];
"loci" [style=solid];
"locus" [style=solid];
"lookingupNamer" [style=solid];
"lookupOf" [style=solid];
"lookupon" [style=solid];
"magma" [style=solid];
"makeClassy" [style=solid];
"makeClassyClass" [style=solid];
"makeClassyDriver" [style=solid];
"makeClassyFor" [style=solid];
"makeClassyInstance" [style=solid];
"makeClassyPrismClass" [style=solid];
"makeClassyPrismInstance" [style=solid];
"makeClassyPrisms" [style=solid];
"makeClassy_" [style=solid];
"makeConIso" [style=solid];
"makeConIsoExp" [style=solid];
"makeConOpticExp" [style=solid];
"makeConPrismExp" [style=solid];
"makeConReviewExp" [style=solid];
"makeConsPrisms" [style=solid];
"makeDataDecl" [style=solid];
"makeDecPrisms" [style=solid];
"makeFieldClass" [style=solid];
"makeFieldClauses" [style=solid];
"makeFieldInstance" [style=solid];
"makeFieldOptic" [style=solid];
"makeFieldOpticClause" [style=solid];
"makeFieldOptics" [style=solid];
"makeFieldOpticsForDatatype" [style=solid];
"makeFieldOpticsForDec" [style=solid];
"makeFieldOpticsForDec\'" [style=solid];
"makeFields" [style=solid];
"makeFieldsNoPrefix" [style=solid];
"makeFullRemitter" [style=solid];
"makeGetterClause" [style=solid];
"makeIsoClause" [style=solid];
"makeIsoRemitter" [style=solid];
"makeLenses" [style=solid];
"makeLensesFor" [style=solid];
"makeLensesWith" [style=solid];
"makePrisms" [style=solid];
"makePrisms\'" [style=solid];
"makePureClause" [style=solid];
"makeReviewer" [style=solid];
"makeRewrappedInstance" [style=solid];
"makeSimpleRemitter" [style=solid];
"makeWrapped" [style=solid];
"makeWrappedForDec" [style=solid];
"makeWrappedInstance" [style=solid];
"mapAccumLOf" [style=solid];
"mapAccumROf" [style=solid];
"mapEq" [style=solid];
"mapMOf" [style=solid];
"mapMOf_" [style=solid];
"mapOf" [style=solid];
"mapped" [style=solid];
"mappedException" [style=solid];
"mappedException\'" [style=solid];
"mapping" [style=solid];
"mappingNamer" [style=solid];
"matchBody" [style=solid];
"matchDeclarations" [style=solid];
"matchPattern" [style=solid];
"matching" [style=solid];
"maximum1Of" [style=solid];
"maximumByOf" [style=solid];
"maximumOf" [style=solid];
"members" [style=solid];
"minimum1Of" [style=solid];
"minimumByOf" [style=solid];
"minimumOf" [style=solid];
"mkLensName_tc" [style=solid];
"mkLensName_v" [style=solid];
"modifying" [style=solid];
"msumOf" [style=solid];
"multiplying" [style=solid];
"nconCxt" [style=solid];
"nconName" [style=solid];
"nconTypes" [style=solid];
"nearly" [style=solid];
"negated" [style=solid];
"newNames" [style=solid];
"noEffect" [style=solid];
"non" [style=solid];
"non\'" [style=solid];
"noneOf" [style=solid];
"normalizeCon" [style=solid];
"normalizeConstructor" [style=solid];
"notElemOf" [style=solid];
"notNullOf" [style=solid];
"null" [style=solid];
"nullOf" [style=solid];
"octal" [style=solid];
"onceUpon" [style=solid];
"onceUpon\'" [style=solid];
"only" [style=solid];
"op" [style=solid];
"orOf" [style=solid];
"ordinalNub" [style=solid];
"ordinalNubHelper" [style=solid];
"ordinals" [style=solid];
"outs" [style=solid];
"outside" [style=solid];
"over" [style=solid];
"overA" [style=solid];
"overEquality" [style=solid];
"overHead" [style=solid];
"packed" [style=solid];
"packedBytes" [style=solid];
"packedChars" [style=solid];
"parOf" [style=solid];
"para" [style=solid];
"paraOf" [style=solid];
"parr" [style=solid];
"part" [style=solid];
"parts" [style=solid];
"partsOf" [style=solid];
"partsOf\'" [style=solid];
"passing" [style=solid];
"pattern" [style=solid];
"phantom2" [style=solid];
"phantomValName" [style=solid];
"pins" [style=solid];
"pre" [style=solid];
"prefixed" [style=solid];
"preuse" [style=solid];
"preuses" [style=solid];
"preview" [style=solid];
"previews" [style=solid];
"prism" [style=solid];
"prismName" [style=solid];
"prismName\'" [style=solid];
"prismSum" [style=solid];
"prismTypeName" [style=solid];
"prismValName" [style=solid];
"prism\'" [style=solid];
"prism\'TypeName" [style=solid];
"prism_yang" [style=solid];
"prism_yin" [style=solid];
"productOf" [style=solid];
"proxyN0" [style=solid];
"proxyN1" [style=solid];
"proxyN10" [style=solid];
"proxyN11" [style=solid];
"proxyN12" [style=solid];
"proxyN13" [style=solid];
"proxyN14" [style=solid];
"proxyN15" [style=solid];
"proxyN16" [style=solid];
"proxyN17" [style=solid];
"proxyN18" [style=solid];
"proxyN2" [style=solid];
"proxyN3" [style=solid];
"proxyN4" [style=solid];
"proxyN5" [style=solid];
"proxyN6" [style=solid];
"proxyN7" [style=solid];
"proxyN8" [style=solid];
"proxyN9" [style=solid];
"pureValName" [style=solid];
"quantifyType" [style=solid];
"quantifyType\'" [style=solid];
"re" [style=solid];
"readCacheFollower" [style=solid];
"readSigned\'" [style=solid];
"reindexed" [style=solid];
"repeated" [style=solid];
"replicated" [style=solid];
"retagged" [style=solid];
"reuse" [style=solid];
"reuses" [style=solid];
"reversed" [style=solid];
"review" [style=solid];
"reviewTypeName" [style=solid];
"reviewing" [style=solid];
"reviews" [style=solid];
"rewrappedTypeName" [style=solid];
"rewrite" [style=solid];
"rewriteM" [style=solid];
"rewriteMOf" [style=solid];
"rewriteMOn" [style=solid];
"rewriteMOnOf" [style=solid];
"rewriteOf" [style=solid];
"rewriteOn" [style=solid];
"rewriteOnOf" [style=solid];
"rightDataName" [style=solid];
"rmapConst" [style=solid];
"rmapping" [style=solid];
"root" [style=solid];
"runDeclare" [style=solid];
"runEq" [style=solid];
"runMafic" [style=solid];
"runMagma" [style=solid];
"runTakingWhile" [style=solid];
"s" [style=solid];
"sans" [style=solid];
"sansVar" [style=solid];
"scanl1Of" [style=solid];
"scanr1Of" [style=solid];
"scribe" [style=solid];
"seconding" [style=solid];
"selfIndex" [style=solid];
"seqOf" [style=solid];
"sequence1Of_" [style=solid];
"sequenceAOf" [style=solid];
"sequenceAOf_" [style=solid];
"sequenceByOf" [style=solid];
"sequenceOf" [style=solid];
"sequenceOf_" [style=solid];
"set" [style=solid];
"setOf" [style=solid];
"set\'" [style=solid];
"setmapped" [style=solid];
"sets" [style=solid];
"setter_composition" [style=solid];
"setter_id" [style=solid];
"setter_set_set" [style=solid];
"setting" [style=solid];
"showSigned\'" [style=solid];
"simple" [style=solid];
"simpleLenses" [style=solid];
"simplifyStab" [style=solid];
"simply" [style=solid];
"singleton" [style=solid];
"singular" [style=solid];
"size" [style=solid];
"skip" [style=solid];
"sliced" [style=solid];
"slicedFrom" [style=solid];
"slicedTo" [style=solid];
"snoc" [style=solid];
"stabSimple" [style=solid];
"stabToA" [style=solid];
"stabToContext" [style=solid];
"stabToOptic" [style=solid];
"stabToS" [style=solid];
"stabToType" [style=solid];
"stabType" [style=solid];
"step" [style=solid];
"storing" [style=solid];
"strict" [style=solid];
"stripFields" [style=solid];
"stripSuffix" [style=solid];
"substEq" [style=solid];
"substTypeVars" [style=solid];
"subtracting" [style=solid];
"suffixed" [style=solid];
"sumOf" [style=solid];
"swapped" [style=solid];
"sybChildren" [style=solid];
"taking" [style=solid];
"takingWhile" [style=solid];
"template" [style=solid];
"text" [style=solid];
"throughout" [style=solid];
"throwing" [style=solid];
"throwingM" [style=solid];
"throwingTo" [style=solid];
"throwing_" [style=solid];
"tinplate" [style=solid];
"to" [style=solid];
"toIso" [style=solid];
"toLens" [style=solid];
"toListOf" [style=solid];
"toMapOf" [style=solid];
"toNonEmptyOf" [style=solid];
"toPrism" [style=solid];
"toSetter" [style=solid];
"toTraversal" [style=solid];
"toTupleE" [style=solid];
"toTupleP" [style=solid];
"toTupleT" [style=solid];
"toVectorOf" [style=solid];
"transform" [style=solid];
"transformM" [style=solid];
"transformMOf" [style=solid];
"transformMOn" [style=solid];
"transformMOnOf" [style=solid];
"transformOf" [style=solid];
"transformOn" [style=solid];
"transformOnOf" [style=solid];
"transposeOf" [style=solid];
"traversalTypeName" [style=solid];
"traversal\'TypeName" [style=solid];
"traverse1Of_" [style=solid];
"traverseByOf" [style=solid];
"traverseDataAndNewtype" [style=solid];
"traverseOf" [style=solid];
"traverseOf_" [style=solid];
"traverse_compose" [style=solid];
"traverse_pure" [style=solid];
"traverse_pureList" [style=solid];
"traverse_pureMaybe" [style=solid];
"traversed" [style=solid];
"traversed1" [style=solid];
"traversed64" [style=solid];
"traversedLazy" [style=solid];
"traversedLazy8" [style=solid];
"traversedStrictTree" [style=solid];
"traversedStrictTree8" [style=solid];
"triml" [style=solid];
"trimr" [style=solid];
"trivial" [style=solid];
"trying" [style=solid];
"trying_" [style=solid];
"tvbToType" [style=solid];
"tySynEqnLHS" [style=solid];
"tySynEqnPatterns" [style=solid];
"tySynEqnResult" [style=solid];
"typeFamilyHeadInjectivityAnn" [style=solid];
"typeFamilyHeadName" [style=solid];
"typeFamilyHeadResultSig" [style=solid];
"typeFamilyHeadTyVarBndrs" [style=solid];
"typeVars" [style=solid];
"un" [style=solid];
"unSigT" [style=solid];
"uncons" [style=solid];
"unconsWithDefault" [style=solid];
"uncurried" [style=solid];
"under" [style=solid];
"underEquality" [style=solid];
"underscoreFields" [style=solid];
"underscoreNamer" [style=solid];
"underscoreNoPrefixNamer" [style=solid];
"unfoldType" [style=solid];
"unfolded" [style=solid];
"unify1" [style=solid];
"unifyTypes" [style=solid];
"uniplate" [style=solid];
"uniplateData" [style=solid];
"united" [style=solid];
"universe" [style=solid];
"universeOf" [style=solid];
"universeOn" [style=solid];
"universeOnOf" [style=solid];
"unpacked" [style=solid];
"unpackedBytes" [style=solid];
"unpackedChars" [style=solid];
"unsafeCreate" [style=solid];
"unsafeOuts" [style=solid];
"unsafePartsOf" [style=solid];
"unsafePartsOf\'" [style=solid];
"unsafeSingular" [style=solid];
"unsnoc" [style=solid];
"unto" [style=solid];
"untoValName" [style=solid];
"unwrappedTypeName" [style=solid];
"upon" [style=solid];
"upon\'" [style=solid];
"use" [style=solid];
"uses" [style=solid];
"utf8" [style=solid];
"vector" [style=solid];
"vectorIx" [style=solid];
"vectorTraverse" [style=solid];
"view" [style=solid];
"viewL" [style=solid];
"viewR" [style=solid];
"views" [style=solid];
"w2c" [style=solid];
"wins" [style=solid];
"withEquality" [style=solid];
"withIndex" [style=solid];
"withIso" [style=solid];
"withLens" [style=solid];
"withPrism" [style=solid];
"without" [style=solid];
"worded" [style=solid];
"wrappedTypeName" [style=solid];
"xplat" [style=solid];
"xplatf" [style=solid];
"" -> "a";
"" -> "isIso";
"" -> "isLens";
"" -> "isPrism";
"" -> "isSetter";
"" -> "isTraversal";
"" -> "s";
"_10\'" -> "a";
"_10\'" -> "f";
"_10\'" -> "s";
"_11\'" -> "a";
"_11\'" -> "f";
"_11\'" -> "s";
"_12\'" -> "a";
"_12\'" -> "f";
"_12\'" -> "s";
"_13\'" -> "a";
"_13\'" -> "f";
"_13\'" -> "s";
"_14\'" -> "a";
"_14\'" -> "f";
"_14\'" -> "s";
"_15\'" -> "a";
"_15\'" -> "f";
"_15\'" -> "s";
"_16\'" -> "a";
"_16\'" -> "f";
"_16\'" -> "s";
"_17\'" -> "a";
"_17\'" -> "f";
"_17\'" -> "s";
"_18\'" -> "a";
"_18\'" -> "f";
"_18\'" -> "s";
"_19\'" -> "a";
"_19\'" -> "f";
"_19\'" -> "s";
"_1\'" -> "a";
"_1\'" -> "f";
"_1\'" -> "s";
"_2\'" -> "a";
"_2\'" -> "f";
"_2\'" -> "s";
"_3\'" -> "a";
"_3\'" -> "f";
"_3\'" -> "s";
"_4\'" -> "a";
"_4\'" -> "f";
"_4\'" -> "s";
"_5\'" -> "a";
"_5\'" -> "f";
"_5\'" -> "s";
"_6\'" -> "a";
"_6\'" -> "f";
"_6\'" -> "s";
"_7\'" -> "a";
"_7\'" -> "f";
"_7\'" -> "s";
"_8\'" -> "a";
"_8\'" -> "f";
"_8\'" -> "s";
"_9\'" -> "a";
"_9\'" -> "f";
"_9\'" -> "s";
"_AllPhases" -> "prism\'";
"_AlreadyExists" -> "only";
"_AnnP" -> "prism\'";
"_AnyclassStrategy" -> "prism\'";
"_AppE" -> "prism\'";
"_AppKindT" -> "prism\'";
"_AppT" -> "prism\'";
"_AppTypeE" -> "prism\'";
"_ArithSeqE" -> "prism\'";
"_ArrowT" -> "prism\'";
"_AsP" -> "prism\'";
"_BangP" -> "prism\'";
"_BeforePhase" -> "prism\'";
"_BindS" -> "prism\'";
"_BytesPrimL" -> "prism\'";
"_CApi" -> "prism\'";
"_CCall" -> "prism\'";
"_CaseE" -> "prism\'";
"_CharL" -> "prism\'";
"_CharPrimL" -> "prism\'";
"_ClassD" -> "prism\'";
"_ClassI" -> "prism\'";
"_ClassOpI" -> "prism\'";
"_ClassP" -> "prism\'";
"_ClosedTypeFamilyD" -> "prism\'";
"_CompE" -> "prism\'";
"_CompleteP" -> "prism\'";
"_ConE" -> "prism\'";
"_ConLike" -> "prism\'";
"_ConP" -> "prism\'";
"_ConT" -> "prism\'";
"_CondE" -> "prism\'";
"_ConstraintT" -> "prism\'";
"_DataConI" -> "prism\'";
"_DataD" -> "prism\'";
"_DataFam" -> "prism\'";
"_DataFamilyD" -> "prism\'";
"_DataInstD" -> "prism\'";
"_DecidedLazy" -> "prism\'";
"_DecidedStrict" -> "prism\'";
"_DecidedUnpack" -> "prism\'";
"_DefaultSigD" -> "prism\'";
"_Denormal" -> "_Denormal";
"_Denormal" -> "has";
"_DivideByZero" -> "_DivideByZero";
"_DivideByZero" -> "has";
"_DoE" -> "prism\'";
"_DoublePrimL" -> "prism\'";
"_EOF" -> "only";
"_EqualP" -> "prism\'";
"_EqualityT" -> "prism\'";
"_ExitFailure" -> "_ExitSuccess";
"_ExitFailure" -> "has";
"_ExplBidir" -> "prism\'";
"_ExportF" -> "prism\'";
"_FamilyD" -> "prism\'";
"_FamilyI" -> "prism\'";
"_FloatPrimL" -> "prism\'";
"_ForallC" -> "prism\'";
"_ForallT" -> "prism\'";
"_ForallVisT" -> "prism\'";
"_ForeignD" -> "prism\'";
"_FromPhase" -> "prism\'";
"_FromR" -> "prism\'";
"_FromThenR" -> "prism\'";
"_FromThenToR" -> "prism\'";
"_FromToR" -> "prism\'";
"_FunD" -> "prism\'";
"_FunDep" -> "iso";
"_FunLike" -> "prism\'";
"_GWrapped\'" -> "_Wrapped";
"_GWrapped\'" -> "a";
"_GWrapped\'" -> "iso";
"_GWrapped\'" -> "s";
"_GWrapped\'" -> "view";
"_GadtC" -> "prism\'";
"_GuardedB" -> "prism\'";
"_HardwareFault" -> "only";
"_HeapOverflow" -> "_HeapOverflow";
"_HeapOverflow" -> "has";
"_IllegalOperation" -> "only";
"_ImplBidir" -> "prism\'";
"_ImplicitParamBindD" -> "prism\'";
"_ImplicitParamT" -> "prism\'";
"_ImplicitParamVarE" -> "prism\'";
"_ImportF" -> "prism\'";
"_InappropriateType" -> "only";
"_Incoherent" -> "prism\'";
"_IndexOutOfBounds" -> "_IndexOutOfBounds";
"_IndexOutOfBounds" -> "preview";
"_InferR" -> "prism\'";
"_InferredSpec" -> "prism\'";
"_InfixC" -> "prism\'";
"_InfixD" -> "prism\'";
"_InfixE" -> "prism\'";
"_InfixL" -> "prism\'";
"_InfixN" -> "prism\'";
"_InfixP" -> "prism\'";
"_InfixPatSyn" -> "prism\'";
"_InfixR" -> "prism\'";
"_InfixT" -> "prism\'";
"_Inlinable" -> "prism\'";
"_Inline" -> "prism\'";
"_InlineP" -> "prism\'";
"_InstanceD" -> "prism\'";
"_IntPrimL" -> "prism\'";
"_IntegerL" -> "prism\'";
"_Interrupted" -> "only";
"_Interruptible" -> "prism\'";
"_InvalidArgument" -> "only";
"_IsStrict" -> "prism\'";
"_JavaScript" -> "prism\'";
"_Just" -> "a";
"_Just" -> "prism";
"_K1" -> "f";
"_K1" -> "iso";
"_KindSig" -> "prism\'";
"_KindedTV" -> "prism\'";
"_L1" -> "a";
"_L1" -> "f";
"_L1" -> "l";
"_L1" -> "prism";
"_LabelE" -> "prism\'";
"_LamCaseE" -> "prism\'";
"_LamE" -> "prism\'";
"_Left" -> "a";
"_Left" -> "prism";
"_LetE" -> "prism\'";
"_LetS" -> "prism\'";
"_LineP" -> "prism\'";
"_ListE" -> "prism\'";
"_ListP" -> "prism\'";
"_ListT" -> "prism\'";
"_LitE" -> "prism\'";
"_LitP" -> "prism\'";
"_LitT" -> "prism\'";
"_LossOfPrecision" -> "_LossOfPrecision";
"_LossOfPrecision" -> "has";
"_M1" -> "a";
"_M1" -> "f";
"_M1" -> "iso";
"_MDoE" -> "prism\'";
"_ModuleAnnotation" -> "prism\'";
"_MulArrowT" -> "prism\'";
"_MultiIfE" -> "prism\'";
"_Naturals" -> "_Pair";
"_Naturals" -> "iso";
"_Naturals" -> "review";
"_NewtypeD" -> "prism\'";
"_NewtypeInstD" -> "prism\'";
"_NewtypeStrategy" -> "a";
"_NewtypeStrategy" -> "adding";
"_NewtypeStrategy" -> "base";
"_NewtypeStrategy" -> "binary";
"_NewtypeStrategy" -> "decimal";
"_NewtypeStrategy" -> "dividing";
"_NewtypeStrategy" -> "exponentiating";
"_NewtypeStrategy" -> "hex";
"_NewtypeStrategy" -> "integral";
"_NewtypeStrategy" -> "multiplying";
"_NewtypeStrategy" -> "negated";
"_NewtypeStrategy" -> "octal";
"_NewtypeStrategy" -> "pattern";
"_NewtypeStrategy" -> "prism\'";
"_NewtypeStrategy" -> "subtracting";
"_NoBindS" -> "prism\'";
"_NoInline" -> "prism\'";
"_NoSig" -> "prism\'";
"_NoSourceStrictness" -> "prism\'";
"_NoSourceUnpackedness" -> "prism\'";
"_NoSuchThing" -> "only";
"_NominalR" -> "prism\'";
"_NormalB" -> "prism\'";
"_NormalC" -> "prism\'";
"_NormalG" -> "prism\'";
"_NotStrict" -> "prism\'";
"_Nothing" -> "a";
"_Nothing" -> "prism\'";
"_Nothing" -> "s";
"_NumTyLit" -> "prism\'";
"_OpenTypeFamilyD" -> "prism\'";
"_OtherError" -> "only";
"_Overflow" -> "_Overflow";
"_Overflow" -> "has";
"_Overlappable" -> "prism\'";
"_Overlapping" -> "prism\'";
"_Overlaps" -> "prism\'";
"_Pair" -> "iso";
"_Par1" -> "f";
"_Par1" -> "iso";
"_ParS" -> "prism\'";
"_ParensE" -> "prism\'";
"_ParensP" -> "prism\'";
"_ParensT" -> "prism\'";
"_PatG" -> "prism\'";
"_PatSynD" -> "prism\'";
"_PatSynI" -> "prism\'";
"_PatSynSigD" -> "prism\'";
"_PermissionDenied" -> "only";
"_PhantomR" -> "prism\'";
"_PlainTV" -> "prism\'";
"_PragmaD" -> "prism\'";
"_PrefixPatSyn" -> "prism\'";
"_Prim" -> "prism\'";
"_PrimTyConI" -> "prism\'";
"_PromotedConsT" -> "prism\'";
"_PromotedNilT" -> "prism\'";
"_PromotedT" -> "prism\'";
"_PromotedTupleT" -> "prism\'";
"_ProtocolError" -> "only";
"_R1" -> "l";
"_R1" -> "prism";
"_RatioZeroDenominator" -> "_RatioZeroDenominator";
"_RatioZeroDenominator" -> "has";
"_RationalL" -> "prism\'";
"_Rec1" -> "iso";
"_RecC" -> "prism\'";
"_RecConE" -> "prism\'";
"_RecGadtC" -> "prism\'";
"_RecP" -> "prism\'";
"_RecS" -> "prism\'";
"_RecUpdE" -> "prism\'";
"_RecordPatSyn" -> "prism\'";
"_RepresentationalR" -> "prism\'";
"_ResourceBusy" -> "only";
"_ResourceExhausted" -> "only";
"_ResourceVanished" -> "only";
"_Right" -> "a";
"_Right" -> "prism";
"_RoleAnnotD" -> "prism\'";
"_RuleP" -> "prism\'";
"_RuleVar" -> "prism\'";
"_Safe" -> "prism\'";
"_Show" -> "a";
"_Show" -> "fromIso";
"_Show" -> "fromLens";
"_Show" -> "fromPrism";
"_Show" -> "fromSetter";
"_Show" -> "fromTraversal";
"_Show" -> "prism";
"_Show" -> "s";
"_Show" -> "toIso";
"_Show" -> "toLens";
"_Show" -> "toPrism";
"_Show" -> "toSetter";
"_Show" -> "toTraversal";
"_SigD" -> "prism\'";
"_SigE" -> "prism\'";
"_SigP" -> "prism\'";
"_SigT" -> "prism\'";
"_SourceLazy" -> "prism\'";
"_SourceNoUnpack" -> "prism\'";
"_SourceStrict" -> "prism\'";
"_SourceUnpack" -> "prism\'";
"_SpecialiseInstP" -> "prism\'";
"_SpecialiseP" -> "prism\'";
"_SpecifiedSpec" -> "prism\'";
"_StackOverflow" -> "_StackOverflow";
"_StackOverflow" -> "has";
"_StandaloneDerivD" -> "prism\'";
"_StarT" -> "prism\'";
"_StaticE" -> "prism\'";
"_StdCall" -> "prism\'";
"_StockStrategy" -> "prism\'";
"_StrTyLit" -> "prism\'";
"_StringL" -> "prism\'";
"_StringPrimL" -> "prism\'";
"_Sum" -> "iso";
"_SystemError" -> "only";
"_Text" -> "_Text";
"_Text" -> "a";
"_Text" -> "from";
"_Text" -> "packed";
"_Text" -> "unpacked";
"_Text" -> "view";
"_ThreadKilled" -> "_ThreadKilled";
"_ThreadKilled" -> "has";
"_TildeP" -> "prism\'";
"_TimeExpired" -> "only";
"_TupE" -> "prism\'";
"_TupP" -> "prism\'";
"_TupleT" -> "prism\'";
"_TyConI" -> "prism\'";
"_TySynD" -> "prism\'";
"_TySynInstD" -> "prism\'";
"_TyVarI" -> "prism\'";
"_TyVarSig" -> "prism\'";
"_TypeAnnotation" -> "prism\'";
"_TypeFam" -> "prism\'";
"_TypedRuleVar" -> "prism\'";
"_U1" -> "iso";
"_UAddr" -> "a";
"_UAddr" -> "iso";
"_UChar" -> "iso";
"_UDouble" -> "iso";
"_UFloat" -> "f";
"_UFloat" -> "iso";
"_UInfixE" -> "prism\'";
"_UInfixP" -> "prism\'";
"_UInfixT" -> "prism\'";
"_UInt" -> "iso";
"_UWord" -> "_AllPhases";
"_UWord" -> "_AnnP";
"_UWord" -> "_AnyclassStrategy";
"_UWord" -> "_AppE";
"_UWord" -> "_AppKindT";
"_UWord" -> "_AppT";
"_UWord" -> "_AppTypeE";
"_UWord" -> "_ArithSeqE";
"_UWord" -> "_ArrowT";
"_UWord" -> "_AsP";
"_UWord" -> "_BangP";
"_UWord" -> "_BeforePhase";
"_UWord" -> "_BindS";
"_UWord" -> "_BytesPrimL";
"_UWord" -> "_CApi";
"_UWord" -> "_CCall";
"_UWord" -> "_CaseE";
"_UWord" -> "_CharL";
"_UWord" -> "_CharPrimL";
"_UWord" -> "_ClassD";
"_UWord" -> "_ClassI";
"_UWord" -> "_ClassOpI";
"_UWord" -> "_ClassP";
"_UWord" -> "_ClosedTypeFamilyD";
"_UWord" -> "_CompE";
"_UWord" -> "_CompleteP";
"_UWord" -> "_ConE";
"_UWord" -> "_ConLike";
"_UWord" -> "_ConP";
"_UWord" -> "_ConT";
"_UWord" -> "_CondE";
"_UWord" -> "_ConstraintT";
"_UWord" -> "_DataConI";
"_UWord" -> "_DataD";
"_UWord" -> "_DataFam";
"_UWord" -> "_DataFamilyD";
"_UWord" -> "_DataInstD";
"_UWord" -> "_DecidedLazy";
"_UWord" -> "_DecidedStrict";
"_UWord" -> "_DecidedUnpack";
"_UWord" -> "_DefaultSigD";
"_UWord" -> "_DoE";
"_UWord" -> "_DoublePrimL";
"_UWord" -> "_EqualP";
"_UWord" -> "_EqualityT";
"_UWord" -> "_ExplBidir";
"_UWord" -> "_ExportF";
"_UWord" -> "_FamilyD";
"_UWord" -> "_FamilyI";
"_UWord" -> "_FloatPrimL";
"_UWord" -> "_ForallC";
"_UWord" -> "_ForallT";
"_UWord" -> "_ForallVisT";
"_UWord" -> "_ForeignD";
"_UWord" -> "_FromPhase";
"_UWord" -> "_FromR";
"_UWord" -> "_FromThenR";
"_UWord" -> "_FromThenToR";
"_UWord" -> "_FromToR";
"_UWord" -> "_FunD";
"_UWord" -> "_FunDep";
"_UWord" -> "_FunLike";
"_UWord" -> "_GadtC";
"_UWord" -> "_GuardedB";
"_UWord" -> "_ImplBidir";
"_UWord" -> "_ImplicitParamBindD";
"_UWord" -> "_ImplicitParamT";
"_UWord" -> "_ImplicitParamVarE";
"_UWord" -> "_ImportF";
"_UWord" -> "_Incoherent";
"_UWord" -> "_InferR";
"_UWord" -> "_InferredSpec";
"_UWord" -> "_InfixC";
"_UWord" -> "_InfixD";
"_UWord" -> "_InfixE";
"_UWord" -> "_InfixL";
"_UWord" -> "_InfixN";
"_UWord" -> "_InfixP";
"_UWord" -> "_InfixPatSyn";
"_UWord" -> "_InfixR";
"_UWord" -> "_InfixT";
"_UWord" -> "_Inlinable";
"_UWord" -> "_Inline";
"_UWord" -> "_InlineP";
"_UWord" -> "_InstanceD";
"_UWord" -> "_IntPrimL";
"_UWord" -> "_IntegerL";
"_UWord" -> "_Interruptible";
"_UWord" -> "_IsStrict";
"_UWord" -> "_JavaScript";
"_UWord" -> "_KindSig";
"_UWord" -> "_KindedTV";
"_UWord" -> "_LabelE";
"_UWord" -> "_LamCaseE";
"_UWord" -> "_LamE";
"_UWord" -> "_LetE";
"_UWord" -> "_LetS";
"_UWord" -> "_LineP";
"_UWord" -> "_ListE";
"_UWord" -> "_ListP";
"_UWord" -> "_ListT";
"_UWord" -> "_LitE";
"_UWord" -> "_LitP";
"_UWord" -> "_LitT";
"_UWord" -> "_MDoE";
"_UWord" -> "_ModuleAnnotation";
"_UWord" -> "_MulArrowT";
"_UWord" -> "_MultiIfE";
"_UWord" -> "_NewtypeD";
"_UWord" -> "_NewtypeInstD";
"_UWord" -> "_NewtypeStrategy";
"_UWord" -> "_NoBindS";
"_UWord" -> "_NoInline";
"_UWord" -> "_NoSig";
"_UWord" -> "_NoSourceStrictness";
"_UWord" -> "_NoSourceUnpackedness";
"_UWord" -> "_NominalR";
"_UWord" -> "_NormalB";
"_UWord" -> "_NormalC";
"_UWord" -> "_NormalG";
"_UWord" -> "_NotStrict";
"_UWord" -> "_NumTyLit";
"_UWord" -> "_OpenTypeFamilyD";
"_UWord" -> "_Overlappable";
"_UWord" -> "_Overlapping";
"_UWord" -> "_Overlaps";
"_UWord" -> "_ParS";
"_UWord" -> "_ParensE";
"_UWord" -> "_ParensP";
"_UWord" -> "_ParensT";
"_UWord" -> "_PatG";
"_UWord" -> "_PatSynD";
"_UWord" -> "_PatSynI";
"_UWord" -> "_PatSynSigD";
"_UWord" -> "_PhantomR";
"_UWord" -> "_PlainTV";
"_UWord" -> "_PragmaD";
"_UWord" -> "_PrefixPatSyn";
"_UWord" -> "_Prim";
"_UWord" -> "_PrimTyConI";
"_UWord" -> "_PromotedConsT";
"_UWord" -> "_PromotedNilT";
"_UWord" -> "_PromotedT";
"_UWord" -> "_PromotedTupleT";
"_UWord" -> "_RationalL";
"_UWord" -> "_RecC";
"_UWord" -> "_RecConE";
"_UWord" -> "_RecGadtC";
"_UWord" -> "_RecP";
"_UWord" -> "_RecS";
"_UWord" -> "_RecUpdE";
"_UWord" -> "_RecordPatSyn";
"_UWord" -> "_RepresentationalR";
"_UWord" -> "_RoleAnnotD";
"_UWord" -> "_RuleP";
"_UWord" -> "_RuleVar";
"_UWord" -> "_Safe";
"_UWord" -> "_SigD";
"_UWord" -> "_SigE";
"_UWord" -> "_SigP";
"_UWord" -> "_SigT";
"_UWord" -> "_SourceLazy";
"_UWord" -> "_SourceNoUnpack";
"_UWord" -> "_SourceStrict";
"_UWord" -> "_SourceUnpack";
"_UWord" -> "_SpecialiseInstP";
"_UWord" -> "_SpecialiseP";
"_UWord" -> "_SpecifiedSpec";
"_UWord" -> "_StandaloneDerivD";
"_UWord" -> "_StarT";
"_UWord" -> "_StaticE";
"_UWord" -> "_StdCall";
"_UWord" -> "_StockStrategy";
"_UWord" -> "_StrTyLit";
"_UWord" -> "_StringL";
"_UWord" -> "_StringPrimL";
"_UWord" -> "_TildeP";
"_UWord" -> "_TupE";
"_UWord" -> "_TupP";
"_UWord" -> "_TupleT";
"_UWord" -> "_TyConI";
"_UWord" -> "_TySynD";
"_UWord" -> "_TySynInstD";
"_UWord" -> "_TyVarI";
"_UWord" -> "_TyVarSig";
"_UWord" -> "_TypeAnnotation";
"_UWord" -> "_TypeFam";
"_UWord" -> "_TypedRuleVar";
"_UWord" -> "_UInfixE";
"_UWord" -> "_UInfixP";
"_UWord" -> "_UInfixT";
"_UWord" -> "_UnboundVarE";
"_UWord" -> "_UnboxedSumE";
"_UWord" -> "_UnboxedSumP";
"_UWord" -> "_UnboxedSumT";
"_UWord" -> "_UnboxedTupE";
"_UWord" -> "_UnboxedTupP";
"_UWord" -> "_UnboxedTupleT";
"_UWord" -> "_Unidir";
"_UWord" -> "_Unpacked";
"_UWord" -> "_Unsafe";
"_UWord" -> "_ValD";
"_UWord" -> "_ValueAnnotation";
"_UWord" -> "_VarE";
"_UWord" -> "_VarI";
"_UWord" -> "_VarP";
"_UWord" -> "_VarT";
"_UWord" -> "_ViewP";
"_UWord" -> "_WildCardT";
"_UWord" -> "_WildP";
"_UWord" -> "_WordPrimL";
"_UWord" -> "bangSourceStrictness";
"_UWord" -> "bangSourceUnpackedness";
"_UWord" -> "clauseBody";
"_UWord" -> "clauseDecs";
"_UWord" -> "clausePattern";
"_UWord" -> "conFields";
"_UWord" -> "conNamedFields";
"_UWord" -> "derivClauseCxt";
"_UWord" -> "derivClauseStrategy";
"_UWord" -> "f";
"_UWord" -> "fieldExpExpression";
"_UWord" -> "fieldExpName";
"_UWord" -> "fieldPatName";
"_UWord" -> "fieldPatPattern";
"_UWord" -> "fixityDirection";
"_UWord" -> "fixityPrecedence";
"_UWord" -> "funDepInputs";
"_UWord" -> "funDepOutputs";
"_UWord" -> "injectivityAnnInputs";
"_UWord" -> "injectivityAnnOutput";
"_UWord" -> "iso";
"_UWord" -> "l";
"_UWord" -> "locEnd";
"_UWord" -> "locFileName";
"_UWord" -> "locModule";
"_UWord" -> "locPackage";
"_UWord" -> "locStart";
"_UWord" -> "matchBody";
"_UWord" -> "matchDeclarations";
"_UWord" -> "matchPattern";
"_UWord" -> "s";
"_UWord" -> "setOf";
"_UWord" -> "substTypeVars";
"_UWord" -> "traverseOf";
"_UWord" -> "tySynEqnLHS";
"_UWord" -> "tySynEqnPatterns";
"_UWord" -> "tySynEqnResult";
"_UWord" -> "typeFamilyHeadInjectivityAnn";
"_UWord" -> "typeFamilyHeadName";
"_UWord" -> "typeFamilyHeadResultSig";
"_UWord" -> "typeFamilyHeadTyVarBndrs";
"_UWord" -> "typeVars";
"_UnboundVarE" -> "prism\'";
"_UnboxedSumE" -> "prism\'";
"_UnboxedSumP" -> "prism\'";
"_UnboxedSumT" -> "prism\'";
"_UnboxedTupE" -> "prism\'";
"_UnboxedTupP" -> "prism\'";
"_UnboxedTupleT" -> "prism\'";
"_UndefinedElement" -> "_UndefinedElement";
"_UndefinedElement" -> "preview";
"_Underflow" -> "_Underflow";
"_Underflow" -> "has";
"_Unidir" -> "prism\'";
"_Unpacked" -> "prism\'";
"_Unsafe" -> "prism\'";
"_UnsatisfiedConstraints" -> "only";
"_UnsupportedOperation" -> "only";
"_Unwrapped" -> "_Wrapped";
"_Unwrapped" -> "a";
"_Unwrapped" -> "as";
"_Unwrapped" -> "f";
"_Unwrapped" -> "from";
"_Unwrapped" -> "getArrowMonad";
"_Unwrapped" -> "iso";
"_Unwrapped\'" -> "from";
"_Unwrapped\'" -> "s";
"_Unwrapping" -> "_Wrapped";
"_Unwrapping" -> "f";
"_Unwrapping" -> "from";
"_Unwrapping" -> "s";
"_Unwrapping\'" -> "from";
"_Unwrapping\'" -> "s";
"_UserError" -> "only";
"_UserInterrupt" -> "_UserInterrupt";
"_UserInterrupt" -> "has";
"_ValD" -> "prism\'";
"_ValueAnnotation" -> "prism\'";
"_VarE" -> "prism\'";
"_VarI" -> "prism\'";
"_VarP" -> "prism\'";
"_VarT" -> "prism\'";
"_ViewP" -> "prism\'";
"_Void" -> "a";
"_Void" -> "prism";
"_WildCardT" -> "prism\'";
"_WildP" -> "prism\'";
"_WordPrimL" -> "prism\'";
"_Wrapped" -> "iso";
"_Wrapped" -> "s";
"_Wrapped" -> "withIso";
"_Wrapping" -> "_Wrapped";
"_Wrapping" -> "s";
"_Wrapping\'" -> "s";
"_cast" -> "a";
"_cast" -> "f";
"_cast" -> "s";
"_conjugate" -> "a";
"_conjugate" -> "involuted";
"_gcast" -> "a";
"_gcast" -> "asStream";
"_gcast" -> "asStreamR";
"_gcast" -> "cloned";
"_gcast" -> "converted";
"_gcast" -> "f";
"_gcast" -> "forced";
"_gcast" -> "ordinals";
"_gcast" -> "s";
"_gcast" -> "sliced";
"_gcast" -> "toVectorOf";
"_gcast" -> "vector";
"_gcast" -> "vectorIx";
"_gcast" -> "vectorTraverse";
"_head" -> "a";
"_head" -> "s";
"_imagPart" -> "a";
"_imagPart" -> "f";
"_init" -> "a";
"_init" -> "s";
"_last" -> "a";
"_last" -> "review";
"_last" -> "s";
"_last" -> "simply";
"_magnitude" -> "a";
"_magnitude" -> "f";
"_phase" -> "a";
"_phase" -> "f";
"_polar" -> "_polar";
"_polar" -> "iso";
"_polar" -> "view";
"_realPart" -> "a";
"_realPart" -> "f";
"_tail" -> "a";
"_tail" -> "as";
"_tail" -> "prism";
"_tail" -> "s";
"_tail" -> "withPrism";
"_wrapped\'ValName" -> "mkLensName_v";
"abbreviatedFields" -> "abbreviatedNamer";
"abbreviatedFields" -> "defaultFieldRules";
"abbreviatedNamer" -> "f";
"abbreviatedNamer" -> "s";
"addFieldClassName" -> "a";
"addFieldClassName" -> "f";
"addFieldClassName" -> "getLeftmost";
"addFieldClassName" -> "getRightmost";
"addFieldClassName" -> "noEffect";
"adding" -> "a";
"adding" -> "iso";
"adjoin" -> "_GWrapped\'";
"adjoin" -> "_Unwrapped";
"adjoin" -> "_Unwrapped\'";
"adjoin" -> "_Unwrapping";
"adjoin" -> "_Unwrapping\'";
"adjoin" -> "_Wrapped";
"adjoin" -> "_Wrapping";
"adjoin" -> "_Wrapping\'";
"adjoin" -> "a";
"adjoin" -> "ala";
"adjoin" -> "alaf";
"adjoin" -> "both";
"adjoin" -> "lensProduct";
"adjoin" -> "op";
"adjoin" -> "partsOf";
"adjoin" -> "pattern";
"adjoin" -> "s";
"after" -> "a";
"after" -> "f";
"after" -> "l";
"after" -> "s";
"ala" -> "_Unwrapping";
"ala" -> "f";
"ala" -> "s";
"ala" -> "xplat";
"alaf" -> "_Unwrapping";
"alaf" -> "f";
"alaf" -> "xplatf";
"allOf" -> "a";
"allOf" -> "f";
"allOf" -> "foldMapOf";
"allOf" -> "l";
"allOf" -> "s";
"alongside" -> "a";
"alongside" -> "f";
"alongside" -> "s";
"andOf" -> "foldMapOf";
"andOf" -> "l";
"andOf" -> "s";
"anon" -> "a";
"anon" -> "f";
"anon" -> "iso";
"anyOf" -> "a";
"anyOf" -> "f";
"anyOf" -> "foldMapOf";
"anyOf" -> "l";
"anyOf" -> "s";
"applyTypeSubst" -> "rewrite";
"argument" -> "a";
"argument" -> "s";
"argument" -> "sets";
"asIndex" -> "a";
"asIndex" -> "coerce\'";
"asIndex" -> "deepening";
"asIndex" -> "f";
"asStream" -> "a";
"asStream" -> "iso";
"asStreamR" -> "a";
"asStreamR" -> "iso";
"aside" -> "a";
"aside" -> "f";
"aside" -> "prism";
"aside" -> "s";
"aside" -> "withPrism";
"assign" -> "a";
"assign" -> "l";
"assign" -> "s";
"assign" -> "set";
"assignA" -> "a";
"assignA" -> "l";
"assignA" -> "s";
"assignA" -> "set";
"asumOf" -> "a";
"asumOf" -> "foldrOf";
"asumOf" -> "l";
"asumOf" -> "s";
"au" -> "a";
"au" -> "f";
"au" -> "s";
"au" -> "withIso";
"auf" -> "a";
"auf" -> "s";
"auf" -> "withIso";
"backwards" -> "a";
"backwards" -> "f";
"backwards" -> "l";
"backwards" -> "s";
"bangSourceStrictness" -> "lens";
"bangSourceStrictness" -> "s";
"bangSourceUnpackedness" -> "lens";
"bangSourceUnpackedness" -> "s";
"base" -> "digitToInt\'";
"base" -> "intToDigit\'";
"base" -> "isDigit\'";
"base" -> "prism";
"base" -> "readSigned\'";
"base" -> "s";
"base" -> "showSigned\'";
"basename" -> "f";
"below" -> "a";
"below" -> "prism";
"below" -> "s";
"below" -> "withPrism";
"beside" -> "a";
"beside" -> "f";
"beside" -> "l";
"beside" -> "s";
"bimapping" -> "a";
"bimapping" -> "f";
"bimapping" -> "iso";
"bimapping" -> "s";
"bimapping" -> "withIso";
"binary" -> "a";
"binary" -> "base";
"biplate" -> "a";
"biplate" -> "biplateData";
"biplate" -> "hitTest";
"biplate" -> "s";
"biplateData" -> "a";
"biplateData" -> "f";
"biplateData" -> "s";
"bitAt" -> "f";
"bits" -> "f";
"bits" -> "step";
"both" -> "a";
"both" -> "f";
"both1" -> "f";
"branches" -> "_cast";
"branches" -> "_gcast";
"branches" -> "a";
"branches" -> "as";
"branches" -> "f";
"branches" -> "s";
"buildScaffold" -> "_ForallT";
"buildScaffold" -> "_Right";
"buildScaffold" -> "a";
"buildScaffold" -> "buildStab";
"buildScaffold" -> "cons";
"buildScaffold" -> "foldTypeName";
"buildScaffold" -> "folded";
"buildScaffold" -> "getterTypeName";
"buildScaffold" -> "has";
"buildScaffold" -> "isoTypeName";
"buildScaffold" -> "iso\'TypeName";
"buildScaffold" -> "length";
"buildScaffold" -> "lengthOf";
"buildScaffold" -> "lensTypeName";
"buildScaffold" -> "lens\'TypeName";
"buildScaffold" -> "mapped";
"buildScaffold" -> "over";
"buildScaffold" -> "preview";
"buildScaffold" -> "s";
"buildScaffold" -> "traversalTypeName";
"buildScaffold" -> "traversal\'TypeName";
"buildStab" -> "applyTypeSubst";
"buildStab" -> "both";
"buildStab" -> "over";
"buildStab" -> "s";
"buildStab" -> "setOf";
"buildStab" -> "substTypeVars";
"buildStab" -> "typeVars";
"buildStab" -> "unifyTypes";
"builder" -> "iso";
"byteAt" -> "f";
"bytes" -> "traversedLazy";
"bytes" -> "traversedStrictTree";
"bytewise" -> "bytes";
"bytewise" -> "chars";
"bytewise" -> "f";
"bytewise" -> "packedBytes";
"bytewise" -> "packedChars";
"bytewise" -> "pattern";
"bytewise" -> "step";
"bytewise" -> "unpackedBytes";
"bytewise" -> "unpackedChars";
"cache" -> "emptyHitMap";
"camelCaseFields" -> "defaultFieldRules";
"camelCaseNamer" -> "overHead";
"catchJust" -> "f";
"catches" -> "a";
"catches" -> "f";
"catches" -> "preview";
"catching" -> "a";
"catching" -> "catchJust";
"catching" -> "l";
"catching" -> "preview";
"catching_" -> "a";
"catching_" -> "catchJust";
"catching_" -> "l";
"catching_" -> "preview";
"censoring" -> "a";
"censoring" -> "l";
"censoring" -> "over";
"chars" -> "traversedLazy8";
"chars" -> "traversedStrictTree8";
"chars" -> "unpackedBytes";
"chars" -> "view";
"check" -> "a";
"check" -> "check";
"check" -> "f";
"check" -> "handlerCatchIO";
"check" -> "handlerIO";
"check" -> "l";
"check" -> "prism";
"children" -> "a";
"children" -> "toListOf";
"choosing" -> "a";
"choosing" -> "f";
"choosing" -> "l";
"choosing" -> "s";
"chosen" -> "a";
"chosen" -> "f";
"chosen" -> "s";
"classUnderscoreNoPrefixFields" -> "classUnderscoreNoPrefixNamer";
"classUnderscoreNoPrefixFields" -> "defaultFieldRules";
"classUnderscoreNoPrefixFields" -> "lensField";
"classUnderscoreNoPrefixNamer" -> "overHead";
"classyRules" -> "underscoreNoPrefixNamer";
"classyRulesFor" -> "both";
"classyRulesFor" -> "classyRules";
"classyRulesFor" -> "lensClass";
"classyRulesFor" -> "lensField";
"classyRulesFor" -> "lookingupNamer";
"classyRulesFor" -> "mapped";
"classyRulesFor" -> "over";
"classyRules_" -> "classyRules";
"classyRules_" -> "lensField";
"clauseBody" -> "lens";
"clauseBody" -> "s";
"clauseDecs" -> "lens";
"clauseDecs" -> "s";
"clausePattern" -> "lens";
"clausePattern" -> "s";
"cloneEquality" -> "a";
"cloneEquality" -> "s";
"cloneEquality" -> "substEq";
"cloneIndexPreservingLens" -> "a";
"cloneIndexPreservingLens" -> "l";
"cloneIndexPreservingLens" -> "s";
"cloneIndexPreservingSetter" -> "a";
"cloneIndexPreservingSetter" -> "l";
"cloneIndexPreservingSetter" -> "s";
"cloneIndexPreservingTraversal" -> "a";
"cloneIndexPreservingTraversal" -> "l";
"cloneIndexPreservingTraversal" -> "s";
"cloneIndexPreservingTraversal1" -> "a";
"cloneIndexPreservingTraversal1" -> "l";
"cloneIndexPreservingTraversal1" -> "s";
"cloneIndexedLens" -> "a";
"cloneIndexedLens" -> "f";
"cloneIndexedLens" -> "l";
"cloneIndexedLens" -> "s";
"cloneIndexedSetter" -> "a";
"cloneIndexedSetter" -> "l";
"cloneIndexedSetter" -> "s";
"cloneIndexedTraversal" -> "a";
"cloneIndexedTraversal" -> "f";
"cloneIndexedTraversal" -> "l";
"cloneIndexedTraversal" -> "s";
"cloneIndexedTraversal1" -> "a";
"cloneIndexedTraversal1" -> "f";
"cloneIndexedTraversal1" -> "l";
"cloneIndexedTraversal1" -> "s";
"cloneIso" -> "a";
"cloneIso" -> "f";
"cloneIso" -> "iso";
"cloneIso" -> "s";
"cloneIso" -> "withIso";
"cloneLens" -> "a";
"cloneLens" -> "l";
"cloneLens" -> "s";
"clonePrism" -> "a";
"clonePrism" -> "prism";
"clonePrism" -> "s";
"clonePrism" -> "withPrism";
"cloneSetter" -> "a";
"cloneSetter" -> "l";
"cloneSetter" -> "s";
"cloneTraversal" -> "a";
"cloneTraversal" -> "f";
"cloneTraversal" -> "l";
"cloneTraversal" -> "s";
"cloneTraversal1" -> "a";
"cloneTraversal1" -> "f";
"cloneTraversal1" -> "l";
"cloneTraversal1" -> "s";
"cloned" -> "a";
"cloned" -> "iso";
"coarr" -> "a";
"coarr" -> "fromList";
"coarr" -> "null";
"coarr" -> "singleton";
"coarr" -> "size";
"coerce\'" -> "a";
"coerce\'" -> "alongside";
"coerce\'" -> "choosing";
"coerce\'" -> "chosen";
"coerce\'" -> "cloneIndexPreservingLens";
"coerce\'" -> "cloneIndexedLens";
"coerce\'" -> "cloneLens";
"coerce\'" -> "coarr";
"coerce\'" -> "devoid";
"coerce\'" -> "f";
"coerce\'" -> "fusing";
"coerce\'" -> "head1";
"coerce\'" -> "ilens";
"coerce\'" -> "inside";
"coerce\'" -> "iplens";
"coerce\'" -> "last1";
"coerce\'" -> "lens";
"coerce\'" -> "locus";
"coerce\'" -> "overA";
"coerce\'" -> "s";
"coerce\'" -> "storing";
"coerce\'" -> "united";
"coerce\'" -> "withLens";
"coerced" -> "a";
"coerced" -> "coerce\'";
"coerced" -> "l";
"coerced" -> "s";
"composOpFold" -> "a";
"composOpFold" -> "f";
"composOpFold" -> "foldrOf";
"computeIsoType" -> "a";
"computeIsoType" -> "appsT";
"computeIsoType" -> "isoTypeName";
"computeIsoType" -> "iso\'TypeName";
"computeIsoType" -> "quantifyType";
"computeIsoType" -> "s";
"computeIsoType" -> "setOf";
"computeIsoType" -> "substTypeVars";
"computeIsoType" -> "toTupleT";
"computeIsoType" -> "typeVars";
"computeOpticType" -> "computePrismType";
"computeOpticType" -> "computeReviewType";
"computeOpticType" -> "cons";
"computeOpticType" -> "nconCxt";
"computeOpticType" -> "nconTypes";
"computeOpticType" -> "null";
"computeOpticType" -> "view";
"computePrismType" -> "a";
"computePrismType" -> "cons";
"computePrismType" -> "nconTypes";
"computePrismType" -> "s";
"computePrismType" -> "setOf";
"computePrismType" -> "substTypeVars";
"computePrismType" -> "toTupleT";
"computePrismType" -> "typeVars";
"computePrismType" -> "view";
"computeReviewType" -> "a";
"computeReviewType" -> "s";
"computeReviewType" -> "toTupleT";
"conFields" -> "conFields";
"conFields" -> "f";
"conFields" -> "l";
"conFields" -> "sansVar";
"conNamedFields" -> "a";
"conNamedFields" -> "conNamedFields";
"conNamedFields" -> "f";
"concatMapOf" -> "l";
"concatMapOf" -> "s";
"concatOf" -> "a";
"concatOf" -> "l";
"concatOf" -> "s";
"confusing" -> "a";
"confusing" -> "f";
"confusing" -> "s";
"cons" -> "a";
"cons" -> "review";
"cons" -> "s";
"cons" -> "simply";
"contexts" -> "a";
"contexts" -> "contextsOf";
"contextsOf" -> "a";
"contextsOf" -> "contextsOf";
"contextsOf" -> "f";
"contextsOf" -> "holesOf";
"contextsOf" -> "l";
"contextsOf" -> "s";
"contextsOn" -> "a";
"contextsOn" -> "contextsOnOf";
"contextsOn" -> "s";
"contextsOnOf" -> "a";
"contextsOnOf" -> "contextsOf";
"contextsOnOf" -> "f";
"contextsOnOf" -> "holesOf";
"contextsOnOf" -> "l";
"contramapped" -> "a";
"contramapped" -> "sets";
"contramapping" -> "a";
"contramapping" -> "f";
"contramapping" -> "iso";
"contramapping" -> "s";
"contramapping" -> "withIso";
"converted" -> "forced";
"converted" -> "iso";
"converted" -> "ordinals";
"converted" -> "sliced";
"converted" -> "toVectorOf";
"converted" -> "vector";
"cosmos" -> "a";
"cosmos" -> "cosmosOf";
"cosmos" -> "f";
"cosmosOf" -> "a";
"cosmosOf" -> "cosmosOf";
"cosmosOf" -> "f";
"cosmosOf" -> "s";
"cosmosOn" -> "a";
"cosmosOn" -> "cosmosOnOf";
"cosmosOn" -> "f";
"cosmosOn" -> "s";
"cosmosOnOf" -> "a";
"cosmosOnOf" -> "cosmosOf";
"create" -> "a";
"create" -> "coerce\'";
"create" -> "f";
"create" -> "l";
"createClass" -> "f";
"curried" -> "a";
"curried" -> "f";
"curried" -> "iso";
"cycled" -> "a";
"cycled" -> "as";
"cycled" -> "f";
"cycled" -> "l";
"dataBox" -> "a";
"datatypeTypeKinded" -> "isDataFamily";
"datatypeTypeKinded" -> "null";
"deRecord" -> "deRecord";
"deRecord" -> "dropFieldName";
"decimal" -> "a";
"decimal" -> "base";
"declareClassy" -> "classyRules";
"declareClassy" -> "declareLensesWith";
"declareClassy" -> "lensField";
"declareClassyFor" -> "classyRulesFor";
"declareClassyFor" -> "declareLensesWith";
"declareClassyFor" -> "lensField";
"declareFields" -> "declareLensesWith";
"declareFields" -> "defaultFieldRules";
"declareLenses" -> "declareLensesWith";
"declareLenses" -> "lensField";
"declareLenses" -> "lensRules";
"declareLensesFor" -> "declareLensesWith";
"declareLensesFor" -> "lensField";
"declareLensesFor" -> "lensRulesFor";
"declareLensesWith" -> "declareWith";
"declareLensesWith" -> "emit";
"declareLensesWith" -> "makeFieldOpticsForDec\'";
"declareLensesWith" -> "stripFields";
"declarePrisms" -> "declareWith";
"declarePrisms" -> "emit";
"declarePrisms" -> "liftDeclare";
"declarePrisms" -> "makeDecPrisms";
"declareWith" -> "a";
"declareWith" -> "runDeclare";
"declareWith" -> "traverseDataAndNewtype";
"declareWrapped" -> "declareWith";
"declareWrapped" -> "emit";
"declareWrapped" -> "liftDeclare";
"declareWrapped" -> "makeWrappedForDec";
"deep" -> "a";
"deep" -> "deepOf";
"deepOf" -> "a";
"deepOf" -> "deepOf";
"deepOf" -> "f";
"deepOf" -> "failing";
"deepOf" -> "l";
"deepOf" -> "s";
"deepening" -> "a";
"deepening" -> "f";
"defaultFieldRules" -> "camelCaseNamer";
"derivClauseCxt" -> "lens";
"derivClauseCxt" -> "s";
"derivClauseStrategy" -> "lens";
"derivClauseStrategy" -> "s";
"description" -> "f";
"description" -> "s";
"devoid" -> "a";
"digitToInt\'" -> "digitToIntMay";
"dimapping" -> "a";
"dimapping" -> "f";
"dimapping" -> "iso";
"dimapping" -> "s";
"dimapping" -> "withIso";
"directory" -> "f";
"dividing" -> "a";
"dividing" -> "iso";
"dropFieldName" -> "a";
"dropFieldName" -> "beside";
"dropFieldName" -> "both";
"dropFieldName" -> "both1";
"dropFieldName" -> "cloneIndexPreservingTraversal";
"dropFieldName" -> "cloneIndexPreservingTraversal1";
"dropFieldName" -> "cloneIndexedTraversal";
"dropFieldName" -> "cloneIndexedTraversal1";
"dropFieldName" -> "cloneTraversal";
"dropFieldName" -> "cloneTraversal1";
"dropFieldName" -> "confusing";
"dropFieldName" -> "deepOf";
"dropFieldName" -> "dropping";
"dropFieldName" -> "element";
"dropFieldName" -> "elementOf";
"dropFieldName" -> "elements";
"dropFieldName" -> "elementsOf";
"dropFieldName" -> "f";
"dropFieldName" -> "failing";
"dropFieldName" -> "failover";
"dropFieldName" -> "forMOf";
"dropFieldName" -> "forOf";
"dropFieldName" -> "holes1Of";
"dropFieldName" -> "holesOf";
"dropFieldName" -> "ifailover";
"dropFieldName" -> "iforMOf";
"dropFieldName" -> "iforOf";
"dropFieldName" -> "ignored";
"dropFieldName" -> "iloci";
"dropFieldName" -> "imapAccumLOf";
"dropFieldName" -> "imapAccumROf";
"dropFieldName" -> "imapMOf";
"dropFieldName" -> "ipartsOf";
"dropFieldName" -> "ipartsOf\'";
"dropFieldName" -> "itraverseOf";
"dropFieldName" -> "iunsafePartsOf";
"dropFieldName" -> "iunsafePartsOf\'";
"dropFieldName" -> "loci";
"dropFieldName" -> "mapAccumLOf";
"dropFieldName" -> "mapAccumROf";
"dropFieldName" -> "mapMOf";
"dropFieldName" -> "partsOf";
"dropFieldName" -> "partsOf\'";
"dropFieldName" -> "s";
"dropFieldName" -> "scanl1Of";
"dropFieldName" -> "scanr1Of";
"dropFieldName" -> "sequenceAOf";
"dropFieldName" -> "sequenceByOf";
"dropFieldName" -> "sequenceOf";
"dropFieldName" -> "singular";
"dropFieldName" -> "taking";
"dropFieldName" -> "transposeOf";
"dropFieldName" -> "traverseByOf";
"dropFieldName" -> "traverseOf";
"dropFieldName" -> "traversed";
"dropFieldName" -> "traversed1";
"dropFieldName" -> "traversed64";
"dropFieldName" -> "unsafePartsOf";
"dropFieldName" -> "unsafePartsOf\'";
"dropFieldName" -> "unsafeSingular";
"dropping" -> "a";
"dropping" -> "l";
"dropping" -> "s";
"droppingWhile" -> "a";
"droppingWhile" -> "f";
"droppingWhile" -> "l";
"droppingWhile" -> "s";
"elemIndexOf" -> "a";
"elemIndexOf" -> "findIndexOf";
"elemIndexOf" -> "l";
"elemIndexOf" -> "s";
"elemIndicesOf" -> "a";
"elemIndicesOf" -> "findIndicesOf";
"elemIndicesOf" -> "l";
"elemIndicesOf" -> "s";
"elemOf" -> "a";
"elemOf" -> "anyOf";
"elemOf" -> "l";
"elemOf" -> "s";
"element" -> "elementOf";
"element" -> "f";
"elementOf" -> "a";
"elementOf" -> "elementsOf";
"elementOf" -> "f";
"elementOf" -> "l";
"elementOf" -> "s";
"elements" -> "a";
"elements" -> "elementsOf";
"elements" -> "s";
"elementsOf" -> "a";
"elementsOf" -> "f";
"elementsOf" -> "l";
"elementsOf" -> "s";
"emit" -> "f";
"enum" -> "a";
"enum" -> "f";
"enum" -> "iso";
"enum" -> "s";
"equality" -> "a";
"equality\'" -> "a";
"equality\'" -> "s";
"errno" -> "f";
"errno" -> "s";
"errorType" -> "f";
"errorType" -> "s";
"evalOf" -> "a";
"evalOf" -> "l";
"evalOf" -> "s";
"exception" -> "exception";
"exception" -> "preview";
"exception" -> "prism\'";
"exponentiating" -> "a";
"exponentiating" -> "iso";
"extension" -> "f";
"f" -> "a";
"f" -> "s";
"fab" -> "a";
"fab" -> "s";
"failedAssertion" -> "f";
"failedAssertion" -> "iso";
"failedAssertion" -> "s";
"failing" -> "failing";
"failing" -> "l";
"failing" -> "pins";
"failing" -> "s";
"failover" -> "a";
"failover" -> "l";
"failover" -> "s";
"fileName" -> "f";
"fileName" -> "s";
"filename" -> "f";
"filtered" -> "a";
"filtered" -> "f";
"filteredBy" -> "a";
"filteredBy" -> "f";
"filteredBy" -> "s";
"findIndexOf" -> "a";
"findIndexOf" -> "asIndex";
"findIndexOf" -> "filtered";
"findIndexOf" -> "l";
"findIndexOf" -> "preview";
"findIndexOf" -> "s";
"findIndicesOf" -> "a";
"findIndicesOf" -> "asIndex";
"findIndicesOf" -> "f";
"findIndicesOf" -> "filtered";
"findIndicesOf" -> "l";
"findIndicesOf" -> "toListOf";
"findMOf" -> "a";
"findMOf" -> "f";
"findMOf" -> "foldrOf";
"findMOf" -> "l";
"findMOf" -> "s";
"findOf" -> "a";
"findOf" -> "f";
"findOf" -> "foldrOf";
"findOf" -> "l";
"findOf" -> "s";
"first1Of" -> "a";
"first1Of" -> "foldMapOf";
"first1Of" -> "l";
"first1Of" -> "s";
"firstOf" -> "a";
"firstOf" -> "foldMapOf";
"firstOf" -> "getLeftmost";
"firstOf" -> "l";
"firstOf" -> "s";
"firsting" -> "a";
"firsting" -> "f";
"firsting" -> "iso";
"firsting" -> "s";
"firsting" -> "withIso";
"fixEq" -> "a";
"fixEq" -> "f";
"fixityDirection" -> "lens";
"fixityDirection" -> "s";
"fixityPrecedence" -> "lens";
"fixityPrecedence" -> "s";
"flipped" -> "a";
"flipped" -> "iso";
"foldByOf" -> "a";
"foldByOf" -> "f";
"foldByOf" -> "foldMapOf";
"foldByOf" -> "l";
"foldByOf" -> "s";
"foldMapByOf" -> "f";
"foldMapByOf" -> "foldMapOf";
"foldMapByOf" -> "getting";
"foldMapByOf" -> "ilike";
"foldMapByOf" -> "ilistening";
"foldMapByOf" -> "ilistenings";
"foldMapByOf" -> "ito";
"foldMapByOf" -> "iuse";
"foldMapByOf" -> "iuses";
"foldMapByOf" -> "iview";
"foldMapByOf" -> "iviews";
"foldMapByOf" -> "l";
"foldMapByOf" -> "like";
"foldMapByOf" -> "listening";
"foldMapByOf" -> "listenings";
"foldMapByOf" -> "to";
"foldMapByOf" -> "use";
"foldMapByOf" -> "uses";
"foldMapByOf" -> "view";
"foldMapByOf" -> "views";
"foldMapOf" -> "a";
"foldMapOf" -> "f";
"foldMapOf" -> "l";
"foldMapOf" -> "s";
"foldOf" -> "a";
"foldOf" -> "l";
"foldOf" -> "s";
"foldTypeName" -> "mkLensName_tc";
"folded" -> "a";
"folded" -> "f";
"folded" -> "foldring";
"folded" -> "ifoldr";
"folded" -> "ifoldring";
"folded64" -> "a";
"folded64" -> "f";
"folded64" -> "foldring";
"folded64" -> "ifoldr64";
"folded64" -> "ifoldring";
"folding" -> "a";
"folding" -> "f";
"folding" -> "s";
"foldl1Of" -> "a";
"foldl1Of" -> "f";
"foldl1Of" -> "foldlOf";
"foldl1Of" -> "l";
"foldl1Of" -> "s";
"foldl1Of\'" -> "f";
"foldl1Of\'" -> "foldlOf\'";
"foldl1Of\'" -> "l";
"foldlMOf" -> "a";
"foldlMOf" -> "f";
"foldlMOf" -> "foldrOf";
"foldlMOf" -> "l";
"foldlMOf" -> "s";
"foldlOf" -> "a";
"foldlOf" -> "f";
"foldlOf" -> "foldMapOf";
"foldlOf" -> "l";
"foldlOf" -> "s";
"foldlOf\'" -> "a";
"foldlOf\'" -> "f";
"foldlOf\'" -> "foldrOf";
"foldlOf\'" -> "l";
"foldlOf\'" -> "s";
"foldr1Of" -> "a";
"foldr1Of" -> "f";
"foldr1Of" -> "foldrOf";
"foldr1Of" -> "l";
"foldr1Of" -> "s";
"foldr1Of\'" -> "a";
"foldr1Of\'" -> "f";
"foldr1Of\'" -> "foldrOf\'";
"foldr1Of\'" -> "l";
"foldr1Of\'" -> "s";
"foldrMOf" -> "a";
"foldrMOf" -> "f";
"foldrMOf" -> "foldlOf";
"foldrMOf" -> "l";
"foldrMOf" -> "s";
"foldrOf" -> "a";
"foldrOf" -> "f";
"foldrOf" -> "foldMapOf";
"foldrOf" -> "l";
"foldrOf" -> "s";
"foldrOf\'" -> "a";
"foldrOf\'" -> "f";
"foldrOf\'" -> "foldlOf";
"foldrOf\'" -> "l";
"foldrOf\'" -> "s";
"foldring" -> "a";
"foldring" -> "f";
"foldring" -> "noEffect";
"foldring" -> "s";
"follower" -> "a";
"follower" -> "part";
"follower" -> "pattern";
"follower" -> "preview";
"follower" -> "prism\'";
"for1Of_" -> "a";
"for1Of_" -> "f";
"for1Of_" -> "s";
"for1Of_" -> "traverse1Of_";
"forMOf" -> "a";
"forMOf" -> "l";
"forMOf" -> "s";
"forMOf_" -> "a";
"forMOf_" -> "mapMOf_";
"forMOf_" -> "s";
"forOf" -> "f";
"forOf" -> "s";
"forOf_" -> "a";
"forOf_" -> "f";
"forOf_" -> "s";
"forOf_" -> "traverseOf_";
"forced" -> "a";
"forced" -> "involuted";
"forced" -> "iso";
"from" -> "a";
"from" -> "iso";
"from" -> "l";
"from" -> "s";
"from" -> "withIso";
"fromEq" -> "a";
"fromEq" -> "f";
"fromEq" -> "l";
"fromEq" -> "s";
"fromEq" -> "substEq";
"fromIso" -> "a";
"fromIso" -> "s";
"fromLeibniz" -> "a";
"fromLeibniz" -> "f";
"fromLeibniz" -> "s";
"fromLeibniz\'" -> "a";
"fromLeibniz\'" -> "f";
"fromLeibniz\'" -> "s";
"fromLens" -> "a";
"fromLens" -> "f";
"fromLens" -> "l";
"fromLens" -> "s";
"fromList" -> "a";
"fromList" -> "as";
"fromList" -> "backwards";
"fromList" -> "cons";
"fromList" -> "f";
"fromList" -> "fromList";
"fromList" -> "size";
"fromList" -> "snoc";
"fromPrism" -> "a";
"fromPrism" -> "s";
"fromSetter" -> "a";
"fromSetter" -> "f";
"fromSetter" -> "s";
"fromTraversal" -> "a";
"fromTraversal" -> "cloneTraversal";
"fromTraversal" -> "f";
"fromTraversal" -> "l";
"fromTraversal" -> "s";
"funDepInputs" -> "lens";
"funDepInputs" -> "s";
"funDepOutputs" -> "lens";
"funDepOutputs" -> "s";
"fusing" -> "a";
"fusing" -> "f";
"fusing" -> "ilevels";
"fusing" -> "levels";
"generateLazyPatterns" -> "f";
"generateSignatures" -> "f";
"generateUpdateableOptics" -> "f";
"generic" -> "a";
"generic" -> "f";
"generic" -> "iso";
"generic1" -> "a";
"generic1" -> "f";
"generic1" -> "iso";
"generic1" -> "s";
"getArrowMonad" -> "a";
"getArrowMonad" -> "f";
"getArrowMonad" -> "failedAssertion";
"getArrowMonad" -> "getErrorCall";
"getArrowMonad" -> "getNoMethodError";
"getArrowMonad" -> "getPatternMatchFail";
"getArrowMonad" -> "getRecConError";
"getArrowMonad" -> "getRecSelError";
"getArrowMonad" -> "getRecUpdError";
"getArrowMonad" -> "getTypeError";
"getArrowMonad" -> "iso";
"getArrowMonad" -> "s";
"getFirst1" -> "a";
"getLeftmost" -> "a";
"getLeftmost" -> "getLeftmost";
"getLeftmost" -> "getRightmost";
"getRightmost" -> "a";
"getRightmost" -> "f";
"getRightmost" -> "getRightmost";
"getRightmost" -> "noEffect";
"getTypeError" -> "getCompactionFailed";
"getTypeError" -> "iso";
"getterTypeName" -> "mkLensName_tc";
"getting" -> "a";
"getting" -> "asIndex";
"getting" -> "f";
"getting" -> "icompose";
"getting" -> "ifoldMapBy";
"getting" -> "ifoldMapByOf";
"getting" -> "ifolded";
"getting" -> "imapped";
"getting" -> "index";
"getting" -> "indexing";
"getting" -> "indexing64";
"getting" -> "indices";
"getting" -> "itraverseBy";
"getting" -> "itraverseByOf";
"getting" -> "itraversed";
"getting" -> "l";
"getting" -> "reindexed";
"getting" -> "s";
"getting" -> "selfIndex";
"getting" -> "withIndex";
"gplate" -> "a";
"gplate" -> "f";
"gplate1" -> "_Just";
"gplate1" -> "_Left";
"gplate1" -> "_Nothing";
"gplate1" -> "_Right";
"gplate1" -> "_Show";
"gplate1" -> "_Void";
"gplate1" -> "a";
"gplate1" -> "aside";
"gplate1" -> "below";
"gplate1" -> "clonePrism";
"gplate1" -> "f";
"gplate1" -> "isn\'t";
"gplate1" -> "matching";
"gplate1" -> "nearly";
"gplate1" -> "only";
"gplate1" -> "outside";
"gplate1" -> "prism";
"gplate1" -> "prism\'";
"gplate1" -> "s";
"gplate1" -> "withPrism";
"gplate1" -> "without";
"gtraverse" -> "a";
"gtraverse" -> "f";
"gtraverse" -> "s";
"handle" -> "f";
"handle" -> "s";
"handlerCatchIO" -> "a";
"handlerCatchIO" -> "f";
"handlerCatchIO" -> "l";
"handlerCatchIO" -> "makeFieldOptics";
"handlerCatchIO" -> "makeFieldOpticsForDec";
"handlerCatchIO" -> "makeFieldOpticsForDec\'";
"handlerCatchIO" -> "preview";
"handlerCatchIO" -> "s";
"handlerIO" -> "a";
"handlerIO" -> "f";
"handlerIO" -> "l";
"handlerIO" -> "preview";
"handlerIO" -> "s";
"handling" -> "a";
"handling" -> "catching";
"handling" -> "l";
"handling_" -> "a";
"handling_" -> "catching_";
"handling_" -> "l";
"has" -> "a";
"has" -> "foldMapOf";
"has" -> "l";
"has" -> "s";
"hasn\'t" -> "a";
"hasn\'t" -> "foldMapOf";
"hasn\'t" -> "l";
"hasn\'t" -> "s";
"head1" -> "a";
"head1" -> "f";
"head1" -> "getFirst1";
"hex" -> "a";
"hex" -> "base";
"hitTest" -> "a";
"hitTest" -> "dataBox";
"hitTest" -> "f";
"hitTest" -> "readCacheFollower";
"hitTest" -> "s";
"holeInOne" -> "a";
"holeInOne1" -> "a";
"holeInOne1" -> "f";
"holes" -> "a";
"holes" -> "holesOf";
"holes" -> "s";
"holes1Of" -> "a";
"holes1Of" -> "f";
"holes1Of" -> "holeInOne1";
"holes1Of" -> "s";
"holesOf" -> "a";
"holesOf" -> "f";
"holesOf" -> "holeInOne";
"holesOf" -> "s";
"holesOn" -> "holesOf";
"holesOnOf" -> "a";
"holesOnOf" -> "holesOf";
"holesOnOf" -> "l";
"holesOnOf" -> "s";
"iallOf" -> "a";
"iallOf" -> "f";
"iallOf" -> "l";
"iallOf" -> "s";
"ianyOf" -> "a";
"ianyOf" -> "f";
"ianyOf" -> "l";
"ianyOf" -> "s";
"iat" -> "_head";
"iat" -> "_init";
"iat" -> "_last";
"iat" -> "_tail";
"iat" -> "cons";
"iat" -> "elementOf";
"iat" -> "f";
"iat" -> "ix";
"iat" -> "pattern";
"iat" -> "snoc";
"iat" -> "uncons";
"iat" -> "unsnoc";
"icensoring" -> "a";
"icensoring" -> "iover";
"icensoring" -> "l";
"icensoring" -> "s";
"icompose" -> "a";
"icompose" -> "f";
"iconcatMapOf" -> "a";
"iconcatMapOf" -> "ifoldMapOf";
"iconcatMapOf" -> "s";
"icontains" -> "f";
"icontains" -> "ix";
"icontains" -> "ixAt";
"icontains" -> "s";
"idroppingWhile" -> "a";
"idroppingWhile" -> "f";
"idroppingWhile" -> "l";
"idroppingWhile" -> "s";
"ifailover" -> "a";
"ifailover" -> "f";
"ifailover" -> "l";
"ifailover" -> "s";
"ifiltered" -> "a";
"ifiltered" -> "f";
"ifindMOf" -> "a";
"ifindMOf" -> "f";
"ifindMOf" -> "ifoldrOf";
"ifindMOf" -> "l";
"ifindMOf" -> "s";
"ifindOf" -> "a";
"ifindOf" -> "f";
"ifindOf" -> "ifoldrOf";
"ifindOf" -> "l";
"ifindOf" -> "s";
"ifoldMapBy" -> "a";
"ifoldMapBy" -> "f";
"ifoldMapByOf" -> "a";
"ifoldMapByOf" -> "f";
"ifoldMapByOf" -> "ifoldMapOf";
"ifoldMapByOf" -> "l";
"ifoldMapOf" -> "a";
"ifoldMapOf" -> "f";
"ifoldMapOf" -> "l";
"ifoldMapOf" -> "s";
"ifolded" -> "a";
"ifolded" -> "f";
"ifolded" -> "folded";
"ifolding" -> "a";
"ifolding" -> "f";
"ifolding" -> "s";
"ifoldlMOf" -> "a";
"ifoldlMOf" -> "f";
"ifoldlMOf" -> "ifoldrOf";
"ifoldlMOf" -> "l";
"ifoldlMOf" -> "s";
"ifoldlOf" -> "a";
"ifoldlOf" -> "f";
"ifoldlOf" -> "ifoldMapOf";
"ifoldlOf" -> "l";
"ifoldlOf" -> "s";
"ifoldlOf\'" -> "a";
"ifoldlOf\'" -> "f";
"ifoldlOf\'" -> "ifoldrOf";
"ifoldlOf\'" -> "l";
"ifoldlOf\'" -> "s";
"ifoldr" -> "a";
"ifoldr" -> "f";
"ifoldr64" -> "a";
"ifoldr64" -> "f";
"ifoldrB" -> "f";
"ifoldrB8" -> "f";
"ifoldrBL" -> "f";
"ifoldrBL8" -> "f";
"ifoldrLazy" -> "f";
"ifoldrMOf" -> "a";
"ifoldrMOf" -> "f";
"ifoldrMOf" -> "ifoldlOf";
"ifoldrMOf" -> "l";
"ifoldrMOf" -> "s";
"ifoldrOf" -> "a";
"ifoldrOf" -> "f";
"ifoldrOf" -> "l";
"ifoldrOf" -> "s";
"ifoldrOf\'" -> "a";
"ifoldrOf\'" -> "f";
"ifoldrOf\'" -> "ifoldlOf";
"ifoldrOf\'" -> "l";
"ifoldrOf\'" -> "s";
"ifoldrStrict" -> "f";
"ifoldring" -> "a";
"ifoldring" -> "f";
"ifoldring" -> "noEffect";
"iforMOf" -> "a";
"iforMOf" -> "imapMOf";
"iforMOf" -> "s";
"iforMOf_" -> "a";
"iforMOf_" -> "imapMOf_";
"iforMOf_" -> "s";
"iforOf" -> "a";
"iforOf" -> "itraverseOf";
"iforOf" -> "s";
"iforOf_" -> "a";
"iforOf_" -> "itraverseOf_";
"iforOf_" -> "s";
"ignored" -> "a";
"ignored" -> "f";
"iix" -> "f";
"iix" -> "ix";
"ilens" -> "a";
"ilens" -> "l";
"ilens" -> "s";
"ilevelIns" -> "a";
"ilevelIns" -> "deepening";
"ilevelIns" -> "f";
"ilevelIns" -> "rmapConst";
"ilevelOuts" -> "a";
"ilevelOuts" -> "f";
"ilevels" -> "a";
"ilevels" -> "as";
"ilevels" -> "children";
"ilevels" -> "composOpFold";
"ilevels" -> "contexts";
"ilevels" -> "contextsOf";
"ilevels" -> "contextsOn";
"ilevels" -> "contextsOnOf";
"ilevels" -> "cosmos";
"ilevels" -> "cosmosOf";
"ilevels" -> "cosmosOn";
"ilevels" -> "cosmosOnOf";
"ilevels" -> "deep";
"ilevels" -> "f";
"ilevels" -> "gplate";
"ilevels" -> "gplate1";
"ilevels" -> "holes";
"ilevels" -> "holesOn";
"ilevels" -> "holesOnOf";
"ilevels" -> "ilevelIns";
"ilevels" -> "ilevelOuts";
"ilevels" -> "l";
"ilevels" -> "para";
"ilevels" -> "paraOf";
"ilevels" -> "parts";
"ilevels" -> "rewrite";
"ilevels" -> "rewriteM";
"ilevels" -> "rewriteMOf";
"ilevels" -> "rewriteMOn";
"ilevels" -> "rewriteMOnOf";
"ilevels" -> "rewriteOf";
"ilevels" -> "rewriteOn";
"ilevels" -> "rewriteOnOf";
"ilevels" -> "s";
"ilevels" -> "transform";
"ilevels" -> "transformM";
"ilevels" -> "transformMOf";
"ilevels" -> "transformMOn";
"ilevels" -> "transformMOnOf";
"ilevels" -> "transformOf";
"ilevels" -> "transformOn";
"ilevels" -> "transformOnOf";
"ilevels" -> "traversed";
"ilevels" -> "uniplate";
"ilevels" -> "universe";
"ilevels" -> "universeOf";
"ilevels" -> "universeOn";
"ilevels" -> "universeOnOf";
"ilike" -> "a";
"ilike" -> "ito";
"ilike" -> "s";
"ilistening" -> "a";
"ilistening" -> "iview";
"ilistening" -> "l";
"ilistenings" -> "a";
"ilistenings" -> "iviews";
"ilistenings" -> "l";
"ilistenings" -> "s";
"ilocally" -> "a";
"ilocally" -> "f";
"ilocally" -> "iover";
"ilocally" -> "l";
"ilocally" -> "s";
"iloci" -> "a";
"iloci" -> "f";
"iloci" -> "s";
"imagma" -> "a";
"imagma" -> "f";
"imagma" -> "iso";
"imagma" -> "l";
"imagma" -> "s";
"imapAccumLOf" -> "a";
"imapAccumLOf" -> "f";
"imapAccumLOf" -> "l";
"imapAccumLOf" -> "s";
"imapAccumROf" -> "a";
"imapAccumROf" -> "backwards";
"imapAccumROf" -> "imapAccumLOf";
"imapAccumROf" -> "s";
"imapB" -> "a";
"imapB" -> "f";
"imapB8" -> "a";
"imapB8" -> "f";
"imapBL" -> "a";
"imapBL" -> "f";
"imapBL8" -> "a";
"imapBL8" -> "f";
"imapLazy" -> "a";
"imapLazy" -> "f";
"imapList" -> "a";
"imapList" -> "f";
"imapMOf" -> "a";
"imapMOf" -> "l";
"imapMOf" -> "s";
"imapMOf_" -> "a";
"imapMOf_" -> "f";
"imapMOf_" -> "l";
"imapMOf_" -> "s";
"imapMOf_" -> "skip";
"imapOf" -> "abbreviatedFields";
"imapOf" -> "abbreviatedNamer";
"imapOf" -> "camelCaseFields";
"imapOf" -> "camelCaseNamer";
"imapOf" -> "classUnderscoreNoPrefixFields";
"imapOf" -> "classUnderscoreNoPrefixNamer";
"imapOf" -> "classyRules";
"imapOf" -> "classyRules_";
"imapOf" -> "createClass";
"imapOf" -> "declareClassy";
"imapOf" -> "declareClassyFor";
"imapOf" -> "declareFields";
"imapOf" -> "declareLenses";
"imapOf" -> "declareLensesFor";
"imapOf" -> "declareLensesWith";
"imapOf" -> "declarePrisms";
"imapOf" -> "declareWrapped";
"imapOf" -> "defaultFieldRules";
"imapOf" -> "generateLazyPatterns";
"imapOf" -> "generateSignatures";
"imapOf" -> "generateUpdateableOptics";
"imapOf" -> "iover";
"imapOf" -> "lensClass";
"imapOf" -> "lensField";
"imapOf" -> "lensRules";
"imapOf" -> "lensRulesFor";
"imapOf" -> "lookingupNamer";
"imapOf" -> "makeClassy";
"imapOf" -> "makeClassyFor";
"imapOf" -> "makeClassyPrisms";
"imapOf" -> "makeClassy_";
"imapOf" -> "makeFields";
"imapOf" -> "makeFieldsNoPrefix";
"imapOf" -> "makeLenses";
"imapOf" -> "makeLensesFor";
"imapOf" -> "makeLensesWith";
"imapOf" -> "makePrisms";
"imapOf" -> "makeWrapped";
"imapOf" -> "mappingNamer";
"imapOf" -> "simpleLenses";
"imapOf" -> "underscoreFields";
"imapOf" -> "underscoreNamer";
"imapOf" -> "underscoreNoPrefixNamer";
"imapStrict" -> "a";
"imapStrict" -> "f";
"imapped" -> "a";
"imapped" -> "f";
"imapped" -> "isets";
"imapped" -> "mapped";
"imodifying" -> "a";
"imodifying" -> "f";
"imodifying" -> "iover";
"imodifying" -> "l";
"imodifying" -> "s";
"index" -> "a";
"index" -> "f";
"indexing" -> "a";
"indexing" -> "f";
"indexing" -> "l";
"indexing" -> "s";
"indexing64" -> "a";
"indexing64" -> "f";
"indexing64" -> "l";
"indexing64" -> "s";
"indices" -> "a";
"indices" -> "f";
"infix" -> "a";
"infix" -> "l";
"infix" -> "over";
"infix" -> "s";
"infixl" -> "a";
"infixl" -> "as";
"infixl" -> "coerce\'";
"infixl" -> "f";
"infixl" -> "makeClassyPrisms";
"infixl" -> "makeDecPrisms";
"infixl" -> "makePrisms";
"infixl" -> "preview";
"infixl" -> "s";
"infixr" -> "a";
"infixr" -> "catches";
"infixr" -> "catching";
"infixr" -> "catching_";
"infixr" -> "f";
"infixr" -> "handling";
"infixr" -> "handling_";
"infixr" -> "l";
"infixr" -> "s";
"infixr" -> "snoc";
"infixr" -> "throwing";
"infixr" -> "throwing_";
"infixr" -> "trying";
"infixr" -> "views";
"injectivityAnnInputs" -> "lens";
"injectivityAnnInputs" -> "s";
"injectivityAnnOutput" -> "lens";
"injectivityAnnOutput" -> "s";
"inlinePragma" -> "a";
"inlinePragma" -> "anon";
"inlinePragma" -> "as";
"inlinePragma" -> "au";
"inlinePragma" -> "auf";
"inlinePragma" -> "bimapping";
"inlinePragma" -> "cloneIso";
"inlinePragma" -> "coerced";
"inlinePragma" -> "contramapping";
"inlinePragma" -> "curried";
"inlinePragma" -> "dimapping";
"inlinePragma" -> "enum";
"inlinePragma" -> "f";
"inlinePragma" -> "firsting";
"inlinePragma" -> "flipped";
"inlinePragma" -> "from";
"inlinePragma" -> "imagma";
"inlinePragma" -> "involuted";
"inlinePragma" -> "iso";
"inlinePragma" -> "lazy";
"inlinePragma" -> "lmapping";
"inlinePragma" -> "magma";
"inlinePragma" -> "mapping";
"inlinePragma" -> "non";
"inlinePragma" -> "non\'";
"inlinePragma" -> "pattern";
"inlinePragma" -> "reversed";
"inlinePragma" -> "rmapping";
"inlinePragma" -> "s";
"inlinePragma" -> "seconding";
"inlinePragma" -> "simple";
"inlinePragma" -> "strict";
"inlinePragma" -> "swapped";
"inlinePragma" -> "uncurried";
"inlinePragma" -> "under";
"inlinePragma" -> "withIso";
"inlinePragma" -> "xplat";
"inlinePragma" -> "xplatf";
"inoneOf" -> "a";
"inoneOf" -> "f";
"inoneOf" -> "ianyOf";
"inoneOf" -> "l";
"inoneOf" -> "s";
"ins" -> "a";
"ins" -> "getting";
"ins" -> "toListOf";
"insert2" -> "a";
"insertHitMap" -> "a";
"insertHitMap" -> "f";
"insertHitMap" -> "fixEq";
"insertHitMap" -> "sybChildren";
"inside" -> "f";
"inside" -> "l";
"integral" -> "a";
"integral" -> "integral";
"integral" -> "preview";
"integral" -> "prism";
"involuted" -> "a";
"involuted" -> "iso";
"iover" -> "a";
"iover" -> "f";
"iover" -> "l";
"iover" -> "s";
"ipartsOf" -> "a";
"ipartsOf" -> "as";
"ipartsOf" -> "f";
"ipartsOf" -> "is";
"ipartsOf" -> "l";
"ipartsOf" -> "outs";
"ipartsOf" -> "pins";
"ipartsOf" -> "s";
"ipartsOf" -> "wins";
"ipartsOf\'" -> "a";
"ipartsOf\'" -> "as";
"ipartsOf\'" -> "f";
"ipartsOf\'" -> "is";
"ipartsOf\'" -> "l";
"ipartsOf\'" -> "outs";
"ipartsOf\'" -> "pins";
"ipartsOf\'" -> "s";
"ipartsOf\'" -> "wins";
"ipassing" -> "a";
"ipassing" -> "iover";
"ipassing" -> "l";
"iplens" -> "a";
"iplens" -> "s";
"ipre" -> "a";
"ipre" -> "l";
"ipre" -> "s";
"ipreuse" -> "a";
"ipreuse" -> "ipreview";
"ipreuse" -> "l";
"ipreuse" -> "s";
"ipreuses" -> "a";
"ipreuses" -> "f";
"ipreuses" -> "ipreviews";
"ipreuses" -> "l";
"ipreuses" -> "s";
"ipreview" -> "a";
"ipreview" -> "ifoldMapOf";
"ipreview" -> "l";
"ipreview" -> "s";
"ipreviews" -> "a";
"ipreviews" -> "f";
"ipreviews" -> "ifoldMapOf";
"ipreviews" -> "l";
"ipreviews" -> "s";
"is" -> "allOf";
"is" -> "andOf";
"is" -> "anyOf";
"is" -> "asumOf";
"is" -> "backwards";
"is" -> "concatMapOf";
"is" -> "concatOf";
"is" -> "cycled";
"is" -> "droppingWhile";
"is" -> "elemIndexOf";
"is" -> "elemIndicesOf";
"is" -> "elemOf";
"is" -> "filtered";
"is" -> "filteredBy";
"is" -> "findIndexOf";
"is" -> "findIndicesOf";
"is" -> "findMOf";
"is" -> "findOf";
"is" -> "first1Of";
"is" -> "firstOf";
"is" -> "foldByOf";
"is" -> "foldMapByOf";
"is" -> "foldMapOf";
"is" -> "foldOf";
"is" -> "folded";
"is" -> "folded64";
"is" -> "folding";
"is" -> "foldl1Of";
"is" -> "foldl1Of\'";
"is" -> "foldlMOf";
"is" -> "foldlOf";
"is" -> "foldlOf\'";
"is" -> "foldr1Of";
"is" -> "foldr1Of\'";
"is" -> "foldrMOf";
"is" -> "foldrOf";
"is" -> "foldrOf\'";
"is" -> "foldring";
"is" -> "for1Of_";
"is" -> "forMOf_";
"is" -> "forOf_";
"is" -> "has";
"is" -> "hasn\'t";
"is" -> "iallOf";
"is" -> "ianyOf";
"is" -> "iconcatMapOf";
"is" -> "idroppingWhile";
"is" -> "ifiltered";
"is" -> "ifindMOf";
"is" -> "ifindOf";
"is" -> "ifoldMapOf";
"is" -> "ifolding";
"is" -> "ifoldlMOf";
"is" -> "ifoldlOf";
"is" -> "ifoldlOf\'";
"is" -> "ifoldrMOf";
"is" -> "ifoldrOf";
"is" -> "ifoldrOf\'";
"is" -> "ifoldring";
"is" -> "iforMOf_";
"is" -> "iforOf_";
"is" -> "imapMOf_";
"is" -> "inoneOf";
"is" -> "ipre";
"is" -> "ipreuse";
"is" -> "ipreuses";
"is" -> "ipreview";
"is" -> "ipreviews";
"is" -> "isn\'t";
"is" -> "itakingWhile";
"is" -> "iterated";
"is" -> "itoListOf";
"is" -> "itraverseOf_";
"is" -> "last1Of";
"is" -> "lastOf";
"is" -> "lengthOf";
"is" -> "lined";
"is" -> "lookupOf";
"is" -> "mapMOf_";
"is" -> "maximum1Of";
"is" -> "maximumByOf";
"is" -> "maximumOf";
"is" -> "minimum1Of";
"is" -> "minimumByOf";
"is" -> "minimumOf";
"is" -> "msumOf";
"is" -> "noneOf";
"is" -> "notElemOf";
"is" -> "notNullOf";
"is" -> "nullOf";
"is" -> "orOf";
"is" -> "pre";
"is" -> "preuse";
"is" -> "preuses";
"is" -> "preview";
"is" -> "previews";
"is" -> "productOf";
"is" -> "repeated";
"is" -> "replicated";
"is" -> "sequence1Of_";
"is" -> "sequenceAOf_";
"is" -> "sequenceOf_";
"is" -> "sumOf";
"is" -> "takingWhile";
"is" -> "toListOf";
"is" -> "toNonEmptyOf";
"is" -> "traverse1Of_";
"is" -> "traverseOf_";
"is" -> "unfolded";
"is" -> "worded";
"isDigit\'" -> "a";
"isDigit\'" -> "digitToIntMay";
"isIso" -> "a";
"isIso" -> "from";
"isIso" -> "isLens";
"isIso" -> "iso_hither";
"isIso" -> "iso_yon";
"isIso" -> "l";
"isIso" -> "s";
"isLens" -> "a";
"isLens" -> "isTraversal";
"isLens" -> "l";
"isLens" -> "lens_set_view";
"isLens" -> "lens_view_set";
"isLens" -> "s";
"isPrism" -> "a";
"isPrism" -> "isTraversal";
"isPrism" -> "l";
"isPrism" -> "prism_yang";
"isPrism" -> "prism_yin";
"isPrism" -> "s";
"isSetter" -> "a";
"isSetter" -> "l";
"isSetter" -> "s";
"isSetter" -> "setter_composition";
"isSetter" -> "setter_id";
"isSetter" -> "setter_set_set";
"isTraversal" -> "a";
"isTraversal" -> "as";
"isTraversal" -> "isSetter";
"isTraversal" -> "l";
"isTraversal" -> "s";
"isTraversal" -> "traverse_compose";
"isTraversal" -> "traverse_pureList";
"isTraversal" -> "traverse_pureMaybe";
"iset" -> "a";
"iset" -> "iover";
"iset" -> "l";
"iset" -> "s";
"isets" -> "a";
"isets" -> "f";
"isets" -> "iover";
"isets" -> "l";
"isets" -> "s";
"isets" -> "sets";
"isn\'t" -> "a";
"isn\'t" -> "matching";
"isn\'t" -> "s";
"iso" -> "a";
"iso" -> "s";
"isoTypeName" -> "mkLensName_tc";
"isoValName" -> "mkLensName_v";
"iso\'TypeName" -> "mkLensName_tc";
"iso_hither" -> "a";
"iso_hither" -> "cloneIso";
"iso_hither" -> "l";
"iso_hither" -> "s";
"iso_yon" -> "a";
"iso_yon" -> "l";
"iso_yon" -> "s";
"itakingWhile" -> "a";
"itakingWhile" -> "f";
"itakingWhile" -> "l";
"itakingWhile" -> "noEffect";
"itakingWhile" -> "s";
"iterated" -> "a";
"iterated" -> "f";
"ito" -> "a";
"ito" -> "f";
"ito" -> "s";
"itoListOf" -> "a";
"itoListOf" -> "ifoldrOf";
"itoListOf" -> "l";
"itoListOf" -> "s";
"itraverseBy" -> "a";
"itraverseBy" -> "f";
"itraverseBy" -> "s";
"itraverseByOf" -> "a";
"itraverseByOf" -> "f";
"itraverseByOf" -> "itraverseOf";
"itraverseByOf" -> "l";
"itraverseByOf" -> "traversedLazy";
"itraverseByOf" -> "traversedLazy8";
"itraverseByOf" -> "traversedStrictTree";
"itraverseByOf" -> "traversedStrictTree8";
"itraverseOf" -> "a";
"itraverseOf" -> "f";
"itraverseOf" -> "l";
"itraverseOf" -> "s";
"itraverseOf_" -> "a";
"itraverseOf_" -> "f";
"itraverseOf_" -> "l";
"itraverseOf_" -> "s";
"itraversed" -> "a";
"iunsafePartsOf" -> "a";
"iunsafePartsOf" -> "as";
"iunsafePartsOf" -> "f";
"iunsafePartsOf" -> "is";
"iunsafePartsOf" -> "l";
"iunsafePartsOf" -> "pins";
"iunsafePartsOf" -> "s";
"iunsafePartsOf" -> "unsafeOuts";
"iunsafePartsOf" -> "wins";
"iunsafePartsOf\'" -> "as";
"iunsafePartsOf\'" -> "f";
"iunsafePartsOf\'" -> "is";
"iunsafePartsOf\'" -> "l";
"iunsafePartsOf\'" -> "pins";
"iunsafePartsOf\'" -> "s";
"iunsafePartsOf\'" -> "unsafeOuts";
"iunsafePartsOf\'" -> "wins";
"iuse" -> "a";
"iuse" -> "l";
"iuse" -> "s";
"iuses" -> "a";
"iuses" -> "f";
"iuses" -> "l";
"iuses" -> "s";
"iview" -> "a";
"iview" -> "l";
"iview" -> "s";
"iviews" -> "a";
"iviews" -> "f";
"iviews" -> "l";
"iviews" -> "s";
"ix" -> "a";
"ix" -> "f";
"ix" -> "from";
"ix" -> "s";
"ix" -> "to";
"ixAt" -> "a";
"ixAt" -> "as";
"ixAt" -> "f";
"ixAt" -> "is";
"ixAt" -> "ix";
"ixAt" -> "l";
"ixAt" -> "s";
"ixmapped" -> "bitAt";
"ixmapped" -> "bits";
"ixmapped" -> "byteAt";
"ixmapped" -> "bytewise";
"ixmapped" -> "setting";
"l" -> "a";
"l" -> "f";
"l" -> "fab";
"l" -> "l";
"l" -> "over";
"l" -> "s";
"l" -> "set";
"l" -> "storing";
"lappend" -> "a";
"lappend" -> "f";
"lappend" -> "l";
"lappend" -> "lappend";
"last1" -> "a";
"last1" -> "f";
"last1" -> "head1";
"last1" -> "s";
"last1Of" -> "a";
"last1Of" -> "foldMapOf";
"last1Of" -> "l";
"last1Of" -> "s";
"lastOf" -> "a";
"lastOf" -> "foldMapOf";
"lastOf" -> "getRightmost";
"lastOf" -> "l";
"lastOf" -> "s";
"lazy" -> "a";
"lazy" -> "iso";
"length" -> "a";
"length" -> "as";
"length" -> "f";
"lengthOf" -> "a";
"lengthOf" -> "foldMapOf";
"lengthOf" -> "foldlOf\'";
"lengthOf" -> "l";
"lengthOf" -> "s";
"lens" -> "a";
"lens" -> "s";
"lensClass" -> "f";
"lensField" -> "f";
"lensProduct" -> "a";
"lensProduct" -> "f";
"lensProduct" -> "s";
"lensRules" -> "underscoreNoPrefixNamer";
"lensRulesFor" -> "lensField";
"lensRulesFor" -> "lensRules";
"lensRulesFor" -> "lookingupNamer";
"lensTypeName" -> "mkLensName_tc";
"lens\'TypeName" -> "mkLensName_tc";
"lens_set_view" -> "a";
"lens_set_view" -> "l";
"lens_set_view" -> "s";
"lens_set_view" -> "set";
"lens_set_view" -> "view";
"lens_view_set" -> "a";
"lens_view_set" -> "l";
"lens_view_set" -> "s";
"lens_view_set" -> "set";
"lens_view_set" -> "view";
"levelIns" -> "a";
"levelIns" -> "deepening";
"levelIns" -> "f";
"levelIns" -> "rmapConst";
"levelOuts" -> "a";
"levelOuts" -> "f";
"levels" -> "a";
"levels" -> "f";
"levels" -> "l";
"levels" -> "levelIns";
"levels" -> "levelOuts";
"levels" -> "s";
"levels" -> "traversed";
"lifted" -> "a";
"lifted" -> "f";
"lifted" -> "sets";
"like" -> "a";
"like" -> "f";
"like" -> "s";
"like" -> "to";
"limitedSubst" -> "limitedSubst";
"lined" -> "a";
"lined" -> "f";
"lined" -> "indexing";
"lined" -> "s";
"listening" -> "a";
"listening" -> "l";
"listening" -> "view";
"listenings" -> "a";
"listenings" -> "l";
"listenings" -> "views";
"lmapping" -> "a";
"lmapping" -> "f";
"lmapping" -> "iso";
"lmapping" -> "s";
"lmapping" -> "withIso";
"locEnd" -> "lens";
"locFileName" -> "lens";
"locModule" -> "lens";
"locPackage" -> "lens";
"locStart" -> "lens";
"locally" -> "a";
"locally" -> "f";
"locally" -> "l";
"locally" -> "over";
"locally" -> "s";
"location" -> "f";
"location" -> "s";
"loci" -> "a";
"loci" -> "f";
"loci" -> "s";
"locus" -> "a";
"locus" -> "f";
"locus" -> "s";
"lookupOf" -> "a";
"lookupOf" -> "foldrOf";
"lookupOf" -> "l";
"lookupOf" -> "s";
"lookupon" -> "a";
"lookupon" -> "elementOf";
"lookupon" -> "f";
"lookupon" -> "indexing";
"lookupon" -> "l";
"lookupon" -> "s";
"lookupon" -> "set";
"magma" -> "a";
"magma" -> "iso";
"magma" -> "l";
"magma" -> "runMafic";
"magma" -> "runMagma";
"magma" -> "s";
"makeClassy" -> "classyRules";
"makeClassy" -> "makeFieldOptics";
"makeClassyClass" -> "applyTypeSubst";
"makeClassyClass" -> "composeValName";
"makeClassyClass" -> "conAppsT";
"makeClassyClass" -> "inlinePragma";
"makeClassyClass" -> "lens\'TypeName";
"makeClassyClass" -> "null";
"makeClassyClass" -> "quantifyType\'";
"makeClassyClass" -> "s";
"makeClassyClass" -> "stabToA";
"makeClassyClass" -> "stabToContext";
"makeClassyClass" -> "stabToOptic";
"makeClassyClass" -> "stabToS";
"makeClassyClass" -> "unifyTypes";
"makeClassyClass" -> "view";
"makeClassyDriver" -> "makeClassyClass";
"makeClassyDriver" -> "makeClassyInstance";
"makeClassyDriver" -> "s";
"makeClassyFor" -> "classyRulesFor";
"makeClassyFor" -> "makeFieldOptics";
"makeClassyInstance" -> "conAppsT";
"makeClassyInstance" -> "idValName";
"makeClassyInstance" -> "makeFieldOptic";
"makeClassyInstance" -> "s";
"makeClassyInstance" -> "tvbToType";
"makeClassyPrismClass" -> "appsT";
"makeClassyPrismClass" -> "composeValName";
"makeClassyPrismClass" -> "computeOpticType";
"makeClassyPrismClass" -> "cons";
"makeClassyPrismClass" -> "nconName";
"makeClassyPrismClass" -> "null";
"makeClassyPrismClass" -> "over";
"makeClassyPrismClass" -> "prismName";
"makeClassyPrismClass" -> "prism\'TypeName";
"makeClassyPrismClass" -> "stabToType";
"makeClassyPrismClass" -> "view";
"makeClassyPrismInstance" -> "computeOpticType";
"makeClassyPrismInstance" -> "conAppsT";
"makeClassyPrismInstance" -> "cons";
"makeClassyPrismInstance" -> "f";
"makeClassyPrismInstance" -> "idValName";
"makeClassyPrismInstance" -> "makeConOpticExp";
"makeClassyPrismInstance" -> "nconName";
"makeClassyPrismInstance" -> "prismName";
"makeClassyPrismInstance" -> "s";
"makeClassyPrismInstance" -> "simplifyStab";
"makeClassyPrismInstance" -> "tvbToType";
"makeClassyPrismInstance" -> "view";
"makeClassyPrisms" -> "makePrisms\'";
"makeClassy_" -> "classyRules_";
"makeClassy_" -> "makeFieldOptics";
"makeConIso" -> "computeIsoType";
"makeConIso" -> "inlinePragma";
"makeConIso" -> "makeConIsoExp";
"makeConIso" -> "nconName";
"makeConIso" -> "nconTypes";
"makeConIso" -> "prismName";
"makeConIso" -> "s";
"makeConIso" -> "view";
"makeConIsoExp" -> "isoValName";
"makeConIsoExp" -> "length";
"makeConIsoExp" -> "makeIsoRemitter";
"makeConIsoExp" -> "makeReviewer";
"makeConIsoExp" -> "nconName";
"makeConIsoExp" -> "nconTypes";
"makeConIsoExp" -> "view";
"makeConOpticExp" -> "cons";
"makeConOpticExp" -> "makeConPrismExp";
"makeConOpticExp" -> "makeConReviewExp";
"makeConOpticExp" -> "stabType";
"makeConPrismExp" -> "cons";
"makeConPrismExp" -> "length";
"makeConPrismExp" -> "makeFullRemitter";
"makeConPrismExp" -> "makeReviewer";
"makeConPrismExp" -> "makeSimpleRemitter";
"makeConPrismExp" -> "nconName";
"makeConPrismExp" -> "nconTypes";
"makeConPrismExp" -> "prismValName";
"makeConPrismExp" -> "stabSimple";
"makeConPrismExp" -> "view";
"makeConReviewExp" -> "length";
"makeConReviewExp" -> "makeReviewer";
"makeConReviewExp" -> "nconName";
"makeConReviewExp" -> "nconTypes";
"makeConReviewExp" -> "untoValName";
"makeConReviewExp" -> "view";
"makeConsPrisms" -> "computeOpticType";
"makeConsPrisms" -> "cons";
"makeConsPrisms" -> "inlinePragma";
"makeConsPrisms" -> "makeClassyPrismClass";
"makeConsPrisms" -> "makeClassyPrismInstance";
"makeConsPrisms" -> "makeConIso";
"makeConsPrisms" -> "makeConOpticExp";
"makeConsPrisms" -> "nconName";
"makeConsPrisms" -> "prismName";
"makeConsPrisms" -> "prismName\'";
"makeConsPrisms" -> "quantifyType";
"makeConsPrisms" -> "stabToType";
"makeConsPrisms" -> "view";
"makeDataDecl" -> "apps";
"makeDataDecl" -> "cons";
"makeDataDecl" -> "deNewtype";
"makeDataDecl" -> "setOf";
"makeDataDecl" -> "typeVars";
"makeDataDecl" -> "unfoldType";
"makeDecPrisms" -> "cons";
"makeDecPrisms" -> "datatypeTypeKinded";
"makeDecPrisms" -> "makeConsPrisms";
"makeDecPrisms" -> "normalizeCon";
"makeFieldClass" -> "a";
"makeFieldClass" -> "conAppsT";
"makeFieldClass" -> "quantifyType\'";
"makeFieldClass" -> "s";
"makeFieldClass" -> "stabToContext";
"makeFieldClass" -> "stabToOptic";
"makeFieldClauses" -> "cons";
"makeFieldClauses" -> "length";
"makeFieldClauses" -> "makeFieldOpticClause";
"makeFieldClauses" -> "makeGetterClause";
"makeFieldClauses" -> "makeIsoClause";
"makeFieldInstance" -> "_FamilyD";
"makeFieldInstance" -> "_FamilyI";
"makeFieldInstance" -> "_OpenTypeFamilyD";
"makeFieldInstance" -> "_TypeFam";
"makeFieldInstance" -> "a";
"makeFieldInstance" -> "conAppsT";
"makeFieldInstance" -> "has";
"makeFieldInstance" -> "s";
"makeFieldInstance" -> "stabToA";
"makeFieldInstance" -> "stabToS";
"makeFieldOptic" -> "addFieldClassName";
"makeFieldOptic" -> "cons";
"makeFieldOptic" -> "inlinePragma";
"makeFieldOptic" -> "makeFieldClass";
"makeFieldOptic" -> "makeFieldClauses";
"makeFieldOptic" -> "makeFieldInstance";
"makeFieldOptic" -> "stabToType";
"makeFieldOpticClause" -> "a";
"makeFieldOpticClause" -> "apValName";
"makeFieldOpticClause" -> "f";
"makeFieldOpticClause" -> "fmapValName";
"makeFieldOpticClause" -> "ix";
"makeFieldOpticClause" -> "length";
"makeFieldOpticClause" -> "makePureClause";
"makeFieldOpticClause" -> "newNames";
"makeFieldOpticClause" -> "set";
"makeFieldOptics" -> "makeFieldOpticsForDatatype";
"makeFieldOpticsForDatatype" -> "a";
"makeFieldOpticsForDatatype" -> "buildScaffold";
"makeFieldOpticsForDatatype" -> "cons";
"makeFieldOpticsForDatatype" -> "datatypeTypeKinded";
"makeFieldOpticsForDatatype" -> "folded";
"makeFieldOpticsForDatatype" -> "makeClassyDriver";
"makeFieldOpticsForDatatype" -> "makeFieldOptic";
"makeFieldOpticsForDatatype" -> "normalizeConstructor";
"makeFieldOpticsForDatatype" -> "over";
"makeFieldOpticsForDatatype" -> "s";
"makeFieldOpticsForDatatype" -> "setOf";
"makeFieldOpticsForDatatype" -> "toListOf";
"makeFieldOpticsForDec" -> "makeFieldOpticsForDec\'";
"makeFieldOpticsForDec\'" -> "makeFieldOpticsForDatatype";
"makeFields" -> "camelCaseFields";
"makeFields" -> "makeFieldOptics";
"makeFieldsNoPrefix" -> "classUnderscoreNoPrefixFields";
"makeFieldsNoPrefix" -> "makeFieldOptics";
"makeFullRemitter" -> "appsE1";
"makeFullRemitter" -> "cons";
"makeFullRemitter" -> "leftDataName";
"makeFullRemitter" -> "length";
"makeFullRemitter" -> "newNames";
"makeFullRemitter" -> "rightDataName";
"makeFullRemitter" -> "toTupleE";
"makeGetterClause" -> "a";
"makeGetterClause" -> "apValName";
"makeGetterClause" -> "f";
"makeGetterClause" -> "is";
"makeGetterClause" -> "length";
"makeGetterClause" -> "makePureClause";
"makeGetterClause" -> "newNames";
"makeGetterClause" -> "phantomValName";
"makeIsoClause" -> "isoValName";
"makeIsoRemitter" -> "newNames";
"makeIsoRemitter" -> "toTupleE";
"makeLenses" -> "lensRules";
"makeLenses" -> "makeFieldOptics";
"makeLensesFor" -> "lensRulesFor";
"makeLensesFor" -> "makeFieldOptics";
"makeLensesWith" -> "makeFieldOptics";
"makePrisms" -> "makePrisms\'";
"makePrisms\'" -> "cons";
"makePrisms\'" -> "datatypeTypeKinded";
"makePrisms\'" -> "makeConsPrisms";
"makePrisms\'" -> "normalizeCon";
"makePureClause" -> "newNames";
"makePureClause" -> "pureValName";
"makeReviewer" -> "appsE1";
"makeReviewer" -> "newNames";
"makeReviewer" -> "toTupleP";
"makeRewrappedInstance" -> "appsT";
"makeRewrappedInstance" -> "freshMap";
"makeRewrappedInstance" -> "rewrappedTypeName";
"makeRewrappedInstance" -> "substTypeVars";
"makeRewrappedInstance" -> "view";
"makeSimpleRemitter" -> "leftDataName";
"makeSimpleRemitter" -> "newNames";
"makeSimpleRemitter" -> "rightDataName";
"makeSimpleRemitter" -> "toTupleE";
"makeWrapped" -> "makeWrappedForDec";
"makeWrappedForDec" -> "makeDataDecl";
"makeWrappedForDec" -> "makeRewrappedInstance";
"makeWrappedForDec" -> "makeWrappedInstance";
"makeWrappedForDec" -> "toListOf";
"makeWrappedInstance" -> "_wrapped\'ValName";
"makeWrappedInstance" -> "a";
"makeWrappedInstance" -> "isoValName";
"makeWrappedInstance" -> "toListOf";
"makeWrappedInstance" -> "typeVars";
"makeWrappedInstance" -> "unwrappedTypeName";
"makeWrappedInstance" -> "view";
"makeWrappedInstance" -> "wrappedTypeName";
"mapAccumLOf" -> "a";
"mapAccumLOf" -> "f";
"mapAccumLOf" -> "l";
"mapAccumLOf" -> "s";
"mapAccumROf" -> "a";
"mapAccumROf" -> "backwards";
"mapAccumROf" -> "mapAccumLOf";
"mapAccumROf" -> "s";
"mapEq" -> "a";
"mapEq" -> "f";
"mapEq" -> "l";
"mapEq" -> "s";
"mapEq" -> "substEq";
"mapMOf" -> "a";
"mapMOf" -> "l";
"mapMOf" -> "s";
"mapMOf_" -> "a";
"mapMOf_" -> "f";
"mapMOf_" -> "foldMapOf";
"mapMOf_" -> "l";
"mapMOf_" -> "s";
"mapMOf_" -> "skip";
"mapOf" -> "a";
"mapOf" -> "over";
"mapOf" -> "s";
"mapped" -> "a";
"mapped" -> "sets";
"mappedException" -> "s";
"mappedException" -> "sets";
"mappedException\'" -> "a";
"mappedException\'" -> "exception";
"mappedException\'" -> "mappedException";
"mappedException\'" -> "preview";
"mapping" -> "a";
"mapping" -> "iso";
"mapping" -> "withIso";
"matchBody" -> "lens";
"matchBody" -> "s";
"matchDeclarations" -> "lens";
"matchDeclarations" -> "s";
"matchPattern" -> "lens";
"matchPattern" -> "s";
"matching" -> "a";
"matching" -> "withPrism";
"maximum1Of" -> "a";
"maximum1Of" -> "foldMapOf";
"maximum1Of" -> "l";
"maximum1Of" -> "s";
"maximumByOf" -> "a";
"maximumByOf" -> "foldlOf\'";
"maximumByOf" -> "l";
"maximumByOf" -> "s";
"maximumOf" -> "a";
"maximumOf" -> "foldlOf\'";
"maximumOf" -> "l";
"maximumOf" -> "s";
"members" -> "folding";
"minimum1Of" -> "a";
"minimum1Of" -> "foldMapOf";
"minimum1Of" -> "l";
"minimum1Of" -> "s";
"minimumByOf" -> "a";
"minimumByOf" -> "foldlOf\'";
"minimumByOf" -> "l";
"minimumByOf" -> "s";
"minimumOf" -> "a";
"minimumOf" -> "foldlOf\'";
"minimumOf" -> "l";
"minimumOf" -> "s";
"mkLensName_tc" -> "lensPackageKey";
"mkLensName_v" -> "lensPackageKey";
"modifying" -> "a";
"modifying" -> "f";
"modifying" -> "l";
"modifying" -> "over";
"modifying" -> "s";
"msumOf" -> "a";
"msumOf" -> "foldrOf";
"msumOf" -> "l";
"msumOf" -> "s";
"multiplying" -> "a";
"multiplying" -> "iso";
"nconCxt" -> "f";
"nconName" -> "f";
"nconTypes" -> "f";
"nearly" -> "a";
"nearly" -> "prism\'";
"negated" -> "_Naturals";
"negated" -> "_Pair";
"negated" -> "_Sum";
"negated" -> "iso";
"negated" -> "pattern";
"newNames" -> "base";
"noEffect" -> "a";
"noEffect" -> "as";
"noEffect" -> "asIndex";
"noEffect" -> "coerce\'";
"noEffect" -> "f";
"noEffect" -> "indexing";
"noEffect" -> "indexing64";
"noEffect" -> "l";
"noEffect" -> "s";
"noEffect" -> "withIndex";
"non" -> "a";
"non" -> "non\'";
"non" -> "only";
"non\'" -> "a";
"non\'" -> "clonePrism";
"non\'" -> "has";
"non\'" -> "iso";
"non\'" -> "review";
"noneOf" -> "a";
"noneOf" -> "anyOf";
"noneOf" -> "f";
"noneOf" -> "l";
"noneOf" -> "s";
"normalizeConstructor" -> "setOf";
"normalizeConstructor" -> "typeVars";
"notElemOf" -> "a";
"notElemOf" -> "allOf";
"notElemOf" -> "l";
"notElemOf" -> "s";
"notNullOf" -> "a";
"notNullOf" -> "has";
"notNullOf" -> "s";
"null" -> "a";
"nullOf" -> "a";
"nullOf" -> "hasn\'t";
"nullOf" -> "s";
"octal" -> "a";
"octal" -> "base";
"onceUpon" -> "a";
"onceUpon" -> "f";
"onceUpon" -> "lookupon";
"onceUpon" -> "s";
"onceUpon" -> "template";
"onceUpon\'" -> "a";
"onceUpon\'" -> "f";
"onceUpon\'" -> "lookupon";
"onceUpon\'" -> "s";
"onceUpon\'" -> "template";
"only" -> "a";
"only" -> "prism\'";
"op" -> "s";
"op" -> "view";
"orOf" -> "a";
"orOf" -> "foldMapOf";
"orOf" -> "l";
"orOf" -> "s";
"ordinalNub" -> "l";
"ordinalNub" -> "ordinalNubHelper";
"ordinalNubHelper" -> "a";
"ordinalNubHelper" -> "f";
"ordinalNubHelper" -> "l";
"ordinalNubHelper" -> "runMafic";
"ordinalNubHelper" -> "runMagma";
"ordinalNubHelper" -> "runTakingWhile";
"ordinals" -> "_K1";
"ordinals" -> "_L1";
"ordinals" -> "_M1";
"ordinals" -> "_Par1";
"ordinals" -> "_R1";
"ordinals" -> "_Rec1";
"ordinals" -> "_U1";
"ordinals" -> "_UAddr";
"ordinals" -> "_UChar";
"ordinals" -> "_UDouble";
"ordinals" -> "_UFloat";
"ordinals" -> "_UInt";
"ordinals" -> "_UWord";
"ordinals" -> "_V1";
"ordinals" -> "a";
"ordinals" -> "f";
"ordinals" -> "generic";
"ordinals" -> "generic1";
"ordinals" -> "is";
"ordinals" -> "length";
"ordinals" -> "ordinalNub";
"outs" -> "a";
"outs" -> "parr";
"outs" -> "unconsWithDefault";
"outside" -> "a";
"outside" -> "f";
"outside" -> "s";
"outside" -> "withPrism";
"over" -> "a";
"over" -> "f";
"over" -> "l";
"over" -> "s";
"overA" -> "a";
"overA" -> "f";
"overA" -> "l";
"overA" -> "s";
"overEquality" -> "a";
"overEquality" -> "s";
"overEquality" -> "substEq";
"overHead" -> "f";
"packed" -> "iso";
"packedBytes" -> "iso";
"packedChars" -> "iso";
"parOf" -> "a";
"parOf" -> "f";
"parOf" -> "l";
"parOf" -> "s";
"para" -> "a";
"para" -> "paraOf";
"paraOf" -> "a";
"paraOf" -> "f";
"paraOf" -> "l";
"paraOf" -> "toListOf";
"parr" -> "a";
"parr" -> "f";
"part" -> "s";
"parts" -> "a";
"parts" -> "partsOf";
"partsOf" -> "a";
"partsOf" -> "f";
"partsOf" -> "ins";
"partsOf" -> "l";
"partsOf" -> "outs";
"partsOf" -> "s";
"partsOf\'" -> "a";
"partsOf\'" -> "f";
"partsOf\'" -> "ins";
"partsOf\'" -> "l";
"partsOf\'" -> "outs";
"partsOf\'" -> "s";
"passing" -> "a";
"passing" -> "l";
"passing" -> "over";
"pattern" -> "_Denormal";
"pattern" -> "_DivideByZero";
"pattern" -> "_ExitFailure";
"pattern" -> "_ExitSuccess";
"pattern" -> "_HeapOverflow";
"pattern" -> "_IndexOutOfBounds";
"pattern" -> "_LossOfPrecision";
"pattern" -> "_Naturals";
"pattern" -> "_Nothing";
"pattern" -> "_Overflow";
"pattern" -> "_Pair";
"pattern" -> "_RatioZeroDenominator";
"pattern" -> "_StackOverflow";
"pattern" -> "_Sum";
"pattern" -> "_Text";
"pattern" -> "_ThreadKilled";
"pattern" -> "_UndefinedElement";
"pattern" -> "_Underflow";
"pattern" -> "_Unwrapped";
"pattern" -> "_UserInterrupt";
"pattern" -> "_Wrapped";
"pattern" -> "_Wrapping";
"pattern" -> "_conjugate";
"pattern" -> "_imagPart";
"pattern" -> "_magnitude";
"pattern" -> "_phase";
"pattern" -> "_polar";
"pattern" -> "_realPart";
"pattern" -> "a";
"pattern" -> "as";
"pattern" -> "basename";
"pattern" -> "biplate";
"pattern" -> "branches";
"pattern" -> "builder";
"pattern" -> "bytes";
"pattern" -> "chars";
"pattern" -> "cloneEquality";
"pattern" -> "directory";
"pattern" -> "equality";
"pattern" -> "equality\'";
"pattern" -> "exception";
"pattern" -> "extension";
"pattern" -> "f";
"pattern" -> "filename";
"pattern" -> "from";
"pattern" -> "fromEq";
"pattern" -> "fromLeibniz";
"pattern" -> "fromLeibniz\'";
"pattern" -> "gtraverse";
"pattern" -> "has";
"pattern" -> "integral";
"pattern" -> "iso";
"pattern" -> "lazy";
"pattern" -> "mapEq";
"pattern" -> "nearly";
"pattern" -> "onceUpon";
"pattern" -> "onceUpon\'";
"pattern" -> "overEquality";
"pattern" -> "packed";
"pattern" -> "packedBytes";
"pattern" -> "packedChars";
"pattern" -> "pattern";
"pattern" -> "preview";
"pattern" -> "prism";
"pattern" -> "prism\'";
"pattern" -> "reversed";
"pattern" -> "review";
"pattern" -> "root";
"pattern" -> "runEq";
"pattern" -> "s";
"pattern" -> "setOf";
"pattern" -> "setmapped";
"pattern" -> "simple";
"pattern" -> "simply";
"pattern" -> "strict";
"pattern" -> "substEq";
"pattern" -> "swapped";
"pattern" -> "template";
"pattern" -> "text";
"pattern" -> "tinplate";
"pattern" -> "traversed";
"pattern" -> "trivial";
"pattern" -> "underEquality";
"pattern" -> "uniplate";
"pattern" -> "unpacked";
"pattern" -> "unpackedBytes";
"pattern" -> "unpackedChars";
"pattern" -> "upon";
"pattern" -> "upon\'";
"pattern" -> "utf8";
"pattern" -> "view";
"pattern" -> "withEquality";
"pattern" -> "withPrism";
"phantomValName" -> "a";
"phantomValName" -> "f";
"phantomValName" -> "mkLensName_v";
"pins" -> "a";
"pre" -> "a";
"pre" -> "l";
"pre" -> "s";
"prefixed" -> "a";
"prefixed" -> "prism\'";
"preuse" -> "a";
"preuse" -> "l";
"preuse" -> "preview";
"preuse" -> "s";
"preuses" -> "a";
"preuses" -> "f";
"preuses" -> "l";
"preuses" -> "previews";
"preuses" -> "s";
"preview" -> "a";
"preview" -> "foldMapOf";
"preview" -> "l";
"preview" -> "s";
"previews" -> "a";
"previews" -> "f";
"previews" -> "foldMapOf";
"previews" -> "l";
"previews" -> "s";
"prism" -> "a";
"prism" -> "s";
"prismName" -> "prismName\'";
"prismName\'" -> "a";
"prismName\'" -> "f";
"prismName\'" -> "retagged";
"prismName\'" -> "s";
"prismSum" -> "a";
"prismSum" -> "f";
"prismSum" -> "prism";
"prismSum" -> "s";
"prismSum" -> "withPrism";
"prismTypeName" -> "mkLensName_tc";
"prismValName" -> "mkLensName_v";
"prism\'" -> "a";
"prism\'" -> "prism";
"prism\'" -> "s";
"prism\'TypeName" -> "mkLensName_tc";
"prism_yang" -> "a";
"prism_yang" -> "f";
"prism_yang" -> "l";
"prism_yang" -> "preview";
"prism_yang" -> "review";
"prism_yang" -> "s";
"prism_yin" -> "a";
"prism_yin" -> "l";
"prism_yin" -> "preview";
"prism_yin" -> "review";
"prism_yin" -> "s";
"productOf" -> "a";
"productOf" -> "foldlOf\'";
"productOf" -> "l";
"productOf" -> "s";
"proxyN18" -> "a";
"proxyN18" -> "adjoin";
"proxyN18" -> "f";
"proxyN18" -> "lensProduct";
"proxyN18" -> "prismSum";
"proxyN18" -> "s";
"quantifyType" -> "quantifyType\'";
"re" -> "to";
"readCacheFollower" -> "a";
"readCacheFollower" -> "cache";
"readCacheFollower" -> "follower";
"readCacheFollower" -> "inlinePerformIO";
"readCacheFollower" -> "insert2";
"readCacheFollower" -> "insertHitMap";
"readSigned\'" -> "a";
"readSigned\'" -> "f";
"reindexed" -> "a";
"reindexed" -> "f";
"reindexed" -> "icompose";
"reindexed" -> "s";
"repeated" -> "a";
"repeated" -> "as";
"repeated" -> "f";
"replicated" -> "a";
"replicated" -> "f";
"replicated" -> "noEffect";
"replicated" -> "s";
"retagged" -> "a";
"retagged" -> "f";
"reuses" -> "a";
"reuses" -> "f";
"reuses" -> "s";
"reversed" -> "a";
"reversed" -> "involuted";
"reviewTypeName" -> "mkLensName_tc";
"reviewing" -> "argument";
"reviewing" -> "assign";
"reviewing" -> "assignA";
"reviewing" -> "censoring";
"reviewing" -> "cloneIndexPreservingSetter";
"reviewing" -> "cloneIndexedSetter";
"reviewing" -> "cloneSetter";
"reviewing" -> "contramapped";
"reviewing" -> "f";
"reviewing" -> "icensoring";
"reviewing" -> "ilocally";
"reviewing" -> "imapOf";
"reviewing" -> "imodifying";
"reviewing" -> "iover";
"reviewing" -> "ipassing";
"reviewing" -> "iset";
"reviewing" -> "isets";
"reviewing" -> "lifted";
"reviewing" -> "locally";
"reviewing" -> "mapOf";
"reviewing" -> "mapped";
"reviewing" -> "modifying";
"reviewing" -> "over";
"reviewing" -> "passing";
"reviewing" -> "scribe";
"reviewing" -> "set";
"reviewing" -> "set\'";
"reviewing" -> "sets";
"reviewing" -> "setting";
"rewrappedTypeName" -> "mkLensName_tc";
"rewrite" -> "a";
"rewrite" -> "rewriteOf";
"rewriteM" -> "a";
"rewriteM" -> "rewriteMOf";
"rewriteMOf" -> "a";
"rewriteMOf" -> "f";
"rewriteMOf" -> "l";
"rewriteMOf" -> "s";
"rewriteMOf" -> "transformMOf";
"rewriteMOn" -> "a";
"rewriteMOn" -> "mapMOf";
"rewriteMOn" -> "rewriteM";
"rewriteMOn" -> "s";
"rewriteMOnOf" -> "a";
"rewriteMOnOf" -> "l";
"rewriteMOnOf" -> "mapMOf";
"rewriteMOnOf" -> "rewriteMOf";
"rewriteOf" -> "a";
"rewriteOf" -> "f";
"rewriteOf" -> "l";
"rewriteOf" -> "s";
"rewriteOf" -> "transformOf";
"rewriteOn" -> "a";
"rewriteOn" -> "over";
"rewriteOn" -> "rewrite";
"rewriteOn" -> "s";
"rewriteOnOf" -> "a";
"rewriteOnOf" -> "l";
"rewriteOnOf" -> "over";
"rewriteOnOf" -> "rewriteOf";
"rmapConst" -> "a";
"rmapConst" -> "f";
"rmapping" -> "a";
"rmapping" -> "f";
"rmapping" -> "iso";
"rmapping" -> "s";
"rmapping" -> "withIso";
"root" -> "a";
"root" -> "as";
"root" -> "f";
"runEq" -> "a";
"runEq" -> "l";
"runEq" -> "s";
"runMafic" -> "a";
"runMafic" -> "f";
"runMagma" -> "a";
"runMagma" -> "f";
"runMagma" -> "l";
"runMagma" -> "runMagma";
"runTakingWhile" -> "a";
"runTakingWhile" -> "f";
"runTakingWhile" -> "length";
"runTakingWhile" -> "null";
"s" -> "a";
"s" -> "f";
"s" -> "foldrOf";
"s" -> "ifoldrOf";
"s" -> "ix";
"s" -> "l";
"s" -> "s";
"sansVar" -> "f";
"sansVar" -> "s";
"scanl1Of" -> "a";
"scanl1Of" -> "f";
"scanl1Of" -> "l";
"scanl1Of" -> "mapAccumLOf";
"scanl1Of" -> "s";
"scanl1Of" -> "step";
"scanr1Of" -> "a";
"scanr1Of" -> "f";
"scanr1Of" -> "l";
"scanr1Of" -> "mapAccumROf";
"scanr1Of" -> "s";
"scanr1Of" -> "step";
"scribe" -> "a";
"scribe" -> "l";
"scribe" -> "set";
"seconding" -> "a";
"seconding" -> "iso";
"seconding" -> "s";
"seconding" -> "withIso";
"selfIndex" -> "a";
"selfIndex" -> "f";
"seqOf" -> "a";
"seqOf" -> "ixmapped";
"seqOf" -> "l";
"seqOf" -> "s";
"seqOf" -> "setOf";
"seqOf" -> "setmapped";
"seqOf" -> "toListOf";
"seqOf" -> "views";
"sequence1Of_" -> "a";
"sequence1Of_" -> "foldMapOf";
"sequence1Of_" -> "l";
"sequence1Of_" -> "s";
"sequenceAOf" -> "a";
"sequenceAOf" -> "l";
"sequenceAOf" -> "s";
"sequenceAOf_" -> "a";
"sequenceAOf_" -> "f";
"sequenceAOf_" -> "foldMapOf";
"sequenceAOf_" -> "l";
"sequenceAOf_" -> "s";
"sequenceByOf" -> "_10\'";
"sequenceByOf" -> "_11\'";
"sequenceByOf" -> "_12\'";
"sequenceByOf" -> "_13\'";
"sequenceByOf" -> "_14\'";
"sequenceByOf" -> "_15\'";
"sequenceByOf" -> "_16\'";
"sequenceByOf" -> "_17\'";
"sequenceByOf" -> "_18\'";
"sequenceByOf" -> "_19\'";
"sequenceByOf" -> "_1\'";
"sequenceByOf" -> "_2\'";
"sequenceByOf" -> "_3\'";
"sequenceByOf" -> "_4\'";
"sequenceByOf" -> "_5\'";
"sequenceByOf" -> "_6\'";
"sequenceByOf" -> "_7\'";
"sequenceByOf" -> "_8\'";
"sequenceByOf" -> "_9\'";
"sequenceByOf" -> "a";
"sequenceByOf" -> "f";
"sequenceByOf" -> "ix";
"sequenceByOf" -> "l";
"sequenceByOf" -> "proxyN0";
"sequenceByOf" -> "proxyN1";
"sequenceByOf" -> "proxyN10";
"sequenceByOf" -> "proxyN11";
"sequenceByOf" -> "proxyN12";
"sequenceByOf" -> "proxyN13";
"sequenceByOf" -> "proxyN14";
"sequenceByOf" -> "proxyN15";
"sequenceByOf" -> "proxyN16";
"sequenceByOf" -> "proxyN17";
"sequenceByOf" -> "proxyN18";
"sequenceByOf" -> "proxyN2";
"sequenceByOf" -> "proxyN3";
"sequenceByOf" -> "proxyN4";
"sequenceByOf" -> "proxyN5";
"sequenceByOf" -> "proxyN6";
"sequenceByOf" -> "proxyN7";
"sequenceByOf" -> "proxyN8";
"sequenceByOf" -> "proxyN9";
"sequenceByOf" -> "s";
"sequenceOf" -> "a";
"sequenceOf" -> "l";
"sequenceOf" -> "s";
"sequenceOf_" -> "a";
"sequenceOf_" -> "f";
"sequenceOf_" -> "foldMapOf";
"sequenceOf_" -> "l";
"sequenceOf_" -> "s";
"sequenceOf_" -> "skip";
"set" -> "a";
"set" -> "l";
"set" -> "s";
"setOf" -> "_Text";
"setOf" -> "a";
"setOf" -> "builder";
"setOf" -> "l";
"setOf" -> "members";
"setOf" -> "packed";
"setOf" -> "pattern";
"setOf" -> "prefixed";
"setOf" -> "setOf";
"setOf" -> "setmapped";
"setOf" -> "stripSuffix";
"setOf" -> "suffixed";
"setOf" -> "text";
"setOf" -> "unpacked";
"setOf" -> "utf8";
"setOf" -> "views";
"set\'" -> "a";
"set\'" -> "l";
"set\'" -> "over";
"set\'" -> "s";
"set\'" -> "set";
"setmapped" -> "a";
"setmapped" -> "s";
"setmapped" -> "setting";
"sets" -> "a";
"sets" -> "f";
"sets" -> "s";
"setter_composition" -> "a";
"setter_composition" -> "f";
"setter_composition" -> "l";
"setter_composition" -> "over";
"setter_composition" -> "s";
"setter_id" -> "a";
"setter_id" -> "l";
"setter_id" -> "over";
"setter_id" -> "s";
"setter_set_set" -> "a";
"setter_set_set" -> "l";
"setter_set_set" -> "s";
"setter_set_set" -> "set";
"setting" -> "a";
"setting" -> "f";
"setting" -> "l";
"setting" -> "s";
"showSigned\'" -> "a";
"showSigned\'" -> "f";
"simple" -> "a";
"simple" -> "s";
"simpleLenses" -> "f";
"simply" -> "a";
"simply" -> "f";
"simply" -> "s";
"singleton" -> "a";
"singular" -> "a";
"singular" -> "f";
"singular" -> "ins";
"singular" -> "l";
"singular" -> "pins";
"singular" -> "s";
"singular" -> "unsafeOuts";
"size" -> "a";
"skip" -> "a";
"skip" -> "s";
"sliced" -> "a";
"sliced" -> "f";
"sliced" -> "l";
"sliced" -> "s";
"slicedFrom" -> "a";
"slicedFrom" -> "f";
"slicedFrom" -> "l";
"slicedTo" -> "a";
"slicedTo" -> "f";
"slicedTo" -> "l";
"snoc" -> "a";
"snoc" -> "review";
"snoc" -> "s";
"snoc" -> "simply";
"stabSimple" -> "a";
"stabSimple" -> "s";
"stabToA" -> "a";
"stabToS" -> "s";
"stabToType" -> "a";
"stabToType" -> "conAppsT";
"stabToType" -> "prismTypeName";
"stabToType" -> "prism\'TypeName";
"stabToType" -> "quantifyType";
"stabToType" -> "quantifyType\'";
"stabToType" -> "reviewTypeName";
"stabToType" -> "s";
"stabToType" -> "stabSimple";
"step" -> "a";
"step" -> "f";
"step" -> "s";
"step" -> "tinplate";
"storing" -> "a";
"storing" -> "f";
"storing" -> "l";
"storing" -> "s";
"strict" -> "a";
"strict" -> "iso";
"strict" -> "strict";
"strict" -> "view";
"stripFields" -> "cons";
"stripFields" -> "deRecord";
"stripSuffix" -> "a";
"stripSuffix" -> "s";
"stripSuffix" -> "toMapOf";
"substEq" -> "a";
"substEq" -> "f";
"substEq" -> "l";
"substEq" -> "runEq";
"substEq" -> "s";
"substTypeVars" -> "foldrOf";
"substTypeVars" -> "l";
"substTypeVars" -> "over";
"substTypeVars" -> "typeVars";
"subtracting" -> "a";
"subtracting" -> "iso";
"suffixed" -> "a";
"suffixed" -> "prism\'";
"suffixed" -> "stripSuffix";
"sumOf" -> "a";
"sumOf" -> "f";
"sumOf" -> "foldlOf\'";
"sumOf" -> "l";
"sumOf" -> "s";
"swapped" -> "iso";
"swapped" -> "lazy";
"swapped" -> "strict";
"sybChildren" -> "dataBox";
"taking" -> "a";
"taking" -> "f";
"taking" -> "ins";
"taking" -> "l";
"taking" -> "outs";
"taking" -> "pins";
"taking" -> "s";
"takingWhile" -> "a";
"takingWhile" -> "f";
"takingWhile" -> "l";
"takingWhile" -> "runMagma";
"takingWhile" -> "runTakingWhile";
"template" -> "a";
"template" -> "hitTest";
"template" -> "s";
"template" -> "uniplateData";
"text" -> "traversed";
"text" -> "unpacked";
"throughout" -> "a";
"throughout" -> "f";
"throughout" -> "l";
"throughout" -> "s";
"throughout" -> "seqOf";
"throwing" -> "a";
"throwing" -> "l";
"throwing" -> "reviews";
"throwingM" -> "l";
"throwingM" -> "reviews";
"throwingTo" -> "l";
"throwingTo" -> "reviews";
"throwingTo" -> "s";
"throwing_" -> "a";
"throwing_" -> "after";
"throwing_" -> "evalOf";
"throwing_" -> "l";
"throwing_" -> "parOf";
"throwing_" -> "s";
"throwing_" -> "throughout";
"throwing_" -> "throwing";
"tinplate" -> "a";
"tinplate" -> "f";
"tinplate" -> "s";
"tinplate" -> "step";
"to" -> "a";
"to" -> "f";
"to" -> "s";
"toIso" -> "a";
"toIso" -> "f";
"toIso" -> "s";
"toLens" -> "a";
"toLens" -> "f";
"toLens" -> "s";
"toListOf" -> "a";
"toListOf" -> "foldrOf";
"toListOf" -> "l";
"toListOf" -> "s";
"toMapOf" -> "a";
"toMapOf" -> "iviews";
"toMapOf" -> "l";
"toMapOf" -> "seqOf";
"toMapOf" -> "sliced";
"toMapOf" -> "slicedFrom";
"toMapOf" -> "slicedTo";
"toMapOf" -> "viewL";
"toMapOf" -> "viewR";
"toNonEmptyOf" -> "a";
"toNonEmptyOf" -> "foldMapOf";
"toNonEmptyOf" -> "l";
"toNonEmptyOf" -> "s";
"toNonEmptyOf" -> "toListOf";
"toPrism" -> "a";
"toPrism" -> "f";
"toPrism" -> "s";
"toSetter" -> "a";
"toSetter" -> "f";
"toSetter" -> "s";
"toTraversal" -> "a";
"toTraversal" -> "as";
"toTraversal" -> "f";
"toTraversal" -> "folding";
"toTraversal" -> "ifolding";
"toTraversal" -> "ignored";
"toTraversal" -> "ito";
"toTraversal" -> "itoListOf";
"toTraversal" -> "iview";
"toTraversal" -> "l";
"toTraversal" -> "re";
"toTraversal" -> "retagged";
"toTraversal" -> "reuse";
"toTraversal" -> "reuses";
"toTraversal" -> "review";
"toTraversal" -> "reviewing";
"toTraversal" -> "reviews";
"toTraversal" -> "s";
"toTraversal" -> "to";
"toTraversal" -> "toListOf";
"toTraversal" -> "un";
"toTraversal" -> "unto";
"toTraversal" -> "view";
"toTupleT" -> "appsT";
"toTupleT" -> "length";
"toVectorOf" -> "a";
"toVectorOf" -> "fromList";
"toVectorOf" -> "l";
"toVectorOf" -> "s";
"toVectorOf" -> "toListOf";
"transform" -> "a";
"transform" -> "s";
"transform" -> "transformOf";
"transformM" -> "a";
"transformM" -> "s";
"transformM" -> "transformMOf";
"transformMOf" -> "a";
"transformMOf" -> "f";
"transformMOf" -> "l";
"transformMOf" -> "mapMOf";
"transformMOf" -> "s";
"transformMOn" -> "a";
"transformMOn" -> "mapMOf";
"transformMOn" -> "transformM";
"transformMOnOf" -> "a";
"transformMOnOf" -> "l";
"transformMOnOf" -> "mapMOf";
"transformMOnOf" -> "transformMOf";
"transformOf" -> "a";
"transformOf" -> "f";
"transformOf" -> "l";
"transformOf" -> "over";
"transformOf" -> "s";
"transformOn" -> "a";
"transformOn" -> "over";
"transformOn" -> "transform";
"transformOnOf" -> "a";
"transformOnOf" -> "l";
"transformOnOf" -> "over";
"transformOnOf" -> "transformOf";
"transposeOf" -> "a";
"transposeOf" -> "l";
"transposeOf" -> "s";
"traversalTypeName" -> "mkLensName_tc";
"traversal\'TypeName" -> "mkLensName_tc";
"traverse1Of_" -> "a";
"traverse1Of_" -> "f";
"traverse1Of_" -> "foldMapOf";
"traverse1Of_" -> "l";
"traverse1Of_" -> "s";
"traverseByOf" -> "f";
"traverseByOf" -> "l";
"traverseByOf" -> "s";
"traverseDataAndNewtype" -> "f";
"traverseOf" -> "a";
"traverseOf" -> "f";
"traverseOf" -> "s";
"traverseOf_" -> "a";
"traverseOf_" -> "f";
"traverseOf_" -> "foldMapOf";
"traverseOf_" -> "l";
"traverseOf_" -> "s";
"traverse_compose" -> "_Denormal";
"traverse_compose" -> "_DivideByZero";
"traverse_compose" -> "_HeapOverflow";
"traverse_compose" -> "_IndexOutOfBounds";
"traverse_compose" -> "_LossOfPrecision";
"traverse_compose" -> "_Overflow";
"traverse_compose" -> "_RatioZeroDenominator";
"traverse_compose" -> "_StackOverflow";
"traverse_compose" -> "_ThreadKilled";
"traverse_compose" -> "_UndefinedElement";
"traverse_compose" -> "_Underflow";
"traverse_compose" -> "_UserInterrupt";
"traverse_compose" -> "a";
"traverse_compose" -> "catching";
"traverse_compose" -> "catching_";
"traverse_compose" -> "exception";
"traverse_compose" -> "f";
"traverse_compose" -> "handling";
"traverse_compose" -> "handling_";
"traverse_compose" -> "mappedException";
"traverse_compose" -> "mappedException\'";
"traverse_compose" -> "pattern";
"traverse_compose" -> "s";
"traverse_compose" -> "throwing";
"traverse_compose" -> "throwingM";
"traverse_compose" -> "throwingTo";
"traverse_compose" -> "throwing_";
"traverse_compose" -> "trying";
"traverse_compose" -> "trying_";
"traverse_pure" -> "a";
"traverse_pure" -> "f";
"traverse_pure" -> "l";
"traverse_pure" -> "s";
"traverse_pureList" -> "f";
"traverse_pureList" -> "s";
"traverse_pureList" -> "traverse_pure";
"traverse_pureMaybe" -> "a";
"traverse_pureMaybe" -> "s";
"traverse_pureMaybe" -> "traverse_pure";
"traversed" -> "a";
"traversed" -> "indexing";
"traversed1" -> "a";
"traversed1" -> "f";
"traversed1" -> "indexing";
"traversed64" -> "f";
"traversed64" -> "indexing64";
"traversed64" -> "s";
"traversedLazy" -> "reindexed";
"traversedLazy" -> "traversedStrictTree";
"traversedLazy8" -> "reindexed";
"traversedLazy8" -> "traversedStrictTree8";
"traversedStrictTree" -> "grain";
"traversedStrictTree" -> "l";
"traversedStrictTree" -> "unsafeCreate";
"traversedStrictTree8" -> "c2w";
"traversedStrictTree8" -> "grain";
"traversedStrictTree8" -> "l";
"traversedStrictTree8" -> "unsafeCreate";
"traversedStrictTree8" -> "w2c";
"triml" -> "l";
"trimr" -> "a";
"trimr" -> "l";
"trimr" -> "ordinalNub";
"trimr" -> "triml";
"trimr" -> "trimr";
"trivial" -> "iat";
"trivial" -> "icontains";
"trivial" -> "iix";
"trivial" -> "iso";
"trivial" -> "ixAt";
"trivial" -> "sans";
"trying" -> "a";
"trying" -> "catching";
"trying" -> "l";
"trying" -> "preview";
"trying_" -> "_Right";
"trying_" -> "l";
"trying_" -> "preview";
"trying_" -> "trying";
"tySynEqnLHS" -> "lens";
"tySynEqnLHS" -> "s";
"tySynEqnPatterns" -> "lens";
"tySynEqnPatterns" -> "s";
"tySynEqnPatterns" -> "unfoldType";
"tySynEqnResult" -> "lens";
"tySynEqnResult" -> "s";
"typeFamilyHeadInjectivityAnn" -> "lens";
"typeFamilyHeadInjectivityAnn" -> "s";
"typeFamilyHeadName" -> "lens";
"typeFamilyHeadName" -> "s";
"typeFamilyHeadResultSig" -> "lens";
"typeFamilyHeadResultSig" -> "s";
"typeFamilyHeadTyVarBndrs" -> "lens";
"typeFamilyHeadTyVarBndrs" -> "s";
"un" -> "unto";
"un" -> "view";
"uncons" -> "a";
"uncons" -> "preview";
"uncons" -> "s";
"uncons" -> "simply";
"uncurried" -> "a";
"uncurried" -> "iso";
"under" -> "a";
"under" -> "withIso";
"underEquality" -> "a";
"underEquality" -> "s";
"underEquality" -> "substEq";
"underscoreFields" -> "defaultFieldRules";
"underscoreFields" -> "lensField";
"underscoreFields" -> "underscoreNamer";
"underscoreNamer" -> "length";
"unfolded" -> "a";
"unfolded" -> "f";
"unfolded" -> "noEffect";
"unify1" -> "applyTypeSubst";
"unify1" -> "elemOf";
"unify1" -> "f";
"unify1" -> "limitedSubst";
"unify1" -> "typeVars";
"unify1" -> "unify1";
"unifyTypes" -> "unify1";
"uniplate" -> "a";
"uniplate" -> "s";
"uniplate" -> "template";
"uniplateData" -> "a";
"uniplateData" -> "f";
"uniplateData" -> "s";
"united" -> "a";
"united" -> "f";
"universe" -> "a";
"universe" -> "universeOf";
"universeOf" -> "a";
"universeOf" -> "foldMapOf";
"universeOf" -> "l";
"universeOf" -> "s";
"universeOn" -> "a";
"universeOn" -> "s";
"universeOn" -> "universeOnOf";
"universeOnOf" -> "a";
"universeOnOf" -> "foldMapOf";
"universeOnOf" -> "universeOf";
"unpacked" -> "from";
"unpacked" -> "iso";
"unpacked" -> "packed";
"unpackedBytes" -> "from";
"unpackedBytes" -> "packedBytes";
"unpackedBytes" -> "unpackedBytes";
"unpackedBytes" -> "view";
"unpackedChars" -> "bytes";
"unpackedChars" -> "chars";
"unpackedChars" -> "from";
"unpackedChars" -> "packedBytes";
"unpackedChars" -> "packedChars";
"unpackedChars" -> "pattern";
"unpackedChars" -> "traversed";
"unpackedChars" -> "unpackedBytes";
"unpackedChars" -> "unpackedChars";
"unsafeCreate" -> "create";
"unsafeCreate" -> "f";
"unsafeCreate" -> "l";
"unsafeOuts" -> "a";
"unsafeOuts" -> "unconsWithDefault";
"unsafePartsOf" -> "a";
"unsafePartsOf" -> "f";
"unsafePartsOf" -> "ins";
"unsafePartsOf" -> "l";
"unsafePartsOf" -> "s";
"unsafePartsOf" -> "unsafeOuts";
"unsafePartsOf\'" -> "a";
"unsafePartsOf\'" -> "f";
"unsafePartsOf\'" -> "ins";
"unsafePartsOf\'" -> "l";
"unsafePartsOf\'" -> "s";
"unsafePartsOf\'" -> "unsafeOuts";
"unsafeSingular" -> "a";
"unsafeSingular" -> "f";
"unsafeSingular" -> "ins";
"unsafeSingular" -> "l";
"unsafeSingular" -> "pins";
"unsafeSingular" -> "s";
"unsafeSingular" -> "unsafeOuts";
"unsnoc" -> "a";
"unsnoc" -> "f";
"unsnoc" -> "has";
"unsnoc" -> "only";
"unsnoc" -> "pattern";
"unsnoc" -> "preview";
"unsnoc" -> "s";
"unsnoc" -> "simply";
"unsnoc" -> "text";
"unsnoc" -> "traversed";
"unsnoc" -> "traversedLazy";
"unsnoc" -> "traversedStrictTree";
"unsnoc" -> "vectorTraverse";
"unto" -> "a";
"unto" -> "f";
"unto" -> "s";
"untoValName" -> "mkLensName_v";
"unwrappedTypeName" -> "mkLensName_tc";
"upon" -> "a";
"upon" -> "elementOf";
"upon" -> "f";
"upon" -> "is";
"upon" -> "l";
"upon" -> "lookupon";
"upon" -> "s";
"upon" -> "template";
"upon" -> "uniplate";
"upon\'" -> "a";
"upon\'" -> "elementOf";
"upon\'" -> "f";
"upon\'" -> "is";
"upon\'" -> "l";
"upon\'" -> "lookupon";
"upon\'" -> "s";
"upon\'" -> "template";
"upon\'" -> "uniplate";
"use" -> "a";
"use" -> "l";
"use" -> "s";
"use" -> "view";
"uses" -> "a";
"uses" -> "f";
"uses" -> "l";
"uses" -> "views";
"utf8" -> "_Right";
"utf8" -> "_Text";
"utf8" -> "a";
"utf8" -> "preview";
"utf8" -> "prism\'";
"utf8" -> "view";
"vector" -> "a";
"vector" -> "fromList";
"vector" -> "iso";
"vectorIx" -> "a";
"vectorIx" -> "f";
"vectorTraverse" -> "a";
"vectorTraverse" -> "f";
"vectorTraverse" -> "traversed";
"view" -> "a";
"view" -> "l";
"view" -> "s";
"viewL" -> "a";
"viewL" -> "as";
"viewL" -> "iso";
"viewR" -> "a";
"viewR" -> "as";
"viewR" -> "iso";
"views" -> "a";
"views" -> "f";
"views" -> "l";
"views" -> "s";
"wins" -> "a";
"withEquality" -> "a";
"withEquality" -> "f";
"withEquality" -> "is";
"withEquality" -> "s";
"withEquality" -> "substEq";
"withIndex" -> "a";
"withIndex" -> "f";
"withIndex" -> "s";
"withIso" -> "a";
"withIso" -> "s";
"withLens" -> "a";
"withLens" -> "f";
"withLens" -> "l";
"withLens" -> "s";
"withLens" -> "storing";
"withPrism" -> "a";
"withPrism" -> "f";
"withPrism" -> "s";
"without" -> "a";
"without" -> "prism";
"without" -> "s";
"without" -> "withPrism";
"worded" -> "f";
"worded" -> "indexing";
"wrappedTypeName" -> "mkLensName_tc";
"xplat" -> "a";
"xplat" -> "f";
"xplat" -> "s";
"xplat" -> "xplatf";
"xplatf" -> "a";
"xplatf" -> "s";
}
