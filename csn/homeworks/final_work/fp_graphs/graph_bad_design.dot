strict digraph deps {
"_and_" [style=solid];
"_as_" [style=solid];
"_cast_" [style=solid];
"_check_" [style=solid];
"_constraint_" [style=solid];
"_current_timestamp_" [style=solid];
"_default_" [style=solid];
"_div_" [style=solid];
"_eq_" [style=solid];
"_false_" [style=solid];
"_foreignKey_" [style=solid];
"_from_" [style=solid];
"_ge_" [style=solid];
"_gt_" [style=solid];
"_isLike_" [style=solid];
"_isNotNull_" [style=solid];
"_isNull_" [style=solid];
"_le_" [style=solid];
"_lt_" [style=solid];
"_minus_" [style=solid];
"_notNull_" [style=solid];
"_not_" [style=solid];
"_null_" [style=solid];
"_or_" [style=solid];
"_plus_" [style=solid];
"_primaryKey_" [style=solid];
"_references_" [style=solid];
"_table_" [style=solid];
"_times_" [style=solid];
"_true_" [style=solid];
"_unique_" [style=solid];
"_where_" [style=solid];
"a" [style=solid];
"ackAction" [style=solid];
"activateCard" [style=solid];
"activateCard\'" [style=solid];
"adaptProc" [style=solid];
"addApiCommonCode" [style=solid];
"addBlockToLevel" [style=solid];
"addCard" [style=solid];
"addClient" [style=solid];
"addCommonProcedureCode" [style=solid];
"addCors" [style=solid];
"addCustomer" [style=solid];
"addCustomerCard" [style=solid];
"addCustomerModifier" [style=solid];
"addCustomer\'" [style=solid];
"addFundsToWallet" [style=solid];
"addL1Block" [style=solid];
"addOnRampSecret" [style=solid];
"addQuotesForRead" [style=solid];
"addStaticCustomerModifier" [style=solid];
"addThreadResult" [style=solid];
"afterBlockFetched" [style=solid];
"afterBlockHeader" [style=solid];
"afterReorgCheck" [style=solid];
"allCountries" [style=solid];
"allCurrencies" [style=solid];
"alterDbLockTimeout" [style=solid];
"amountFor" [style=solid];
"analyticsAPI" [style=solid];
"analyticsConf" [style=solid];
"analyzeConstraint" [style=solid];
"analyzeExpr" [style=solid];
"analyzeInput" [style=solid];
"analyzeTable" [style=solid];
"apiCall" [style=solid];
"apiRoot" [style=solid];
"apiTcpCall" [style=solid];
"apiWithDoc" [style=solid];
"arbHexByteString" [style=solid];
"arbNewReceipt" [style=solid];
"arbPrevId" [style=solid];
"arbPreviousReceipt" [style=solid];
"arbPreviousRef" [style=solid];
"arbReceiver" [style=solid];
"arbSendReceipt" [style=solid];
"arbitraryCoin" [style=solid];
"arbitraryL2ToBuild" [style=solid];
"arbitraryNewReceipts" [style=solid];
"arbitraryPreviousReceipts" [style=solid];
"arbitraryPrivKey" [style=solid];
"arbitraryTransaction" [style=solid];
"arbitraryWrongBase64Jxt" [style=solid];
"arbitraryXcoAddress" [style=solid];
"arbitraryXcoAddressArray" [style=solid];
"arbitraryXcoAddressWithKey" [style=solid];
"arbitraryXcoAmount" [style=solid];
"arbitraryXcoOffset" [style=solid];
"askGoogleCreds" [style=solid];
"attemptToSendDbOp" [style=solid];
"authCheck" [style=solid];
"authHandler" [style=solid];
"autoMigrateDb" [style=solid];
"backOffice" [style=solid];
"backOffice\'" [style=solid];
"baseTag" [style=solid];
"basicAuthServerContext" [style=solid];
"bchServer" [style=solid];
"bigQueryAnalytics" [style=solid];
"bigQueryAnalytics\'" [style=solid];
"bigQuerySQL" [style=solid];
"blockDiffConf" [style=solid];
"blockDiffOptions" [style=solid];
"blockExplorerAPI" [style=solid];
"blockExplorerApp" [style=solid];
"blockHash" [style=solid];
"blockIdFilePath" [style=solid];
"blockTime" [style=solid];
"blockUnblock" [style=solid];
"blockUnblockCard\'" [style=solid];
"blockchainTxBcstMethod" [style=solid];
"blockquerierAPI" [style=solid];
"blockquerierConf" [style=solid];
"blockquerierEventAPI" [style=solid];
"bluePointsNet" [style=solid];
"booleanGenerator" [style=solid];
"broadcastBCH" [style=solid];
"broadcastBTC" [style=solid];
"broadcastETH" [style=solid];
"broadcastL1Tx" [style=solid];
"broadcastLTC" [style=solid];
"broadcastXCO" [style=solid];
"broadcasterAPI" [style=solid];
"broadcasterConf" [style=solid];
"broadcasterOptions" [style=solid];
"broadcasterPortOption" [style=solid];
"btcServer" [style=solid];
"buildAndSignL2Tx" [style=solid];
"buildCustomL1Tx" [style=solid];
"buildImage" [style=solid];
"buildL1Tx" [style=solid];
"buildL1Tx\'" [style=solid];
"buildNewReceipts" [style=solid];
"buildOutPoints" [style=solid];
"buildPreviousReceipts" [style=solid];
"buildRedeemScripts" [style=solid];
"buildSigInput" [style=solid];
"buildXcoFullNode" [style=solid];
"buildXcoFullNodeBase" [style=solid];
"buildXcoFullNodeMain" [style=solid];
"buildingBlockFilePath" [style=solid];
"callL1Client" [style=solid];
"callSetDocumentUploaded" [style=solid];
"callUserExists" [style=solid];
"callValidateJWTOnBackoffice" [style=solid];
"cancelProcess" [style=solid];
"capitalize" [style=solid];
"cardExpiryGregorian" [style=solid];
"cb911Options" [style=solid];
"cb911OptionsSpecial" [style=solid];
"checkContentTypeHeader" [style=solid];
"checkIdColumn" [style=solid];
"checkIfRepeated" [style=solid];
"checkMissing" [style=solid];
"checkMissingTranslation" [style=solid];
"checkNotAllowedWords" [style=solid];
"checkParsedOk" [style=solid];
"checkReorg" [style=solid];
"checkRowParams" [style=solid];
"checkSelectFrom" [style=solid];
"checkSplice" [style=solid];
"checkStatusDocument" [style=solid];
"checkStatusIdentity" [style=solid];
"chunkBy" [style=solid];
"chunkData" [style=solid];
"cleanStateWith" [style=solid];
"cleanWithAck" [style=solid];
"cliConfigOption" [style=solid];
"clientApi" [style=solid];
"clientExists" [style=solid];
"clientTalk" [style=solid];
"clientsHttp" [style=solid];
"closeCalls" [style=solid];
"closeL1ClientConn" [style=solid];
"closeL1TcpClientConn" [style=solid];
"closeModule" [style=solid];
"coinsToSatoshis" [style=solid];
"collectProducts" [style=solid];
"combineOutput" [style=solid];
"combineWithOffset" [style=solid];
"commaSep" [style=solid];
"commaSep1" [style=solid];
"commitChanges" [style=solid];
"componentCliParserWithHelp" [style=solid];
"componentMain" [style=solid];
"computeOutput" [style=solid];
"computeQuery" [style=solid];
"configFileOption" [style=solid];
"configOpts" [style=solid];
"configPoolSize" [style=solid];
"configSanitise" [style=solid];
"configTimeout" [style=solid];
"configurationFile" [style=solid];
"configurationOption" [style=solid];
"connect" [style=solid];
"connectToDb" [style=solid];
"connectionStatus" [style=solid];
"connectionWorker" [style=solid];
"connectorAppFlow" [style=solid];
"connectorCycle" [style=solid];
"connectorMetrics" [style=solid];
"consume" [style=solid];
"consumeBlockThread" [style=solid];
"consumeNotificationL1" [style=solid];
"consumeNotificationL2" [style=solid];
"convertContent" [style=solid];
"convertResponse" [style=solid];
"convertToDocToUpload" [style=solid];
"convertToEvents" [style=solid];
"convertToTuple" [style=solid];
"copyAddresses" [style=solid];
"coreProcess" [style=solid];
"createApp" [style=solid];
"createContext" [style=solid];
"createDbPool" [style=solid];
"createDbStructure" [style=solid];
"createFile" [style=solid];
"createIfNotExist" [style=solid];
"createKeyPair" [style=solid];
"createMessage" [style=solid];
"createMetrics" [style=solid];
"createPubKeyCoinReq" [style=solid];
"createPubKeyCoinReqLimitOffset" [style=solid];
"createRandomInitialState" [style=solid];
"createReq" [style=solid];
"createRequest" [style=solid];
"createTranslations" [style=solid];
"csqlArgs" [style=solid];
"csqlTranspiler" [style=solid];
"currentExecEnviorment" [style=solid];
"currentTimeInMilliseconds" [style=solid];
"databaseCreation" [style=solid];
"dbAccess" [style=solid];
"dbConsistencyCheck" [style=solid];
"dbGet" [style=solid];
"dbGet\'" [style=solid];
"dbProcess" [style=solid];
"dbStore" [style=solid];
"dbUriArgs" [style=solid];
"debug" [style=solid];
"decodeJson" [style=solid];
"decodeJxt" [style=solid];
"decodeMessage" [style=solid];
"decoded" [style=solid];
"decodedAs" [style=solid];
"defLatency" [style=solid];
"defMetric" [style=solid];
"defRowName" [style=solid];
"defThreadResult" [style=solid];
"defaultOptionsUpper" [style=solid];
"defaultOpts" [style=solid];
"defaultPostgrestAppConfig" [style=solid];
"defineConstFunction" [style=solid];
"defineFn" [style=solid];
"defineFunctions" [style=solid];
"deleteCatalogAtPoint" [style=solid];
"deleteMerchant" [style=solid];
"deployBackOfficeApi" [style=solid];
"deployMetricsApi" [style=solid];
"derPrefix" [style=solid];
"deriveBrand" [style=solid];
"deriveL2Address" [style=solid];
"desc" [style=solid];
"descEvent" [style=solid];
"describeConfigError" [style=solid];
"describeExtractError" [style=solid];
"describeSchemaMismatch" [style=solid];
"differenceDenominations" [style=solid];
"differenceProducts" [style=solid];
"disconnectClient" [style=solid];
"discriminateByKey" [style=solid];
"doUpload" [style=solid];
"dockerImageExists" [style=solid];
"dockerLogin" [style=solid];
"dockerPull" [style=solid];
"dockerPush" [style=solid];
"documentVerification" [style=solid];
"dropClient" [style=solid];
"dropNamespace" [style=solid];
"emailType" [style=solid];
"emailTypeText" [style=solid];
"embedDataIntoL1" [style=solid];
"embedIntoL1" [style=solid];
"embedIntoL1OutputScript" [style=solid];
"emptyBasicRequest" [style=solid];
"emptyExistingRequest" [style=solid];
"emptyMerchant" [style=solid];
"emptyNewRequest" [style=solid];
"emptyOrder" [style=solid];
"emptySummary" [style=solid];
"emptyTransaction" [style=solid];
"encodeJson" [style=solid];
"endpointGetData" [style=solid];
"endpointPostData" [style=solid];
"enumerate" [style=solid];
"envConn" [style=solid];
"error" [style=solid];
"escapePostgreString" [style=solid];
"ethServer" [style=solid];
"eventApiWithDoc" [style=solid];
"eventServeDocAndApp" [style=solid];
"eventServer" [style=solid];
"evolveAfterEvent" [style=solid];
"evolveChainState" [style=solid];
"executeAlternatives" [style=solid];
"executeAnySection" [style=solid];
"executeAnySql" [style=solid];
"executeApis" [style=solid];
"executeApis\'" [style=solid];
"executeCMD" [style=solid];
"executeDependencies" [style=solid];
"executeEndpoint" [style=solid];
"executeExpr" [style=solid];
"executeRequest" [style=solid];
"executeSection" [style=solid];
"executeSqlExpr" [style=solid];
"executeSqlStms\'" [style=solid];
"executeStep" [style=solid];
"executeTests" [style=solid];
"executeTillOneSucceed" [style=solid];
"executeTx" [style=solid];
"execute\'" [style=solid];
"existingTransaction" [style=solid];
"expectedTestsFor" [style=solid];
"explainCsqError" [style=solid];
"exportEndpoint" [style=solid];
"exportMetric" [style=solid];
"exportMetric\'" [style=solid];
"exportPubKeyI" [style=solid];
"externalExtensionSchema" [style=solid];
"extractBlock" [style=solid];
"extractDataFromCustomL1Tx" [style=solid];
"extractDocVerified" [style=solid];
"extractError" [style=solid];
"extractFileAndPath" [style=solid];
"extractSecrets" [style=solid];
"extractStackResolver" [style=solid];
"faitCurrencyGenerator" [style=solid];
"fakeBLockIdForTest" [style=solid];
"fiatAmount" [style=solid];
"fiatCurrency" [style=solid];
"fieldName" [style=solid];
"fileId" [style=solid];
"fileRename" [style=solid];
"fileWithPath" [style=solid];
"filepathXcoBase" [style=solid];
"filepathXcoFull" [style=solid];
"fillEmail" [style=solid];
"filter" [style=solid];
"fixPhoneNumber" [style=solid];
"fmapFirst" [style=solid];
"formatBenupayResp" [style=solid];
"formatCreditCard" [style=solid];
"formatFrom" [style=solid];
"formatTime\'" [style=solid];
"formatTo" [style=solid];
"fraudRequest" [style=solid];
"fromAdd" [style=solid];
"fromAddress" [style=solid];
"fromAddressToL1Address" [style=solid];
"fromAnalyticsResult" [style=solid];
"fromBase64ByteString" [style=solid];
"fromBearerTokenResponse" [style=solid];
"fromBuckzyResponse" [style=solid];
"fromCardType" [style=solid];
"fromCentDenomination" [style=solid];
"fromEGifterDenomination" [style=solid];
"fromEGifterProduct" [style=solid];
"fromEGifterResponse" [style=solid];
"fromGeneric" [style=solid];
"fromHexBSBlock" [style=solid];
"fromHexBString" [style=solid];
"fromHexByteString" [style=solid];
"fromL1AddressToAddress" [style=solid];
"fromL1TxId" [style=solid];
"fromL1TxIdText" [style=solid];
"fromL1TxIdtoTxHash" [style=solid];
"fromList" [style=solid];
"fromLts" [style=solid];
"fromNullable" [style=solid];
"fromOrderNumber" [style=solid];
"fromParam" [style=solid];
"fromSatoshi" [style=solid];
"fromStatus" [style=solid];
"fromStatusBuckzy" [style=solid];
"fromTimeToValue" [style=solid];
"fromTxId" [style=solid];
"fromUtf8ByteString" [style=solid];
"fromUtxoToRawTxId" [style=solid];
"fromXcoAmount" [style=solid];
"fromXcoOffset" [style=solid];
"fullNodeBaseImage" [style=solid];
"fullNodeImage" [style=solid];
"fundWallet" [style=solid];
"gGetBlockCatalog" [style=solid];
"genAuthServerContext" [style=solid];
"generateBackDoc" [style=solid];
"generateDoc" [style=solid];
"generateEventDoc" [style=solid];
"generateInternalDoc" [style=solid];
"generateUpgradeStrategy" [style=solid];
"generateXcoFullNode" [style=solid];
"generateXcoNodeBase" [style=solid];
"getAnalytics" [style=solid];
"getApiSchms" [style=solid];
"getApiSchms\'" [style=solid];
"getAuthDocument" [style=solid];
"getAuthDocumentApi" [style=solid];
"getBestBlockhash" [style=solid];
"getBlockCatalogAt" [style=solid];
"getBlockHash\'" [style=solid];
"getBlockHeaderOf" [style=solid];
"getBlockHeader\'" [style=solid];
"getBlockId" [style=solid];
"getCVV" [style=solid];
"getCVV\'" [style=solid];
"getCards" [style=solid];
"getCards\'" [style=solid];
"getClient" [style=solid];
"getCountryCodes" [style=solid];
"getCustomer" [style=solid];
"getCustomer\'" [style=solid];
"getData" [style=solid];
"getDefinedProcedures" [style=solid];
"getDigest" [style=solid];
"getDocument" [style=solid];
"getDocumentApi" [style=solid];
"getDocumentVerificationStatus" [style=solid];
"getDocument\'" [style=solid];
"getEGifterTokenOnRamp" [style=solid];
"getEnv" [style=solid];
"getEnvArgs" [style=solid];
"getFields" [style=solid];
"getFile" [style=solid];
"getFullBlock" [style=solid];
"getInput" [style=solid];
"getL1Balance" [style=solid];
"getL1History" [style=solid];
"getL1Payload" [style=solid];
"getL1Transaction" [style=solid];
"getL2Balance" [style=solid];
"getL2History" [style=solid];
"getL2Transaction" [style=solid];
"getL2TransactionPost" [style=solid];
"getL2Transactions" [style=solid];
"getL2TransactionsByAddress" [style=solid];
"getL2TransactionsByPubKey" [style=solid];
"getL2TransactionsByTxid" [style=solid];
"getLanguage" [style=solid];
"getLastBlock" [style=solid];
"getMerchants" [style=solid];
"getNonStdElectrumXScriptHash" [style=solid];
"getNonStdP2PKHOutputScript" [style=solid];
"getNonStdP2PKHScript" [style=solid];
"getNonStdP2SHAddresses" [style=solid];
"getNonStdSHOutputScripts" [style=solid];
"getOids" [style=solid];
"getOnRampData" [style=solid];
"getOrders" [style=solid];
"getOrdersPageSize" [style=solid];
"getP2PKHAddressFromSecKey" [style=solid];
"getProcedureDefinition" [style=solid];
"getProductPageSize" [style=solid];
"getPublicKeyHash" [style=solid];
"getRawBackoffice" [style=solid];
"getRawTransaction" [style=solid];
"getRawTxHex" [style=solid];
"getRedeemHash" [style=solid];
"getSchemaDescription" [style=solid];
"getSig" [style=solid];
"getSigInputs" [style=solid];
"getSignatures" [style=solid];
"getStdElectrumXScriptHash" [style=solid];
"getStdP2PKHOutputScript" [style=solid];
"getStdP2SHAddress" [style=solid];
"getStylopayUser\'" [style=solid];
"getTable" [style=solid];
"getTestEntities" [style=solid];
"getTestEntitiesDocument" [style=solid];
"getTestEntitiesIdentity" [style=solid];
"getToken" [style=solid];
"getTransaction" [style=solid];
"getTransactionRecord" [style=solid];
"getTransaction\'" [style=solid];
"getUnspentReceipts" [style=solid];
"getUser" [style=solid];
"getUserProfile" [style=solid];
"getUserProfile\'" [style=solid];
"getUser\'" [style=solid];
"getVarInt" [style=solid];
"getWalletAddress" [style=solid];
"getWalletBalance" [style=solid];
"getWalletBalance\'" [style=solid];
"getWalletReceipts" [style=solid];
"grab" [style=solid];
"groupBy2" [style=solid];
"guarantee" [style=solid];
"hash160" [style=solid];
"hash256ToHexByteString" [style=solid];
"hoistClientEnv" [style=solid];
"hoistClientEnv_" [style=solid];
"identifier" [style=solid];
"identityVerification" [style=solid];
"ignoredSch1" [style=solid];
"ignoredSch2" [style=solid];
"inBatches" [style=solid];
"indexGenerator" [style=solid];
"info" [style=solid];
"ingressAction" [style=solid];
"initClientSession" [style=solid];
"initialState" [style=solid];
"inputToMaybeAddress" [style=solid];
"insertCommonCode" [style=solid];
"instantiate" [style=solid];
"insufficientFundsOrderState" [style=solid];
"internalAPI" [style=solid];
"internalSch" [style=solid];
"internalSchema" [style=solid];
"intersperseList" [style=solid];
"intersperseM" [style=solid];
"intersperseMapList" [style=solid];
"intersperseMapM" [style=solid];
"invalidParams" [style=solid];
"isBadComplianceStatus" [style=solid];
"isBadDocumentsResponse" [style=solid];
"isBillingAddressNull" [style=solid];
"isBuildingBlockComplete" [style=solid];
"isCompletedComplianceStatus" [style=solid];
"isDeliveryAddressNull" [style=solid];
"isErrorE" [style=solid];
"isInvalidTokenError" [style=solid];
"isLeftE" [style=solid];
"isNoneOf" [style=solid];
"isOk" [style=solid];
"isOnramp" [style=solid];
"isPotentiallyExecuted" [style=solid];
"isRightE" [style=solid];
"isStyopayError" [style=solid];
"isTextBased" [style=solid];
"joinE" [style=solid];
"jsonToPayload" [style=solid];
"jwtDecode" [style=solid];
"jxtToHex" [style=solid];
"kycBackofficeAPI" [style=solid];
"kycBackofficeAPIWithDoc" [style=solid];
"kycConf" [style=solid];
"kycInternalAPI" [style=solid];
"kycInternalAPIWithDoc" [style=solid];
"l1BlockNotify" [style=solid];
"l1BlockSyncThread" [style=solid];
"l1BlockUnserialize" [style=solid];
"l1ClientConn" [style=solid];
"l1NodeClient" [style=solid];
"l1Process" [style=solid];
"l1Processes" [style=solid];
"l1TcpClientConn" [style=solid];
"l2MessageFromPayload" [style=solid];
"l2TxFrom" [style=solid];
"lang" [style=solid];
"langCodes" [style=solid];
"lastCatalogPoint" [style=solid];
"lastHeight" [style=solid];
"lastHeightBefore" [style=solid];
"lengthSig" [style=solid];
"levelTick" [style=solid];
"liftEither" [style=solid];
"liftIO\'" [style=solid];
"liftMigrationRunner" [style=solid];
"liftMigrationRunner\'" [style=solid];
"listUtxo" [style=solid];
"listenChannel" [style=solid];
"literalFormOptions" [style=solid];
"literalJsonOptions" [style=solid];
"loadTestStats" [style=solid];
"logE" [style=solid];
"logError" [style=solid];
"logI" [style=solid];
"logInfo" [style=solid];
"logWith" [style=solid];
"logging" [style=solid];
"logicExpresion" [style=solid];
"ltcServer" [style=solid];
"ltsVersion" [style=solid];
"mailgun" [style=solid];
"mainLoop" [style=solid];
"mainNetOption" [style=solid];
"makeFieldsQuery" [style=solid];
"makeFieldsXco" [style=solid];
"makeFieldsXcoSpecial" [style=solid];
"makeLenses" [style=solid];
"makePrisms" [style=solid];
"mapError" [style=solid];
"mapListed" [style=solid];
"mapToRows" [style=solid];
"mapToThese" [style=solid];
"massReplace" [style=solid];
"maxBytesOnInputSript" [style=solid];
"maxBytesOnStack" [style=solid];
"maybeScriptInput" [style=solid];
"maybeToMonoid" [style=solid];
"merchantNameGenerator" [style=solid];
"methodNotFound" [style=solid];
"metricAuxFunction" [style=solid];
"metricFunction" [style=solid];
"metricGatherFunction" [style=solid];
"metrics" [style=solid];
"migrateOnRamp" [style=solid];
"migrationScript" [style=solid];
"minAmount" [style=solid];
"minEnv" [style=solid];
"mkAckMetric" [style=solid];
"mkAsyncVerify" [style=solid];
"mkContainer" [style=solid];
"mkCreateOrder" [style=solid];
"mkEmail" [style=solid];
"mkError" [style=solid];
"mkInfo" [style=solid];
"mkInitTx" [style=solid];
"mkMetrics" [style=solid];
"mkOfferMetrics" [style=solid];
"mkOrgAccount" [style=solid];
"mkOrgAgent" [style=solid];
"mkOrganization" [style=solid];
"mkProvMetric" [style=solid];
"mkRespError" [style=solid];
"mkRespSuccess" [style=solid];
"mkSVContext" [style=solid];
"mkSqlQuery" [style=solid];
"mkStylopayAPI" [style=solid];
"mkTruliooMetrics" [style=solid];
"mkUpdOrderState" [style=solid];
"mkVerify" [style=solid];
"mkVerifyDocument" [style=solid];
"mkVerifyIdentity" [style=solid];
"modifyJson" [style=solid];
"monoidToMaybe" [style=solid];
"msgCodes" [style=solid];
"namespace" [style=solid];
"netL1Option" [style=solid];
"network" [style=solid];
"networkSimulation" [style=solid];
"newBuckzyEndpoints" [style=solid];
"newBuckzyEndpoints_" [style=solid];
"newEGifterEndpoints" [style=solid];
"newEGifterEndpoints_" [style=solid];
"newLogger" [style=solid];
"newMerchant" [style=solid];
"newNotificationIO" [style=solid];
"newOrder" [style=solid];
"newServerState" [style=solid];
"newStorageIO" [style=solid];
"newStoreTxIO" [style=solid];
"newTransaction" [style=solid];
"noHaltingEvents" [style=solid];
"nonExistingL1BlockId" [style=solid];
"notAllowedWordsRE" [style=solid];
"notOk" [style=solid];
"notifierAPI" [style=solid];
"notifierAction" [style=solid];
"notifierApp" [style=solid];
"notifierHttpAPI" [style=solid];
"notifyResponse" [style=solid];
"nt" [style=solid];
"o" [style=solid];
"objectKey" [style=solid];
"objectKey\'" [style=solid];
"offset" [style=solid];
"offsetFor" [style=solid];
"offsetList" [style=solid];
"onErrorCall" [style=solid];
"onFirst" [style=solid];
"onFunded" [style=solid];
"onFundedBuckzy" [style=solid];
"onFundedEGifter" [style=solid];
"onFundedStylopay" [style=solid];
"onManualData" [style=solid];
"onNewBlock" [style=solid];
"onNotification" [style=solid];
"onRampApi" [style=solid];
"onePerRequest" [style=solid];
"onrampConfig" [style=solid];
"onrampConfigFilePath" [style=solid];
"onrampConfigFromRaw" [style=solid];
"onrampMiddleware" [style=solid];
"op0" [style=solid];
"outputToMaybeAddress" [style=solid];
"paramGenerator" [style=solid];
"parameters" [style=solid];
"paren" [style=solid];
"parens" [style=solid];
"parensArg" [style=solid];
"parseCountryCode" [style=solid];
"parseCsqlText" [style=solid];
"parseCurrencyCode" [style=solid];
"parseDec" [style=solid];
"parseFile" [style=solid];
"parseFirebaseResults" [style=solid];
"parseL1Tx" [style=solid];
"parseL2Tx" [style=solid];
"parseL2TxWithSigs" [style=solid];
"parsePayload" [style=solid];
"parseSignature" [style=solid];
"parseStm" [style=solid];
"parseTag" [style=solid];
"parseTags" [style=solid];
"parseTransaction" [style=solid];
"parseVersion" [style=solid];
"parsingOptionsWith" [style=solid];
"parsingOptionsWithNull" [style=solid];
"partialMetricsArgs" [style=solid];
"partialMetricsOpts" [style=solid];
"passAlongSide" [style=solid];
"passportNumberGenerator" [style=solid];
"patchOrder" [style=solid];
"pattern" [style=solid];
"payloadToid32B" [style=solid];
"paymentzAuth" [style=solid];
"paymentzBasic" [style=solid];
"paymentzTokenized" [style=solid];
"performAction" [style=solid];
"pinUpdate" [style=solid];
"pinUpdate\'" [style=solid];
"postNewStateToOnRamp" [style=solid];
"postOnRampData" [style=solid];
"powerSet" [style=solid];
"preComputeBlockThread" [style=solid];
"preProcess" [style=solid];
"preference" [style=solid];
"prefixRow" [style=solid];
"prepareRemoveOp" [style=solid];
"pretty" [style=solid];
"printAndReThrow" [style=solid];
"printRow" [style=solid];
"printSqlFunction" [style=solid];
"printTestTrace" [style=solid];
"procQuery" [style=solid];
"procQueryOid" [style=solid];
"process" [style=solid];
"processBuckzy" [style=solid];
"processCacheOp" [style=solid];
"processEGifter" [style=solid];
"pubkeyGenerator" [style=solid];
"publicSch" [style=solid];
"pullerJob" [style=solid];
"pushEvent" [style=solid];
"pushEventApi" [style=solid];
"pushEvents" [style=solid];
"putInQueueL1" [style=solid];
"putInQueueL2" [style=solid];
"qrEncodeService" [style=solid];
"queryOptions" [style=solid];
"quoteToDot" [style=solid];
"randomlyPickOne" [style=solid];
"rawConstraint" [style=solid];
"rawGetProcedureDefinition" [style=solid];
"rawGetSchemaDescription" [style=solid];
"rawOnrampConfigFile" [style=solid];
"rawTable" [style=solid];
"readBEConf" [style=solid];
"readBlock" [style=solid];
"readBody" [style=solid];
"readFileConf" [style=solid];
"readFilePath" [style=solid];
"readFolderPath" [style=solid];
"readNextModule" [style=solid];
"readSVConf" [style=solid];
"readTransFile" [style=solid];
"readTransFolder" [style=solid];
"readTsql" [style=solid];
"readerServer" [style=solid];
"receipts" [style=solid];
"refreshToken" [style=solid];
"refreshTokenOnRamp" [style=solid];
"removeClient" [style=solid];
"removeComments" [style=solid];
"removeSecretsFromErrorMsg" [style=solid];
"repeatActionOnNotification" [style=solid];
"replace" [style=solid];
"replaceCard" [style=solid];
"replaceCard\'" [style=solid];
"reportCoverage" [style=solid];
"reportSubstepTimings" [style=solid];
"reportTableSize" [style=solid];
"requestJWT" [style=solid];
"requestOptions" [style=solid];
"reserved" [style=solid];
"reservedOp" [style=solid];
"retryDefPolicy" [style=solid];
"rowName" [style=solid];
"rowsToMap" [style=solid];
"runAck" [style=solid];
"runAckConnector" [style=solid];
"runAddCard" [style=solid];
"runAndRollback" [style=solid];
"runApi" [style=solid];
"runApiGetNonStdRawTx" [style=solid];
"runApiGetRawTx" [style=solid];
"runApiSendTx" [style=solid];
"runApi\'" [style=solid];
"runApp" [style=solid];
"runAppConnector" [style=solid];
"runAppWithMetrics" [style=solid];
"runAppWithMetricsM" [style=solid];
"runBackofficeApp" [style=solid];
"runBennuPay" [style=solid];
"runBennupay" [style=solid];
"runCB911Api" [style=solid];
"runCardstream" [style=solid];
"runCardstreamApi" [style=solid];
"runChargebacks911" [style=solid];
"runColog" [style=solid];
"runCommandWithSecrets" [style=solid];
"runCustomTcpApiGetUTXOlist" [style=solid];
"runEffects" [style=solid];
"runEvaluation" [style=solid];
"runFundWallet" [style=solid];
"runIfEnableApp" [style=solid];
"runIfEnableHttpApp" [style=solid];
"runInternalApp" [style=solid];
"runIsTxConsumer" [style=solid];
"runL1IngressConnector" [style=solid];
"runL2IngressConnector" [style=solid];
"runLoop" [style=solid];
"runMailgun" [style=solid];
"runMigration" [style=solid];
"runMigrationRaw" [style=solid];
"runMigrationScript" [style=solid];
"runMocked" [style=solid];
"runNotifierConnector" [style=solid];
"runOfferConnector" [style=solid];
"runPaymentProcessors" [style=solid];
"runPaymentz" [style=solid];
"runPhone" [style=solid];
"runPostgrestInstance" [style=solid];
"runProcesses" [style=solid];
"runProductPuller" [style=solid];
"runPullerJob" [style=solid];
"runRaw" [style=solid];
"runRefreshTokenJob" [style=solid];
"runRequest" [style=solid];
"runS3Storage" [style=solid];
"runSeon" [style=solid];
"runSeonFraudApi" [style=solid];
"runSqlRestApi" [style=solid];
"runSqlStms" [style=solid];
"runSqlStmsWith" [style=solid];
"runStatusPuller" [style=solid];
"runStorage" [style=solid];
"runStylopayApp" [style=solid];
"runStylopayEndpoint" [style=solid];
"runStylopayWebApp" [style=solid];
"runTcpApi" [style=solid];
"runTcpApiGetEstimateFeeKB" [style=solid];
"runTcpApiGetRawTx" [style=solid];
"runTcpApiGetUTXOlist" [style=solid];
"runTcpApiSendTx" [style=solid];
"runTest" [style=solid];
"runTestColog" [style=solid];
"runTransaction" [style=solid];
"runTranspilerFinalStep" [style=solid];
"runTranspilerNext" [style=solid];
"runTruliooConnector" [style=solid];
"runTsql" [style=solid];
"runTsqlTestsBatch" [style=solid];
"runWith" [style=solid];
"runWithLatencyMetric" [style=solid];
"runWithSecrets" [style=solid];
"runWithSeed" [style=solid];
"sanitiseJson" [style=solid];
"satoshisToCoins" [style=solid];
"saveCatalogPointAt" [style=solid];
"saveForBlockCache" [style=solid];
"saveTestStats" [style=solid];
"sayHello" [style=solid];
"schemaContentQuery" [style=solid];
"scopedField" [style=solid];
"scriptHash" [style=solid];
"scriptSig" [style=solid];
"scriptSigAsm" [style=solid];
"scriptSigHex" [style=solid];
"secretVarsTool" [style=solid];
"secretVarsToolParser" [style=solid];
"secureContext" [style=solid];
"secureProxyCtx" [style=solid];
"sendConn" [style=solid];
"sendEvents" [style=solid];
"sendMail" [style=solid];
"sendRawTransaction" [style=solid];
"sendSMS" [style=solid];
"sendToOnRamp" [style=solid];
"serveDocAndApp" [style=solid];
"serveHttp" [style=solid];
"serveHttpSettings" [style=solid];
"serveHttpWithMetrics" [style=solid];
"server" [style=solid];
"serverWithDoc" [style=solid];
"setDocumentUploaded" [style=solid];
"setDocumentUploaded\'" [style=solid];
"setExternalExtensions" [style=solid];
"setFunctionNameSpace" [style=solid];
"setHandlerOptions" [style=solid];
"setInitialCatalog" [style=solid];
"setInitialCatalogs" [style=solid];
"setUpCoreExtension" [style=solid];
"setUpPersistentTables" [style=solid];
"sha256" [style=solid];
"shouldRetry" [style=solid];
"shouldRetry\'" [style=solid];
"showSeonError" [style=solid];
"showXcoAddress" [style=solid];
"signL1Tx\'" [style=solid];
"signQuery" [style=solid];
"signRawTransaction" [style=solid];
"signRequest" [style=solid];
"signTransactionData" [style=solid];
"simulateNSteps" [style=solid];
"simulateStep" [style=solid];
"splitText" [style=solid];
"sqlLiteral" [style=solid];
"sqlMetricsMiddleware" [style=solid];
"sqlPreProcess" [style=solid];
"sqlRestApi" [style=solid];
"sqlRestArg" [style=solid];
"sqlSchema" [style=solid];
"sqlSection" [style=solid];
"stageCheckerDesc" [style=solid];
"startApp" [style=solid];
"startEventApp" [style=solid];
"startMigration" [style=solid];
"startNotifier" [style=solid];
"startProcess" [style=solid];
"startProcessProfile" [style=solid];
"storeBlock" [style=solid];
"storeL1" [style=solid];
"storeL2" [style=solid];
"storeTxInL1" [style=solid];
"storeTxInL2" [style=solid];
"storeUser" [style=solid];
"storeUser\'" [style=solid];
"stringify" [style=solid];
"stringify\'" [style=solid];
"stripFeatures" [style=solid];
"stylopayWebAPI" [style=solid];
"stylopayWebApp" [style=solid];
"subscribeL1Client" [style=solid];
"subscribeToEvents" [style=solid];
"sumAmounts" [style=solid];
"svApi" [style=solid];
"syntheticL1" [style=solid];
"tSizeQuery" [style=solid];
"tableListQuery" [style=solid];
"tableName" [style=solid];
"tableSizesFrom" [style=solid];
"tag" [style=solid];
"tags" [style=solid];
"tcpClientConfigFromEnv" [style=solid];
"testAuthentication" [style=solid];
"testBluePointsNet" [style=solid];
"testNetOption" [style=solid];
"testSchemaContent" [style=solid];
"testSchemaContentQuery" [style=solid];
"testSchm" [style=solid];
"textRun" [style=solid];
"threshold" [style=solid];
"throwBadRequest" [style=solid];
"tickStep" [style=solid];
"timeToValue" [style=solid];
"toAdd" [style=solid];
"toAddress" [style=solid];
"toAvailable" [style=solid];
"toB64Payload" [style=solid];
"toB64Sign" [style=solid];
"toBase64" [style=solid];
"toBase64ByteString" [style=solid];
"toBennuPayReq" [style=solid];
"toBlock" [style=solid];
"toChange" [style=solid];
"toConnectionInfo" [style=solid];
"toDoubleCent" [style=solid];
"toEndpoint" [style=solid];
"toError" [style=solid];
"toExport" [style=solid];
"toExportable" [style=solid];
"toFee" [style=solid];
"toFundedBuckzy" [style=solid];
"toFundedGiftCard" [style=solid];
"toGeneric" [style=solid];
"toGeneric\'" [style=solid];
"toGetFileError" [style=solid];
"toHexBString" [style=solid];
"toHexByteString" [style=solid];
"toHttpEndpoint" [style=solid];
"toInternalError" [style=solid];
"toJxt" [style=solid];
"toL1Address\'" [style=solid];
"toL1Transaction" [style=solid];
"toL1TxBody" [style=solid];
"toL1TxIdText" [style=solid];
"toL2TxBody" [style=solid];
"toListTags" [style=solid];
"toLogError" [style=solid];
"toLowerHead" [style=solid];
"toMetric" [style=solid];
"toNetwork" [style=solid];
"toObjectKey" [style=solid];
"toObjectKey\'" [style=solid];
"toOrder" [style=solid];
"toOrderBy" [style=solid];
"toOrderNumber" [style=solid];
"toOrderSQL" [style=solid];
"toPair" [style=solid];
"toParam" [style=solid];
"toPay" [style=solid];
"toPort" [style=solid];
"toProviderMetrics" [style=solid];
"toPubKey" [style=solid];
"toPubKeyHash" [style=solid];
"toQueryName" [style=solid];
"toRaw" [style=solid];
"toResponse" [style=solid];
"toResponseCode" [style=solid];
"toScriptInput" [style=solid];
"toScriptOutput" [style=solid];
"toServantError" [style=solid];
"toSql" [style=solid];
"toStylopayCancelled" [style=solid];
"toStylopaySuccess" [style=solid];
"toTimeToValue" [style=solid];
"toTransaction" [style=solid];
"toTxId" [style=solid];
"toTxTuple" [style=solid];
"toType" [style=solid];
"toUtf8ByteString" [style=solid];
"toXcoAmount" [style=solid];
"toXcoOffset" [style=solid];
"translateError" [style=solid];
"translationsFolder" [style=solid];
"transpileCSql" [style=solid];
"transpileCSqlWith" [style=solid];
"transpiledToSql" [style=solid];
"traversePairs" [style=solid];
"truliooOptions" [style=solid];
"tx2jxt" [style=solid];
"txId" [style=solid];
"txIdHash" [style=solid];
"txIdHex" [style=solid];
"typeInfoEndpoint" [style=solid];
"typesDescriptionQuery" [style=solid];
"typesSch" [style=solid];
"unionAllFunctions" [style=solid];
"unitChange" [style=solid];
"unmaskCard" [style=solid];
"unmaskCard\'" [style=solid];
"unsignResponse" [style=solid];
"updateComplianceStatus" [style=solid];
"updateComplianceStatus\'" [style=solid];
"updateMerchant" [style=solid];
"updateModule" [style=solid];
"updateTokenOnRamp" [style=solid];
"uploadDocument" [style=solid];
"uploadDocumentApi" [style=solid];
"uploadDocument\'" [style=solid];
"uploadFile" [style=solid];
"useConnOrPool" [style=solid];
"userExists" [style=solid];
"userExists\'" [style=solid];
"userIdParam" [style=solid];
"userNameGenerator" [style=solid];
"uuidGenerator" [style=solid];
"validSigns" [style=solid];
"validate" [style=solid];
"validateAccessId" [style=solid];
"validateAccessIdApi" [style=solid];
"validateAccessIdClient" [style=solid];
"validateAndBroadcast" [style=solid];
"validateBackofficeUser" [style=solid];
"validateBlock" [style=solid];
"validateInput" [style=solid];
"validateJWT" [style=solid];
"validateJWT\'" [style=solid];
"validateMatchingOutput" [style=solid];
"validateOnrampConfig" [style=solid];
"validateRawTx" [style=solid];
"validateSigInputs" [style=solid];
"validateSignature" [style=solid];
"validateSigningKeys" [style=solid];
"validateTransaction" [style=solid];
"validateUser" [style=solid];
"verifyResult" [style=solid];
"w" [style=solid];
"whiteSpace" [style=solid];
"withAppConnector" [style=solid];
"withColog" [style=solid];
"withEnvVarsOrFail" [style=solid];
"withJWT" [style=solid];
"withL1Client" [style=solid];
"withL1TcpClient" [style=solid];
"withMetricContentType" [style=solid];
"withTags" [style=solid];
"withTokenRefresher" [style=solid];
"withVarInt" [style=solid];
"wordExceptions" [style=solid];
"wordToId32B" [style=solid];
"workStep" [style=solid];
"writeOntoL1Blockchain" [style=solid];
"xcoAddressGenerator" [style=solid];
"xcoAmountGenerator" [style=solid];
"xcoServer" [style=solid];
"" -> "addQuotesForRead";
"" -> "runApp";
"" -> "startApp";
"" -> "toOrderBy";
"_and_" -> "reserved";
"_as_" -> "reserved";
"_cast_" -> "reservedOp";
"_check_" -> "reserved";
"_constraint_" -> "reserved";
"_current_timestamp_" -> "reserved";
"_default_" -> "reserved";
"_div_" -> "reservedOp";
"_eq_" -> "reservedOp";
"_false_" -> "reserved";
"_foreignKey_" -> "reserved";
"_from_" -> "reserved";
"_ge_" -> "reservedOp";
"_gt_" -> "reservedOp";
"_isNotNull_" -> "reserved";
"_isNull_" -> "reserved";
"_le_" -> "reservedOp";
"_lt_" -> "reservedOp";
"_minus_" -> "reservedOp";
"_notNull_" -> "_null_";
"_notNull_" -> "reserved";
"_not_" -> "reserved";
"_null_" -> "reserved";
"_or_" -> "reservedOp";
"_plus_" -> "reservedOp";
"_primaryKey_" -> "reserved";
"_references_" -> "reserved";
"_table_" -> "reserved";
"_times_" -> "reservedOp";
"_true_" -> "reserved";
"_unique_" -> "reserved";
"_where_" -> "reserved";
"a" -> "a";
"ackAction" -> "encodeJson";
"ackAction" -> "logInfo";
"ackAction" -> "process";
"activateCard" -> "logInfo";
"activateCard" -> "mkStylopayAPI";
"activateCard" -> "refreshToken";
"activateCard\'" -> "activateCard";
"activateCard\'" -> "getUser";
"activateCard\'" -> "runStylopayApp";
"adaptProc" -> "a";
"adaptProc" -> "mapToThese";
"adaptProc" -> "monoidToMaybe";
"addApiCommonCode" -> "liftMigrationRunner";
"addBlockToLevel" -> "error";
"addCard" -> "logInfo";
"addCard" -> "mkStylopayAPI";
"addCard" -> "refreshToken";
"addCommonProcedureCode" -> "execute\'";
"addCommonProcedureCode" -> "getOids";
"addCommonProcedureCode" -> "getProcedureDefinition";
"addCustomer" -> "logInfo";
"addCustomer" -> "mkStylopayAPI";
"addCustomerCard" -> "a";
"addCustomerCard" -> "fromCardType";
"addCustomerCard" -> "runAddCard";
"addCustomerModifier" -> "addCustomerModifier";
"addCustomerModifier" -> "o";
"addCustomer\'" -> "addCustomer";
"addCustomer\'" -> "copyAddresses";
"addCustomer\'" -> "fixPhoneNumber";
"addCustomer\'" -> "getUserProfile";
"addCustomer\'" -> "isBadDocumentsResponse";
"addCustomer\'" -> "runStylopayApp";
"addCustomer\'" -> "storeUser";
"addCustomer\'" -> "uploadDocument";
"addFundsToWallet" -> "runFundWallet";
"addFundsToWallet" -> "toDoubleCent";
"addL1Block" -> "dbStore";
"addOnRampSecret" -> "encodeJson";
"addOnRampSecret" -> "onrampConfigFilePath";
"addOnRampSecret" -> "validateOnrampConfig";
"addQuotesForRead" -> "addQuotesForRead";
"addStaticCustomerModifier" -> "addStaticCustomerModifier";
"addThreadResult" -> "a";
"afterBlockFetched" -> "defThreadResult";
"afterBlockHeader" -> "a";
"afterBlockHeader" -> "evolveAfterEvent";
"afterBlockHeader" -> "preComputeBlockThread";
"afterReorgCheck" -> "defThreadResult";
"allCountries" -> "a";
"allCountries" -> "isNoneOf";
"allCurrencies" -> "a";
"allCurrencies" -> "isNoneOf";
"amountFor" -> "sumAmounts";
"analyticsConf" -> "configurationOption";
"analyticsConf" -> "info";
"analyzeConstraint" -> "analyzeExpr";
"analyzeConstraint" -> "defRowName";
"analyzeConstraint" -> "filter";
"analyzeExpr" -> "a";
"analyzeInput" -> "analyzeConstraint";
"analyzeInput" -> "analyzeTable";
"analyzeTable" -> "checkIfRepeated";
"apiCall" -> "a";
"apiCall" -> "decodeJson";
"apiTcpCall" -> "a";
"apiTcpCall" -> "connect";
"apiTcpCall" -> "encodeJson";
"arbNewReceipt" -> "arbSendReceipt";
"arbPrevId" -> "arbHexByteString";
"arbPreviousReceipt" -> "arbPreviousRef";
"arbPreviousReceipt" -> "arbReceiver";
"arbPreviousRef" -> "arbPrevId";
"arbPreviousRef" -> "arbitraryXcoOffset";
"arbSendReceipt" -> "arbitraryXcoAddress";
"arbSendReceipt" -> "arbitraryXcoAmount";
"arbitraryL2ToBuild" -> "a";
"arbitraryL2ToBuild" -> "arbPreviousReceipt";
"arbitraryL2ToBuild" -> "arbitraryCoin";
"arbitraryL2ToBuild" -> "arbitraryXcoAddress";
"arbitraryL2ToBuild" -> "arbitraryXcoAmount";
"arbitraryL2ToBuild" -> "toPubKeyHash";
"arbitraryL2ToBuild" -> "withEnvVarsOrFail";
"arbitraryNewReceipts" -> "arbNewReceipt";
"arbitraryPreviousReceipts" -> "arbPreviousReceipt";
"arbitraryPrivKey" -> "arbPreviousReceipt";
"arbitraryTransaction" -> "arbitraryNewReceipts";
"arbitraryTransaction" -> "arbitraryPreviousReceipts";
"arbitraryWrongBase64Jxt" -> "arbitraryTransaction";
"arbitraryXcoAddress" -> "arbitraryCoin";
"arbitraryXcoAddress" -> "arbitraryPrivKey";
"arbitraryXcoAddress" -> "toPubKeyHash";
"arbitraryXcoAddressArray" -> "arbitraryPrivKey";
"arbitraryXcoAddressArray" -> "toPubKeyHash";
"arbitraryXcoAddressWithKey" -> "arbitraryCoin";
"arbitraryXcoAddressWithKey" -> "arbitraryPrivKey";
"arbitraryXcoAddressWithKey" -> "toPubKeyHash";
"arbitraryXcoAmount" -> "toXcoAmount";
"arbitraryXcoOffset" -> "toXcoOffset";
"askGoogleCreds" -> "encodeJson";
"attemptToSendDbOp" -> "cleanStateWith";
"attemptToSendDbOp" -> "combineOutput";
"authCheck" -> "addClient";
"authCheck" -> "clientExists";
"authCheck" -> "validateAccessId";
"authCheck" -> "validateUser";
"authHandler" -> "getEnv";
"autoMigrateDb" -> "databaseCreation";
"backOffice\'" -> "backOffice";
"basicAuthServerContext" -> "authCheck";
"basicAuthServerContext" -> "blockquerierConf";
"basicAuthServerContext" -> "createContext";
"basicAuthServerContext" -> "makeLenses";
"basicAuthServerContext" -> "readFileConf";
"bchServer" -> "executeTx";
"bigQueryAnalytics" -> "bigQueryAnalytics\'";
"bigQueryAnalytics" -> "fromAnalyticsResult";
"bigQueryAnalytics" -> "metrics";
"bigQueryAnalytics" -> "onErrorCall";
"bigQueryAnalytics\'" -> "askGoogleCreds";
"bigQueryAnalytics\'" -> "metrics";
"bigQueryAnalytics\'" -> "mkSqlQuery";
"bigQueryAnalytics\'" -> "onErrorCall";
"bigQueryAnalytics\'" -> "parameters";
"bigQuerySQL" -> "a";
"blockDiffConf" -> "blockDiffOptions";
"blockDiffConf" -> "consume";
"blockDiffConf" -> "consumeNotificationL1";
"blockDiffConf" -> "consumeNotificationL2";
"blockDiffConf" -> "info";
"blockExplorerApp" -> "blockExplorerAPI";
"blockExplorerApp" -> "server";
"blockHash" -> "extractBlock";
"blockTime" -> "extractBlock";
"blockTime" -> "scriptSigAsm";
"blockTime" -> "scriptSigHex";
"blockUnblock" -> "logInfo";
"blockUnblock" -> "mkStylopayAPI";
"blockUnblock" -> "refreshToken";
"blockUnblockCard\'" -> "blockUnblock";
"blockUnblockCard\'" -> "getUser";
"blockUnblockCard\'" -> "runStylopayApp";
"blockquerierConf" -> "configurationOption";
"blockquerierConf" -> "info";
"broadcastBCH" -> "broadcastBTC";
"broadcastBTC" -> "runTransaction";
"broadcastETH" -> "executeTx";
"broadcastETH" -> "parseL2Tx";
"broadcastETH" -> "storeTxInL2";
"broadcastETH" -> "txIdHex";
"broadcastL1Tx" -> "a";
"broadcastL1Tx" -> "runTcpApiSendTx";
"broadcastL1Tx" -> "withL1TcpClient";
"broadcastLTC" -> "broadcastBTC";
"broadcastXCO" -> "runTransaction";
"broadcasterConf" -> "broadcasterOptions";
"broadcasterConf" -> "info";
"broadcasterConf" -> "runApp";
"broadcasterOptions" -> "broadcasterPortOption";
"broadcasterOptions" -> "netL1Option";
"btcServer" -> "executeTx";
"buildAndSignL2Tx" -> "a";
"buildAndSignL2Tx" -> "createMessage";
"buildAndSignL2Tx" -> "l2TxFrom";
"buildAndSignL2Tx" -> "toPubKeyHash";
"buildAndSignL2Tx" -> "traversePairs";
"buildCustomL1Tx" -> "buildOutPoints";
"buildCustomL1Tx" -> "embedDataIntoL1";
"buildL1Tx" -> "buildL1Tx\'";
"buildL1Tx" -> "signL1Tx\'";
"buildL1Tx" -> "validateInput";
"buildL1Tx\'" -> "getInput";
"buildL1Tx\'" -> "network";
"buildL1Tx\'" -> "toRaw";
"buildNewReceipts" -> "consumeNotificationL1";
"buildNewReceipts" -> "consumeNotificationL2";
"buildNewReceipts" -> "getL1Balance";
"buildNewReceipts" -> "getL1History";
"buildNewReceipts" -> "getL1Transaction";
"buildNewReceipts" -> "getL2Balance";
"buildNewReceipts" -> "getL2History";
"buildNewReceipts" -> "getL2Transaction";
"buildNewReceipts" -> "newStorageIO";
"buildNewReceipts" -> "storeTxInL1";
"buildNewReceipts" -> "storeTxInL2";
"buildRedeemScripts" -> "hash160";
"buildXcoFullNode" -> "buildXcoFullNodeBase";
"buildXcoFullNode" -> "buildXcoFullNodeMain";
"buildXcoFullNodeBase" -> "dockerImageExists";
"buildXcoFullNodeBase" -> "dockerLogin";
"buildXcoFullNodeBase" -> "dockerPull";
"buildXcoFullNodeBase" -> "dockerPush";
"buildXcoFullNodeBase" -> "extractStackResolver";
"buildXcoFullNodeBase" -> "fullNodeBaseImage";
"buildXcoFullNodeBase" -> "textRun";
"buildXcoFullNodeMain" -> "baseTag";
"buildXcoFullNodeMain" -> "extractStackResolver";
"buildXcoFullNodeMain" -> "filepathXcoBase";
"buildXcoFullNodeMain" -> "filepathXcoFull";
"buildXcoFullNodeMain" -> "fromLts";
"buildXcoFullNodeMain" -> "fullNodeImage";
"buildXcoFullNodeMain" -> "generateXcoFullNode";
"buildXcoFullNodeMain" -> "generateXcoNodeBase";
"buildXcoFullNodeMain" -> "ltsVersion";
"buildXcoFullNodeMain" -> "textRun";
"buildingBlockFilePath" -> "a";
"buildingBlockFilePath" -> "blockIdFilePath";
"callL1Client" -> "getBlockHash\'";
"callL1Client" -> "getBlockHeader\'";
"callL1Client" -> "getFullBlock";
"callL1Client" -> "runApi";
"callSetDocumentUploaded" -> "logInfo";
"callSetDocumentUploaded" -> "setDocumentUploaded\'";
"callUserExists" -> "logInfo";
"callUserExists" -> "userExists\'";
"callValidateJWTOnBackoffice" -> "a";
"callValidateJWTOnBackoffice" -> "logInfo";
"callValidateJWTOnBackoffice" -> "validateJWT\'";
"cancelProcess" -> "a";
"cancelProcess" -> "debug";
"cancelProcess" -> "getTable";
"cb911Options" -> "a";
"cb911Options" -> "cb911OptionsSpecial";
"cb911Options" -> "decodedAs";
"cb911Options" -> "fromList";
"cb911Options" -> "o";
"cb911Options" -> "runRequest";
"checkContentTypeHeader" -> "a";
"checkIdColumn" -> "rowsToMap";
"checkIfRepeated" -> "computeOutput";
"checkIfRepeated" -> "powerSet";
"checkMissing" -> "langCodes";
"checkMissing" -> "msgCodes";
"checkMissingTranslation" -> "wordExceptions";
"checkNotAllowedWords" -> "notAllowedWordsRE";
"checkReorg" -> "dbGet";
"checkReorg" -> "getBlockHeaderOf";
"checkRowParams" -> "rowsToMap";
"checkSelectFrom" -> "rowsToMap";
"checkSplice" -> "describeConfigError";
"checkSplice" -> "onrampConfigFromRaw";
"checkStatusDocument" -> "extractDocVerified";
"chunkBy" -> "a";
"chunkBy" -> "chunkBy";
"chunkData" -> "maxBytesOnInputSript";
"chunkData" -> "maxBytesOnStack";
"cleanStateWith" -> "a";
"cleanWithAck" -> "a";
"cleanWithAck" -> "filter";
"cleanWithAck" -> "threshold";
"cliConfigOption" -> "configFileOption";
"closeCalls" -> "a";
"closeCalls" -> "o";
"closeModule" -> "runRaw";
"coinsToSatoshis" -> "unitChange";
"collectProducts" -> "collectProducts";
"collectProducts" -> "getProductPageSize";
"combineOutput" -> "cleanWithAck";
"combineOutput" -> "l1BlockSyncThread";
"combineOutput" -> "makeLenses";
"combineWithOffset" -> "buildingBlockFilePath";
"combineWithOffset" -> "createFile";
"combineWithOffset" -> "dbConsistencyCheck";
"combineWithOffset" -> "getBlockId";
"combineWithOffset" -> "readBlock";
"commaSep" -> "a";
"commaSep" -> "lang";
"commaSep1" -> "a";
"commaSep1" -> "lang";
"commitChanges" -> "preference";
"componentMain" -> "componentCliParserWithHelp";
"componentMain" -> "configurationFile";
"componentMain" -> "connectorMetrics";
"componentMain" -> "readFileConf";
"componentMain" -> "runAppWithMetricsM";
"componentMain" -> "setHandlerOptions";
"computeOutput" -> "a";
"computeOutput" -> "powerSet";
"computeQuery" -> "blockHash";
"computeQuery" -> "blockTime";
"computeQuery" -> "fromL1TxId";
"computeQuery" -> "parseTransaction";
"computeQuery" -> "toBlock";
"computeQuery" -> "toHexBString";
"computeQuery" -> "toL1Transaction";
"computeQuery" -> "txId";
"configOpts" -> "cliConfigOption";
"configOpts" -> "configFileOption";
"configOpts" -> "info";
"connect" -> "toConnectionInfo";
"connectToDb" -> "stringify";
"connectionStatus" -> "shouldRetry";
"connectionWorker" -> "connectionStatus";
"connectorAppFlow" -> "connectorCycle";
"connectorAppFlow" -> "repeatActionOnNotification";
"connectorCycle" -> "getOnRampData";
"connectorCycle" -> "logInfo";
"connectorCycle" -> "notifyResponse";
"connectorMetrics" -> "mkInfo";
"consume" -> "info";
"consume" -> "logError";
"consume" -> "retryDefPolicy";
"consume" -> "threshold";
"consumeBlockThread" -> "evolveAfterEvent";
"consumeBlockThread" -> "initialState";
"consumeNotificationL2" -> "a";
"convertResponse" -> "fromTxId";
"convertResponse" -> "info";
"convertResponse" -> "mkRespError";
"convertResponse" -> "mkRespSuccess";
"convertResponse" -> "toTxId";
"convertToEvents" -> "encodeJson";
"convertToTuple" -> "toBase64";
"copyAddresses" -> "isBillingAddressNull";
"copyAddresses" -> "isDeliveryAddressNull";
"coreProcess" -> "passAlongSide";
"createApp" -> "serverWithDoc";
"createContext" -> "a";
"createContext" -> "createMetrics";
"createContext" -> "metrics";
"createContext" -> "notifierHttpAPI";
"createContext" -> "startNotifier";
"createDbStructure" -> "a";
"createFile" -> "apiCall";
"createFile" -> "apiTcpCall";
"createFile" -> "callL1Client";
"createFile" -> "closeL1ClientConn";
"createFile" -> "closeL1TcpClientConn";
"createFile" -> "fromUtxoToRawTxId";
"createFile" -> "getBlockHeader\'";
"createFile" -> "l1BlockNotify";
"createFile" -> "l1ClientConn";
"createFile" -> "l1TcpClientConn";
"createFile" -> "runApiGetNonStdRawTx";
"createFile" -> "runApiGetRawTx";
"createFile" -> "runApiSendTx";
"createFile" -> "runApi\'";
"createFile" -> "runCustomTcpApiGetUTXOlist";
"createFile" -> "runTcpApi";
"createFile" -> "runTcpApiGetEstimateFeeKB";
"createFile" -> "runTcpApiGetRawTx";
"createFile" -> "runTcpApiGetUTXOlist";
"createFile" -> "runTcpApiSendTx";
"createFile" -> "subscribeL1Client";
"createFile" -> "tcpClientConfigFromEnv";
"createFile" -> "withL1Client";
"createFile" -> "withL1TcpClient";
"createFile" -> "writeOntoL1Blockchain";
"createIfNotExist" -> "preference";
"createIfNotExist" -> "runRaw";
"createMessage" -> "sanitiseJson";
"createMessage" -> "sha256";
"createMetrics" -> "mkInfo";
"createPubKeyCoinReqLimitOffset" -> "offset";
"createRandomInitialState" -> "a";
"createRandomInitialState" -> "noHaltingEvents";
"createReq" -> "configOpts";
"createReq" -> "readBEConf";
"createRequest" -> "a";
"createTranslations" -> "escapePostgreString";
"createTranslations" -> "runSqlStms";
"csqlArgs" -> "internalSch";
"csqlArgs" -> "typesSch";
"databaseCreation" -> "deleteCatalogAtPoint";
"databaseCreation" -> "getBlockCatalogAt";
"databaseCreation" -> "getBlockHeaderOf";
"databaseCreation" -> "lastCatalogPoint";
"databaseCreation" -> "lastHeightBefore";
"databaseCreation" -> "saveCatalogPointAt";
"databaseCreation" -> "saveForBlockCache";
"dbAccess" -> "dbProcess";
"dbAccess" -> "setInitialCatalogs";
"dbAccess" -> "verifyResult";
"dbConsistencyCheck" -> "computeQuery";
"dbConsistencyCheck" -> "desc";
"dbConsistencyCheck" -> "getLastBlock";
"dbConsistencyCheck" -> "runEvaluation";
"dbConsistencyCheck" -> "runStorage";
"dbConsistencyCheck" -> "validateBlock";
"dbConsistencyCheck" -> "validateRawTx";
"dbGet" -> "getBlockCatalogAt";
"dbGet\'" -> "dbGet";
"dbGet\'" -> "lastCatalogPoint";
"dbProcess" -> "debug";
"dbProcess" -> "process";
"dbStore" -> "lastCatalogPoint";
"dbStore" -> "onNewBlock";
"dbStore" -> "saveCatalogPointAt";
"dbStore" -> "validateBlock";
"debug" -> "logWith";
"decodeJson" -> "a";
"decodeJxt" -> "convertToTuple";
"decodeJxt" -> "toJxt";
"decodeMessage" -> "decodeJxt";
"decodeMessage" -> "validateSignature";
"decoded" -> "a";
"decoded" -> "checkContentTypeHeader";
"decoded" -> "unsignResponse";
"decoded" -> "validate";
"decodedAs" -> "a";
"decodedAs" -> "checkContentTypeHeader";
"decodedAs" -> "createDbPool";
"decodedAs" -> "defaultPostgrestAppConfig";
"decodedAs" -> "getOrdersPageSize";
"decodedAs" -> "getProductPageSize";
"decodedAs" -> "newEGifterEndpoints";
"decodedAs" -> "runPostgrestInstance";
"decodedAs" -> "showSeonError";
"decodedAs" -> "sqlRestApi";
"decodedAs" -> "sqlRestArg";
"defThreadResult" -> "a";
"defThreadResult" -> "wordToId32B";
"defaultOptionsUpper" -> "a";
"defaultOptionsUpper" -> "capitalize";
"defaultOptionsUpper" -> "discriminateByKey";
"defaultOptionsUpper" -> "fromHexByteString";
"defaultOptionsUpper" -> "toHexByteString";
"defaultPostgrestAppConfig" -> "configPoolSize";
"defaultPostgrestAppConfig" -> "configTimeout";
"defaultPostgrestAppConfig" -> "qrEncodeService";
"defineConstFunction" -> "encodeJson";
"defineFunctions" -> "checkRowParams";
"defineFunctions" -> "defineFn";
"defineFunctions" -> "mapToRows";
"defineFunctions" -> "printSqlFunction";
"deleteMerchant" -> "withJWT";
"deployBackOfficeApi" -> "backOffice\'";
"deployBackOfficeApi" -> "checkIdColumn";
"deployBackOfficeApi" -> "checkSelectFrom";
"deployBackOfficeApi" -> "defineConstFunction";
"deployBackOfficeApi" -> "defineFunctions";
"deployBackOfficeApi" -> "exportEndpoint";
"deployBackOfficeApi" -> "getRawBackoffice";
"deployBackOfficeApi" -> "typeInfoEndpoint";
"deployMetricsApi" -> "apiRoot";
"deployMetricsApi" -> "defineFunctions";
"deployMetricsApi" -> "exportEndpoint";
"deployMetricsApi" -> "internalSchema";
"deployMetricsApi" -> "metricAuxFunction";
"deployMetricsApi" -> "metricFunction";
"deployMetricsApi" -> "metricGatherFunction";
"deployMetricsApi" -> "metrics";
"deployMetricsApi" -> "readFilePath";
"deployMetricsApi" -> "readFolderPath";
"derPrefix" -> "w";
"desc" -> "a";
"desc" -> "configOpts";
"desc" -> "readSVConf";
"descEvent" -> "a";
"describeSchemaMismatch" -> "a";
"describeSchemaMismatch" -> "encodeJson";
"describeSchemaMismatch" -> "modifyJson";
"differenceDenominations" -> "fiatAmount";
"differenceDenominations" -> "fiatCurrency";
"differenceDenominations" -> "getEGifterTokenOnRamp";
"differenceDenominations" -> "runRefreshTokenJob";
"disconnectClient" -> "removeClient";
"doUpload" -> "convertToDocToUpload";
"doUpload" -> "uploadDocument";
"dockerImageExists" -> "textRun";
"dockerPull" -> "textRun";
"dockerPush" -> "textRun";
"dropClient" -> "getClient";
"dropClient" -> "logInfo";
"dropClient" -> "removeClient";
"dropNamespace" -> "a";
"dropNamespace" -> "execute\'";
"dropNamespace" -> "filter";
"dropNamespace" -> "liftMigrationRunner";
"dropNamespace" -> "sqlSchema";
"emailTypeText" -> "emailType";
"embedDataIntoL1" -> "buildRedeemScripts";
"embedDataIntoL1" -> "chunkData";
"embedDataIntoL1" -> "filter";
"embedDataIntoL1" -> "minAmount";
"embedDataIntoL1" -> "signTransactionData";
"embedIntoL1" -> "embedIntoL1OutputScript";
"embedIntoL1" -> "fromHexByteString";
"embedIntoL1" -> "toHexByteString";
"embedIntoL1OutputScript" -> "embedIntoL1OutputScript";
"embedIntoL1OutputScript" -> "op0";
"emptyExistingRequest" -> "a";
"emptyExistingRequest" -> "makeFieldsQuery";
"emptyExistingRequest" -> "toLowerHead";
"emptyExistingRequest" -> "toQueryName";
"emptyNewRequest" -> "emptyBasicRequest";
"encodeJson" -> "a";
"endpointGetData" -> "toEndpoint";
"endpointPostData" -> "envConn";
"endpointPostData" -> "grab";
"endpointPostData" -> "minEnv";
"endpointPostData" -> "toEndpoint";
"enumerate" -> "a";
"envConn" -> "a";
"error" -> "logWith";
"ethServer" -> "executeTx";
"eventServeDocAndApp" -> "blockquerierEventAPI";
"eventServeDocAndApp" -> "eventServer";
"eventServeDocAndApp" -> "generateEventDoc";
"evolveAfterEvent" -> "a";
"evolveAfterEvent" -> "addThreadResult";
"evolveAfterEvent" -> "afterBlockFetched";
"evolveAfterEvent" -> "afterBlockHeader";
"evolveAfterEvent" -> "afterReorgCheck";
"evolveAfterEvent" -> "attemptToSendDbOp";
"evolveAfterEvent" -> "dbAccess";
"evolveAfterEvent" -> "defThreadResult";
"evolveAfterEvent" -> "error";
"evolveAfterEvent" -> "makeLenses";
"evolveAfterEvent" -> "network";
"executeAlternatives" -> "randomlyPickOne";
"executeAnySection" -> "isTextBased";
"executeAnySection" -> "paramGenerator";
"executeAnySection" -> "readFilePath";
"executeAnySection" -> "sqlSection";
"executeApis" -> "deployBackOfficeApi";
"executeApis" -> "deployMetricsApi";
"executeApis" -> "executeApis\'";
"executeApis" -> "getApiSchms\'";
"executeApis" -> "insertCommonCode";
"executeApis\'" -> "dropNamespace";
"executeApis\'" -> "executeAnySection";
"executeApis\'" -> "exportEndpoint";
"executeCMD" -> "monoidToMaybe";
"executeDependencies" -> "instantiate";
"executeEndpoint" -> "logInfo";
"executeEndpoint" -> "metrics";
"executeEndpoint" -> "notOk";
"executeEndpoint" -> "requestOptions";
"executeEndpoint" -> "retryDefPolicy";
"executeEndpoint" -> "shouldRetry";
"executeEndpoint" -> "toHttpEndpoint";
"executeExpr" -> "executeSqlExpr";
"executeExpr" -> "liftIO\'";
"executeRequest" -> "debug";
"executeRequest" -> "error";
"executeRequest" -> "info";
"executeSection" -> "executeAnySection";
"executeSection" -> "runSqlStms";
"executeSqlStms\'" -> "executeAnySql";
"executeTests" -> "encodeJson";
"executeTests" -> "escapePostgreString";
"executeTests" -> "executeExpr";
"executeTests" -> "isTextBased";
"executeTests" -> "liftMigrationRunner";
"executeTests" -> "paramGenerator";
"executeTests" -> "preProcess";
"executeTests" -> "readTsql";
"executeTests" -> "runSqlStmsWith";
"executeTests" -> "runTsql";
"executeTillOneSucceed" -> "a";
"executeTillOneSucceed" -> "executeTillOneSucceed";
"executeTx" -> "blockchainTxBcstMethod";
"executeTx" -> "convertResponse";
"executeTx" -> "methodNotFound";
"executeTx" -> "validate";
"execute\'" -> "executeAnySql";
"execute\'" -> "liftIO\'";
"existingTransaction" -> "a";
"existingTransaction" -> "isErrorE";
"existingTransaction" -> "isLeftE";
"existingTransaction" -> "isRightE";
"existingTransaction" -> "joinE";
"exportEndpoint" -> "liftMigrationRunner";
"exportEndpoint" -> "namespace";
"exportEndpoint" -> "runSqlStms";
"exportEndpoint" -> "transpileCSql";
"exportMetric" -> "a";
"exportMetric" -> "exportMetric\'";
"exportMetric" -> "toMetric";
"exportMetric\'" -> "blockDiffConf";
"exportMetric\'" -> "blockDiffOptions";
"exportMetric\'" -> "runMocked";
"exportMetric\'" -> "runWith";
"extractDocVerified" -> "a";
"extractDocVerified" -> "decodeJson";
"extractDocVerified" -> "fieldName";
"extractDocVerified" -> "hoistClientEnv";
"extractDocVerified" -> "hoistClientEnv_";
"extractDocVerified" -> "mkProvMetric";
"extractError" -> "error";
"extractError" -> "invalidParams";
"extractError" -> "methodNotFound";
"extractError" -> "mkRespError";
"extractError" -> "mkRespSuccess";
"extractSecrets" -> "decodeJson";
"extractSecrets" -> "toPubKey";
"extractStackResolver" -> "ltsVersion";
"extractStackResolver" -> "textRun";
"fakeBLockIdForTest" -> "embedIntoL1";
"fakeBLockIdForTest" -> "l1BlockUnserialize";
"fakeBLockIdForTest" -> "wordToId32B";
"fieldName" -> "identifier";
"fillEmail" -> "mkEmail";
"fixPhoneNumber" -> "filter";
"fmapFirst" -> "a";
"fmapFirst" -> "fmapFirst";
"formatFrom" -> "formatTime\'";
"formatTime\'" -> "makeLenses";
"formatTo" -> "a";
"formatTo" -> "formatTime\'";
"fromAddress" -> "toScriptInput";
"fromAnalyticsResult" -> "parseFirebaseResults";
"fromBuckzyResponse" -> "fromStatusBuckzy";
"fromEGifterDenomination" -> "runPullerJob";
"fromEGifterResponse" -> "fromOrderNumber";
"fromEGifterResponse" -> "fromStatus";
"fromGeneric" -> "a";
"fromGeneric" -> "defaultOptionsUpper";
"fromGeneric" -> "parsingOptionsWith";
"fromGeneric" -> "parsingOptionsWithNull";
"fromHexBSBlock" -> "a";
"fromHexBSBlock" -> "fromHexByteString";
"fromHexBString" -> "exportPubKeyI";
"fromHexBString" -> "fromHexByteString";
"fromHexBString" -> "getP2PKHAddressFromSecKey";
"fromHexBString" -> "getPublicKeyHash";
"fromHexBString" -> "getRawTxHex";
"fromHexBString" -> "getStdElectrumXScriptHash";
"fromHexBString" -> "getStdP2PKHOutputScript";
"fromHexBString" -> "getStdP2SHAddress";
"fromHexBString" -> "hash160";
"fromHexBString" -> "hash256ToHexByteString";
"fromL1AddressToAddress" -> "fromAdd";
"fromL1TxIdText" -> "fromHexByteString";
"fromL1TxIdText" -> "fromL1TxId";
"fromL1TxIdtoTxHash" -> "fromL1TxIdText";
"fromNullable" -> "payloadToid32B";
"fromNullable" -> "wordToId32B";
"fromParam" -> "fromTimeToValue";
"fromTimeToValue" -> "timeToValue";
"fromTxId" -> "debug";
"fromTxId" -> "error";
"fromTxId" -> "info";
"fromUtxoToRawTxId" -> "fromHexByteString";
"fundWallet" -> "logInfo";
"fundWallet" -> "mkStylopayAPI";
"fundWallet" -> "refreshToken";
"gGetBlockCatalog" -> "error";
"gGetBlockCatalog" -> "fromNullable";
"genAuthServerContext" -> "authHandler";
"generateDoc" -> "broadcasterConf";
"generateDoc" -> "broadcasterOptions";
"generateDoc" -> "desc";
"generateDoc" -> "mkRespSuccess";
"generateDoc" -> "toHexByteString";
"generateEventDoc" -> "basicAuthServerContext";
"generateEventDoc" -> "descEvent";
"generateEventDoc" -> "offset";
"generateInternalDoc" -> "runBackofficeApp";
"generateUpgradeStrategy" -> "a";
"generateUpgradeStrategy" -> "executeSection";
"generateXcoFullNode" -> "alterDbLockTimeout";
"generateXcoFullNode" -> "buildImage";
"generateXcoFullNode" -> "connectToDb";
"generateXcoFullNode" -> "extractFileAndPath";
"generateXcoFullNode" -> "fileWithPath";
"generateXcoFullNode" -> "filepathXcoFull";
"generateXcoFullNode" -> "migrateOnRamp";
"generateXcoFullNode" -> "runTsqlTestsBatch";
"generateXcoNodeBase" -> "buildImage";
"generateXcoNodeBase" -> "filepathXcoBase";
"getAnalytics" -> "bigQueryAnalytics";
"getApiSchms" -> "getApiSchms\'";
"getApiSchms\'" -> "apiRoot";
"getApiSchms\'" -> "backOffice";
"getApiSchms\'" -> "readFilePath";
"getAuthDocument" -> "getDocument";
"getAuthDocument" -> "validateBackofficeUser";
"getAuthDocumentApi" -> "getAuthDocument";
"getBestBlockhash" -> "apiCall";
"getBlockCatalogAt" -> "gGetBlockCatalog";
"getBlockHash\'" -> "apiCall";
"getBlockHeaderOf" -> "getTable";
"getBlockHeader\'" -> "apiCall";
"getBlockId" -> "encodeJson";
"getBlockId" -> "payloadToid32B";
"getCVV" -> "logInfo";
"getCVV" -> "mkStylopayAPI";
"getCVV" -> "refreshToken";
"getCVV\'" -> "getCVV";
"getCVV\'" -> "getUser";
"getCVV\'" -> "runStylopayApp";
"getCards" -> "logInfo";
"getCards" -> "mkStylopayAPI";
"getCards" -> "refreshToken";
"getCards\'" -> "getCards";
"getCards\'" -> "getUser";
"getCards\'" -> "runStylopayApp";
"getCustomer" -> "logInfo";
"getCustomer" -> "mkStylopayAPI";
"getCustomer" -> "refreshToken";
"getCustomer\'" -> "getCustomer";
"getCustomer\'" -> "getUser";
"getCustomer\'" -> "runStylopayApp";
"getData" -> "executeEndpoint";
"getDefinedProcedures" -> "a";
"getDefinedProcedures" -> "liftIO\'";
"getDefinedProcedures" -> "liftMigrationRunner";
"getDefinedProcedures" -> "procQuery";
"getDigest" -> "toHexByteString";
"getDocument" -> "a";
"getDocument" -> "addCommonProcedureCode";
"getDocument" -> "closeModule";
"getDocument" -> "createIfNotExist";
"getDocument" -> "dropNamespace";
"getDocument" -> "executeExpr";
"getDocument" -> "exportEndpoint";
"getDocument" -> "getDefinedProcedures";
"getDocument" -> "getDocument\'";
"getDocument" -> "getSchemaDescription";
"getDocument" -> "loadTestStats";
"getDocument" -> "logInfo";
"getDocument" -> "namespace";
"getDocument" -> "printTestTrace";
"getDocument" -> "readFilePath";
"getDocument" -> "readNextModule";
"getDocument" -> "reportCoverage";
"getDocument" -> "reportSubstepTimings";
"getDocument" -> "reportTableSize";
"getDocument" -> "runAndRollback";
"getDocument" -> "runMigration";
"getDocument" -> "runSqlStms";
"getDocument" -> "saveTestStats";
"getDocument" -> "sqlSection";
"getDocument" -> "updateModule";
"getDocumentApi" -> "getDocument";
"getEGifterTokenOnRamp" -> "getOnRampData";
"getEGifterTokenOnRamp" -> "mailgun";
"getEnv" -> "a";
"getEnv" -> "newLogger";
"getFields" -> "a";
"getFile" -> "a";
"getFile" -> "getEnv";
"getFile" -> "toGetFileError";
"getFullBlock" -> "apiCall";
"getFullBlock" -> "getBlockHeader\'";
"getInput" -> "fromL1TxIdtoTxHash";
"getInput" -> "txId";
"getL1Payload" -> "op0";
"getL1Payload" -> "withVarInt";
"getL1Transaction" -> "txId";
"getL2Transaction" -> "txId";
"getL2TransactionPost" -> "tx2jxt";
"getL2Transactions" -> "createReq";
"getL2Transactions" -> "getL2TransactionPost";
"getL2TransactionsByAddress" -> "createReq";
"getL2TransactionsByAddress" -> "getL2TransactionPost";
"getL2TransactionsByPubKey" -> "createReq";
"getL2TransactionsByPubKey" -> "getL2TransactionPost";
"getL2TransactionsByTxid" -> "createReq";
"getL2TransactionsByTxid" -> "getL2TransactionPost";
"getLastBlock" -> "readBlock";
"getMerchants" -> "withJWT";
"getNonStdElectrumXScriptHash" -> "getNonStdP2PKHScript";
"getNonStdElectrumXScriptHash" -> "sha256";
"getNonStdP2PKHOutputScript" -> "getPublicKeyHash";
"getNonStdP2PKHScript" -> "getNonStdP2PKHOutputScript";
"getNonStdP2SHAddresses" -> "getRedeemHash";
"getNonStdSHOutputScripts" -> "getRedeemHash";
"getOids" -> "liftIO\'";
"getOids" -> "procQueryOid";
"getOnRampData" -> "endpointGetData";
"getOnRampData" -> "executeEndpoint";
"getOrders" -> "withJWT";
"getProcedureDefinition" -> "liftIO\'";
"getProcedureDefinition" -> "rawGetProcedureDefinition";
"getPublicKeyHash" -> "exportPubKeyI";
"getPublicKeyHash" -> "hash160";
"getRawBackoffice" -> "apiRoot";
"getRawBackoffice" -> "backOffice";
"getRawBackoffice" -> "readFilePath";
"getRawBackoffice" -> "readFolderPath";
"getRawTransaction" -> "getL1Payload";
"getRawTransaction" -> "toHexByteString";
"getRawTransaction" -> "withVarInt";
"getRedeemHash" -> "buildL1Tx";
"getRedeemHash" -> "chunkData";
"getRedeemHash" -> "fromL1TxIdText";
"getRedeemHash" -> "hash160";
"getRedeemHash" -> "makeLenses";
"getRedeemHash" -> "o";
"getRedeemHash" -> "toAvailable";
"getRedeemHash" -> "toChange";
"getRedeemHash" -> "toFee";
"getRedeemHash" -> "toL1TxIdText";
"getRedeemHash" -> "toPay";
"getSchemaDescription" -> "liftIO\'";
"getSchemaDescription" -> "liftMigrationRunner";
"getSig" -> "derPrefix";
"getSig" -> "lengthSig";
"getSigInputs" -> "coinsToSatoshis";
"getSigInputs" -> "getStdP2PKHOutputScript";
"getSignatures" -> "getSig";
"getStdElectrumXScriptHash" -> "getStdP2PKHOutputScript";
"getStdElectrumXScriptHash" -> "sha256";
"getStdP2PKHOutputScript" -> "getPublicKeyHash";
"getStylopayUser\'" -> "getCustomer";
"getStylopayUser\'" -> "getUser";
"getStylopayUser\'" -> "isCompletedComplianceStatus";
"getStylopayUser\'" -> "runStylopayApp";
"getStylopayUser\'" -> "updateComplianceStatus";
"getToken" -> "logInfo";
"getToken" -> "mkStylopayAPI";
"getTransaction" -> "logInfo";
"getTransaction" -> "mkStylopayAPI";
"getTransaction" -> "refreshToken";
"getTransaction\'" -> "getTransaction";
"getTransaction\'" -> "getUser";
"getTransaction\'" -> "runStylopayApp";
"getUnspentReceipts" -> "a";
"getUnspentReceipts" -> "logInfo";
"getUnspentReceipts" -> "toResponse";
"getUser" -> "getUser\'";
"getUserProfile" -> "getUserProfile\'";
"getVarInt" -> "w";
"getWalletAddress" -> "logInfo";
"getWalletAddress" -> "toResponse";
"getWalletBalance" -> "logInfo";
"getWalletBalance" -> "mkStylopayAPI";
"getWalletBalance" -> "refreshToken";
"getWalletBalance" -> "toResponse";
"getWalletBalance\'" -> "getUser";
"getWalletBalance\'" -> "getWalletBalance";
"getWalletBalance\'" -> "runStylopayApp";
"getWalletReceipts" -> "logInfo";
"getWalletReceipts" -> "offset";
"getWalletReceipts" -> "toResponse";
"grab" -> "a";
"guarantee" -> "fromGeneric";
"guarantee" -> "toGeneric";
"guarantee" -> "toGeneric\'";
"hash160" -> "sha256";
"hash256ToHexByteString" -> "maxBytesOnInputSript";
"hash256ToHexByteString" -> "maxBytesOnStack";
"hash256ToHexByteString" -> "minAmount";
"hash256ToHexByteString" -> "toHexByteString";
"hoistClientEnv" -> "hoistClientEnv_";
"hoistClientEnv_" -> "runWithLatencyMetric";
"hoistClientEnv_" -> "toError";
"identifier" -> "a";
"identifier" -> "lang";
"info" -> "logWith";
"ingressAction" -> "broadcastL1Tx";
"ingressAction" -> "buildL1Tx";
"ingressAction" -> "liftEither";
"ingressAction" -> "logInfo";
"ingressAction" -> "tcpClientConfigFromEnv";
"ingressAction" -> "txId";
"initClientSession" -> "describeSchemaMismatch";
"initClientSession" -> "rawGetProcedureDefinition";
"initClientSession" -> "rawGetSchemaDescription";
"inputToMaybeAddress" -> "fromAddress";
"inputToMaybeAddress" -> "toL1Address\'";
"insertCommonCode" -> "addApiCommonCode";
"insertCommonCode" -> "apiRoot";
"insertCommonCode" -> "backOffice";
"insertCommonCode" -> "deployBackOfficeApi";
"insertCommonCode" -> "namespace";
"instantiate" -> "a";
"instantiate" -> "liftEither";
"insufficientFundsOrderState" -> "mkUpdOrderState";
"intersperseList" -> "a";
"intersperseM" -> "a";
"intersperseM" -> "intersperseMapM";
"intersperseMapList" -> "a";
"invalidParams" -> "a";
"invalidParams" -> "mkRespError";
"isBadDocumentsResponse" -> "getUser";
"isBadDocumentsResponse" -> "getUserProfile";
"isBadDocumentsResponse" -> "isBadComplianceStatus";
"isBadDocumentsResponse" -> "process";
"isBadDocumentsResponse" -> "storeUser";
"isBadDocumentsResponse" -> "updateComplianceStatus";
"isErrorE" -> "a";
"isLeftE" -> "a";
"isNoneOf" -> "a";
"isRightE" -> "a";
"isStyopayError" -> "filter";
"joinE" -> "a";
"jwtDecode" -> "a";
"jxtToHex" -> "sanitiseJson";
"kycConf" -> "configurationOption";
"kycConf" -> "info";
"l1BlockSyncThread" -> "evolveAfterEvent";
"l1BlockSyncThread" -> "initialState";
"l1BlockUnserialize" -> "getRawTransaction";
"l1BlockUnserialize" -> "parseL1Tx";
"l1BlockUnserialize" -> "withVarInt";
"l1NodeClient" -> "adaptProc";
"l1NodeClient" -> "callL1Client";
"l1NodeClient" -> "coreProcess";
"l1NodeClient" -> "l1Processes";
"l1NodeClient" -> "subscribeL1Client";
"l1Process" -> "passAlongSide";
"l1Processes" -> "l1Process";
"l1Processes" -> "network";
"l2MessageFromPayload" -> "jwtDecode";
"l2TxFrom" -> "buildNewReceipts";
"l2TxFrom" -> "buildPreviousReceipts";
"lang" -> "defRowName";
"lang" -> "parseCsqlText";
"lastCatalogPoint" -> "gGetBlockCatalog";
"levelTick" -> "workStep";
"liftIO\'" -> "a";
"liftMigrationRunner" -> "translateError";
"liftMigrationRunner\'" -> "a";
"listUtxo" -> "apiCall";
"listUtxo" -> "l1BlockUnserialize";
"listenChannel" -> "toConnectionInfo";
"literalFormOptions" -> "a";
"literalFormOptions" -> "literalFormOptions";
"literalFormOptions" -> "quoteToDot";
"literalFormOptions" -> "toQueryName";
"literalJsonOptions" -> "a";
"literalJsonOptions" -> "literalJsonOptions";
"literalJsonOptions" -> "toQueryName";
"loadTestStats" -> "runRaw";
"logE" -> "logging";
"logI" -> "logging";
"logI" -> "runInternalApp";
"logI" -> "withColog";
"logWith" -> "a";
"logWith" -> "blockExplorerAPI";
"logWith" -> "blockExplorerApp";
"logWith" -> "executeTx";
"logWith" -> "paren";
"logWith" -> "runApp";
"logWith" -> "runTransaction";
"logging" -> "a";
"logging" -> "componentMain";
"logging" -> "configurationFile";
"logging" -> "connectorMetrics";
"logging" -> "createPubKeyCoinReq";
"logging" -> "createPubKeyCoinReqLimitOffset";
"logging" -> "decodeJson";
"logging" -> "endpointGetData";
"logging" -> "endpointPostData";
"logging" -> "getData";
"logging" -> "getUnspentReceipts";
"logging" -> "getWalletAddress";
"logging" -> "getWalletBalance";
"logging" -> "getWalletReceipts";
"logging" -> "o";
"logging" -> "readFileConf";
"logging" -> "setHandlerOptions";
"logging" -> "toConnectionInfo";
"logging" -> "toHttpEndpoint";
"logicExpresion" -> "_and_";
"logicExpresion" -> "_current_timestamp_";
"logicExpresion" -> "_div_";
"logicExpresion" -> "_eq_";
"logicExpresion" -> "_ge_";
"logicExpresion" -> "_gt_";
"logicExpresion" -> "_isLike_";
"logicExpresion" -> "_isNotNull_";
"logicExpresion" -> "_isNull_";
"logicExpresion" -> "_le_";
"logicExpresion" -> "_lt_";
"logicExpresion" -> "_minus_";
"logicExpresion" -> "_not_";
"logicExpresion" -> "_or_";
"logicExpresion" -> "_plus_";
"logicExpresion" -> "_times_";
"logicExpresion" -> "identifier";
"logicExpresion" -> "logicExpresion";
"logicExpresion" -> "parens";
"logicExpresion" -> "parensArg";
"logicExpresion" -> "rawTable";
"logicExpresion" -> "scopedField";
"logicExpresion" -> "sqlLiteral";
"ltcServer" -> "executeTx";
"mailgun" -> "convertContent";
"mailgun" -> "mkMetrics";
"mailgun" -> "runL1IngressConnector";
"mainLoop" -> "commitChanges";
"mainLoop" -> "mainLoop";
"mainLoop" -> "tickStep";
"makeFieldsQuery" -> "a";
"makeFieldsQuery" -> "onFirst";
"makeFieldsQuery" -> "queryOptions";
"makeFieldsQuery" -> "toLowerHead";
"makeFieldsQuery" -> "toQueryName";
"makeFieldsQuery" -> "validate";
"makeFieldsXco" -> "a";
"makeFieldsXco" -> "cb911Options";
"makeFieldsXco" -> "makeFieldsXcoSpecial";
"makeFieldsXco" -> "mkTruliooMetrics";
"makeFieldsXco" -> "runTruliooConnector";
"makeFieldsXco" -> "withJWT";
"makeFieldsXcoSpecial" -> "a";
"makeFieldsXcoSpecial" -> "cb911Options";
"makeFieldsXcoSpecial" -> "truliooOptions";
"makeLenses" -> "a";
"makeLenses" -> "buildXcoFullNode";
"makeLenses" -> "debug";
"makeLenses" -> "desc";
"makeLenses" -> "dockerImageExists";
"makeLenses" -> "dockerLogin";
"makeLenses" -> "dockerPull";
"makeLenses" -> "dockerPush";
"makeLenses" -> "error";
"makeLenses" -> "filter";
"makeLenses" -> "info";
"makeLenses" -> "mkSVContext";
"makeLenses" -> "newLogger";
"makeLenses" -> "onFunded";
"makeLenses" -> "runCB911Api";
"makeLenses" -> "runNotifierConnector";
"makeLenses" -> "runOfferConnector";
"makeLenses" -> "runStylopayWebApp";
"makeLenses" -> "stylopayWebAPI";
"makeLenses" -> "stylopayWebApp";
"makeLenses" -> "tag";
"mapError" -> "a";
"mapError" -> "toServantError";
"massReplace" -> "a";
"massReplace" -> "massReplace";
"maxBytesOnInputSript" -> "buildCustomL1Tx";
"maxBytesOnInputSript" -> "chunkData";
"maxBytesOnInputSript" -> "extractDataFromCustomL1Tx";
"maxBytesOnInputSript" -> "getNonStdElectrumXScriptHash";
"maxBytesOnInputSript" -> "getNonStdP2PKHOutputScript";
"maxBytesOnInputSript" -> "getNonStdP2PKHScript";
"maxBytesOnInputSript" -> "getNonStdP2SHAddresses";
"maxBytesOnInputSript" -> "getNonStdSHOutputScripts";
"maybeToMonoid" -> "a";
"methodNotFound" -> "mkRespError";
"metricGatherFunction" -> "unionAllFunctions";
"migrateOnRamp" -> "connectToDb";
"migrateOnRamp" -> "readTransFolder";
"migrateOnRamp" -> "startMigration";
"migrateOnRamp" -> "translationsFolder";
"migrationScript" -> "a";
"migrationScript" -> "createTranslations";
"migrationScript" -> "dropNamespace";
"migrationScript" -> "executeApis";
"migrationScript" -> "executeSection";
"migrationScript" -> "getEnvArgs";
"migrationScript" -> "internalSch";
"migrationScript" -> "namespace";
"migrationScript" -> "publicSch";
"migrationScript" -> "setUpPersistentTables";
"migrationScript" -> "testSchm";
"migrationScript" -> "typesSch";
"minEnv" -> "getOnRampData";
"minEnv" -> "postOnRampData";
"minEnv" -> "requestOptions";
"minEnv" -> "retryDefPolicy";
"minEnv" -> "shouldRetry";
"minEnv" -> "threshold";
"minEnv" -> "toHttpEndpoint";
"mkAckMetric" -> "defLatency";
"mkAckMetric" -> "mkInfo";
"mkAsyncVerify" -> "mkVerify";
"mkEmail" -> "massReplace";
"mkError" -> "a";
"mkInfo" -> "tags";
"mkInitTx" -> "mkContainer";
"mkInitTx" -> "mkOrgAccount";
"mkInitTx" -> "mkOrgAgent";
"mkInitTx" -> "mkOrganization";
"mkMetrics" -> "mkInfo";
"mkOfferMetrics" -> "defLatency";
"mkOfferMetrics" -> "mkInfo";
"mkOrgAccount" -> "mkContainer";
"mkOrganization" -> "mkContainer";
"mkSVContext" -> "createMetrics";
"mkSVContext" -> "metrics";
"mkSqlQuery" -> "bigQuerySQL";
"mkSqlQuery" -> "toOrderSQL";
"mkTruliooMetrics" -> "defLatency";
"mkTruliooMetrics" -> "mkInfo";
"mkVerifyDocument" -> "mkVerify";
"mkVerifyIdentity" -> "mkVerify";
"modifyJson" -> "modifyJson";
"monoidToMaybe" -> "a";
"namespace" -> "execute\'";
"namespace" -> "liftMigrationRunner\'";
"namespace" -> "sqlSchema";
"netL1Option" -> "mainNetOption";
"netL1Option" -> "testNetOption";
"network" -> "amountFor";
"network" -> "bluePointsNet";
"network" -> "buildAndSignL2Tx";
"network" -> "fromXcoAmount";
"network" -> "fromXcoOffset";
"network" -> "offset";
"network" -> "offsetFor";
"network" -> "parseL2Tx";
"network" -> "parseL2TxWithSigs";
"network" -> "receipts";
"network" -> "showXcoAddress";
"network" -> "testBluePointsNet";
"network" -> "toPubKeyHash";
"network" -> "toXcoAmount";
"network" -> "toXcoOffset";
"network" -> "txId";
"network" -> "txIdHex";
"networkSimulation" -> "executeCMD";
"networkSimulation" -> "lastHeight";
"networkSimulation" -> "simulateNSteps";
"newBuckzyEndpoints" -> "getWalletBalance";
"newBuckzyEndpoints" -> "logInfo";
"newBuckzyEndpoints" -> "newBuckzyEndpoints_";
"newBuckzyEndpoints" -> "txId";
"newBuckzyEndpoints_" -> "a";
"newBuckzyEndpoints_" -> "hoistClientEnv";
"newBuckzyEndpoints_" -> "mkContainer";
"newBuckzyEndpoints_" -> "o";
"newEGifterEndpoints" -> "getEGifterTokenOnRamp";
"newEGifterEndpoints" -> "getOrdersPageSize";
"newEGifterEndpoints" -> "getProductPageSize";
"newEGifterEndpoints" -> "mkCreateOrder";
"newEGifterEndpoints" -> "newEGifterEndpoints_";
"newEGifterEndpoints" -> "o";
"newEGifterEndpoints_" -> "differenceDenominations";
"newEGifterEndpoints_" -> "differenceProducts";
"newEGifterEndpoints_" -> "hoistClientEnv";
"newEGifterEndpoints_" -> "runProductPuller";
"newLogger" -> "onRampApi";
"newLogger" -> "sendToOnRamp";
"newMerchant" -> "withJWT";
"newOrder" -> "withJWT";
"newStorageIO" -> "newNotificationIO";
"newStorageIO" -> "newStoreTxIO";
"newStoreTxIO" -> "emptySummary";
"noHaltingEvents" -> "onNewBlock";
"nonExistingL1BlockId" -> "wordToId32B";
"notifierAction" -> "convertToEvents";
"notifierAction" -> "logInfo";
"notifierAction" -> "pushEvent";
"notifierApp" -> "createContext";
"notifierApp" -> "notifierAPI";
"notifierApp" -> "readerServer";
"notifierApp" -> "secureContext";
"notifyResponse" -> "postOnRampData";
"o" -> "a";
"o" -> "closeCalls";
"o" -> "o";
"objectKey" -> "toObjectKey";
"objectKey\'" -> "toObjectKey\'";
"offset" -> "a";
"offsetList" -> "a";
"offsetList" -> "offset";
"onErrorCall" -> "a";
"onErrorCall" -> "logError";
"onErrorCall" -> "metrics";
"onFirst" -> "a";
"onFunded" -> "onFundedBuckzy";
"onFunded" -> "onFundedEGifter";
"onFunded" -> "onFundedStylopay";
"onFunded" -> "onManualData";
"onFunded" -> "runWithLatencyMetric";
"onFundedBuckzy" -> "fromBuckzyResponse";
"onFundedBuckzy" -> "logInfo";
"onFundedBuckzy" -> "toFundedBuckzy";
"onFundedBuckzy" -> "withTokenRefresher";
"onFundedEGifter" -> "error";
"onFundedEGifter" -> "fromCentDenomination";
"onFundedEGifter" -> "fromEGifterResponse";
"onFundedEGifter" -> "insufficientFundsOrderState";
"onFundedEGifter" -> "toFundedGiftCard";
"onFundedEGifter" -> "toOrderNumber";
"onFundedStylopay" -> "addCustomerCard";
"onFundedStylopay" -> "addFundsToWallet";
"onFundedStylopay" -> "logError";
"onManualData" -> "mkUpdOrderState";
"onNewBlock" -> "addBlockToLevel";
"onNewBlock" -> "levelTick";
"onNewBlock" -> "storeBlock";
"onNotification" -> "connect";
"onNotification" -> "grab";
"onNotification" -> "listenChannel";
"onrampConfig" -> "addOnRampSecret";
"onrampConfig" -> "checkSplice";
"onrampConfig" -> "createKeyPair";
"onrampConfig" -> "describeExtractError";
"onrampConfig" -> "extractSecrets";
"onrampConfig" -> "onrampConfigFilePath";
"onrampConfig" -> "rawOnrampConfigFile";
"onrampConfig" -> "toPubKey";
"onrampConfigFromRaw" -> "validateOnrampConfig";
"onrampMiddleware" -> "decodeJson";
"onrampMiddleware" -> "encodeJson";
"op0" -> "makeLenses";
"op0" -> "makePrisms";
"outputToMaybeAddress" -> "toAddress";
"outputToMaybeAddress" -> "toL1Address\'";
"paramGenerator" -> "booleanGenerator";
"paramGenerator" -> "escapePostgreString";
"paramGenerator" -> "faitCurrencyGenerator";
"paramGenerator" -> "indexGenerator";
"paramGenerator" -> "isTextBased";
"paramGenerator" -> "merchantNameGenerator";
"paramGenerator" -> "passportNumberGenerator";
"paramGenerator" -> "pubkeyGenerator";
"paramGenerator" -> "userNameGenerator";
"paramGenerator" -> "uuidGenerator";
"paramGenerator" -> "xcoAddressGenerator";
"paramGenerator" -> "xcoAmountGenerator";
"parameters" -> "fromParam";
"parameters" -> "toParam";
"parameters" -> "userIdParam";
"paren" -> "a";
"parens" -> "a";
"parens" -> "lang";
"parensArg" -> "commaSep";
"parensArg" -> "parens";
"parseCountryCode" -> "allCurrencies";
"parseCountryCode" -> "parseCountryCode";
"parseCsqlText" -> "parseStm";
"parseCsqlText" -> "stripFeatures";
"parseCurrencyCode" -> "a";
"parseCurrencyCode" -> "parseCurrencyCode";
"parseFile" -> "getLanguage";
"parseFirebaseResults" -> "analyticsConf";
"parseFirebaseResults" -> "createContext";
"parseFirebaseResults" -> "formatFrom";
"parseFirebaseResults" -> "formatTo";
"parseFirebaseResults" -> "fromTimeToValue";
"parseFirebaseResults" -> "readFileConf";
"parseFirebaseResults" -> "toOrderBy";
"parseFirebaseResults" -> "toTimeToValue";
"parseL1Tx" -> "a";
"parseL1Tx" -> "fromHexByteString";
"parseL1Tx" -> "l2MessageFromPayload";
"parseL2Tx" -> "decodeMessage";
"parseL2TxWithSigs" -> "decodeMessage";
"parsePayload" -> "fromBase64ByteString";
"parsePayload" -> "toB64Payload";
"parseSignature" -> "fromBase64ByteString";
"parseSignature" -> "toB64Sign";
"parseStm" -> "whiteSpace";
"parseTags" -> "parseTag";
"parseTransaction" -> "fromHexBString";
"parseVersion" -> "makeLenses";
"parseVersion" -> "parseVersion";
"parsingOptionsWith" -> "parsingOptionsWithNull";
"parsingOptionsWithNull" -> "capitalize";
"partialMetricsArgs" -> "parseTags";
"partialMetricsOpts" -> "exportMetric";
"partialMetricsOpts" -> "info";
"partialMetricsOpts" -> "partialMetricsArgs";
"patchOrder" -> "ackAction";
"patchOrder" -> "mkAckMetric";
"patchOrder" -> "runAckConnector";
"patchOrder" -> "withJWT";
"pattern" -> "a";
"pattern" -> "makeLenses";
"pattern" -> "runBennuPay";
"pattern" -> "toBennuPayReq";
"payloadToid32B" -> "error";
"payloadToid32B" -> "fakeBLockIdForTest";
"payloadToid32B" -> "nonExistingL1BlockId";
"performAction" -> "a";
"pinUpdate" -> "logInfo";
"pinUpdate" -> "mkStylopayAPI";
"pinUpdate" -> "refreshToken";
"pinUpdate\'" -> "getUser";
"pinUpdate\'" -> "pinUpdate";
"pinUpdate\'" -> "runStylopayApp";
"postNewStateToOnRamp" -> "postOnRampData";
"postOnRampData" -> "endpointPostData";
"postOnRampData" -> "executeEndpoint";
"powerSet" -> "transpiledToSql";
"preComputeBlockThread" -> "evolveAfterEvent";
"preProcess" -> "a";
"preProcess" -> "addApiCommonCode";
"preProcess" -> "describeSchemaMismatch";
"preProcess" -> "dropNamespace";
"preProcess" -> "escapePostgreString";
"preProcess" -> "executeTests";
"preProcess" -> "exportEndpoint";
"preProcess" -> "getDefinedProcedures";
"preProcess" -> "getSchemaDescription";
"preProcess" -> "namespace";
"preProcess" -> "readFilePath";
"preProcess" -> "reportCoverage";
"preProcess" -> "reportTableSize";
"preProcess" -> "runAndRollback";
"preProcess" -> "runMigrationScript";
"preProcess" -> "runSqlStms";
"preProcess" -> "sqlPreProcess";
"preProcess" -> "sqlSection";
"preference" -> "a";
"prepareRemoveOp" -> "dbGet";
"printAndReThrow" -> "a";
"printAndReThrow" -> "deployMetricsApi";
"printAndReThrow" -> "describeSchemaMismatch";
"printAndReThrow" -> "explainCsqError";
"printAndReThrow" -> "metrics";
"printAndReThrow" -> "removeSecretsFromErrorMsg";
"printSqlFunction" -> "a";
"printSqlFunction" -> "escapePostgreString";
"printSqlFunction" -> "offsetList";
"printSqlFunction" -> "prefixRow";
"printSqlFunction" -> "printRow";
"printTestTrace" -> "liftIO\'";
"procQuery" -> "a";
"process" -> "addL1Block";
"process" -> "checkReorg";
"process" -> "deleteCatalogAtPoint";
"process" -> "prepareRemoveOp";
"process" -> "processCacheOp";
"process" -> "runAck";
"process" -> "runBennupay";
"process" -> "runChargebacks911";
"process" -> "runPaymentProcessors";
"process" -> "runPhone";
"process" -> "runSeon";
"process" -> "sendMail";
"processBuckzy" -> "fromBuckzyResponse";
"processBuckzy" -> "logInfo";
"processBuckzy" -> "postNewStateToOnRamp";
"processBuckzy" -> "withTokenRefresher";
"processEGifter" -> "filter";
"processEGifter" -> "fromEGifterResponse";
"processEGifter" -> "fromOrderNumber";
"processEGifter" -> "getOrdersPageSize";
"processEGifter" -> "isPotentiallyExecuted";
"processEGifter" -> "postNewStateToOnRamp";
"pullerJob" -> "collectProducts";
"pullerJob" -> "differenceDenominations";
"pullerJob" -> "differenceProducts";
"pullerJob" -> "filter";
"pullerJob" -> "fromEGifterDenomination";
"pullerJob" -> "fromEGifterProduct";
"pullerJob" -> "getOnRampData";
"pullerJob" -> "newBuckzyEndpoints";
"pullerJob" -> "newEGifterEndpoints";
"pullerJob" -> "postOnRampData";
"pullerJob" -> "processBuckzy";
"pullerJob" -> "processEGifter";
"pullerJob" -> "toProviderMetrics";
"pushEvent" -> "createContext";
"pushEvent" -> "makeLenses";
"pushEvent" -> "pushEventApi";
"pushEvents" -> "filter";
"pushEvents" -> "groupBy2";
"pushEvents" -> "logInfo";
"pushEvents" -> "sendEvents";
"putInQueueL2" -> "receipts";
"queryOptions" -> "signQuery";
"queryOptions" -> "toLowerHead";
"queryOptions" -> "toQueryName";
"quoteToDot" -> "a";
"randomlyPickOne" -> "a";
"rawConstraint" -> "_as_";
"rawConstraint" -> "_check_";
"rawConstraint" -> "_constraint_";
"rawConstraint" -> "_from_";
"rawConstraint" -> "_where_";
"rawConstraint" -> "a";
"rawConstraint" -> "commaSep1";
"rawConstraint" -> "identifier";
"rawConstraint" -> "logicExpresion";
"rawConstraint" -> "rowName";
"rawConstraint" -> "tableName";
"rawGetSchemaDescription" -> "modifyJson";
"rawGetSchemaDescription" -> "schemaContentQuery";
"rawOnrampConfigFile" -> "onrampConfig";
"rawTable" -> "_check_";
"rawTable" -> "_constraint_";
"rawTable" -> "_default_";
"rawTable" -> "_foreignKey_";
"rawTable" -> "_notNull_";
"rawTable" -> "_null_";
"rawTable" -> "_primaryKey_";
"rawTable" -> "_references_";
"rawTable" -> "_table_";
"rawTable" -> "_unique_";
"rawTable" -> "analyzeInput";
"rawTable" -> "fieldName";
"rawTable" -> "identifier";
"rawTable" -> "logicExpresion";
"rawTable" -> "makeLenses";
"rawTable" -> "parens";
"rawTable" -> "parensArg";
"rawTable" -> "tableName";
"readBlock" -> "blockIdFilePath";
"readFileConf" -> "runApp";
"readFileConf" -> "startApp";
"readFilePath" -> "a";
"readFilePath" -> "executeTests";
"readFilePath" -> "filter";
"readFilePath" -> "liftIO\'";
"readFilePath" -> "liftMigrationRunner";
"readFolderPath" -> "readFilePath";
"readNextModule" -> "a";
"readNextModule" -> "checkParsedOk";
"readNextModule" -> "runRaw";
"readTransFile" -> "parseFile";
"readTransFolder" -> "checkMissing";
"readTransFolder" -> "readTransFile";
"readTsql" -> "csqlTranspiler";
"readTsql" -> "explainCsqError";
"readTsql" -> "readTsql";
"readTsql" -> "runTranspilerFinalStep";
"readTsql" -> "runTranspilerNext";
"readTsql" -> "runTsql";
"readerServer" -> "a";
"readerServer" -> "analyticsAPI";
"readerServer" -> "blockquerierAPI";
"readerServer" -> "broadcasterAPI";
"readerServer" -> "kycBackofficeAPI";
"readerServer" -> "kycInternalAPI";
"readerServer" -> "notifierAPI";
"readerServer" -> "nt";
"readerServer" -> "runEffects";
"readerServer" -> "secureContext";
"readerServer" -> "secureProxyCtx";
"readerServer" -> "server";
"readerServer" -> "svApi";
"readerServer" -> "validateAndBroadcast";
"refreshToken" -> "getToken";
"refreshToken" -> "logInfo";
"refreshTokenOnRamp" -> "fromBearerTokenResponse";
"refreshTokenOnRamp" -> "logInfo";
"refreshTokenOnRamp" -> "updateTokenOnRamp";
"removeClient" -> "mkOfferMetrics";
"removeClient" -> "toProviderMetrics";
"repeatActionOnNotification" -> "grab";
"repeatActionOnNotification" -> "listenChannel";
"repeatActionOnNotification" -> "logInfo";
"repeatActionOnNotification" -> "onNotification";
"replace" -> "mkInfo";
"replace" -> "runAppWithMetrics";
"replace" -> "runAppWithMetricsM";
"replace" -> "serveHttp";
"replace" -> "serveHttpSettings";
"replace" -> "serveHttpWithMetrics";
"replace" -> "w";
"replaceCard" -> "logInfo";
"replaceCard" -> "mkStylopayAPI";
"replaceCard" -> "refreshToken";
"replaceCard\'" -> "getUser";
"replaceCard\'" -> "replaceCard";
"replaceCard\'" -> "runStylopayApp";
"reportCoverage" -> "liftIO\'";
"reportCoverage" -> "liftMigrationRunner";
"reportSubstepTimings" -> "liftIO\'";
"reportTableSize" -> "liftIO\'";
"reportTableSize" -> "liftMigrationRunner";
"reportTableSize" -> "tableSizesFrom";
"requestOptions" -> "defaultOpts";
"requestOptions" -> "repeatActionOnNotification";
"reserved" -> "lang";
"reservedOp" -> "lang";
"retryDefPolicy" -> "threshold";
"rowName" -> "identifier";
"runAck" -> "a";
"runAck" -> "logError";
"runAck" -> "logInfo";
"runAck" -> "runWithLatencyMetric";
"runAckConnector" -> "ackAction";
"runAckConnector" -> "connectorAppFlow";
"runAckConnector" -> "metrics";
"runAckConnector" -> "runAppConnector";
"runAddCard" -> "addCard";
"runAddCard" -> "logInfo";
"runAddCard" -> "runStylopayEndpoint";
"runAddCard" -> "toStylopayCancelled";
"runAddCard" -> "toStylopaySuccess";
"runAndRollback" -> "a";
"runAndRollback" -> "liftIO\'";
"runAndRollback" -> "liftMigrationRunner\'";
"runApi" -> "a";
"runApi" -> "runApi\'";
"runApiGetNonStdRawTx" -> "apiCall";
"runApiGetNonStdRawTx" -> "fromL1TxIdText";
"runApiGetNonStdRawTx" -> "runApi\'";
"runApiGetNonStdRawTx" -> "txId";
"runApiGetRawTx" -> "apiCall";
"runApiGetRawTx" -> "fromL1TxIdText";
"runApiGetRawTx" -> "runApi\'";
"runApiGetRawTx" -> "txId";
"runApiSendTx" -> "apiCall";
"runApiSendTx" -> "getRawTxHex";
"runApiSendTx" -> "runApi\'";
"runApp" -> "addCors";
"runApp" -> "bchServer";
"runApp" -> "blockExplorerApp";
"runApp" -> "btcServer";
"runApp" -> "createApp";
"runApp" -> "createContext";
"runApp" -> "ethServer";
"runApp" -> "info";
"runApp" -> "jsonToPayload";
"runApp" -> "logI";
"runApp" -> "ltcServer";
"runApp" -> "mkSVContext";
"runApp" -> "serveHttp";
"runApp" -> "serveHttpSettings";
"runApp" -> "serveHttpWithMetrics";
"runApp" -> "startApp";
"runApp" -> "toPort";
"runApp" -> "validateAndBroadcast";
"runApp" -> "xcoServer";
"runAppConnector" -> "connect";
"runAppConnector" -> "envConn";
"runAppConnector" -> "logInfo";
"runAppConnector" -> "metrics";
"runAppConnector" -> "runApp";
"runAppWithMetrics" -> "metrics";
"runAppWithMetrics" -> "runApp";
"runAppWithMetrics" -> "runIfEnableApp";
"runAppWithMetricsM" -> "metrics";
"runAppWithMetricsM" -> "runApp";
"runAppWithMetricsM" -> "runIfEnableApp";
"runBackofficeApp" -> "runApp";
"runBackofficeApp" -> "startApp";
"runBennuPay" -> "encodeJson";
"runBennuPay" -> "formatBenupayResp";
"runBennuPay" -> "sha256";
"runBennuPay" -> "toOrder";
"runBennupay" -> "logInfo";
"runBennupay" -> "runWithLatencyMetric";
"runCB911Api" -> "newOrder";
"runCB911Api" -> "requestJWT";
"runCardstream" -> "cardExpiryGregorian";
"runCardstream" -> "emptyNewRequest";
"runCardstream" -> "error";
"runCardstream" -> "getEnv";
"runCardstream" -> "logError";
"runCardstream" -> "runCardstreamApi";
"runCardstream" -> "runWithLatencyMetric";
"runCardstream" -> "validate";
"runCardstreamApi" -> "newTransaction";
"runChargebacks911" -> "emptyOrder";
"runChargebacks911" -> "emptyTransaction";
"runChargebacks911" -> "getEnv";
"runChargebacks911" -> "logError";
"runChargebacks911" -> "runCB911Api";
"runChargebacks911" -> "runWithLatencyMetric";
"runColog" -> "a";
"runColog" -> "withColog";
"runCommandWithSecrets" -> "runWithSecrets";
"runCommandWithSecrets" -> "stringify";
"runCustomTcpApiGetUTXOlist" -> "apiTcpCall";
"runCustomTcpApiGetUTXOlist" -> "getNonStdElectrumXScriptHash";
"runCustomTcpApiGetUTXOlist" -> "runTcpApi";
"runCustomTcpApiGetUTXOlist" -> "scriptHash";
"runEffects" -> "a";
"runEffects" -> "mapError";
"runEffects" -> "runColog";
"runEffects" -> "runS3Storage";
"runEffects" -> "runSqlRestApi";
"runEvaluation" -> "a";
"runFundWallet" -> "fundWallet";
"runFundWallet" -> "logInfo";
"runFundWallet" -> "runStylopayEndpoint";
"runFundWallet" -> "toStylopayCancelled";
"runFundWallet" -> "toStylopaySuccess";
"runIfEnableApp" -> "runApp";
"runInternalApp" -> "a";
"runInternalApp" -> "runApp";
"runInternalApp" -> "startApp";
"runL1IngressConnector" -> "connectorAppFlow";
"runL1IngressConnector" -> "ingressAction";
"runL1IngressConnector" -> "metrics";
"runL1IngressConnector" -> "runAppConnector";
"runL2IngressConnector" -> "defLatency";
"runL2IngressConnector" -> "runWithLatencyMetric";
"runLoop" -> "runIsTxConsumer";
"runMailgun" -> "mailgun";
"runMigration" -> "a";
"runMigration" -> "externalExtensionSchema";
"runMigration" -> "initClientSession";
"runMigration" -> "namespace";
"runMigration" -> "runMigrationRaw";
"runMigration" -> "setExternalExtensions";
"runMigration" -> "setFunctionNameSpace";
"runMigrationScript" -> "a";
"runMigrationScript" -> "csqlTranspiler";
"runMigrationScript" -> "runTranspilerFinalStep";
"runMocked" -> "runWith";
"runNotifierConnector" -> "connectorAppFlow";
"runNotifierConnector" -> "notifierAction";
"runNotifierConnector" -> "runAppConnector";
"runOfferConnector" -> "connectorAppFlow";
"runOfferConnector" -> "newBuckzyEndpoints";
"runOfferConnector" -> "newEGifterEndpoints";
"runOfferConnector" -> "onFunded";
"runOfferConnector" -> "runAppConnector";
"runOfferConnector" -> "toProviderMetrics";
"runPaymentProcessors" -> "a";
"runPaymentProcessors" -> "runCardstream";
"runPaymentProcessors" -> "runPaymentz";
"runPaymentz" -> "deriveBrand";
"runPaymentz" -> "getEnv";
"runPaymentz" -> "parseDec";
"runPaymentz" -> "paymentzAuth";
"runPaymentz" -> "paymentzBasic";
"runPaymentz" -> "paymentzTokenized";
"runPhone" -> "sendSMS";
"runPostgrestInstance" -> "connectionWorker";
"runPostgrestInstance" -> "createDbStructure";
"runPostgrestInstance" -> "metrics";
"runPostgrestInstance" -> "onrampMiddleware";
"runPostgrestInstance" -> "qrEncodeService";
"runPostgrestInstance" -> "serveHttp";
"runPostgrestInstance" -> "sqlMetricsMiddleware";
"runProcesses" -> "a";
"runProcesses" -> "autoMigrateDb";
"runProcesses" -> "cancelProcess";
"runProcesses" -> "consumeBlockThread";
"runProcesses" -> "coreProcess";
"runProcesses" -> "dbAccess";
"runProcesses" -> "debug";
"runProcesses" -> "l1BlockSyncThread";
"runProcesses" -> "l1NodeClient";
"runProcesses" -> "l1Processes";
"runProcesses" -> "lastCatalogPoint";
"runProcesses" -> "network";
"runProcesses" -> "preComputeBlockThread";
"runProcesses" -> "runStorage";
"runProcesses" -> "runWithSeed";
"runProcesses" -> "startProcessProfile";
"runProcesses" -> "syntheticL1";
"runProductPuller" -> "pullerJob";
"runProductPuller" -> "runPullerJob";
"runPullerJob" -> "minEnv";
"runPullerJob" -> "pullerJob";
"runPullerJob" -> "runStatusPuller";
"runRaw" -> "liftIO\'";
"runRefreshTokenJob" -> "minEnv";
"runRefreshTokenJob" -> "newEGifterEndpoints_";
"runRefreshTokenJob" -> "refreshTokenOnRamp";
"runRefreshTokenJob" -> "toProviderMetrics";
"runRequest" -> "onRampApi";
"runS3Storage" -> "a";
"runS3Storage" -> "getFile";
"runS3Storage" -> "uploadFile";
"runSeon" -> "getEnv";
"runSeon" -> "runSeonFraudApi";
"runSeon" -> "runWithLatencyMetric";
"runSeon" -> "toLogError";
"runSeonFraudApi" -> "fraudRequest";
"runSeonFraudApi" -> "getWalletBalance";
"runSeonFraudApi" -> "newBuckzyEndpoints";
"runSeonFraudApi" -> "withTokenRefresher";
"runSqlRestApi" -> "a";
"runSqlRestApi" -> "callSetDocumentUploaded";
"runSqlRestApi" -> "callUserExists";
"runSqlRestApi" -> "callValidateJWTOnBackoffice";
"runSqlStms" -> "a";
"runSqlStms" -> "executeSqlStms\'";
"runSqlStms" -> "liftIO\'";
"runSqlStms" -> "runSqlStmsWith";
"runSqlStmsWith" -> "liftMigrationRunner";
"runSqlStmsWith" -> "preProcess";
"runSqlStmsWith" -> "transpileCSqlWith";
"runStatusPuller" -> "pullerJob";
"runStatusPuller" -> "runPullerJob";
"runStylopayApp" -> "a";
"runStylopayEndpoint" -> "logError";
"runStylopayEndpoint" -> "runStylopayApp";
"runStylopayWebApp" -> "addCors";
"runStylopayWebApp" -> "serveHttpSettings";
"runStylopayWebApp" -> "stylopayWebApp";
"runTcpApi" -> "a";
"runTcpApiGetEstimateFeeKB" -> "apiTcpCall";
"runTcpApiGetEstimateFeeKB" -> "runTcpApi";
"runTcpApiGetRawTx" -> "a";
"runTcpApiGetRawTx" -> "apiTcpCall";
"runTcpApiGetRawTx" -> "consumeBlockThread";
"runTcpApiGetRawTx" -> "fromL1TxIdText";
"runTcpApiGetRawTx" -> "makeLenses";
"runTcpApiGetRawTx" -> "runTcpApi";
"runTcpApiGetRawTx" -> "txId";
"runTcpApiGetUTXOlist" -> "apiTcpCall";
"runTcpApiGetUTXOlist" -> "getStdElectrumXScriptHash";
"runTcpApiGetUTXOlist" -> "runTcpApi";
"runTcpApiGetUTXOlist" -> "scriptHash";
"runTcpApiSendTx" -> "apiTcpCall";
"runTcpApiSendTx" -> "getRawTxHex";
"runTcpApiSendTx" -> "runTcpApi";
"runTest" -> "runAndRollback";
"runTestColog" -> "a";
"runTransaction" -> "executeTx";
"runTransaction" -> "toTransaction";
"runTransaction" -> "toTxId";
"runTransaction" -> "txId";
"runTransaction" -> "validateTransaction";
"runTranspilerFinalStep" -> "_and_";
"runTranspilerFinalStep" -> "_as_";
"runTranspilerFinalStep" -> "_cast_";
"runTranspilerFinalStep" -> "_check_";
"runTranspilerFinalStep" -> "_constraint_";
"runTranspilerFinalStep" -> "_current_timestamp_";
"runTranspilerFinalStep" -> "_default_";
"runTranspilerFinalStep" -> "_div_";
"runTranspilerFinalStep" -> "_eq_";
"runTranspilerFinalStep" -> "_foreignKey_";
"runTranspilerFinalStep" -> "_from_";
"runTranspilerFinalStep" -> "_ge_";
"runTranspilerFinalStep" -> "_gt_";
"runTranspilerFinalStep" -> "_isLike_";
"runTranspilerFinalStep" -> "_isNotNull_";
"runTranspilerFinalStep" -> "_isNull_";
"runTranspilerFinalStep" -> "_le_";
"runTranspilerFinalStep" -> "_lt_";
"runTranspilerFinalStep" -> "_minus_";
"runTranspilerFinalStep" -> "_notNull_";
"runTranspilerFinalStep" -> "_not_";
"runTranspilerFinalStep" -> "_null_";
"runTranspilerFinalStep" -> "_or_";
"runTranspilerFinalStep" -> "_plus_";
"runTranspilerFinalStep" -> "_primaryKey_";
"runTranspilerFinalStep" -> "_references_";
"runTranspilerFinalStep" -> "_table_";
"runTranspilerFinalStep" -> "_times_";
"runTranspilerFinalStep" -> "_unique_";
"runTranspilerFinalStep" -> "_where_";
"runTranspilerFinalStep" -> "commaSep";
"runTranspilerFinalStep" -> "commaSep1";
"runTranspilerFinalStep" -> "computeOutput";
"runTranspilerFinalStep" -> "defRowName";
"runTranspilerFinalStep" -> "fieldName";
"runTranspilerFinalStep" -> "identifier";
"runTranspilerFinalStep" -> "parens";
"runTranspilerFinalStep" -> "parensArg";
"runTranspilerFinalStep" -> "rowName";
"runTranspilerFinalStep" -> "scopedField";
"runTranspilerFinalStep" -> "sqlLiteral";
"runTranspilerFinalStep" -> "tableName";
"runTranspilerFinalStep" -> "transpiledToSql";
"runTranspilerFinalStep" -> "whiteSpace";
"runTranspilerNext" -> "analyzeInput";
"runTranspilerNext" -> "parseCsqlText";
"runTsql" -> "instantiate";
"runTsql" -> "mainLoop";
"runTsqlTestsBatch" -> "connectToDb";
"runTsqlTestsBatch" -> "createTranslations";
"runTsqlTestsBatch" -> "csqlArgs";
"runTsqlTestsBatch" -> "dropNamespace";
"runTsqlTestsBatch" -> "executeApis";
"runTsqlTestsBatch" -> "executeSection";
"runTsqlTestsBatch" -> "executeTests";
"runTsqlTestsBatch" -> "expectedTestsFor";
"runTsqlTestsBatch" -> "getEnvArgs";
"runTsqlTestsBatch" -> "internalSch";
"runTsqlTestsBatch" -> "msgCodes";
"runTsqlTestsBatch" -> "namespace";
"runTsqlTestsBatch" -> "printAndReThrow";
"runTsqlTestsBatch" -> "publicSch";
"runTsqlTestsBatch" -> "readTransFolder";
"runTsqlTestsBatch" -> "reportCoverage";
"runTsqlTestsBatch" -> "reportTableSize";
"runTsqlTestsBatch" -> "runMigrationScript";
"runTsqlTestsBatch" -> "runSqlStms";
"runTsqlTestsBatch" -> "runTest";
"runTsqlTestsBatch" -> "stringify\'";
"runTsqlTestsBatch" -> "testSchemaContent";
"runTsqlTestsBatch" -> "translationsFolder";
"runTsqlTestsBatch" -> "typesSch";
"runWith" -> "runLoop";
"runWithLatencyMetric" -> "a";
"runWithLatencyMetric" -> "currentTimeInMilliseconds";
"runWithSecrets" -> "currentExecEnviorment";
"runWithSecrets" -> "describeExtractError";
"runWithSecrets" -> "extractSecrets";
"runWithSecrets" -> "onrampConfig";
"runWithSeed" -> "a";
"sanitiseJson" -> "configSanitise";
"satoshisToCoins" -> "createMessage";
"satoshisToCoins" -> "decodeMessage";
"satoshisToCoins" -> "getSig";
"satoshisToCoins" -> "sanitiseJson";
"satoshisToCoins" -> "toL1Transaction";
"satoshisToCoins" -> "unitChange";
"saveTestStats" -> "runRaw";
"schemaContentQuery" -> "tableSizesFrom";
"scopedField" -> "fieldName";
"scopedField" -> "reservedOp";
"scopedField" -> "rowName";
"scriptHash" -> "sha256";
"scriptHash" -> "toHexByteString";
"scriptSig" -> "maybeScriptInput";
"scriptSig" -> "toNetwork";
"scriptSigAsm" -> "scriptSig";
"scriptSigHex" -> "scriptSig";
"secretVarsTool" -> "a";
"secretVarsTool" -> "addOnRampSecret";
"secretVarsTool" -> "createKeyPair";
"secretVarsTool" -> "describeConfigError";
"secretVarsTool" -> "onrampConfigFilePath";
"secretVarsTool" -> "runCommandWithSecrets";
"secretVarsToolParser" -> "info";
"secureContext" -> "addQuotesForRead";
"secureContext" -> "authCheck";
"sendEvents" -> "filter";
"sendEvents" -> "getClient";
"sendEvents" -> "sendConn";
"sendMail" -> "emailType";
"sendMail" -> "emailTypeText";
"sendMail" -> "fillEmail";
"sendMail" -> "getEnv";
"sendMail" -> "isOnramp";
"sendMail" -> "runMailgun";
"sendMail" -> "toLogError";
"sendRawTransaction" -> "apiCall";
"sendSMS" -> "logError";
"sendToOnRamp" -> "createApp";
"sendToOnRamp" -> "runApp";
"sendToOnRamp" -> "runRequest";
"sendToOnRamp" -> "svApi";
"serveDocAndApp" -> "blockquerierAPI";
"serveDocAndApp" -> "broadcasterAPI";
"serveDocAndApp" -> "generateDoc";
"serveDocAndApp" -> "readerServer";
"serveHttp" -> "runApp";
"serveHttp" -> "runIfEnableHttpApp";
"serveHttp" -> "tags";
"serveHttpSettings" -> "runApp";
"serveHttpSettings" -> "runIfEnableHttpApp";
"serveHttpSettings" -> "tags";
"serveHttpWithMetrics" -> "metrics";
"serveHttpWithMetrics" -> "runApp";
"serveHttpWithMetrics" -> "runIfEnableHttpApp";
"serveHttpWithMetrics" -> "tags";
"server" -> "a";
"server" -> "activateCard\'";
"server" -> "addCustomer\'";
"server" -> "bchServer";
"server" -> "blockUnblockCard\'";
"server" -> "btcServer";
"server" -> "clientsHttp";
"server" -> "dropClient";
"server" -> "ethServer";
"server" -> "getAnalytics";
"server" -> "getAuthDocumentApi";
"server" -> "getCVV\'";
"server" -> "getCards\'";
"server" -> "getCustomer\'";
"server" -> "getDocumentApi";
"server" -> "getL2Transactions";
"server" -> "getL2TransactionsByAddress";
"server" -> "getL2TransactionsByPubKey";
"server" -> "getL2TransactionsByTxid";
"server" -> "getStylopayUser\'";
"server" -> "getTransaction\'";
"server" -> "getUnspentReceipts";
"server" -> "getWalletAddress";
"server" -> "getWalletBalance";
"server" -> "getWalletBalance\'";
"server" -> "getWalletReceipts";
"server" -> "ltcServer";
"server" -> "pinUpdate\'";
"server" -> "pushEvents";
"server" -> "replaceCard\'";
"server" -> "subscribeToEvents";
"server" -> "unmaskCard\'";
"server" -> "uploadDocumentApi";
"server" -> "validateJWT";
"server" -> "xcoServer";
"serverWithDoc" -> "generateBackDoc";
"serverWithDoc" -> "generateDoc";
"serverWithDoc" -> "generateInternalDoc";
"serverWithDoc" -> "kycBackofficeAPI";
"serverWithDoc" -> "kycInternalAPI";
"serverWithDoc" -> "readerServer";
"serverWithDoc" -> "svApi";
"setDocumentUploaded" -> "kycConf";
"setDocumentUploaded" -> "readFileConf";
"setDocumentUploaded" -> "runBackofficeApp";
"setDocumentUploaded" -> "runInternalApp";
"setDocumentUploaded\'" -> "onRampApi";
"setDocumentUploaded\'" -> "setDocumentUploaded\'";
"setDocumentUploaded\'" -> "userExists\'";
"setDocumentUploaded\'" -> "validateJWT\'";
"setExternalExtensions" -> "a";
"setExternalExtensions" -> "execute\'";
"setFunctionNameSpace" -> "externalExtensionSchema";
"setFunctionNameSpace" -> "sqlSchema";
"setFunctionNameSpace" -> "toSql";
"setInitialCatalog" -> "deleteCatalogAtPoint";
"setInitialCatalog" -> "lastCatalogPoint";
"setInitialCatalog" -> "onNewBlock";
"setInitialCatalog" -> "saveCatalogPointAt";
"setInitialCatalogs" -> "setInitialCatalog";
"setUpCoreExtension" -> "executeSection";
"setUpCoreExtension" -> "runWithSecrets";
"setUpCoreExtension" -> "secretVarsTool";
"setUpCoreExtension" -> "secretVarsToolParser";
"setUpCoreExtension" -> "stringify";
"setUpCoreExtension" -> "stringify\'";
"setUpPersistentTables" -> "dropNamespace";
"setUpPersistentTables" -> "executeSection";
"setUpPersistentTables" -> "getEnvArgs";
"setUpPersistentTables" -> "getSchemaDescription";
"setUpPersistentTables" -> "namespace";
"setUpPersistentTables" -> "setUpCoreExtension";
"shouldRetry" -> "isOk";
"shouldRetry" -> "metrics";
"shouldRetry" -> "notOk";
"shouldRetry\'" -> "runL2IngressConnector";
"showSeonError" -> "a";
"showSeonError" -> "decodedAs";
"showSeonError" -> "encodeJson";
"showSeonError" -> "error";
"showSeonError" -> "fromList";
"showSeonError" -> "o";
"showSeonError" -> "runRequest";
"showXcoAddress" -> "getVarInt";
"signL1Tx\'" -> "getSigInputs";
"signL1Tx\'" -> "network";
"signL1Tx\'" -> "validateSigInputs";
"signQuery" -> "massReplace";
"signRawTransaction" -> "apiCall";
"signRequest" -> "a";
"signRequest" -> "signQuery";
"signTransactionData" -> "buildSigInput";
"simulateNSteps" -> "simulateStep";
"simulateStep" -> "lastHeight";
"splitText" -> "a";
"sqlLiteral" -> "_false_";
"sqlLiteral" -> "_null_";
"sqlLiteral" -> "_true_";
"sqlLiteral" -> "a";
"sqlLiteral" -> "lang";
"sqlMetricsMiddleware" -> "withMetricContentType";
"sqlPreProcess" -> "checkMissingTranslation";
"sqlPreProcess" -> "checkNotAllowedWords";
"sqlPreProcess" -> "removeComments";
"sqlPreProcess" -> "replace";
"sqlRestArg" -> "dbUriArgs";
"sqlRestArg" -> "partialMetricsArgs";
"sqlSchema" -> "toSql";
"sqlSection" -> "liftIO\'";
"sqlSection" -> "liftMigrationRunner\'";
"stageCheckerDesc" -> "removeSecretsFromErrorMsg";
"stageCheckerDesc" -> "sqlPreProcess";
"startApp" -> "analyticsAPI";
"startApp" -> "apiWithDoc";
"startApp" -> "basicAuthServerContext";
"startApp" -> "kycBackofficeAPIWithDoc";
"startApp" -> "kycInternalAPIWithDoc";
"startApp" -> "readerServer";
"startApp" -> "serveDocAndApp";
"startApp" -> "serverWithDoc";
"startEventApp" -> "basicAuthServerContext";
"startEventApp" -> "eventApiWithDoc";
"startEventApp" -> "eventServeDocAndApp";
"startMigration" -> "a";
"startMigration" -> "csqlArgs";
"startMigration" -> "executeTillOneSucceed";
"startMigration" -> "generateUpgradeStrategy";
"startMigration" -> "getEnvArgs";
"startMigration" -> "getSchemaDescription";
"startMigration" -> "ignoredSch1";
"startMigration" -> "ignoredSch2";
"startMigration" -> "internalSch";
"startMigration" -> "migrationScript";
"startMigration" -> "msgCodes";
"startMigration" -> "printAndReThrow";
"startMigration" -> "runMigrationScript";
"startMigration" -> "setUpPersistentTables";
"startMigration" -> "stringify\'";
"startNotifier" -> "newServerState";
"startNotifier" -> "notifierApp";
"storeBlock" -> "blockIdFilePath";
"storeBlock" -> "createFile";
"storeBlock" -> "getBlockId";
"storeL1" -> "fromL1TxId";
"storeL1" -> "txId";
"storeL2" -> "fromXcoAmount";
"storeL2" -> "receipts";
"storeL2" -> "toHexByteString";
"storeTxInL1" -> "putInQueueL1";
"storeTxInL1" -> "storeL1";
"storeTxInL2" -> "putInQueueL2";
"storeTxInL2" -> "storeL2";
"storeUser" -> "storeUser\'";
"stringify" -> "encodeJson";
"stringify\'" -> "encodeJson";
"stylopayWebApp" -> "genAuthServerContext";
"stylopayWebApp" -> "server";
"stylopayWebApp" -> "stylopayWebAPI";
"subscribeL1Client" -> "getBestBlockhash";
"subscribeL1Client" -> "getBlockHeader\'";
"subscribeL1Client" -> "runApi\'";
"subscribeToEvents" -> "addClient";
"subscribeToEvents" -> "clientTalk";
"subscribeToEvents" -> "disconnectClient";
"subscribeToEvents" -> "logInfo";
"syntheticL1" -> "createRandomInitialState";
"syntheticL1" -> "networkSimulation";
"tSizeQuery" -> "escapePostgreString";
"tableName" -> "identifier";
"tableSizesFrom" -> "tSizeQuery";
"tableSizesFrom" -> "tableListQuery";
"tags" -> "toListTags";
"tcpClientConfigFromEnv" -> "getEnv";
"testBluePointsNet" -> "getVarInt";
"testSchemaContent" -> "testSchemaContentQuery";
"testSchemaContentQuery" -> "typesDescriptionQuery";
"threshold" -> "a";
"threshold" -> "createRequest";
"threshold" -> "executeRequest";
"threshold" -> "toL1TxBody";
"threshold" -> "toL2TxBody";
"tickStep" -> "executeAlternatives";
"tickStep" -> "executeDependencies";
"tickStep" -> "executeStep";
"toAddress" -> "toScriptOutput";
"toBase64" -> "jxtToHex";
"toBennuPayReq" -> "formatCreditCard";
"toBlock" -> "fromHexBSBlock";
"toBlock" -> "toHexBString";
"toError" -> "toResponseCode";
"toExport" -> "toExportable";
"toExport" -> "toType";
"toExportable" -> "tags";
"toExportable" -> "toPair";
"toExportable" -> "withTags";
"toFee" -> "toAvailable";
"toFee" -> "toChange";
"toFee" -> "toPay";
"toFundedBuckzy" -> "toDoubleCent";
"toGeneric" -> "a";
"toGeneric\'" -> "a";
"toGeneric\'" -> "toGeneric";
"toHexBString" -> "toHexByteString";
"toJxt" -> "parsePayload";
"toJxt" -> "parseSignature";
"toL1Address\'" -> "toAdd";
"toL1Address\'" -> "toNetwork";
"toL1Transaction" -> "a";
"toL1Transaction" -> "toTxTuple";
"toL1TxBody" -> "fromAdd";
"toL1TxBody" -> "fromL1TxId";
"toL1TxIdText" -> "toHexByteString";
"toL2TxBody" -> "amountFor";
"toL2TxBody" -> "fromXcoAmount";
"toL2TxBody" -> "fromXcoOffset";
"toL2TxBody" -> "offsetFor";
"toL2TxBody" -> "txIdHex";
"toLogError" -> "a";
"toLogError" -> "logError";
"toLowerHead" -> "a";
"toMetric" -> "toExport";
"toObjectKey" -> "fileId";
"toOrderBy" -> "capitalize";
"toOrderBy" -> "splitText";
"toParam" -> "toTimeToValue";
"toProviderMetrics" -> "a";
"toProviderMetrics" -> "mkProvMetric";
"toPubKey" -> "checkSplice";
"toPubKey" -> "describeConfigError";
"toPubKey" -> "rawOnrampConfigFile";
"toPubKey" -> "validateOnrampConfig";
"toPubKeyHash" -> "exportPubKeyI";
"toPubKeyHash" -> "sha256";
"toQueryName" -> "a";
"toRaw" -> "a";
"toRaw" -> "coinsToSatoshis";
"toRaw" -> "fromAdd";
"toResponse" -> "getData";
"toResponse" -> "logInfo";
"toResponse" -> "mkError";
"toResponseCode" -> "connectorAppFlow";
"toResponseCode" -> "getOnRampData";
"toResponseCode" -> "inBatches";
"toResponseCode" -> "onePerRequest";
"toResponseCode" -> "postOnRampData";
"toResponseCode" -> "runAppConnector";
"toScriptInput" -> "toNetwork";
"toStylopaySuccess" -> "a";
"toTimeToValue" -> "a";
"toTimeToValue" -> "timeToValue";
"toTransaction" -> "broadcastBCH";
"toTransaction" -> "broadcastBTC";
"toTransaction" -> "broadcastETH";
"toTransaction" -> "broadcastLTC";
"toTransaction" -> "broadcastXCO";
"toTransaction" -> "executeTx";
"toTransaction" -> "fromL1TxId";
"toTransaction" -> "parseTransaction";
"toTransaction" -> "storeTxInL1";
"toTransaction" -> "toL1Transaction";
"toTransaction" -> "txIdHash";
"toTxTuple" -> "fromSatoshi";
"toTxTuple" -> "inputToMaybeAddress";
"toTxTuple" -> "offset";
"toTxTuple" -> "outputToMaybeAddress";
"toTxTuple" -> "scriptHash";
"toTxTuple" -> "txIdHash";
"toXcoOffset" -> "fromHexByteString";
"translateError" -> "escapePostgreString";
"translateError" -> "executeAnySql";
"translateError" -> "executeSqlExpr";
"translateError" -> "initClientSession";
"transpileCSql" -> "transpileCSqlWith";
"transpileCSqlWith" -> "a";
"transpileCSqlWith" -> "runTranspilerNext";
"transpileCSqlWith" -> "sqlPreProcess";
"transpiledToSql" -> "allCountries";
"truliooOptions" -> "capitalize";
"tx2jxt" -> "createMessage";
"txId" -> "sanitiseJson";
"txIdHash" -> "a";
"txIdHash" -> "hash256ToHexByteString";
"txIdHex" -> "hash256ToHexByteString";
"txIdHex" -> "txId";
"typeInfoEndpoint" -> "typesDescriptionQuery";
"typesDescriptionQuery" -> "onrampConfig";
"unmaskCard" -> "logInfo";
"unmaskCard" -> "mkStylopayAPI";
"unmaskCard" -> "refreshToken";
"unmaskCard\'" -> "getUser";
"unmaskCard\'" -> "runStylopayApp";
"unmaskCard\'" -> "unmaskCard";
"unsignResponse" -> "a";
"unsignResponse" -> "decoded";
"unsignResponse" -> "fromList";
"unsignResponse" -> "runRequest";
"unsignResponse" -> "signQuery";
"unsignResponse" -> "signRequest";
"updateComplianceStatus" -> "updateComplianceStatus\'";
"updateComplianceStatus\'" -> "getUserProfile\'";
"updateComplianceStatus\'" -> "getUser\'";
"updateComplianceStatus\'" -> "internalAPI";
"updateComplianceStatus\'" -> "storeUser\'";
"updateComplianceStatus\'" -> "updateComplianceStatus\'";
"updateMerchant" -> "withJWT";
"updateModule" -> "preference";
"updateModule" -> "runRaw";
"updateModule" -> "w";
"updateTokenOnRamp" -> "postOnRampData";
"uploadDocument" -> "logInfo";
"uploadDocument" -> "mkStylopayAPI";
"uploadDocument" -> "refreshToken";
"uploadDocument" -> "setDocumentUploaded";
"uploadDocument" -> "uploadDocument\'";
"uploadDocument" -> "userExists";
"uploadDocumentApi" -> "doUpload";
"uploadDocumentApi" -> "throwBadRequest";
"uploadFile" -> "getEnv";
"uploadFile" -> "objectKey";
"uploadFile" -> "toInternalError";
"userNameGenerator" -> "indexGenerator";
"validSigns" -> "sanitiseJson";
"validSigns" -> "sha256";
"validate" -> "clientApi";
"validateAccessId" -> "a";
"validateAccessId" -> "validateAccessIdClient";
"validateAccessIdClient" -> "validateAccessIdApi";
"validateAndBroadcast" -> "cancelProcess";
"validateAndBroadcast" -> "metrics";
"validateAndBroadcast" -> "parseL2TxWithSigs";
"validateAndBroadcast" -> "sendToOnRamp";
"validateAndBroadcast" -> "startProcess";
"validateAndBroadcast" -> "startProcessProfile";
"validateAndBroadcast" -> "txId";
"validateBlock" -> "evolveChainState";
"validateBlock" -> "getLastBlock";
"validateInput" -> "toAvailable";
"validateInput" -> "toChange";
"validateInput" -> "toFee";
"validateInput" -> "toPay";
"validateJWT" -> "validate";
"validateRawTx" -> "a";
"validateRawTx" -> "evolveChainState";
"validateRawTx" -> "getLastBlock";
"validateRawTx" -> "l2MessageFromPayload";
"validateSigInputs" -> "validateMatchingOutput";
"validateSigInputs" -> "validateSigningKeys";
"validateSignature" -> "validSigns";
"validateSigningKeys" -> "coinsToSatoshis";
"validateSigningKeys" -> "fromAdd";
"validateSigningKeys" -> "fromAddressToL1Address";
"validateSigningKeys" -> "fromL1AddressToAddress";
"validateSigningKeys" -> "fromL1TxId";
"validateSigningKeys" -> "fromL1TxIdText";
"validateSigningKeys" -> "fromL1TxIdtoTxHash";
"validateSigningKeys" -> "satoshisToCoins";
"validateSigningKeys" -> "toAdd";
"validateSigningKeys" -> "toL1TxIdText";
"validateSigningKeys" -> "txIdHash";
"validateSigningKeys" -> "validate";
"verifyResult" -> "dbConsistencyCheck";
"verifyResult" -> "dbGet\'";
"verifyResult" -> "network";
"whiteSpace" -> "lang";
"withAppConnector" -> "a";
"withAppConnector" -> "connectorAppFlow";
"withAppConnector" -> "runAppConnector";
"withColog" -> "a";
"withEnvVarsOrFail" -> "a";
"withEnvVarsOrFail" -> "extractError";
"withEnvVarsOrFail" -> "fromGeneric";
"withL1Client" -> "a";
"withL1Client" -> "closeL1ClientConn";
"withL1Client" -> "l1ClientConn";
"withL1TcpClient" -> "a";
"withL1TcpClient" -> "closeL1TcpClientConn";
"withL1TcpClient" -> "l1TcpClientConn";
"withMetricContentType" -> "filter";
"withTags" -> "tags";
"withTokenRefresher" -> "a";
"withTokenRefresher" -> "logError";
"withVarInt" -> "getVarInt";
"workStep" -> "blockIdFilePath";
"workStep" -> "buildingBlockFilePath";
"workStep" -> "combineWithOffset";
"workStep" -> "fileRename";
"workStep" -> "isBuildingBlockComplete";
"writeOntoL1Blockchain" -> "embedIntoL1";
"writeOntoL1Blockchain" -> "listUtxo";
"writeOntoL1Blockchain" -> "sendRawTransaction";
"writeOntoL1Blockchain" -> "signRawTransaction";
"xcoServer" -> "executeTx";
}
