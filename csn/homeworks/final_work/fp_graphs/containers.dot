strict digraph deps {
"bcc" [style=solid];
"bicomps" [style=solid];
"buildG" [style=solid];
"chop" [style=solid];
"collect" [style=solid];
"components" [style=solid];
"contains" [style=solid];
"default" [style=solid];
"dff" [style=solid];
"dfs" [style=solid];
"do_label" [style=solid];
"draw" [style=solid];
"drawForest" [style=solid];
"drawTree" [style=solid];
"edges" [style=solid];
"flatten" [style=solid];
"flattenSCC" [style=solid];
"flattenSCCs" [style=solid];
"fmapTree" [style=solid];
"fold" [style=solid];
"foldTree" [style=solid];
"foldWithKey" [style=solid];
"generate" [style=solid];
"graphFromEdges" [style=solid];
"graphFromEdges\'" [style=solid];
"include" [style=solid];
"indegree" [style=solid];
"insertLookupWithKey\'" [style=solid];
"insertWithKey\'" [style=solid];
"insertWith\'" [style=solid];
"levels" [style=solid];
"mfixTree" [style=solid];
"outdegree" [style=solid];
"path" [style=solid];
"postOrd" [style=solid];
"postorder" [style=solid];
"postorderF" [style=solid];
"preArr" [style=solid];
"preorderF" [style=solid];
"preorderF\'" [style=solid];
"preorder\'" [style=solid];
"prune" [style=solid];
"reachable" [style=solid];
"reverseE" [style=solid];
"reverseTopSort" [style=solid];
"run" [style=solid];
"scc" [style=solid];
"stronglyConnComp" [style=solid];
"stronglyConnCompR" [style=solid];
"tabulate" [style=solid];
"topSort" [style=solid];
"transposeG" [style=solid];
"undirected" [style=solid];
"unfoldForest" [style=solid];
"unfoldForestM" [style=solid];
"unfoldForestM_BF" [style=solid];
"unfoldForestQ" [style=solid];
"unfoldTree" [style=solid];
"unfoldTreeM" [style=solid];
"unfoldTreeM_BF" [style=solid];
"vertices" [style=solid];
"" -> "bcc";
"" -> "buildG";
"" -> "components";
"" -> "dff";
"" -> "dfs";
"" -> "edges";
"" -> "flattenSCC";
"" -> "flattenSCCs";
"" -> "graphFromEdges";
"" -> "graphFromEdges\'";
"" -> "include";
"" -> "indegree";
"" -> "outdegree";
"" -> "path";
"" -> "reachable";
"" -> "reverseTopSort";
"" -> "scc";
"" -> "stronglyConnComp";
"" -> "stronglyConnCompR";
"" -> "topSort";
"" -> "transposeG";
"" -> "vertices";
"bcc" -> "bicomps";
"bcc" -> "dff";
"bcc" -> "do_label";
"bcc" -> "preArr";
"bicomps" -> "collect";
"chop" -> "chop";
"chop" -> "contains";
"chop" -> "include";
"collect" -> "collect";
"collect" -> "fold";
"collect" -> "foldWithKey";
"collect" -> "include";
"collect" -> "insertWithKey\'";
"collect" -> "insertWith\'";
"components" -> "dff";
"components" -> "undirected";
"dff" -> "dfs";
"dff" -> "vertices";
"dfs" -> "generate";
"dfs" -> "prune";
"do_label" -> "do_label";
"draw" -> "draw";
"drawForest" -> "drawTree";
"drawTree" -> "draw";
"edges" -> "vertices";
"flattenSCCs" -> "flattenSCC";
"fmapTree" -> "fmapTree";
"fmapTree" -> "mfixTree";
"foldWithKey" -> "drawForest";
"foldWithKey" -> "drawTree";
"foldWithKey" -> "flatten";
"foldWithKey" -> "fmapTree";
"foldWithKey" -> "fold";
"foldWithKey" -> "foldTree";
"foldWithKey" -> "foldWithKey";
"foldWithKey" -> "include";
"foldWithKey" -> "insertLookupWithKey\'";
"foldWithKey" -> "insertWithKey\'";
"foldWithKey" -> "insertWith\'";
"foldWithKey" -> "levels";
"foldWithKey" -> "unfoldForest";
"foldWithKey" -> "unfoldForestM";
"foldWithKey" -> "unfoldForestM_BF";
"foldWithKey" -> "unfoldTree";
"foldWithKey" -> "unfoldTreeM";
"foldWithKey" -> "unfoldTreeM_BF";
"generate" -> "generate";
"graphFromEdges\'" -> "graphFromEdges";
"mfixTree" -> "flatten";
"mfixTree" -> "mfixTree";
"path" -> "reachable";
"postOrd" -> "dff";
"postOrd" -> "postorderF";
"postorder" -> "postorderF";
"postorderF" -> "postorder";
"preArr" -> "preorderF";
"preArr" -> "tabulate";
"preorderF" -> "preorderF\'";
"preorderF\'" -> "preorder\'";
"preorder\'" -> "preorderF\'";
"prune" -> "chop";
"prune" -> "run";
"reachable" -> "dfs";
"reachable" -> "preorderF";
"reverseE" -> "edges";
"reverseTopSort" -> "postOrd";
"scc" -> "dfs";
"scc" -> "postOrd";
"scc" -> "transposeG";
"stronglyConnComp" -> "stronglyConnCompR";
"stronglyConnCompR" -> "graphFromEdges";
"stronglyConnCompR" -> "scc";
"topSort" -> "postOrd";
"transposeG" -> "buildG";
"transposeG" -> "reverseE";
"undirected" -> "buildG";
"undirected" -> "edges";
"undirected" -> "reverseE";
"unfoldForest" -> "unfoldTree";
"unfoldForestM" -> "unfoldTreeM";
"unfoldForestM_BF" -> "unfoldForestQ";
"unfoldForestQ" -> "bcc";
"unfoldForestQ" -> "buildG";
"unfoldForestQ" -> "components";
"unfoldForestQ" -> "dff";
"unfoldForestQ" -> "dfs";
"unfoldForestQ" -> "edges";
"unfoldForestQ" -> "flattenSCC";
"unfoldForestQ" -> "flattenSCCs";
"unfoldForestQ" -> "graphFromEdges";
"unfoldForestQ" -> "graphFromEdges\'";
"unfoldForestQ" -> "include";
"unfoldForestQ" -> "indegree";
"unfoldForestQ" -> "outdegree";
"unfoldForestQ" -> "path";
"unfoldForestQ" -> "reachable";
"unfoldForestQ" -> "reverseTopSort";
"unfoldForestQ" -> "scc";
"unfoldForestQ" -> "stronglyConnComp";
"unfoldForestQ" -> "stronglyConnCompR";
"unfoldForestQ" -> "topSort";
"unfoldForestQ" -> "transposeG";
"unfoldForestQ" -> "unfoldForestQ";
"unfoldForestQ" -> "vertices";
"unfoldTree" -> "unfoldForest";
"unfoldTreeM" -> "unfoldForestM";
"unfoldTreeM_BF" -> "unfoldForestQ";
}
