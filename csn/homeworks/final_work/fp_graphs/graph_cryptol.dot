strict digraph deps {
"__" [style=solid];
"aAnd" [style=solid];
"aBit" [style=solid];
"aCeilDiv" [style=solid];
"aCeilMod" [style=solid];
"aChar" [style=solid];
"aFin" [style=solid];
"aFreeTVar" [style=solid];
"aInf" [style=solid];
"aLenFromThenTo" [style=solid];
"aLiteral" [style=solid];
"aLogic" [style=solid];
"aMax" [style=solid];
"aMin" [style=solid];
"aMul" [style=solid];
"aNat" [style=solid];
"aNat\'" [style=solid];
"aRec" [style=solid];
"aSeq" [style=solid];
"aTVar" [style=solid];
"aTrue" [style=solid];
"aTuple" [style=solid];
"aWidth" [style=solid];
"aWord" [style=solid];
"abstractTypeTC" [style=solid];
"addDefEqn" [style=solid];
"addGoals" [style=solid];
"addHasGoal" [style=solid];
"addIncompatible" [style=solid];
"addLoadedModule" [style=solid];
"addModParams" [style=solid];
"addPrelude" [style=solid];
"addRenamerWarning" [style=solid];
"addSafety" [style=solid];
"addTNames" [style=solid];
"addTVarsDescsAfter" [style=solid];
"addTVarsDescsBefore" [style=solid];
"addToChar" [style=solid];
"addToComment" [style=solid];
"addToString" [style=solid];
"addUninterpWarning" [style=solid];
"addV" [style=solid];
"adjustField" [style=solid];
"aesFinalRound" [style=solid];
"aesInvFinalRound" [style=solid];
"aesInvRound" [style=solid];
"aesRound" [style=solid];
"alexGetByte" [style=solid];
"allDeclGroups" [style=solid];
"allNamesD" [style=solid];
"allProvers" [style=solid];
"allSatSMTResults" [style=solid];
"allSolvers" [style=solid];
"allTerms" [style=solid];
"alwaysQualify" [style=solid];
"anAdd" [style=solid];
"anError" [style=solid];
"andV" [style=solid];
"annotB" [style=solid];
"annotD" [style=solid];
"annotDs" [style=solid];
"annotParameterType" [style=solid];
"annotPrimType" [style=solid];
"annotPropSyn" [style=solid];
"annotTopDs" [style=solid];
"annotTySyn" [style=solid];
"annotTyThing" [style=solid];
"anonTyApp" [style=solid];
"anyJust" [style=solid];
"anyJust2" [style=solid];
"apSubstMaybe" [style=solid];
"apSubstTypeMapKeys" [style=solid];
"appTy" [style=solid];
"appTys" [style=solid];
"applyAESStateFunc" [style=solid];
"applySubst" [style=solid];
"applySubstGoals" [style=solid];
"applySubstPreds" [style=solid];
"applySubstToVar" [style=solid];
"ar0" [style=solid];
"ar1" [style=solid];
"ar2" [style=solid];
"ar3" [style=solid];
"arrayContents" [style=solid];
"arrayName" [style=solid];
"arrayPrim" [style=solid];
"asBatch" [style=solid];
"asBitsMap" [style=solid];
"asEApps" [style=solid];
"asIndex" [style=solid];
"asParamName" [style=solid];
"asPrim" [style=solid];
"asWordList" [style=solid];
"asWordVal" [style=solid];
"asciiMode" [style=solid];
"ashr" [style=solid];
"assertBVDivisor" [style=solid];
"assertIndexInBounds" [style=solid];
"assertIntDivisor" [style=solid];
"assocsSubst" [style=solid];
"assume" [style=solid];
"astOfCmd" [style=solid];
"at" [style=solid];
"backticks" [style=solid];
"badIsEnv" [style=solid];
"badUtf8" [style=solid];
"barrelShifter" [style=solid];
"binBV" [style=solid];
"binOp" [style=solid];
"binary" [style=solid];
"bindItVariable" [style=solid];
"bindItVariableVal" [style=solid];
"bindItVariables" [style=solid];
"bindType" [style=solid];
"bindVar" [style=solid];
"bindVarDirect" [style=solid];
"bindVarList" [style=solid];
"bitGreaterThan" [style=solid];
"bitLessThan" [style=solid];
"bitsValueLessThan" [style=solid];
"blackhole" [style=solid];
"boundLNames" [style=solid];
"boundNames" [style=solid];
"boundNamesSet" [style=solid];
"braces" [style=solid];
"brackets" [style=solid];
"branch" [style=solid];
"branchEnvs" [style=solid];
"browseCmd" [style=solid];
"browseMParams" [style=solid];
"browseNewtypes" [style=solid];
"browsePrimTys" [style=solid];
"browseTSyns" [style=solid];
"browseVars" [style=solid];
"bsig256_0" [style=solid];
"bsig256_1" [style=solid];
"bsig512_0" [style=solid];
"bsig512_1" [style=solid];
"buildSolverCtxt" [style=solid];
"builtInType" [style=solid];
"bumpCounter" [style=solid];
"bvVal" [style=solid];
"byteForChar" [style=solid];
"byteStringToInteger" [style=solid];
"cHead" [style=solid];
"cStateToH" [style=solid];
"cStateToInt" [style=solid];
"cStateUpdate" [style=solid];
"cacheCallStack" [style=solid];
"calc_k" [style=solid];
"canonicalFields" [style=solid];
"cantFindFile" [style=solid];
"catch" [style=solid];
"ccatV" [style=solid];
"cdCmd" [style=solid];
"ceilingV" [style=solid];
"ch" [style=solid];
"changeExport" [style=solid];
"char" [style=solid];
"checkArm" [style=solid];
"checkBase" [style=solid];
"checkDecl" [style=solid];
"checkDeclGroup" [style=solid];
"checkDecls" [style=solid];
"checkDocs" [style=solid];
"checkE" [style=solid];
"checkEnv" [style=solid];
"checkExpr" [style=solid];
"checkFixs" [style=solid];
"checkFun" [style=solid];
"checkHas" [style=solid];
"checkHasType" [style=solid];
"checkInfLength" [style=solid];
"checkKind" [style=solid];
"checkLabels" [style=solid];
"checkMatch" [style=solid];
"checkModule" [style=solid];
"checkModuleInstance" [style=solid];
"checkMonoB" [style=solid];
"checkNamingEnv" [style=solid];
"checkNewtype" [style=solid];
"checkNoParams" [style=solid];
"checkP" [style=solid];
"checkPPFloatFormat" [style=solid];
"checkParameterConstraints" [style=solid];
"checkParameterType" [style=solid];
"checkPrimType" [style=solid];
"checkProp" [style=solid];
"checkPropSyn" [style=solid];
"checkProver" [style=solid];
"checkRecUpd" [style=solid];
"checkSatNum" [style=solid];
"checkSchema" [style=solid];
"checkSigB" [style=solid];
"checkSigs" [style=solid];
"checkSingleModule" [style=solid];
"checkTShadowing" [style=solid];
"checkTUser" [style=solid];
"checkThat" [style=solid];
"checkTyParam" [style=solid];
"checkTyParams" [style=solid];
"checkTySyn" [style=solid];
"checkType" [style=solid];
"checkTypeIs" [style=solid];
"checkTypeOfKind" [style=solid];
"checkUnsolvable" [style=solid];
"checkValParams" [style=solid];
"cleanupError" [style=solid];
"cleanupErrors" [style=solid];
"clearEditPath" [style=solid];
"clearLoadedMod" [style=solid];
"cmdProveSat" [style=solid];
"cmpNameDisplay" [style=solid];
"cmpNameLexical" [style=solid];
"cmpValue" [style=solid];
"collectErrors" [style=solid];
"collectGoals" [style=solid];
"colon" [style=solid];
"combLoc" [style=solid];
"combine" [style=solid];
"combineCallStacks" [style=solid];
"combineMaps" [style=solid];
"comma" [style=solid];
"commaSep" [style=solid];
"commandList" [style=solid];
"commands" [style=solid];
"commitBranch" [style=solid];
"commitDirty" [style=solid];
"commitHash" [style=solid];
"commitShortHash" [style=solid];
"compareFixity" [style=solid];
"complementV" [style=solid];
"computeBlockingPred" [style=solid];
"computeEnv" [style=solid];
"computeExponent" [style=solid];
"computeFreeVarNames" [style=solid];
"computeModel" [style=solid];
"computePropIntervals" [style=solid];
"concatSeqMap" [style=solid];
"containsOverlap" [style=solid];
"convertible" [style=solid];
"cppKind" [style=solid];
"cryInfNat" [style=solid];
"cryIsEqual" [style=solid];
"cryIsFin" [style=solid];
"cryIsFinType" [style=solid];
"cryIsGeq" [style=solid];
"cryIsNotEqual" [style=solid];
"cryIsPrime" [style=solid];
"cryNoPrimError" [style=solid];
"cryUserError" [style=solid];
"cryptolTcContents" [style=solid];
"curLoc" [style=solid];
"curRange" [style=solid];
"customError" [style=solid];
"cvtK" [style=solid];
"deIfaceDecls" [style=solid];
"debugBlock" [style=solid];
"decSatNum" [style=solid];
"declHole" [style=solid];
"declareVar" [style=solid];
"declsLinter" [style=solid];
"defaultAndSimplify" [style=solid];
"defaultConfig" [style=solid];
"defaultFixity" [style=solid];
"defaultFreeVar" [style=solid];
"defaultLiterals" [style=solid];
"defaultPPOpts" [style=solid];
"defaultProver" [style=solid];
"defaultRW" [style=solid];
"defaultReplExpr" [style=solid];
"defaultReplExpr\'" [style=solid];
"defaultingSubst" [style=solid];
"defs" [style=solid];
"delayFill" [style=solid];
"destEProofAbs" [style=solid];
"destEProofApps" [style=solid];
"destETAbs" [style=solid];
"destETApps" [style=solid];
"desugarLiteral" [style=solid];
"dirty" [style=solid];
"displayCallStack" [style=solid];
"displayFields" [style=solid];
"displayOrder" [style=solid];
"displayVersion" [style=solid];
"distinctV" [style=solid];
"distrLoc" [style=solid];
"divV" [style=solid];
"doCheckType" [style=solid];
"doEval" [style=solid];
"doInst" [style=solid];
"doLoadModule" [style=solid];
"doSBVEval" [style=solid];
"doW4Eval" [style=solid];
"dropSeqMap" [style=solid];
"dropWhite" [style=solid];
"dump" [style=solid];
"dumpTestsCmd" [style=solid];
"dumpableType" [style=solid];
"duplicateModuleName" [style=solid];
"duplicates" [style=solid];
"eChar" [style=solid];
"eError" [style=solid];
"eFromTo" [style=solid];
"eFromToType" [style=solid];
"ePrim" [style=solid];
"eString" [style=solid];
"ecFractionV" [style=solid];
"ecNumberV" [style=solid];
"ecSplitV" [style=solid];
"ec_add" [style=solid];
"ec_add_nonzero" [style=solid];
"ec_double" [style=solid];
"ec_mult" [style=solid];
"ec_negate" [style=solid];
"ec_normalize" [style=solid];
"ec_sub" [style=solid];
"ec_twin_mult" [style=solid];
"editCmd" [style=solid];
"elseTry" [style=solid];
"emit" [style=solid];
"emitFancy" [style=solid];
"emitS" [style=solid];
"empty" [style=solid];
"emptyEnv" [style=solid];
"emptyGoals" [style=solid];
"emptyMGU" [style=solid];
"emptyNameMap" [style=solid];
"emptyRO" [style=solid];
"emptyRange" [style=solid];
"emptySubst" [style=solid];
"emptySupply" [style=solid];
"emptyTrie" [style=solid];
"endChar" [style=solid];
"endComment" [style=solid];
"endString" [style=solid];
"enumerateIntBits" [style=solid];
"enumerateIntBits\'" [style=solid];
"enumerateSeqMap" [style=solid];
"enumerateWordValue" [style=solid];
"enumerateWordValueRev" [style=solid];
"eqCombine" [style=solid];
"eqV" [style=solid];
"errorImportance" [style=solid];
"errorInFile" [style=solid];
"errorMessage" [style=solid];
"errorV" [style=solid];
"etaDelay" [style=solid];
"etaWord" [style=solid];
"evalBind" [style=solid];
"evalCmd" [style=solid];
"evalComp" [style=solid];
"evalDecl" [style=solid];
"evalDeclGroup" [style=solid];
"evalDecls" [style=solid];
"evalError" [style=solid];
"evalExpr" [style=solid];
"evalListEnv" [style=solid];
"evalMatch" [style=solid];
"evalNewtype" [style=solid];
"evalNewtypes" [style=solid];
"evalNumType" [style=solid];
"evalPanic" [style=solid];
"evalPrim" [style=solid];
"evalSel" [style=solid];
"evalSetSel" [style=solid];
"evalSpark" [style=solid];
"evalTF" [style=solid];
"evalTest" [style=solid];
"evalType" [style=solid];
"evalValType" [style=solid];
"exhaustiveTests" [style=solid];
"existVar" [style=solid];
"expV" [style=solid];
"expectFin" [style=solid];
"expectFun" [style=solid];
"expectRec" [style=solid];
"expectSeq" [style=solid];
"expectTuple" [style=solid];
"expected" [style=solid];
"expectedCoverage" [style=solid];
"explainUnsolvable" [style=solid];
"exportBind" [style=solid];
"exportDecl" [style=solid];
"exportNewtype" [style=solid];
"exportType" [style=solid];
"exprLinter" [style=solid];
"exprModName" [style=solid];
"exprSchema" [style=solid];
"exprToFieldPath" [style=solid];
"exprToNumT" [style=solid];
"exprType" [style=solid];
"extend" [style=solid];
"extendSubst" [style=solid];
"extractWordVal" [style=solid];
"f" [style=solid];
"failedToParameterizeModDefs" [style=solid];
"failsWith" [style=solid];
"fastSchemaOf" [style=solid];
"fastTypeOf" [style=solid];
"fieldDivideV" [style=solid];
"fieldSet" [style=solid];
"fillHole" [style=solid];
"filterNames" [style=solid];
"finNat\'" [style=solid];
"finType" [style=solid];
"finally" [style=solid];
"findCommand" [style=solid];
"findCommandExact" [style=solid];
"findFile" [style=solid];
"findModule" [style=solid];
"findNbCommand" [style=solid];
"fingerprint" [style=solid];
"fingerprintFile" [style=solid];
"finiteSeqMap" [style=solid];
"fixMap" [style=solid];
"fixNameDisp" [style=solid];
"fixUp" [style=solid];
"flam" [style=solid];
"flatGoal" [style=solid];
"flitDefaultCandidates" [style=solid];
"floatContents" [style=solid];
"floatFromBits" [style=solid];
"floatFromBits\'" [style=solid];
"floatFromRational" [style=solid];
"floatName" [style=solid];
"floatPrim" [style=solid];
"floatPrims" [style=solid];
"floatToBits" [style=solid];
"floatToExpr" [style=solid];
"floatToInteger" [style=solid];
"floatToRational" [style=solid];
"floorV" [style=solid];
"fmap\'" [style=solid];
"fmtModName" [style=solid];
"fnumTokens" [style=solid];
"focusModule" [style=solid];
"focusedEnv" [style=solid];
"foldlV" [style=solid];
"foldl\'V" [style=solid];
"forceValue" [style=solid];
"forceWordValue" [style=solid];
"fpAdd" [style=solid];
"fpBinArith" [style=solid];
"fpBinArithV" [style=solid];
"fpCheckStatus" [style=solid];
"fpConst" [style=solid];
"fpCvtFromRational" [style=solid];
"fpCvtToInteger" [style=solid];
"fpCvtToRational" [style=solid];
"fpDiv" [style=solid];
"fpEq" [style=solid];
"fpEqIEEE" [style=solid];
"fpFresh" [style=solid];
"fpFromBinary" [style=solid];
"fpFromInteger" [style=solid];
"fpFromRational" [style=solid];
"fpFromRationalLit" [style=solid];
"fpFromReal" [style=solid];
"fpGtIEEE" [style=solid];
"fpIsInf" [style=solid];
"fpIsNaN" [style=solid];
"fpLit" [style=solid];
"fpLtIEEE" [style=solid];
"fpMul" [style=solid];
"fpNaN" [style=solid];
"fpNeg" [style=solid];
"fpOpts" [style=solid];
"fpPP" [style=solid];
"fpPosInf" [style=solid];
"fpRel" [style=solid];
"fpRepr" [style=solid];
"fpReprOf" [style=solid];
"fpRndMode" [style=solid];
"fpRndRNA" [style=solid];
"fpRndRNE" [style=solid];
"fpRndRTN" [style=solid];
"fpRndRTP" [style=solid];
"fpRndRTZ" [style=solid];
"fpRound" [style=solid];
"fpRoundMode" [style=solid];
"fpRoundingMode" [style=solid];
"fpSize" [style=solid];
"fpSub" [style=solid];
"fpToBinary" [style=solid];
"fpToRational" [style=solid];
"fpToReal" [style=solid];
"fpTypeError" [style=solid];
"fpTypeMismatch" [style=solid];
"fracLit" [style=solid];
"freeParams" [style=solid];
"freshBV_" [style=solid];
"freshBoundedInt" [style=solid];
"freshName" [style=solid];
"freshParamName" [style=solid];
"freshSBool_" [style=solid];
"freshSInteger_" [style=solid];
"freshVar" [style=solid];
"freshenName" [style=solid];
"fromBigEndianSBS" [style=solid];
"fromBitsLE" [style=solid];
"fromBytes" [style=solid];
"fromDigit" [style=solid];
"fromGoals" [style=solid];
"fromIncPath" [style=solid];
"fromIntegerV" [style=solid];
"fromNat" [style=solid];
"fromProjectivePoint" [style=solid];
"fromSeq" [style=solid];
"fromStrLit" [style=solid];
"fromThenToV" [style=solid];
"fromToV" [style=solid];
"fromVBit" [style=solid];
"fromVFloat" [style=solid];
"fromVFun" [style=solid];
"fromVInteger" [style=solid];
"fromVNumPoly" [style=solid];
"fromVPoly" [style=solid];
"fromVRational" [style=solid];
"fromVRecord" [style=solid];
"fromVSeq" [style=solid];
"fromVTuple" [style=solid];
"fromVWord" [style=solid];
"fromWord32" [style=solid];
"fromWord64" [style=solid];
"fromWordVal" [style=solid];
"fromZV" [style=solid];
"fsep" [style=solid];
"fullyQualified" [style=solid];
"funLogger" [style=solid];
"genHelp" [style=solid];
"genIface" [style=solid];
"genInferInput" [style=solid];
"genLog" [style=solid];
"genRoot" [style=solid];
"generalize" [style=solid];
"genericPrimTable" [style=solid];
"generic_pad" [style=solid];
"generic_pad_chunks" [style=solid];
"geqByInterval" [style=solid];
"getAbstractTypes" [style=solid];
"getBoundInScope" [style=solid];
"getByteReader" [style=solid];
"getCallStack" [style=solid];
"getCallStacks" [style=solid];
"getChr" [style=solid];
"getDynEnv" [style=solid];
"getEditPath" [style=solid];
"getEvalEnv" [style=solid];
"getEvalOpts" [style=solid];
"getExprNames" [style=solid];
"getFocusedEnv" [style=solid];
"getFocusedModule" [style=solid];
"getGoals" [style=solid];
"getHasGoals" [style=solid];
"getIdent" [style=solid];
"getIface" [style=solid];
"getImportSource" [style=solid];
"getIncPath" [style=solid];
"getKnownUser" [style=solid];
"getLoaded" [style=solid];
"getLoadedMaybe" [style=solid];
"getLoadedMod" [style=solid];
"getLoadedModules" [style=solid];
"getLogger" [style=solid];
"getModName" [style=solid];
"getModNames" [style=solid];
"getModuleEnv" [style=solid];
"getMonoBinds" [style=solid];
"getNS" [style=solid];
"getName" [style=solid];
"getNameFormat" [style=solid];
"getNameSeeds" [style=solid];
"getNewtypes" [style=solid];
"getNum" [style=solid];
"getPPValOpts" [style=solid];
"getParamConstraints" [style=solid];
"getParamFuns" [style=solid];
"getParamTypes" [style=solid];
"getParams" [style=solid];
"getPrimMap" [style=solid];
"getPrompt" [style=solid];
"getPropertyNames" [style=solid];
"getProverConfig" [style=solid];
"getPutStr" [style=solid];
"getRW" [style=solid];
"getRange" [style=solid];
"getSHA256Sched" [style=solid];
"getSHA512Sched" [style=solid];
"getSearchPath" [style=solid];
"getSolver" [style=solid];
"getSolverConfig" [style=solid];
"getSpecCache" [style=solid];
"getStr" [style=solid];
"getSubst" [style=solid];
"getSupply" [style=solid];
"getSym" [style=solid];
"getTSyns" [style=solid];
"getTVars" [style=solid];
"getTypeNames" [style=solid];
"getUninterpFn" [style=solid];
"getUser" [style=solid];
"getUserProverValidate" [style=solid];
"getUserSatNum" [style=solid];
"getUserShowProverStats" [style=solid];
"goalToLitGoal" [style=solid];
"goalsFromList" [style=solid];
"greaterThanEqV" [style=solid];
"greaterThanV" [style=solid];
"groupDecls" [style=solid];
"guarded" [style=solid];
"guessPreProc" [style=solid];
"guessType" [style=solid];
"handleCtrlC" [style=solid];
"handleLogger" [style=solid];
"hang" [style=solid];
"happyError" [style=solid];
"hasAnyModName" [style=solid];
"hasParamModules" [style=solid];
"hash" [style=solid];
"hcat" [style=solid];
"helpCmd" [style=solid];
"hsep" [style=solid];
"iAdd" [style=solid];
"iAny" [style=solid];
"iAnyFin" [style=solid];
"iCeilDiv" [style=solid];
"iCeilMod" [style=solid];
"iConst" [style=solid];
"iDiv" [style=solid];
"iExp" [style=solid];
"iIntersect" [style=solid];
"iIsExact" [style=solid];
"iIsFin" [style=solid];
"iIsPosFin" [style=solid];
"iLenFromThenTo" [style=solid];
"iMax" [style=solid];
"iMin" [style=solid];
"iMod" [style=solid];
"iMul" [style=solid];
"iOverlap" [style=solid];
"iSub" [style=solid];
"iWidth" [style=solid];
"identText" [style=solid];
"ifTySynName" [style=solid];
"ifaceDeclsPrimMap" [style=solid];
"ifacePrimMap" [style=solid];
"ilam" [style=solid];
"importIface" [style=solid];
"importIfaces" [style=solid];
"importParamModule" [style=solid];
"importedModule" [style=solid];
"improveByDefaultingWithPure" [style=solid];
"improveEq" [style=solid];
"improveLit" [style=solid];
"improveProp" [style=solid];
"improveProps" [style=solid];
"improveSelector" [style=solid];
"inLocal" [style=solid];
"inNewScope" [style=solid];
"inRange" [style=solid];
"inRangeMb" [style=solid];
"includeFailed" [style=solid];
"indexBack" [style=solid];
"indexBack_bits" [style=solid];
"indexBack_int" [style=solid];
"indexBack_word" [style=solid];
"indexFront" [style=solid];
"indexFront_bits" [style=solid];
"indexFront_int" [style=solid];
"indexFront_word" [style=solid];
"indexPrim" [style=solid];
"indexWordValue" [style=solid];
"infFromThenV" [style=solid];
"infFromV" [style=solid];
"inferBinds" [style=solid];
"inferCArm" [style=solid];
"inferDs" [style=solid];
"inferMatch" [style=solid];
"inferModule" [style=solid];
"inferP" [style=solid];
"infiniteSeqMap" [style=solid];
"infix" [style=solid];
"infixPrimTy" [style=solid];
"infixl" [style=solid];
"infixr" [style=solid];
"initialModuleEnv" [style=solid];
"initialSHA224State" [style=solid];
"initialSHA256State" [style=solid];
"initialSHA384State" [style=solid];
"initialSHA512State" [style=solid];
"insertGoal" [style=solid];
"insertTM" [style=solid];
"insertTrie" [style=solid];
"insertWithTM" [style=solid];
"instTyName" [style=solid];
"instTyParams" [style=solid];
"instantiateExpr" [style=solid];
"instantiateModule" [style=solid];
"instantiateSchema" [style=solid];
"instantiateWith" [style=solid];
"instantiateWithNames" [style=solid];
"instantiateWithPos" [style=solid];
"int" [style=solid];
"intShifter" [style=solid];
"intToRational" [style=solid];
"intV" [style=solid];
"intVal" [style=solid];
"integer" [style=solid];
"integerToBigNat" [style=solid];
"integerToChar" [style=solid];
"integralBinary" [style=solid];
"interactive" [style=solid];
"interactiveConfig" [style=solid];
"interactiveName" [style=solid];
"interpImport" [style=solid];
"invMixColumns" [style=solid];
"invalidIndex" [style=solid];
"io" [style=solid];
"isBoundTV" [style=solid];
"isEApp" [style=solid];
"isEmptySubst" [style=solid];
"isExplicit" [style=solid];
"isExportedBind" [style=solid];
"isExportedType" [style=solid];
"isFailedResult" [style=solid];
"isFreeTV" [style=solid];
"isGeneratedName" [style=solid];
"isInfixIdent" [style=solid];
"isLoaded" [style=solid];
"isLoadedParamMod" [style=solid];
"isMono" [style=solid];
"isNumeric" [style=solid];
"isParamInstModName" [style=solid];
"isParametrizedModule" [style=solid];
"isPass" [style=solid];
"isTBit" [style=solid];
"isTParam" [style=solid];
"isVParam" [style=solid];
"isValueType" [style=solid];
"itIdent" [style=solid];
"iteRational" [style=solid];
"iteValue" [style=solid];
"joinSeq" [style=solid];
"joinV" [style=solid];
"joinWordVal" [style=solid];
"joinWords" [style=solid];
"kExistTVar" [style=solid];
"kIO" [style=solid];
"kInInferM" [style=solid];
"kInRange" [style=solid];
"kInstantiateT" [style=solid];
"kLookupAbstractType" [style=solid];
"kLookupNewtype" [style=solid];
"kLookupParamType" [style=solid];
"kLookupTSyn" [style=solid];
"kLookupTyVar" [style=solid];
"kNewGoals" [style=solid];
"kNewType" [style=solid];
"kRecordError" [style=solid];
"kRecordWarning" [style=solid];
"kSetKind" [style=solid];
"kWildOK" [style=solid];
"keyExpansionWords" [style=solid];
"kindResult" [style=solid];
"knownExts" [style=solid];
"knownSupportedFloat" [style=solid];
"lam" [style=solid];
"largeBitSize" [style=solid];
"latex" [style=solid];
"layout" [style=solid];
"lazyIte" [style=solid];
"leaves" [style=solid];
"lessThanEqV" [style=solid];
"lessThanV" [style=solid];
"lexCombine" [style=solid];
"lexerP" [style=solid];
"lg2" [style=solid];
"lg2V" [style=solid];
"liftBinIntMod" [style=solid];
"liftModuleCmd" [style=solid];
"liftPJ" [style=solid];
"liftPJ1" [style=solid];
"liftPJ2" [style=solid];
"liftSep" [style=solid];
"liftSpecT" [style=solid];
"list" [style=solid];
"listParamSubst" [style=solid];
"listRenamerWarnings" [style=solid];
"listSubst" [style=solid];
"listType" [style=solid];
"lit" [style=solid];
"litGoalToGoal" [style=solid];
"literalSWord" [style=solid];
"loadCmd" [style=solid];
"loadDeps" [style=solid];
"loadFile" [style=solid];
"loadHelper" [style=solid];
"loadModuleByName" [style=solid];
"loadModuleByPath" [style=solid];
"loadModuleFrom" [style=solid];
"loadPrelude" [style=solid];
"loadString" [style=solid];
"loadTcPrelude" [style=solid];
"loadedModule" [style=solid];
"loadedModules" [style=solid];
"loadedNonParamModules" [style=solid];
"loading" [style=solid];
"loadingImport" [style=solid];
"loadingModInstance" [style=solid];
"loadingModule" [style=solid];
"located" [style=solid];
"logPrint" [style=solid];
"logPutStr" [style=solid];
"logPutStrLn" [style=solid];
"logicBinary" [style=solid];
"logicShift" [style=solid];
"logicUnary" [style=solid];
"lookupAbstractType" [style=solid];
"lookupField" [style=solid];
"lookupFixity" [style=solid];
"lookupModule" [style=solid];
"lookupNewtype" [style=solid];
"lookupParamFun" [style=solid];
"lookupParamType" [style=solid];
"lookupPrimDecl" [style=solid];
"lookupPrimType" [style=solid];
"lookupRecord" [style=solid];
"lookupSeqMap" [style=solid];
"lookupSubst" [style=solid];
"lookupTParam" [style=solid];
"lookupTSyn" [style=solid];
"lookupTVar" [style=solid];
"lookupTrie" [style=solid];
"lookupTrieExact" [style=solid];
"lookupType" [style=solid];
"lookupTypeNames" [style=solid];
"lookupValNames" [style=solid];
"lookupVar" [style=solid];
"lshr" [style=solid];
"lsig256_0" [style=solid];
"lsig256_1" [style=solid];
"lsig512_0" [style=solid];
"lsig512_1" [style=solid];
"m2" [style=solid];
"m2Table" [style=solid];
"m3" [style=solid];
"m3Table" [style=solid];
"m9" [style=solid];
"m9Table" [style=solid];
"mB" [style=solid];
"mBTable" [style=solid];
"mD" [style=solid];
"mDTable" [style=solid];
"mE" [style=solid];
"mETable" [style=solid];
"maj" [style=solid];
"makeValParamDef" [style=solid];
"mapMaybeTM" [style=solid];
"mapSeqMap" [style=solid];
"mapTM" [style=solid];
"mapWithFieldName" [style=solid];
"mapWithKeyTM" [style=solid];
"markdown" [style=solid];
"mask" [style=solid];
"match" [style=solid];
"matchDefault" [style=solid];
"matchLinear" [style=solid];
"matchLinearUnifier" [style=solid];
"matchMaybe" [style=solid];
"matchThen" [style=solid];
"maxBigIntWidth" [style=solid];
"maybeNameDoc" [style=solid];
"maybeReady" [style=solid];
"membersTM" [style=solid];
"memoMap" [style=solid];
"merge" [style=solid];
"mergeSeqMap" [style=solid];
"mergeValue" [style=solid];
"mergeValue\'" [style=solid];
"mergeWord" [style=solid];
"mergeWord\'" [style=solid];
"mgu" [style=solid];
"mguMany" [style=solid];
"mk" [style=solid];
"mkAnonymousModule" [style=solid];
"mkBv" [style=solid];
"mkDeclared" [style=solid];
"mkDoc" [style=solid];
"mkEApp" [style=solid];
"mkEInfix" [style=solid];
"mkFakeName" [style=solid];
"mkFixity" [style=solid];
"mkGenerate" [style=solid];
"mkIdent" [style=solid];
"mkIf" [style=solid];
"mkIfaceDecl" [style=solid];
"mkIndexedDecl" [style=solid];
"mkIndexedExpr" [style=solid];
"mkInfix" [style=solid];
"mkInteractiveRange" [style=solid];
"mkLit" [style=solid];
"mkModName" [style=solid];
"mkModule" [style=solid];
"mkModuleInstance" [style=solid];
"mkOptionMap" [style=solid];
"mkParFun" [style=solid];
"mkParType" [style=solid];
"mkParameter" [style=solid];
"mkPoly" [style=solid];
"mkPrim" [style=solid];
"mkPrimDecl" [style=solid];
"mkPrimTypeDecl" [style=solid];
"mkPrim\'" [style=solid];
"mkPrompt" [style=solid];
"mkProp" [style=solid];
"mkPropSyn" [style=solid];
"mkProperty" [style=solid];
"mkQual" [style=solid];
"mkQualIdent" [style=solid];
"mkQualOp" [style=solid];
"mkRecord" [style=solid];
"mkSHA256InitialState" [style=solid];
"mkSHA512InitialState" [style=solid];
"mkScc" [style=solid];
"mkSchema" [style=solid];
"mkSelSln" [style=solid];
"mkSelector" [style=solid];
"mkSeq" [style=solid];
"mkSolverResult" [style=solid];
"mkTInfix" [style=solid];
"mkTParam" [style=solid];
"mkTySyn" [style=solid];
"mkTypeInst" [style=solid];
"mkUnqual" [style=solid];
"mkUserEnv" [style=solid];
"modExports" [style=solid];
"modInstPref" [style=solid];
"modNameChunks" [style=solid];
"modNameToText" [style=solid];
"modParamIdent" [style=solid];
"modParamsNamingEnv" [style=solid];
"modRange" [style=solid];
"modSep" [style=solid];
"modTyParam" [style=solid];
"modV" [style=solid];
"mod_add" [style=solid];
"mod_half" [style=solid];
"mod_mul" [style=solid];
"mod_square" [style=solid];
"mod_sub" [style=solid];
"modelPred" [style=solid];
"modify" [style=solid];
"modifyCallStack" [style=solid];
"modifyEvalEnv" [style=solid];
"modifyModuleEnv" [style=solid];
"modifyRW" [style=solid];
"modifyRW_" [style=solid];
"modifySpecCache" [style=solid];
"moduleCmd" [style=solid];
"moduleCmdResult" [style=solid];
"moduleDeps" [style=solid];
"moduleEnv" [style=solid];
"moduleFile" [style=solid];
"moduleLinter" [style=solid];
"moduleNameMismatch" [style=solid];
"moduleNotFound" [style=solid];
"moduleParseError" [style=solid];
"modulePathLabel" [style=solid];
"move" [style=solid];
"moves" [style=solid];
"mtpParam" [style=solid];
"mul2" [style=solid];
"mul3" [style=solid];
"mul4" [style=solid];
"mul8" [style=solid];
"mulV" [style=solid];
"multiSATQuery" [style=solid];
"nAdd" [style=solid];
"nCeilDiv" [style=solid];
"nCeilMod" [style=solid];
"nDiv" [style=solid];
"nExp" [style=solid];
"nLenFromThenTo" [style=solid];
"nLg2" [style=solid];
"nMax" [style=solid];
"nMin" [style=solid];
"nMod" [style=solid];
"nMul" [style=solid];
"nSub" [style=solid];
"nWidth" [style=solid];
"nameFixity" [style=solid];
"nameIdent" [style=solid];
"nameInfo" [style=solid];
"nameInst" [style=solid];
"nameList" [style=solid];
"nameLoc" [style=solid];
"nameSeeds" [style=solid];
"nameUnique" [style=solid];
"nameVariant" [style=solid];
"nameVariants" [style=solid];
"namesArm" [style=solid];
"namesB" [style=solid];
"namesD" [style=solid];
"namesDef" [style=solid];
"namesDs" [style=solid];
"namesE" [style=solid];
"namesM" [style=solid];
"namesP" [style=solid];
"namesPs" [style=solid];
"namesUF" [style=solid];
"namingEnv\'" [style=solid];
"nbCommandList" [style=solid];
"nbCommands" [style=solid];
"needsInst" [style=solid];
"negateV" [style=solid];
"nest" [style=solid];
"neverQualify" [style=solid];
"neverQualifyMod" [style=solid];
"newGoal" [style=solid];
"newGoalName" [style=solid];
"newGoals" [style=solid];
"newHasGoal" [style=solid];
"newLocal" [style=solid];
"newName" [style=solid];
"newParamName" [style=solid];
"newTParam" [style=solid];
"newTVar" [style=solid];
"newTVar\'" [style=solid];
"newTop" [style=solid];
"newTopOrLocalName" [style=solid];
"newType" [style=solid];
"newtypeConType" [style=solid];
"newtypeParam" [style=solid];
"newtypeTyCon" [style=solid];
"nextUnique" [style=solid];
"nextUniqueM" [style=solid];
"nlam" [style=solid];
"noArgDescr" [style=solid];
"noCheck" [style=solid];
"noFreeVariables" [style=solid];
"noIfaceParams" [style=solid];
"noIncTopDecl" [style=solid];
"noIncludeErrors" [style=solid];
"noIncludeModule" [style=solid];
"noIncludeProgram" [style=solid];
"noIncompatible" [style=solid];
"noMatchB" [style=solid];
"noMatchD" [style=solid];
"noModuleName" [style=solid];
"noPat" [style=solid];
"noPatArm" [style=solid];
"noPatDs" [style=solid];
"noPatE" [style=solid];
"noPatErrors" [style=solid];
"noPatFun" [style=solid];
"noPatM" [style=solid];
"noPatModule" [style=solid];
"noPatProg" [style=solid];
"noPatTopDs" [style=solid];
"noPatUF" [style=solid];
"noRenamerWarnings" [style=solid];
"noWarns" [style=solid];
"normalizeForTwinMult" [style=solid];
"normalizeSign" [style=solid];
"notAParameterizedModule" [style=solid];
"notFun" [style=solid];
"notParamInstModName" [style=solid];
"nullGoals" [style=solid];
"nullIdent" [style=solid];
"numLit" [style=solid];
"numToken" [style=solid];
"numType" [style=solid];
"offlineProveSat" [style=solid];
"onlineProveSat" [style=solid];
"op1" [style=solid];
"op2" [style=solid];
"op3" [style=solid];
"optParens" [style=solid];
"orV" [style=solid];
"ordSuffix" [style=solid];
"orderBinds" [style=solid];
"orderTyDecls" [style=solid];
"ordinal" [style=solid];
"otherIOError" [style=solid];
"p" [style=solid];
"pAnd" [style=solid];
"pBin" [style=solid];
"pCmp" [style=solid];
"pEq" [style=solid];
"pField" [style=solid];
"pFin" [style=solid];
"pHas" [style=solid];
"pIntegral" [style=solid];
"pIsCmp" [style=solid];
"pIsEq" [style=solid];
"pIsEqual" [style=solid];
"pIsFLiteral" [style=solid];
"pIsField" [style=solid];
"pIsFin" [style=solid];
"pIsGeq" [style=solid];
"pIsIntegral" [style=solid];
"pIsLiteral" [style=solid];
"pIsLogic" [style=solid];
"pIsPrime" [style=solid];
"pIsRing" [style=solid];
"pIsRound" [style=solid];
"pIsSignedCmp" [style=solid];
"pIsTrue" [style=solid];
"pIsValidFloat" [style=solid];
"pIsWidth" [style=solid];
"pIsZero" [style=solid];
"pLiteral" [style=solid];
"pLogic" [style=solid];
"pPrime" [style=solid];
"pRing" [style=solid];
"pRound" [style=solid];
"pSignedCmp" [style=solid];
"pSplitAnd" [style=solid];
"pTrue" [style=solid];
"pValidFloat" [style=solid];
"pZero" [style=solid];
"packIdent" [style=solid];
"packInfix" [style=solid];
"packModName" [style=solid];
"packSBV" [style=solid];
"padSHA1" [style=solid];
"padSHA1Chunks" [style=solid];
"padSHA512" [style=solid];
"padSHA512Chunks" [style=solid];
"panic" [style=solid];
"paramInstModName" [style=solid];
"paramModRecParam" [style=solid];
"paramRecTy" [style=solid];
"parens" [style=solid];
"parmapV" [style=solid];
"parse" [style=solid];
"parseCommand" [style=solid];
"parseModule" [style=solid];
"parsePPFloatFormat" [style=solid];
"parseString" [style=solid];
"parseValue" [style=solid];
"parseValues" [style=solid];
"patternEnv" [style=solid];
"pdiv" [style=solid];
"pickTVarName" [style=solid];
"plainSubst" [style=solid];
"pmod" [style=solid];
"pmult" [style=solid];
"polyTerm" [style=solid];
"pop" [style=solid];
"pp" [style=solid];
"ppBV" [style=solid];
"ppBlock" [style=solid];
"ppEnv" [style=solid];
"ppError" [style=solid];
"ppFixity" [style=solid];
"ppFracLit" [style=solid];
"ppIncludeError" [style=solid];
"ppInfix" [style=solid];
"ppInterval" [style=solid];
"ppIntervals" [style=solid];
"ppL" [style=solid];
"ppLam" [style=solid];
"ppLocName" [style=solid];
"ppName" [style=solid];
"ppNamed" [style=solid];
"ppNamedError" [style=solid];
"ppNamedWarning" [style=solid];
"ppNamed\'" [style=solid];
"ppNestedSels" [style=solid];
"ppNewtypeShort" [style=solid];
"ppNumLit" [style=solid];
"ppPragma" [style=solid];
"ppRational" [style=solid];
"ppSection" [style=solid];
"ppSelector" [style=solid];
"ppTrace" [style=solid];
"ppUse" [style=solid];
"ppValue" [style=solid];
"ppVarShape" [style=solid];
"ppWarning" [style=solid];
"ppWithNames" [style=solid];
"ppWithNamesPrec" [style=solid];
"preProc" [style=solid];
"predArgTypes" [style=solid];
"prelPrim" [style=solid];
"preludeContents" [style=solid];
"preludeName" [style=solid];
"preludeReferenceContents" [style=solid];
"preludeReferenceName" [style=solid];
"prepareQuery" [style=solid];
"prependSearchPath" [style=solid];
"pretty" [style=solid];
"primTable" [style=solid];
"primeECContents" [style=solid];
"primeECName" [style=solid];
"primeECPrim" [style=solid];
"primeECPrims" [style=solid];
"primeModulus" [style=solid];
"primeTable" [style=solid];
"printCounterexample" [style=solid];
"printSafetyViolation" [style=solid];
"printSatisfyingModel" [style=solid];
"printUninterpWarn" [style=solid];
"processResults" [style=solid];
"processSHA256Block" [style=solid];
"processSHA512Block" [style=solid];
"projectivePointRepr" [style=solid];
"proofObligation" [style=solid];
"propInterval" [style=solid];
"propSynParam" [style=solid];
"protectStack" [style=solid];
"prove" [style=solid];
"proveCmd" [style=solid];
"proveImp" [style=solid];
"proveImplication" [style=solid];
"proveImplicationIO" [style=solid];
"proveModuleTopLevel" [style=solid];
"proverConfigs" [style=solid];
"proverError" [style=solid];
"proverListString" [style=solid];
"proverNames" [style=solid];
"psFixity" [style=solid];
"psName" [style=solid];
"punctuate" [style=solid];
"push" [style=solid];
"pushCallFrame" [style=solid];
"pushPath" [style=solid];
"qcCmd" [style=solid];
"qualify" [style=solid];
"quickApply" [style=solid];
"quickSolver" [style=solid];
"quickSolverIO" [style=solid];
"quietLogger" [style=solid];
"quitCmd" [style=solid];
"quotes" [style=solid];
"rComb" [style=solid];
"rCombs" [style=solid];
"rEval" [style=solid];
"rEvalRethrow" [style=solid];
"rIdent" [style=solid];
"rPrint" [style=solid];
"rPutStr" [style=solid];
"rPutStrLn" [style=solid];
"raise" [style=solid];
"randomBit" [style=solid];
"randomFloat" [style=solid];
"randomIntMod" [style=solid];
"randomInteger" [style=solid];
"randomRational" [style=solid];
"randomRecord" [style=solid];
"randomSequence" [style=solid];
"randomSize" [style=solid];
"randomStream" [style=solid];
"randomTests" [style=solid];
"randomTuple" [style=solid];
"randomV" [style=solid];
"randomValue" [style=solid];
"randomWord" [style=solid];
"ratio" [style=solid];
"ratioV" [style=solid];
"rationalAdd" [style=solid];
"rationalCeiling" [style=solid];
"rationalDivide" [style=solid];
"rationalEq" [style=solid];
"rationalFloor" [style=solid];
"rationalGreaterThan" [style=solid];
"rationalLessThan" [style=solid];
"rationalMul" [style=solid];
"rationalNegate" [style=solid];
"rationalRecip" [style=solid];
"rationalRoundAway" [style=solid];
"rationalRoundToEven" [style=solid];
"rationalSub" [style=solid];
"rationalTrunc" [style=solid];
"readBytes" [style=solid];
"readDecimal" [style=solid];
"readFileCmd" [style=solid];
"readInclude" [style=solid];
"ready" [style=solid];
"recipV" [style=solid];
"record" [style=solid];
"recordElements" [style=solid];
"recordError" [style=solid];
"recordFromFields" [style=solid];
"recordFromFieldsErr" [style=solid];
"recordFromFieldsWithDisplay" [style=solid];
"recordMapAccum" [style=solid];
"recordType" [style=solid];
"recordUse" [style=solid];
"recordWarning" [style=solid];
"recursiveModules" [style=solid];
"refEvalCmd" [style=solid];
"reloadCmd" [style=solid];
"removeIncludesModule" [style=solid];
"removeLoadedModule" [style=solid];
"rename" [style=solid];
"renameArm" [style=solid];
"renameLocated" [style=solid];
"renameMatch" [style=solid];
"renameModule" [style=solid];
"renameOp" [style=solid];
"renamePat" [style=solid];
"renamePats" [style=solid];
"renameQual" [style=solid];
"renameSchema" [style=solid];
"renameType" [style=solid];
"renameTypeOp" [style=solid];
"renameVar" [style=solid];
"renamerErrors" [style=solid];
"renamerWarnings" [style=solid];
"render" [style=solid];
"renderOneLine" [style=solid];
"replCheckDecls" [style=solid];
"replCheckExpr" [style=solid];
"replEdit" [style=solid];
"replEvalDecl" [style=solid];
"replEvalExpr" [style=solid];
"replParse" [style=solid];
"replParseExpr" [style=solid];
"replParseInput" [style=solid];
"replReadFile" [style=solid];
"replSpecExpr" [style=solid];
"replWriteFile" [style=solid];
"reportError" [style=solid];
"resetModuleEnv" [style=solid];
"resolveInclude" [style=solid];
"rethrowErrorCall" [style=solid];
"rethrowEvalError" [style=solid];
"rethrowW4Exception" [style=solid];
"returnOneTest" [style=solid];
"returnTests" [style=solid];
"reverseSeqMap" [style=solid];
"reverseV" [style=solid];
"rewD" [style=solid];
"rewDeclGroup" [style=solid];
"rewDef" [style=solid];
"rewE" [style=solid];
"rewM" [style=solid];
"rewModule" [style=solid];
"ringBinary" [style=solid];
"ringNullary" [style=solid];
"ringUnary" [style=solid];
"rmTParam" [style=solid];
"rmVal" [style=solid];
"rmVals" [style=solid];
"rnLocated" [style=solid];
"rnNamed" [style=solid];
"rootExact" [style=solid];
"rotR" [style=solid];
"rotateLS" [style=solid];
"rotateLW" [style=solid];
"rotateLeftReindex" [style=solid];
"rotateRS" [style=solid];
"rotateRW" [style=solid];
"rotateRightReindex" [style=solid];
"rotateShrink" [style=solid];
"roundAwayV" [style=solid];
"roundConstants" [style=solid];
"roundOp" [style=solid];
"roundToEvenV" [style=solid];
"runCommand" [style=solid];
"runDoc" [style=solid];
"runEval" [style=solid];
"runInferM" [style=solid];
"runKindM" [style=solid];
"runModuleM" [style=solid];
"runModuleT" [style=solid];
"runMultiProvers" [style=solid];
"runNoIncM" [style=solid];
"runNoPatM" [style=solid];
"runOneTest" [style=solid];
"runProver" [style=solid];
"runREPL" [style=solid];
"runRenamer" [style=solid];
"runResult" [style=solid];
"runShellCmd" [style=solid];
"runSingleProver" [style=solid];
"runSpecT" [style=solid];
"runSupplyT" [style=solid];
"runTcM" [style=solid];
"s2" [style=solid];
"sDelay" [style=solid];
"sLg2" [style=solid];
"sModAdd" [style=solid];
"sModMult" [style=solid];
"sModNegate" [style=solid];
"sModRecip" [style=solid];
"sModSub" [style=solid];
"safeCmd" [style=solid];
"sanitize" [style=solid];
"sanitizeEnd" [style=solid];
"satCmd" [style=solid];
"satProve" [style=solid];
"satProveOffline" [style=solid];
"satSMTResults" [style=solid];
"sbox" [style=solid];
"sboxTable" [style=solid];
"sbvFreshFns" [style=solid];
"schemaParam" [style=solid];
"sdivV" [style=solid];
"sel" [style=solid];
"selName" [style=solid];
"selSrc" [style=solid];
"selectorToken" [style=solid];
"sep" [style=solid];
"setDocString" [style=solid];
"setDynEnv" [style=solid];
"setEditPath" [style=solid];
"setFocusedModule" [style=solid];
"setLoadedMod" [style=solid];
"setModuleEnv" [style=solid];
"setMonoBinds" [style=solid];
"setNameSeeds" [style=solid];
"setOptionCmd" [style=solid];
"setPutStr" [style=solid];
"setSearchPath" [style=solid];
"setSolver" [style=solid];
"setSpecCache" [style=solid];
"setSupply" [style=solid];
"setUpdateREPLTitle" [style=solid];
"setUser" [style=solid];
"setupAdapterOptions" [style=solid];
"setupProver" [style=solid];
"shadowNames" [style=solid];
"shadowNamesNS" [style=solid];
"shadowNames\'" [style=solid];
"shadowing" [style=solid];
"shiftLS" [style=solid];
"shiftLW" [style=solid];
"shiftLeftReindex" [style=solid];
"shiftRS" [style=solid];
"shiftRW" [style=solid];
"shiftRightReindex" [style=solid];
"shiftShrink" [style=solid];
"shl" [style=solid];
"shouldContinue" [style=solid];
"showEnvVal" [style=solid];
"showProverStats" [style=solid];
"shrinkModel" [style=solid];
"signedBV" [style=solid];
"signedLessThanV" [style=solid];
"signedQuot" [style=solid];
"signedRem" [style=solid];
"signedShiftRW" [style=solid];
"signedValue" [style=solid];
"simpGoal" [style=solid];
"simpGoals" [style=solid];
"simpHasGoals" [style=solid];
"simpleBind" [style=solid];
"simpleOpt" [style=solid];
"simplify" [style=solid];
"simplifyAllConstraints" [style=solid];
"simplifyStep" [style=solid];
"singleQuery" [style=solid];
"singleSubst" [style=solid];
"singleTParamSubst" [style=solid];
"singletonE" [style=solid];
"singletonT" [style=solid];
"smallest" [style=solid];
"smodV" [style=solid];
"smokeTest" [style=solid];
"solveCmpInst" [style=solid];
"solveEqInst" [style=solid];
"solveFLiteralInst" [style=solid];
"solveFieldInst" [style=solid];
"solveHasGoal" [style=solid];
"solveIntegralInst" [style=solid];
"solveLiteralInst" [style=solid];
"solveLogicInst" [style=solid];
"solveOpts" [style=solid];
"solveRingInst" [style=solid];
"solveRingSeq" [style=solid];
"solveRoundInst" [style=solid];
"solveSelector" [style=solid];
"solveSignedCmpInst" [style=solid];
"solveSignedCmpSeq" [style=solid];
"solveValidFloat" [style=solid];
"solveZeroInst" [style=solid];
"sparkParMap" [style=solid];
"sparkThunk" [style=solid];
"specialize" [style=solid];
"specializeCmd" [style=solid];
"specializeConst" [style=solid];
"specializeDeclGroups" [style=solid];
"specializeEWhere" [style=solid];
"specializeExpr" [style=solid];
"specializeMatch" [style=solid];
"splitAbs" [style=solid];
"splitAtV" [style=solid];
"splitCommand" [style=solid];
"splitConstFactor" [style=solid];
"splitConstSummand" [style=solid];
"splitExprInst" [style=solid];
"splitOptArgs" [style=solid];
"splitProofAbs" [style=solid];
"splitProofApp" [style=solid];
"splitQual" [style=solid];
"splitSeqMap" [style=solid];
"splitSimpleP" [style=solid];
"splitTAbs" [style=solid];
"splitTApp" [style=solid];
"splitTParams" [style=solid];
"splitVarSummand" [style=solid];
"splitVarSummands" [style=solid];
"splitWhile" [style=solid];
"splitWordVal" [style=solid];
"sshrV" [style=solid];
"start" [style=solid];
"startChar" [style=solid];
"startComment" [style=solid];
"startEndComment" [style=solid];
"startString" [style=solid];
"startsLayout" [style=solid];
"stderrLogger" [style=solid];
"stdoutLogger" [style=solid];
"step256" [style=solid];
"step512" [style=solid];
"stop" [style=solid];
"streamSeqMap" [style=solid];
"subV" [style=solid];
"substBinds" [style=solid];
"substToList" [style=solid];
"subsumes" [style=solid];
"succeed" [style=solid];
"suiteBContents" [style=solid];
"suiteBName" [style=solid];
"suiteBPrim" [style=solid];
"suiteBPrims" [style=solid];
"superclassSet" [style=solid];
"svDivisible" [style=solid];
"svFromInteger" [style=solid];
"svMkSymVar_" [style=solid];
"svToInteger" [style=solid];
"t0" [style=solid];
"t0Func" [style=solid];
"t0Table" [style=solid];
"t1" [style=solid];
"t1Table" [style=solid];
"t2" [style=solid];
"t2Table" [style=solid];
"t3" [style=solid];
"t3Table" [style=solid];
"tAbstract" [style=solid];
"tAdd" [style=solid];
"tArray" [style=solid];
"tBit" [style=solid];
"tCeilDiv" [style=solid];
"tCeilMod" [style=solid];
"tChar" [style=solid];
"tCon" [style=solid];
"tDiv" [style=solid];
"tError" [style=solid];
"tExp" [style=solid];
"tFloat" [style=solid];
"tFun" [style=solid];
"tHasErrors" [style=solid];
"tInf" [style=solid];
"tIntMod" [style=solid];
"tInteger" [style=solid];
"tIsBinFun" [style=solid];
"tIsBit" [style=solid];
"tIsError" [style=solid];
"tIsFloat" [style=solid];
"tIsFun" [style=solid];
"tIsInf" [style=solid];
"tIsIntMod" [style=solid];
"tIsInteger" [style=solid];
"tIsNat\'" [style=solid];
"tIsNum" [style=solid];
"tIsRational" [style=solid];
"tIsRec" [style=solid];
"tIsSeq" [style=solid];
"tIsTuple" [style=solid];
"tIsVar" [style=solid];
"tLenFromThenTo" [style=solid];
"tMax" [style=solid];
"tMin" [style=solid];
"tMod" [style=solid];
"tMono" [style=solid];
"tMul" [style=solid];
"tNat\'" [style=solid];
"tNoUser" [style=solid];
"tNum" [style=solid];
"tOne" [style=solid];
"tOp" [style=solid];
"tRational" [style=solid];
"tRebuild" [style=solid];
"tRebuild\'" [style=solid];
"tRec" [style=solid];
"tSeq" [style=solid];
"tSplitFun" [style=solid];
"tString" [style=solid];
"tSub" [style=solid];
"tTuple" [style=solid];
"tTwo" [style=solid];
"tValTy" [style=solid];
"tWidth" [style=solid];
"tWord" [style=solid];
"tZero" [style=solid];
"tc" [style=solid];
"tcDecls" [style=solid];
"tcExpr" [style=solid];
"tcModule" [style=solid];
"tcModuleInst" [style=solid];
"tcPanic" [style=solid];
"tcon" [style=solid];
"testableType" [style=solid];
"text" [style=solid];
"textToModName" [style=solid];
"tf" [style=solid];
"tf1" [style=solid];
"tf2" [style=solid];
"tf3" [style=solid];
"thmSMTResults" [style=solid];
"tlam" [style=solid];
"tnamesB" [style=solid];
"tnamesC" [style=solid];
"tnamesD" [style=solid];
"tnamesDef" [style=solid];
"tnamesDs" [style=solid];
"tnamesE" [style=solid];
"tnamesM" [style=solid];
"tnamesNT" [style=solid];
"tnamesP" [style=solid];
"tnamesS" [style=solid];
"tnamesT" [style=solid];
"tnamesTI" [style=solid];
"tnamesUF" [style=solid];
"toBigEndianSBS" [style=solid];
"toBytes" [style=solid];
"toCryptol" [style=solid];
"toDocs" [style=solid];
"toExpr" [style=solid];
"toFinSeq" [style=solid];
"toFixity" [style=solid];
"toIntegerV" [style=solid];
"toListEnv" [style=solid];
"toNameDisp" [style=solid];
"toParamInstName" [style=solid];
"toPragma" [style=solid];
"toPrimMap" [style=solid];
"toProjectivePoint" [style=solid];
"toSHA256Block" [style=solid];
"toSHA512Block" [style=solid];
"toSMT" [style=solid];
"toSeq" [style=solid];
"toSig" [style=solid];
"toStream" [style=solid];
"toWord32" [style=solid];
"toWord64" [style=solid];
"total" [style=solid];
"tp" [style=solid];
"tpName" [style=solid];
"tpVar" [style=solid];
"tpfName" [style=solid];
"trace" [style=solid];
"transDeps" [style=solid];
"translateExprToNumT" [style=solid];
"transposeV" [style=solid];
"travNamingEnv" [style=solid];
"traverseRecordMap" [style=solid];
"traverseSnd" [style=solid];
"trim" [style=solid];
"truncV" [style=solid];
"tryAddConst" [style=solid];
"tryCancelVar" [style=solid];
"tryEqAddInf" [style=solid];
"tryEqK" [style=solid];
"tryEqMin" [style=solid];
"tryEqMins" [style=solid];
"tryEqMulConst" [style=solid];
"tryEqVar" [style=solid];
"tryFromBits" [style=solid];
"tryGeqKThan" [style=solid];
"tryGeqThanK" [style=solid];
"tryGeqThanSub" [style=solid];
"tryGeqThanVar" [style=solid];
"tryGetModel" [style=solid];
"tryGetUser" [style=solid];
"tryHasGoal" [style=solid];
"tryLinearSolution" [style=solid];
"tryMinIsGeq" [style=solid];
"tryNoIncM" [style=solid];
"tsFixity" [style=solid];
"tsName" [style=solid];
"tupleType" [style=solid];
"tvInfo" [style=solid];
"tvSeq" [style=solid];
"tvSourceName" [style=solid];
"tvUnique" [style=solid];
"tvarInterval" [style=solid];
"tySynParam" [style=solid];
"typeCheckWarnings" [style=solid];
"typeCheckingFailed" [style=solid];
"typeExists" [style=solid];
"typeInterval" [style=solid];
"typeOfCmd" [style=solid];
"typeSelect" [style=solid];
"typeSize" [style=solid];
"typeValues" [style=solid];
"typecheck" [style=solid];
"u0" [style=solid];
"u0Func" [style=solid];
"u0Table" [style=solid];
"u1" [style=solid];
"u1Table" [style=solid];
"u2" [style=solid];
"u2Table" [style=solid];
"u3" [style=solid];
"u3Table" [style=solid];
"ufToNamed" [style=solid];
"unDelay" [style=solid];
"unFinType" [style=solid];
"unLit" [style=solid];
"unOp" [style=solid];
"unSBox" [style=solid];
"unSBoxTable" [style=solid];
"unary" [style=solid];
"unaryBV" [style=solid];
"uncheckedSingleSubst" [style=solid];
"uncheckedTypeArg" [style=solid];
"uncons" [style=solid];
"underIdent" [style=solid];
"uniError" [style=solid];
"unify" [style=solid];
"uniqify" [style=solid];
"unlessBatch" [style=solid];
"unloadModule" [style=solid];
"unpackIdent" [style=solid];
"unpackSBV" [style=solid];
"unqualifiedEnv" [style=solid];
"unsolvable" [style=solid];
"unsupported" [style=solid];
"updSub" [style=solid];
"updateBack" [style=solid];
"updateBackSym" [style=solid];
"updateBackSym_word" [style=solid];
"updateBack_word" [style=solid];
"updateFront" [style=solid];
"updateFrontSym" [style=solid];
"updateFrontSym_word" [style=solid];
"updateFront_word" [style=solid];
"updateInterval" [style=solid];
"updatePrim" [style=solid];
"updateREPLTitle" [style=solid];
"updateSeqMap" [style=solid];
"updateWordValue" [style=solid];
"userOptions" [style=solid];
"vWordLen" [style=solid];
"valEq" [style=solid];
"valGt" [style=solid];
"valLt" [style=solid];
"validDemotedType" [style=solid];
"validEvalContext" [style=solid];
"valueToChar" [style=solid];
"valueToString" [style=solid];
"varModelPred" [style=solid];
"varShapeToConcrete" [style=solid];
"varShapeToValue" [style=solid];
"varToExpr" [style=solid];
"varsWithAsmps" [style=solid];
"vcat" [style=solid];
"versionCmd" [style=solid];
"virt" [style=solid];
"visibleNames" [style=solid];
"w4And" [style=solid];
"w4Eval" [style=solid];
"w4ITE" [style=solid];
"w4Not" [style=solid];
"w4Thunk" [style=solid];
"w4bvAshr" [style=solid];
"w4bvLshr" [style=solid];
"w4bvRol" [style=solid];
"w4bvRor" [style=solid];
"w4bvShl" [style=solid];
"warn" [style=solid];
"warnUnused" [style=solid];
"what4FreshFns" [style=solid];
"whenDebug" [style=solid];
"widthIdent" [style=solid];
"widthInteger" [style=solid];
"withAsmp" [style=solid];
"withCallStack" [style=solid];
"withDeclGroups" [style=solid];
"withDecls" [style=solid];
"withIncPath" [style=solid];
"withLoc" [style=solid];
"withLogger" [style=solid];
"withMonoType" [style=solid];
"withMonoTypes" [style=solid];
"withNameDisp" [style=solid];
"withNewtype" [style=solid];
"withParamFuns" [style=solid];
"withParamType" [style=solid];
"withParameterConstraints" [style=solid];
"withPrependedSearchPath" [style=solid];
"withPrimType" [style=solid];
"withROTempFile" [style=solid];
"withRWTempFile" [style=solid];
"withRange" [style=solid];
"withSolver" [style=solid];
"withTParam" [style=solid];
"withTParams" [style=solid];
"withTVar" [style=solid];
"withTySyn" [style=solid];
"withVar" [style=solid];
"withVarType" [style=solid];
"withVarTypes" [style=solid];
"withVars" [style=solid];
"word" [style=solid];
"wordShifter" [style=solid];
"wordTooWide" [style=solid];
"wordValLogicOp" [style=solid];
"wordValUnaryOp" [style=solid];
"wordValueEqualsInteger" [style=solid];
"wordValueSize" [style=solid];
"wrap" [style=solid];
"writeFileCmd" [style=solid];
"x" [style=solid];
"xorV" [style=solid];
"z3exists" [style=solid];
"zeroV" [style=solid];
"zipRecords" [style=solid];
"zipRecordsM" [style=solid];
"zipSeqMap" [style=solid];
"zro" [style=solid];
"" -> "aesFinalRound";
"" -> "aesInvFinalRound";
"" -> "aesInvRound";
"" -> "aesRound";
"" -> "invMixColumns";
"" -> "keyExpansionWords";
"__" -> "x";
"aAnd" -> "ar2";
"aAnd" -> "tp";
"aBit" -> "ar0";
"aBit" -> "tc";
"aCeilDiv" -> "ar2";
"aCeilDiv" -> "tf";
"aCeilMod" -> "ar2";
"aCeilMod" -> "tf";
"aChar" -> "aBit";
"aChar" -> "aNat";
"aChar" -> "aSeq";
"aFin" -> "ar1";
"aFin" -> "ar2";
"aFin" -> "tp";
"aFreeTVar" -> "aTVar";
"aFreeTVar" -> "isFreeTV";
"aInf" -> "ar0";
"aInf" -> "tc";
"aLenFromThenTo" -> "ar3";
"aLenFromThenTo" -> "tf";
"aLiteral" -> "ar2";
"aLiteral" -> "tp";
"aLogic" -> "ar1";
"aLogic" -> "tp";
"aMax" -> "ar2";
"aMax" -> "tf";
"aMin" -> "ar2";
"aMin" -> "tf";
"aMul" -> "ar2";
"aMul" -> "tf";
"aNat" -> "tNoUser";
"aNat\'" -> "aInf";
"aNat\'" -> "aNat";
"aRec" -> "ar2";
"aRec" -> "tNoUser";
"aRec" -> "tc";
"aSeq" -> "ar2";
"aSeq" -> "tc";
"aTVar" -> "tNoUser";
"aTVar" -> "x";
"aTrue" -> "ar0";
"aTrue" -> "tp";
"aTuple" -> "tNoUser";
"aWidth" -> "ar1";
"aWidth" -> "tf";
"aWord" -> "aBit";
"aWord" -> "aSeq";
"abstractTypeTC" -> "at";
"abstractTypeTC" -> "builtInType";
"abstractTypeTC" -> "panic";
"abstractTypeTC" -> "pretty";
"abstractTypeTC" -> "tcon";
"abstractTypeTC" -> "x";
"addDefEqn" -> "blackhole";
"addDefEqn" -> "delayFill";
"addDefEqn" -> "evalPanic";
"addDefEqn" -> "evalSpark";
"addDefEqn" -> "f";
"addDefEqn" -> "fpDiv";
"addDefEqn" -> "fpEq";
"addDefEqn" -> "fpFromInteger";
"addDefEqn" -> "fpLit";
"addDefEqn" -> "fpNeg";
"addDefEqn" -> "getCallStack";
"addDefEqn" -> "integer";
"addDefEqn" -> "integerToChar";
"addDefEqn" -> "literalSWord";
"addDefEqn" -> "modifyCallStack";
"addDefEqn" -> "p";
"addDefEqn" -> "packSBV";
"addDefEqn" -> "ppBV";
"addDefEqn" -> "sLg2";
"addDefEqn" -> "sModAdd";
"addDefEqn" -> "sModMult";
"addDefEqn" -> "sModNegate";
"addDefEqn" -> "sModRecip";
"addDefEqn" -> "sModSub";
"addDefEqn" -> "signedQuot";
"addDefEqn" -> "signedRem";
"addDefEqn" -> "start";
"addDefEqn" -> "svDivisible";
"addDefEqn" -> "svFromInteger";
"addDefEqn" -> "svToInteger";
"addDefEqn" -> "text";
"addDefEqn" -> "unpackSBV";
"addDefEqn" -> "unsupported";
"addDefEqn" -> "x";
"addGoals" -> "insertGoal";
"addGoals" -> "simpGoals";
"addIncompatible" -> "pIsFLiteral";
"addIncompatible" -> "pIsField";
"addIncompatible" -> "pIsIntegral";
"addIncompatible" -> "tIsVar";
"addLoadedModule" -> "genIface";
"addLoadedModule" -> "isLoaded";
"addModParams" -> "defs";
"addModParams" -> "fixMap";
"addModParams" -> "fixUp";
"addModParams" -> "getParams";
"addModParams" -> "paramInstModName";
"addPrelude" -> "emptyRange";
"addPrelude" -> "preludeName";
"addRenamerWarning" -> "x";
"addSafety" -> "p";
"addTNames" -> "nameList";
"addTNames" -> "pp";
"addTNames" -> "tpName";
"addTNames" -> "x";
"addTVarsDescsAfter" -> "pp";
"addTVarsDescsAfter" -> "ppWithNames";
"addTVarsDescsAfter" -> "text";
"addTVarsDescsAfter" -> "tvInfo";
"addTVarsDescsAfter" -> "vcat";
"addTVarsDescsBefore" -> "comma";
"addTVarsDescsBefore" -> "empty";
"addTVarsDescsBefore" -> "f";
"addTVarsDescsBefore" -> "isFreeTV";
"addTVarsDescsBefore" -> "nest";
"addTVarsDescsBefore" -> "pp";
"addTVarsDescsBefore" -> "ppUse";
"addTVarsDescsBefore" -> "ppWithNames";
"addTVarsDescsBefore" -> "text";
"addTVarsDescsBefore" -> "tvInfo";
"addTVarsDescsBefore" -> "vcat";
"addToChar" -> "p";
"addToChar" -> "panic";
"addToComment" -> "p";
"addToComment" -> "panic";
"addToString" -> "p";
"addToString" -> "panic";
"addV" -> "fpRndMode";
"addV" -> "rationalAdd";
"addV" -> "ringBinary";
"addV" -> "x";
"adjustField" -> "f";
"adjustField" -> "x";
"aesFinalRound" -> "f";
"aesFinalRound" -> "fromBytes";
"aesFinalRound" -> "sbox";
"aesFinalRound" -> "toBytes";
"aesInvFinalRound" -> "cryNoPrimError";
"aesInvFinalRound" -> "cryUserError";
"aesInvFinalRound" -> "f";
"aesInvFinalRound" -> "fromBytes";
"aesInvFinalRound" -> "intToRational";
"aesInvFinalRound" -> "invalidIndex";
"aesInvFinalRound" -> "iteRational";
"aesInvFinalRound" -> "ppRational";
"aesInvFinalRound" -> "pushCallFrame";
"aesInvFinalRound" -> "ratio";
"aesInvFinalRound" -> "rationalAdd";
"aesInvFinalRound" -> "rationalCeiling";
"aesInvFinalRound" -> "rationalDivide";
"aesInvFinalRound" -> "rationalEq";
"aesInvFinalRound" -> "rationalFloor";
"aesInvFinalRound" -> "rationalGreaterThan";
"aesInvFinalRound" -> "rationalLessThan";
"aesInvFinalRound" -> "rationalMul";
"aesInvFinalRound" -> "rationalNegate";
"aesInvFinalRound" -> "rationalRecip";
"aesInvFinalRound" -> "rationalRoundAway";
"aesInvFinalRound" -> "rationalRoundToEven";
"aesInvFinalRound" -> "rationalSub";
"aesInvFinalRound" -> "rationalTrunc";
"aesInvFinalRound" -> "sDelay";
"aesInvFinalRound" -> "toBytes";
"aesInvFinalRound" -> "unSBox";
"aesInvRound" -> "f";
"aesInvRound" -> "toBytes";
"aesInvRound" -> "u0";
"aesInvRound" -> "u1";
"aesInvRound" -> "u2";
"aesInvRound" -> "u3";
"aesRound" -> "f";
"aesRound" -> "t0";
"aesRound" -> "t1";
"aesRound" -> "t2";
"aesRound" -> "t3";
"aesRound" -> "toBytes";
"alexGetByte" -> "byteForChar";
"alexGetByte" -> "move";
"allDeclGroups" -> "f";
"allDeclGroups" -> "loadedNonParamModules";
"allNamesD" -> "allNamesD";
"allNamesD" -> "namesB";
"allNamesD" -> "namesP";
"allNamesD" -> "p";
"allNamesD" -> "psName";
"allNamesD" -> "tsName";
"allTerms" -> "getModuleEnv";
"allTerms" -> "rPrint";
"anAdd" -> "ar2";
"anAdd" -> "tf";
"anError" -> "tNoUser";
"andV" -> "logicBinary";
"annotB" -> "checkDocs";
"annotB" -> "checkFixs";
"annotB" -> "checkSigs";
"annotB" -> "f";
"annotB" -> "x";
"annotD" -> "annotB";
"annotD" -> "annotD";
"annotD" -> "annotPropSyn";
"annotD" -> "annotTySyn";
"annotD" -> "raise";
"annotDs" -> "annotD";
"annotDs" -> "annotDs";
"annotParameterType" -> "annotTyThing";
"annotParameterType" -> "f";
"annotPrimType" -> "annotTyThing";
"annotPrimType" -> "f";
"annotPropSyn" -> "annotTyThing";
"annotPropSyn" -> "f";
"annotTopDs" -> "annotD";
"annotTopDs" -> "annotParameterType";
"annotTopDs" -> "annotPrimType";
"annotTopDs" -> "annotTopDs";
"annotTopDs" -> "checkFixs";
"annotTopDs" -> "f";
"annotTopDs" -> "p";
"annotTySyn" -> "annotTyThing";
"annotTySyn" -> "f";
"annotTyThing" -> "checkFixs";
"annotTyThing" -> "f";
"anonTyApp" -> "mkIdent";
"anyJust" -> "f";
"anyJust" -> "mk";
"anyJust" -> "x";
"anyJust2" -> "f";
"anyJust2" -> "x";
"apSubstMaybe" -> "anyJust";
"apSubstMaybe" -> "anyJust2";
"apSubstMaybe" -> "apSubstMaybe";
"apSubstMaybe" -> "applySubstToVar";
"apSubstMaybe" -> "f";
"apSubstMaybe" -> "t1";
"apSubstMaybe" -> "x";
"apSubstTypeMapKeys" -> "applySubstToVar";
"apSubstTypeMapKeys" -> "fmap\'";
"apSubstTypeMapKeys" -> "insertWithTM";
"apSubstTypeMapKeys" -> "merge";
"apSubstTypeMapKeys" -> "p";
"apSubstTypeMapKeys" -> "pSplitAnd";
"apSubstTypeMapKeys" -> "panic";
"apSubstTypeMapKeys" -> "pp";
"apSubstTypeMapKeys" -> "tcon";
"apSubstTypeMapKeys" -> "x";
"appTy" -> "appTy";
"appTy" -> "doCheckType";
"appTy" -> "kRecordError";
"appTy" -> "t1";
"appTys" -> "appTys";
"appTys" -> "checkE";
"appTys" -> "checkHasType";
"appTys" -> "checkNoParams";
"appTys" -> "desugarLiteral";
"appTys" -> "getCallStacks";
"appTys" -> "inRange";
"appTys" -> "inferDs";
"appTys" -> "instantiateWith";
"appTys" -> "lookupVar";
"appTys" -> "uncheckedTypeArg";
"appTys" -> "x";
"applyAESStateFunc" -> "evalPanic";
"applyAESStateFunc" -> "fromVSeq";
"applyAESStateFunc" -> "fromWord32";
"applyAESStateFunc" -> "getUninterpFn";
"applyAESStateFunc" -> "toWord32";
"applyAESStateFunc" -> "x";
"applySubst" -> "getSubst";
"applySubstGoals" -> "applySubst";
"applySubstGoals" -> "p";
"applySubstGoals" -> "pSplitAnd";
"applySubstPreds" -> "applySubst";
"applySubstPreds" -> "pSplitAnd";
"applySubstToVar" -> "apSubstMaybe";
"applySubstToVar" -> "defaultFreeVar";
"applySubstToVar" -> "fmap\'";
"applySubstToVar" -> "lookupSubst";
"applySubstToVar" -> "x";
"arrayName" -> "packModName";
"arrayPrim" -> "arrayName";
"arrayPrim" -> "funLogger";
"arrayPrim" -> "handleLogger";
"arrayPrim" -> "logPrint";
"arrayPrim" -> "logPutStr";
"arrayPrim" -> "logPutStrLn";
"arrayPrim" -> "quietLogger";
"arrayPrim" -> "stderrLogger";
"arrayPrim" -> "stdoutLogger";
"arrayPrim" -> "x";
"asBatch" -> "getRW";
"asBatch" -> "modifyRW_";
"asEApps" -> "asEApps";
"asEApps" -> "braces";
"asEApps" -> "brackets";
"asEApps" -> "char";
"asEApps" -> "colon";
"asEApps" -> "comma";
"asEApps" -> "commaSep";
"asEApps" -> "displayFields";
"asEApps" -> "empty";
"asEApps" -> "fsep";
"asEApps" -> "hsep";
"asEApps" -> "isEApp";
"asEApps" -> "nest";
"asEApps" -> "optParens";
"asEApps" -> "p";
"asEApps" -> "parens";
"asEApps" -> "pp";
"asEApps" -> "ppInfix";
"asEApps" -> "ppNamed";
"asEApps" -> "ppNamed\'";
"asEApps" -> "ppNestedSels";
"asEApps" -> "sep";
"asEApps" -> "t1";
"asEApps" -> "text";
"asEApps" -> "vcat";
"asEApps" -> "wrap";
"asEApps" -> "x";
"asIndex" -> "evalPanic";
"asParamName" -> "f";
"asPrim" -> "identText";
"asPrim" -> "p";
"asWordList" -> "f";
"asWordList" -> "x";
"asWordVal" -> "enumerateSeqMap";
"asWordVal" -> "fromVBit";
"ashr" -> "x";
"assertBVDivisor" -> "p";
"assertBVDivisor" -> "x";
"assertIndexInBounds" -> "bitsValueLessThan";
"assertIndexInBounds" -> "enumerateSeqMap";
"assertIndexInBounds" -> "fromVBit";
"assertIndexInBounds" -> "p";
"assertIntDivisor" -> "addSafety";
"assertIntDivisor" -> "assertBVDivisor";
"assertIntDivisor" -> "assertIntDivisor";
"assertIntDivisor" -> "blackhole";
"assertIntDivisor" -> "delayFill";
"assertIntDivisor" -> "doEval";
"assertIntDivisor" -> "evalError";
"assertIntDivisor" -> "evalPanic";
"assertIntDivisor" -> "evalSpark";
"assertIntDivisor" -> "f";
"assertIntDivisor" -> "floatToBits";
"assertIntDivisor" -> "fpBinArith";
"assertIntDivisor" -> "fpCvtToInteger";
"assertIntDivisor" -> "fpDiv";
"assertIntDivisor" -> "fpEq";
"assertIntDivisor" -> "fpFromInteger";
"assertIntDivisor" -> "fpLit";
"assertIntDivisor" -> "fpNeg";
"assertIntDivisor" -> "fpRoundingMode";
"assertIntDivisor" -> "getCallStack";
"assertIntDivisor" -> "getSym";
"assertIntDivisor" -> "integer";
"assertIntDivisor" -> "modifyCallStack";
"assertIntDivisor" -> "p";
"assertIntDivisor" -> "panic";
"assertIntDivisor" -> "ppBV";
"assertIntDivisor" -> "sLg2";
"assertIntDivisor" -> "sModAdd";
"assertIntDivisor" -> "sModMult";
"assertIntDivisor" -> "sModNegate";
"assertIntDivisor" -> "sModRecip";
"assertIntDivisor" -> "sModSub";
"assertIntDivisor" -> "text";
"assertIntDivisor" -> "total";
"assertIntDivisor" -> "w4And";
"assertIntDivisor" -> "w4Eval";
"assertIntDivisor" -> "w4ITE";
"assertIntDivisor" -> "w4Not";
"assertIntDivisor" -> "w4Thunk";
"assertIntDivisor" -> "x";
"assocsSubst" -> "assocsSubst";
"assocsSubst" -> "nest";
"assocsSubst" -> "ppWithNames";
"assocsSubst" -> "ppWithNamesPrec";
"assocsSubst" -> "text";
"assocsSubst" -> "vcat";
"assocsSubst" -> "x";
"assume" -> "p";
"assume" -> "toSMT";
"astOfCmd" -> "rPrint";
"astOfCmd" -> "replCheckExpr";
"astOfCmd" -> "replParseExpr";
"backticks" -> "hcat";
"badIsEnv" -> "panic";
"badIsEnv" -> "x";
"badUtf8" -> "raise";
"barrelShifter" -> "memoMap";
"barrelShifter" -> "mergeSeqMap";
"barrelShifter" -> "x";
"binBV" -> "f";
"binBV" -> "mkBv";
"binBV" -> "x";
"binOp" -> "at";
"binOp" -> "defaultFixity";
"binOp" -> "f";
"binOp" -> "x";
"binary" -> "f";
"binary" -> "x";
"bindItVariable" -> "freshName";
"bindItVariable" -> "getDynEnv";
"bindItVariable" -> "itIdent";
"bindItVariable" -> "liftModuleCmd";
"bindItVariable" -> "setDynEnv";
"bindItVariableVal" -> "bindItVariable";
"bindItVariableVal" -> "getPrimMap";
"bindItVariableVal" -> "rEval";
"bindItVariables" -> "bindItVariable";
"bindType" -> "p";
"bindType" -> "tvUnique";
"bindVar" -> "bindVar";
"bindVar" -> "emptyMGU";
"bindVar" -> "emptySubst";
"bindVar" -> "nameUnique";
"bindVar" -> "ppLocName";
"bindVar" -> "singleSubst";
"bindVar" -> "tNoUser";
"bindVar" -> "uncheckedSingleSubst";
"bindVar" -> "uniError";
"bindVar" -> "x";
"bindVarDirect" -> "nameUnique";
"bindVarList" -> "nameUnique";
"bitGreaterThan" -> "bitLessThan";
"bitGreaterThan" -> "x";
"bitLessThan" -> "x";
"bitsValueLessThan" -> "bitsValueLessThan";
"blackhole" -> "io";
"blackhole" -> "runEval";
"blackhole" -> "x";
"boundLNames" -> "boundNames";
"boundNames" -> "boundNamesSet";
"braces" -> "liftPJ1";
"brackets" -> "liftPJ1";
"branchEnvs" -> "evalMatch";
"browseCmd" -> "browseMParams";
"browseCmd" -> "browseNewtypes";
"browseCmd" -> "browsePrimTys";
"browseCmd" -> "browseTSyns";
"browseCmd" -> "browseVars";
"browseCmd" -> "f";
"browseCmd" -> "getFocusedEnv";
"browseCmd" -> "getModNames";
"browseCmd" -> "hasAnyModName";
"browseCmd" -> "rPutStrLn";
"browseCmd" -> "x";
"browseMParams" -> "hang";
"browseMParams" -> "pp";
"browseMParams" -> "ppBlock";
"browseNewtypes" -> "ppSection";
"browsePrimTys" -> "pp";
"browsePrimTys" -> "ppSection";
"browseTSyns" -> "pp";
"browseTSyns" -> "ppSection";
"browseVars" -> "char";
"browseVars" -> "hang";
"browseVars" -> "p";
"browseVars" -> "pp";
"browseVars" -> "ppSection";
"bsig256_0" -> "x";
"bsig256_1" -> "x";
"bsig512_0" -> "x";
"bsig512_1" -> "x";
"buildSolverCtxt" -> "computePropIntervals";
"buildSolverCtxt" -> "p";
"buildSolverCtxt" -> "pFin";
"buildSolverCtxt" -> "pIsLiteral";
"buildSolverCtxt" -> "solveCmpInst";
"buildSolverCtxt" -> "solveEqInst";
"buildSolverCtxt" -> "solveFLiteralInst";
"buildSolverCtxt" -> "solveFieldInst";
"buildSolverCtxt" -> "solveIntegralInst";
"buildSolverCtxt" -> "solveLiteralInst";
"buildSolverCtxt" -> "solveLogicInst";
"buildSolverCtxt" -> "solveRingInst";
"buildSolverCtxt" -> "solveRoundInst";
"buildSolverCtxt" -> "solveSignedCmpInst";
"buildSolverCtxt" -> "solveValidFloat";
"buildSolverCtxt" -> "solveZeroInst";
"buildSolverCtxt" -> "superclassSet";
"builtInType" -> "arrayName";
"builtInType" -> "floatName";
"builtInType" -> "packIdent";
"builtInType" -> "preludeName";
"builtInType" -> "x";
"bumpCounter" -> "io";
"bvVal" -> "x";
"byteStringToInteger" -> "byteStringToInteger";
"cStateToH" -> "cStateToInt";
"cStateUpdate" -> "commandList";
"cStateUpdate" -> "findCommand";
"cStateUpdate" -> "findCommandExact";
"cStateUpdate" -> "findNbCommand";
"cStateUpdate" -> "handleCtrlC";
"cStateUpdate" -> "interactiveConfig";
"cStateUpdate" -> "liftModuleCmd";
"cStateUpdate" -> "loadCmd";
"cStateUpdate" -> "loadPrelude";
"cStateUpdate" -> "moduleCmd";
"cStateUpdate" -> "moduleCmdResult";
"cStateUpdate" -> "offlineProveSat";
"cStateUpdate" -> "onlineProveSat";
"cStateUpdate" -> "parseCommand";
"cStateUpdate" -> "proveCmd";
"cStateUpdate" -> "qcCmd";
"cStateUpdate" -> "replCheckExpr";
"cStateUpdate" -> "replEvalExpr";
"cStateUpdate" -> "replParse";
"cStateUpdate" -> "replParseExpr";
"cStateUpdate" -> "runCommand";
"cStateUpdate" -> "sanitize";
"cStateUpdate" -> "satCmd";
"cStateUpdate" -> "setOptionCmd";
"cStateUpdate" -> "splitCommand";
"cacheCallStack" -> "combineCallStacks";
"cacheCallStack" -> "f";
"cantFindFile" -> "raise";
"catch" -> "rethrowEvalError";
"ccatV" -> "evalTF";
"ccatV" -> "fromSeq";
"ccatV" -> "indexWordValue";
"ccatV" -> "joinWordVal";
"ccatV" -> "lookupSeqMap";
"ccatV" -> "mkSeq";
"ccatV" -> "sDelay";
"cdCmd" -> "f";
"cdCmd" -> "io";
"cdCmd" -> "rPutStrLn";
"cdCmd" -> "raise";
"ceilingV" -> "fpRndRTP";
"ceilingV" -> "rationalCeiling";
"ceilingV" -> "roundOp";
"ceilingV" -> "x";
"ch" -> "x";
"changeExport" -> "panic";
"char" -> "liftPJ";
"checkArm" -> "checkArm";
"checkArm" -> "checkMatch";
"checkArm" -> "f";
"checkArm" -> "reportError";
"checkArm" -> "tMul";
"checkArm" -> "withVars";
"checkArm" -> "x";
"checkBase" -> "noWarns";
"checkDecl" -> "checkSchema";
"checkDecl" -> "exprSchema";
"checkDecl" -> "reportError";
"checkDeclGroup" -> "checkDecl";
"checkDeclGroup" -> "checkSchema";
"checkDeclGroup" -> "withVars";
"checkDeclGroup" -> "x";
"checkDecls" -> "checkDeclGroup";
"checkDecls" -> "checkDecls";
"checkDecls" -> "declsLinter";
"checkDecls" -> "getFocusedEnv";
"checkDecls" -> "getPrimMap";
"checkDecls" -> "interactive";
"checkDecls" -> "interactiveName";
"checkDecls" -> "rename";
"checkDecls" -> "runModuleM";
"checkDecls" -> "typecheck";
"checkDecls" -> "withVars";
"checkDocs" -> "f";
"checkDocs" -> "recordError";
"checkE" -> "appTys";
"checkE" -> "checkE";
"checkE" -> "checkFun";
"checkE" -> "checkHasType";
"checkE" -> "checkRecUpd";
"checkE" -> "checkTypeOfKind";
"checkE" -> "combineMaps";
"checkE" -> "curRange";
"checkE" -> "desugarLiteral";
"checkE" -> "expectFin";
"checkE" -> "expectRec";
"checkE" -> "expectSeq";
"checkE" -> "expectTuple";
"checkE" -> "f";
"checkE" -> "getCallStacks";
"checkE" -> "inRange";
"checkE" -> "inferCArm";
"checkE" -> "inferDs";
"checkE" -> "instantiateWith";
"checkE" -> "lookupVar";
"checkE" -> "mkPrim";
"checkE" -> "newGoals";
"checkE" -> "newHasGoal";
"checkE" -> "newType";
"checkE" -> "noArgDescr";
"checkE" -> "packIdent";
"checkE" -> "selSrc";
"checkE" -> "smallest";
"checkE" -> "t1";
"checkE" -> "t2";
"checkE" -> "t3";
"checkE" -> "tBit";
"checkE" -> "tFun";
"checkE" -> "traverseRecordMap";
"checkE" -> "uncheckedTypeArg";
"checkE" -> "unify";
"checkE" -> "withMonoTypes";
"checkE" -> "x";
"checkEnv" -> "addRenamerWarning";
"checkEnv" -> "containsOverlap";
"checkExpr" -> "exprLinter";
"checkExpr" -> "getFocusedEnv";
"checkExpr" -> "getPrimMap";
"checkExpr" -> "interactive";
"checkExpr" -> "interactiveName";
"checkExpr" -> "noPat";
"checkExpr" -> "rename";
"checkExpr" -> "runModuleM";
"checkExpr" -> "typecheck";
"checkFixs" -> "f";
"checkFixs" -> "recordError";
"checkFixs" -> "x";
"checkFun" -> "checkE";
"checkFun" -> "checkP";
"checkFun" -> "expectFun";
"checkFun" -> "inNewScope";
"checkFun" -> "withMonoTypes";
"checkFun" -> "x";
"checkHas" -> "checkHas";
"checkHas" -> "displayOrder";
"checkHas" -> "f";
"checkHas" -> "fieldSet";
"checkHas" -> "lookupField";
"checkHas" -> "reportError";
"checkHas" -> "sel";
"checkHas" -> "tNoUser";
"checkHasType" -> "newGoals";
"checkHasType" -> "unify";
"checkInfLength" -> "noWarns";
"checkKind" -> "cleanupErrors";
"checkKind" -> "computeFreeVarNames";
"checkKind" -> "kNewType";
"checkKind" -> "kRecordError";
"checkKind" -> "nameInfo";
"checkLabels" -> "record";
"checkLabels" -> "x";
"checkMatch" -> "checkDecl";
"checkMatch" -> "checkTypeIs";
"checkMatch" -> "exprType";
"checkMatch" -> "reportError";
"checkMatch" -> "t1";
"checkMatch" -> "tMono";
"checkMatch" -> "tNoUser";
"checkMatch" -> "tNum";
"checkMatch" -> "x";
"checkModule" -> "checkSingleModule";
"checkModule" -> "getLoaded";
"checkModule" -> "tf";
"checkModuleInstance" -> "addGoals";
"checkModuleInstance" -> "checkTyParams";
"checkModuleInstance" -> "checkValParams";
"checkModuleInstance" -> "instantiateModule";
"checkModuleInstance" -> "p";
"checkMonoB" -> "checkFun";
"checkMonoB" -> "f";
"checkMonoB" -> "inRangeMb";
"checkMonoB" -> "panic";
"checkNamingEnv" -> "containsOverlap";
"checkNamingEnv" -> "toNameDisp";
"checkNewtype" -> "collectGoals";
"checkNewtype" -> "doCheckType";
"checkNewtype" -> "inRange";
"checkNewtype" -> "kInRange";
"checkNewtype" -> "newtypeParam";
"checkNewtype" -> "simplifyAllConstraints";
"checkNewtype" -> "t1";
"checkNewtype" -> "withTParams";
"checkNewtype" -> "x";
"checkNoParams" -> "curRange";
"checkNoParams" -> "inRange";
"checkNoParams" -> "p";
"checkNoParams" -> "recordError";
"checkP" -> "emptyRange";
"checkP" -> "inferP";
"checkP" -> "p";
"checkP" -> "recordError";
"checkP" -> "unify";
"checkP" -> "x";
"checkPPFloatFormat" -> "noWarns";
"checkPPFloatFormat" -> "parsePPFloatFormat";
"checkParameterConstraints" -> "checkProp";
"checkParameterConstraints" -> "p";
"checkParameterConstraints" -> "schemaParam";
"checkParameterConstraints" -> "tRebuild";
"checkParameterConstraints" -> "withTParams";
"checkParameterConstraints" -> "x";
"checkParameterType" -> "cvtK";
"checkPrimType" -> "checkProp";
"checkPrimType" -> "cvtK";
"checkPrimType" -> "p";
"checkPrimType" -> "withTParams";
"checkProp" -> "doCheckType";
"checkPropSyn" -> "checkProp";
"checkPropSyn" -> "collectGoals";
"checkPropSyn" -> "inRange";
"checkPropSyn" -> "pAnd";
"checkPropSyn" -> "propSynParam";
"checkPropSyn" -> "simplifyAllConstraints";
"checkPropSyn" -> "t1";
"checkPropSyn" -> "tRebuild";
"checkPropSyn" -> "tsName";
"checkPropSyn" -> "withTParams";
"checkPropSyn" -> "x";
"checkProver" -> "io";
"checkProver" -> "modifyRW_";
"checkProver" -> "noWarns";
"checkProver" -> "proverListString";
"checkRecUpd" -> "checkE";
"checkRecUpd" -> "nameLoc";
"checkRecUpd" -> "newHasGoal";
"checkRecUpd" -> "newParamName";
"checkRecUpd" -> "newType";
"checkRecUpd" -> "p";
"checkRecUpd" -> "packIdent";
"checkRecUpd" -> "panic";
"checkRecUpd" -> "selSrc";
"checkRecUpd" -> "tFun";
"checkRecUpd" -> "tMono";
"checkSatNum" -> "noWarns";
"checkSchema" -> "checkProp";
"checkSchema" -> "checkTypeIs";
"checkSchema" -> "collectGoals";
"checkSchema" -> "doCheckType";
"checkSchema" -> "inRange";
"checkSchema" -> "pSplitAnd";
"checkSchema" -> "schemaParam";
"checkSchema" -> "simplify";
"checkSchema" -> "t1";
"checkSchema" -> "t2";
"checkSchema" -> "tNoUser";
"checkSchema" -> "tRebuild";
"checkSchema" -> "tpName";
"checkSchema" -> "withTParams";
"checkSchema" -> "withTVar";
"checkSchema" -> "x";
"checkSigB" -> "addGoals";
"checkSigB" -> "applySubst";
"checkSigB" -> "applySubstGoals";
"checkSigB" -> "applySubstPreds";
"checkSigB" -> "checkFun";
"checkSigB" -> "collectGoals";
"checkSigB" -> "extendSubst";
"checkSigB" -> "inRangeMb";
"checkSigB" -> "pSplitAnd";
"checkSigB" -> "proveImplication";
"checkSigB" -> "simplifyAllConstraints";
"checkSigB" -> "t0";
"checkSigB" -> "tpVar";
"checkSigB" -> "withTParams";
"checkSigs" -> "f";
"checkSigs" -> "recordError";
"checkSingleModule" -> "getByteReader";
"checkSingleModule" -> "getPrimMap";
"checkSingleModule" -> "importedModule";
"checkSingleModule" -> "io";
"checkSingleModule" -> "moduleLinter";
"checkSingleModule" -> "moduleNameMismatch";
"checkSingleModule" -> "noIfaceParams";
"checkSingleModule" -> "noIncludeErrors";
"checkSingleModule" -> "noPat";
"checkSingleModule" -> "notParamInstModName";
"checkSingleModule" -> "p";
"checkSingleModule" -> "preludeName";
"checkSingleModule" -> "removeIncludesModule";
"checkSingleModule" -> "renameModule";
"checkSingleModule" -> "rewModule";
"checkSingleModule" -> "typecheck";
"checkTShadowing" -> "recordError";
"checkTShadowing" -> "tpName";
"checkTUser" -> "abstractTypeTC";
"checkTUser" -> "appTy";
"checkTUser" -> "checkKind";
"checkTUser" -> "f";
"checkTUser" -> "kExistTVar";
"checkTUser" -> "kInstantiateT";
"checkTUser" -> "kLookupAbstractType";
"checkTUser" -> "kLookupNewtype";
"checkTUser" -> "kLookupParamType";
"checkTUser" -> "kLookupTSyn";
"checkTUser" -> "kLookupTyVar";
"checkTUser" -> "kNewGoals";
"checkTUser" -> "kNewType";
"checkTUser" -> "kRecordError";
"checkTUser" -> "kSetKind";
"checkTUser" -> "listSubst";
"checkTUser" -> "mtpParam";
"checkTUser" -> "newtypeTyCon";
"checkTUser" -> "panic";
"checkTUser" -> "t1";
"checkTUser" -> "tc";
"checkTUser" -> "tpVar";
"checkTUser" -> "tsName";
"checkTUser" -> "x";
"checkThat" -> "p";
"checkTyParam" -> "checkType";
"checkTyParam" -> "newType";
"checkTyParam" -> "recordError";
"checkTyParams" -> "f";
"checkTyParams" -> "mtpParam";
"checkTyParams" -> "nameIdent";
"checkTyParams" -> "nameLoc";
"checkTyParams" -> "newGoal";
"checkTyParams" -> "panic";
"checkTyParams" -> "recordError";
"checkTyParams" -> "tp";
"checkTyParams" -> "tpName";
"checkTyParams" -> "tsName";
"checkTyParams" -> "x";
"checkTySyn" -> "collectGoals";
"checkTySyn" -> "doCheckType";
"checkTySyn" -> "inRange";
"checkTySyn" -> "simplifyAllConstraints";
"checkTySyn" -> "t1";
"checkTySyn" -> "tRebuild";
"checkTySyn" -> "tsName";
"checkTySyn" -> "tySynParam";
"checkTySyn" -> "withTParams";
"checkTySyn" -> "x";
"checkType" -> "checkKind";
"checkType" -> "checkType";
"checkType" -> "doCheckType";
"checkType" -> "lookupTVar";
"checkType" -> "reportError";
"checkType" -> "schemaParam";
"checkType" -> "t1";
"checkType" -> "tRebuild";
"checkType" -> "tc";
"checkType" -> "withTParams";
"checkTypeIs" -> "checkType";
"checkTypeIs" -> "reportError";
"checkTypeOfKind" -> "checkType";
"checkUnsolvable" -> "debugBlock";
"checkUnsolvable" -> "declareVar";
"checkUnsolvable" -> "flatGoal";
"checkUnsolvable" -> "isNumeric";
"checkUnsolvable" -> "pop";
"checkUnsolvable" -> "push";
"checkUnsolvable" -> "unsolvable";
"checkValParams" -> "groupDecls";
"checkValParams" -> "listParamSubst";
"checkValParams" -> "makeValParamDef";
"checkValParams" -> "nameIdent";
"checkValParams" -> "nameLoc";
"checkValParams" -> "panic";
"checkValParams" -> "recordError";
"checkValParams" -> "x";
"cleanupError" -> "isFreeTV";
"cleanupErrors" -> "errorImportance";
"cleanupErrors" -> "subsumes";
"clearEditPath" -> "modifyRW_";
"clearLoadedMod" -> "modifyRW_";
"clearLoadedMod" -> "updateREPLTitle";
"clearLoadedMod" -> "x";
"cmdProveSat" -> "bindItVariable";
"cmdProveSat" -> "bindItVariables";
"cmdProveSat" -> "cmdProveSat";
"cmdProveSat" -> "fixNameDisp";
"cmdProveSat" -> "getKnownUser";
"cmdProveSat" -> "getPropertyNames";
"cmdProveSat" -> "getUser";
"cmdProveSat" -> "getUserSatNum";
"cmdProveSat" -> "getUserShowProverStats";
"cmdProveSat" -> "mkInteractiveRange";
"cmdProveSat" -> "mkSolverResult";
"cmdProveSat" -> "offlineProveSat";
"cmdProveSat" -> "onlineProveSat";
"cmdProveSat" -> "panic";
"cmdProveSat" -> "pp";
"cmdProveSat" -> "printCounterexample";
"cmdProveSat" -> "printSafetyViolation";
"cmdProveSat" -> "printSatisfyingModel";
"cmdProveSat" -> "rPutStr";
"cmdProveSat" -> "rPutStrLn";
"cmdProveSat" -> "replParseExpr";
"cmdProveSat" -> "rethrowErrorCall";
"cmdProveSat" -> "showProverStats";
"cmdProveSat" -> "x";
"cmpNameDisplay" -> "fmtModName";
"cmpNameDisplay" -> "getNameFormat";
"cmpNameDisplay" -> "identText";
"cmpNameDisplay" -> "nameFixity";
"cmpNameDisplay" -> "nameIdent";
"cmpNameDisplay" -> "nameInfo";
"cmpNameLexical" -> "identText";
"cmpNameLexical" -> "modNameToText";
"cmpNameLexical" -> "nameIdent";
"cmpNameLexical" -> "nameInfo";
"cmpValue" -> "enumerateSeqMap";
"cmpValue" -> "evalPanic";
"cmpValue" -> "fromVBit";
"cmpValue" -> "fromVFloat";
"cmpValue" -> "fromVInteger";
"cmpValue" -> "fromVRational";
"cmpValue" -> "fromVRecord";
"cmpValue" -> "fromVSeq";
"cmpValue" -> "fromVTuple";
"cmpValue" -> "fromVWord";
"cmpValue" -> "isTBit";
"cmpValue" -> "panic";
"cmpValue" -> "recordElements";
"collectErrors" -> "f";
"collectErrors" -> "raise";
"collectErrors" -> "tryNoIncM";
"collectGoals" -> "applySubst";
"collectGoals" -> "emptyGoals";
"collectGoals" -> "getGoals";
"colon" -> "comma";
"colon" -> "identText";
"colon" -> "int";
"colon" -> "liftPJ";
"colon" -> "modNameToText";
"colon" -> "panic";
"colon" -> "pp";
"colon" -> "text";
"combLoc" -> "braces";
"combLoc" -> "comma";
"combLoc" -> "empty";
"combLoc" -> "f";
"combLoc" -> "fsep";
"combLoc" -> "int";
"combLoc" -> "pp";
"combLoc" -> "ppNestedSels";
"combLoc" -> "ppSelector";
"combLoc" -> "punctuate";
"combLoc" -> "rComb";
"combLoc" -> "sel";
"combLoc" -> "selName";
"combLoc" -> "text";
"combLoc" -> "x";
"combine" -> "duplicates";
"combine" -> "panic";
"combine" -> "x";
"combineCallStacks" -> "f";
"combineMaps" -> "duplicates";
"combineMaps" -> "panic";
"combineMaps" -> "x";
"comma" -> "liftPJ";
"commaSep" -> "comma";
"commaSep" -> "fsep";
"commaSep" -> "punctuate";
"commandList" -> "cdCmd";
"commandList" -> "dumpTestsCmd";
"commandList" -> "editCmd";
"commandList" -> "loadCmd";
"commandList" -> "moduleCmd";
"commandList" -> "nbCommandList";
"commandList" -> "quitCmd";
"commandList" -> "readFileCmd";
"commandList" -> "reloadCmd";
"commandList" -> "runShellCmd";
"commandList" -> "writeFileCmd";
"commands" -> "commandList";
"commands" -> "emptyTrie";
"commands" -> "insertTrie";
"complementV" -> "logicUnary";
"computeBlockingPred" -> "doW4Eval";
"computeBlockingPred" -> "modelPred";
"computeEnv" -> "freshenName";
"computeEnv" -> "instTyName";
"computeEnv" -> "p";
"computeEnv" -> "t1";
"computeEnv" -> "t2";
"computeEnv" -> "tRebuild";
"computeEnv" -> "tc";
"computeEnv" -> "tp";
"computeEnv" -> "tsName";
"computeEnv" -> "x";
"computeExponent" -> "intV";
"computeExponent" -> "iteValue";
"computeExponent" -> "mulV";
"computeFreeVarNames" -> "checkE";
"computeFreeVarNames" -> "checkParameterConstraints";
"computeFreeVarNames" -> "checkParameterType";
"computeFreeVarNames" -> "checkPrimType";
"computeFreeVarNames" -> "checkSigB";
"computeFreeVarNames" -> "inferBinds";
"computeFreeVarNames" -> "inferDs";
"computeFreeVarNames" -> "inferModule";
"computeFreeVarNames" -> "isFreeTV";
"computeFreeVarNames" -> "tvUnique";
"computeFreeVarNames" -> "x";
"computeModel" -> "computeModel";
"computeModel" -> "panic";
"computeModel" -> "unFinType";
"computeModel" -> "varShapeToValue";
"computeModel" -> "varToExpr";
"computePropIntervals" -> "ch";
"computePropIntervals" -> "int";
"computePropIntervals" -> "p";
"computePropIntervals" -> "propInterval";
"computePropIntervals" -> "updateInterval";
"computePropIntervals" -> "x";
"concatSeqMap" -> "lookupSeqMap";
"concatSeqMap" -> "x";
"containsOverlap" -> "panic";
"convertible" -> "convertible";
"convertible" -> "fieldSet";
"convertible" -> "proofObligation";
"convertible" -> "recordElements";
"convertible" -> "reportError";
"convertible" -> "t1";
"convertible" -> "t2";
"convertible" -> "tMono";
"convertible" -> "tNoUser";
"convertible" -> "x";
"cppKind" -> "braces";
"cppKind" -> "brackets";
"cppKind" -> "commaSep";
"cppKind" -> "displayFields";
"cppKind" -> "f";
"cppKind" -> "fsep";
"cppKind" -> "integer";
"cppKind" -> "optParens";
"cppKind" -> "p";
"cppKind" -> "parens";
"cppKind" -> "pp";
"cppKind" -> "ppNamed";
"cppKind" -> "ppNamed\'";
"cppKind" -> "sep";
"cppKind" -> "t1";
"cppKind" -> "t2";
"cppKind" -> "text";
"cppKind" -> "wrap";
"cppKind" -> "x";
"cryIsEqual" -> "aNat\'";
"cryIsEqual" -> "aTVar";
"cryIsEqual" -> "matchDefault";
"cryIsEqual" -> "pBin";
"cryIsEqual" -> "t1";
"cryIsEqual" -> "t2";
"cryIsEqual" -> "tryAddConst";
"cryIsEqual" -> "tryCancelVar";
"cryIsEqual" -> "tryEqAddInf";
"cryIsEqual" -> "tryEqK";
"cryIsEqual" -> "tryEqMin";
"cryIsEqual" -> "tryEqMins";
"cryIsEqual" -> "tryEqMulConst";
"cryIsEqual" -> "tryEqVar";
"cryIsEqual" -> "tryLinearSolution";
"cryIsFin" -> "cryIsFinType";
"cryIsFin" -> "p";
"cryIsFin" -> "pIsFin";
"cryIsFinType" -> "__";
"cryIsFinType" -> "f";
"cryIsFinType" -> "iIsFin";
"cryIsFinType" -> "pFin";
"cryIsFinType" -> "t1";
"cryIsFinType" -> "t2";
"cryIsFinType" -> "tNoUser";
"cryIsFinType" -> "tOne";
"cryIsFinType" -> "tZero";
"cryIsFinType" -> "tc";
"cryIsFinType" -> "typeInterval";
"cryIsFinType" -> "x";
"cryIsGeq" -> "aNat\'";
"cryIsGeq" -> "aTVar";
"cryIsGeq" -> "geqByInterval";
"cryIsGeq" -> "matchDefault";
"cryIsGeq" -> "pBin";
"cryIsGeq" -> "t1";
"cryIsGeq" -> "t2";
"cryIsGeq" -> "tryAddConst";
"cryIsGeq" -> "tryCancelVar";
"cryIsGeq" -> "tryGeqKThan";
"cryIsGeq" -> "tryGeqThanK";
"cryIsGeq" -> "tryGeqThanSub";
"cryIsGeq" -> "tryGeqThanVar";
"cryIsGeq" -> "tryMinIsGeq";
"cryIsNotEqual" -> "matchDefault";
"cryIsNotEqual" -> "pBin";
"cryIsNotEqual" -> "t1";
"cryIsNotEqual" -> "t2";
"cryIsPrime" -> "primeTable";
"cryIsPrime" -> "tNoUser";
"cryIsPrime" -> "tc";
"cryptolTcContents" -> "ec_add_nonzero";
"cryptolTcContents" -> "ec_double";
"cryptolTcContents" -> "ec_mult";
"cryptolTcContents" -> "ec_twin_mult";
"cryptolTcContents" -> "integerToBigNat";
"cryptolTcContents" -> "primeModulus";
"customError" -> "x";
"cvtK" -> "cvtK";
"deIfaceDecls" -> "mkIfaceDecl";
"debugBlock" -> "pp";
"debugBlock" -> "x";
"declHole" -> "evalPanic";
"declHole" -> "pp";
"declHole" -> "ppLocName";
"declareVar" -> "cryInfNat";
"declareVar" -> "isFreeTV";
"declareVar" -> "x";
"defaultAndSimplify" -> "defaultLiterals";
"defaultAndSimplify" -> "improveByDefaultingWithPure";
"defaultAndSimplify" -> "isEmptySubst";
"defaultAndSimplify" -> "quickSolver";
"defaultConfig" -> "start";
"defaultFixity" -> "arrayName";
"defaultFixity" -> "arrayPrim";
"defaultFixity" -> "exprModName";
"defaultFixity" -> "floatName";
"defaultFixity" -> "floatPrim";
"defaultFixity" -> "identText";
"defaultFixity" -> "interactiveName";
"defaultFixity" -> "isInfixIdent";
"defaultFixity" -> "isParamInstModName";
"defaultFixity" -> "mkIdent";
"defaultFixity" -> "mkInfix";
"defaultFixity" -> "modNameChunks";
"defaultFixity" -> "modNameToText";
"defaultFixity" -> "modParamIdent";
"defaultFixity" -> "noModuleName";
"defaultFixity" -> "notParamInstModName";
"defaultFixity" -> "nullIdent";
"defaultFixity" -> "packIdent";
"defaultFixity" -> "packInfix";
"defaultFixity" -> "packModName";
"defaultFixity" -> "paramInstModName";
"defaultFixity" -> "prelPrim";
"defaultFixity" -> "preludeName";
"defaultFixity" -> "preludeReferenceName";
"defaultFixity" -> "primeECName";
"defaultFixity" -> "primeECPrim";
"defaultFixity" -> "suiteBName";
"defaultFixity" -> "suiteBPrim";
"defaultFixity" -> "textToModName";
"defaultFixity" -> "unpackIdent";
"defaultFreeVar" -> "fmap\'";
"defaultFreeVar" -> "panic";
"defaultFreeVar" -> "pp";
"defaultFreeVar" -> "tBit";
"defaultFreeVar" -> "tNum";
"defaultFreeVar" -> "x";
"defaultLiterals" -> "flitDefaultCandidates";
"defaultLiterals" -> "goalsFromList";
"defaultLiterals" -> "listSubst";
"defaultLiterals" -> "p";
"defaultLiterals" -> "pField";
"defaultLiterals" -> "pIntegral";
"defaultLiterals" -> "pLogic";
"defaultLiterals" -> "tInteger";
"defaultLiterals" -> "tRational";
"defaultLiterals" -> "tvInfo";
"defaultRW" -> "mkUserEnv";
"defaultRW" -> "userOptions";
"defaultReplExpr" -> "at";
"defaultReplExpr" -> "defaultReplExpr\'";
"defaultReplExpr" -> "emptyRange";
"defaultReplExpr" -> "flitDefaultCandidates";
"defaultReplExpr" -> "goalsFromList";
"defaultReplExpr" -> "isNumeric";
"defaultReplExpr" -> "listParamSubst";
"defaultReplExpr" -> "p";
"defaultReplExpr" -> "pSplitAnd";
"defaultReplExpr" -> "tBit";
"defaultReplExpr" -> "tInteger";
"defaultReplExpr" -> "tRational";
"defaultReplExpr" -> "tWidth";
"defaultReplExpr" -> "tWord";
"defaultReplExpr" -> "x";
"defaultReplExpr\'" -> "boundNames";
"defaultReplExpr\'" -> "boundNamesSet";
"defaultReplExpr\'" -> "listSubst";
"defaultReplExpr\'" -> "pSplitAnd";
"defaultReplExpr\'" -> "shrinkModel";
"defaultReplExpr\'" -> "tNat\'";
"defaultReplExpr\'" -> "tp";
"defaultReplExpr\'" -> "tpVar";
"defaultReplExpr\'" -> "tryGetModel";
"defaultReplExpr\'" -> "x";
"delayFill" -> "runEval";
"delayFill" -> "x";
"destEProofAbs" -> "p";
"desugarLiteral" -> "curRange";
"desugarLiteral" -> "f";
"desugarLiteral" -> "lit";
"desugarLiteral" -> "mkPrim";
"desugarLiteral" -> "packIdent";
"desugarLiteral" -> "x";
"displayCallStack" -> "emptyRange";
"displayCallStack" -> "f";
"displayCallStack" -> "pp";
"displayCallStack" -> "text";
"displayCallStack" -> "vcat";
"displayFields" -> "canonicalFields";
"displayFields" -> "displayOrder";
"displayFields" -> "panic";
"displayFields" -> "x";
"displayVersion" -> "commitBranch";
"displayVersion" -> "commitDirty";
"displayVersion" -> "commitHash";
"distinctV" -> "valEq";
"distrLoc" -> "x";
"divV" -> "integralBinary";
"divV" -> "x";
"doCheckType" -> "checkKind";
"doCheckType" -> "checkTUser";
"doCheckType" -> "doCheckType";
"doCheckType" -> "kInRange";
"doCheckType" -> "kNewType";
"doCheckType" -> "kRecordError";
"doCheckType" -> "kRecordWarning";
"doCheckType" -> "kWildOK";
"doCheckType" -> "panic";
"doCheckType" -> "t1";
"doCheckType" -> "t2";
"doCheckType" -> "tcon";
"doCheckType" -> "traverseRecordMap";
"doCheckType" -> "x";
"doInst" -> "checkNewtype";
"doInst" -> "checkParameterConstraints";
"doInst" -> "checkParameterType";
"doInst" -> "checkPrimType";
"doInst" -> "checkPropSyn";
"doInst" -> "checkSchema";
"doInst" -> "checkTySyn";
"doInst" -> "checkType";
"doInst" -> "listParamSubst";
"doInst" -> "newGoals";
"doInst" -> "t1";
"doInst" -> "tp";
"doInst" -> "tpVar";
"doInst" -> "tvInfo";
"doInst" -> "unify";
"doLoadModule" -> "addModParams";
"doLoadModule" -> "addPrelude";
"doLoadModule" -> "checkModule";
"doLoadModule" -> "evalPrim";
"doLoadModule" -> "failedToParameterizeModDefs";
"doLoadModule" -> "getCallStacks";
"doLoadModule" -> "getEvalOpts";
"doLoadModule" -> "importedModule";
"doLoadModule" -> "isParamInstModName";
"doLoadModule" -> "loadDeps";
"doLoadModule" -> "loadedModule";
"doLoadModule" -> "loading";
"doLoadModule" -> "logPutStrLn";
"doLoadModule" -> "modifyEvalEnv";
"doLoadModule" -> "notAParameterizedModule";
"doLoadModule" -> "pretty";
"doLoadModule" -> "withLogger";
"doSBVEval" -> "p";
"doSBVEval" -> "x";
"doW4Eval" -> "p";
"doW4Eval" -> "w4Eval";
"doW4Eval" -> "x";
"dropSeqMap" -> "lookupSeqMap";
"dump" -> "ppWithNames";
"dump" -> "x";
"dumpTestsCmd" -> "getDynEnv";
"dumpTestsCmd" -> "getKnownUser";
"dumpTestsCmd" -> "getPPValOpts";
"dumpTestsCmd" -> "io";
"dumpTestsCmd" -> "rEval";
"dumpTestsCmd" -> "raise";
"dumpTestsCmd" -> "renderOneLine";
"dumpTestsCmd" -> "replEvalExpr";
"dumpTestsCmd" -> "replParseExpr";
"dumpTestsCmd" -> "x";
"dumpableType" -> "dumpableType";
"dumpableType" -> "randomValue";
"dumpableType" -> "t1";
"dumpableType" -> "t2";
"duplicateModuleName" -> "raise";
"duplicates" -> "x";
"eChar" -> "braces";
"eChar" -> "brackets";
"eChar" -> "colon";
"eChar" -> "comma";
"eChar" -> "commaSep";
"eChar" -> "displayFields";
"eChar" -> "ePrim";
"eChar" -> "f";
"eChar" -> "isInfixIdent";
"eChar" -> "nameIdent";
"eChar" -> "nest";
"eChar" -> "optParens";
"eChar" -> "parens";
"eChar" -> "pp";
"eChar" -> "ppLam";
"eChar" -> "ppWithNames";
"eChar" -> "ppWithNamesPrec";
"eChar" -> "prelPrim";
"eChar" -> "punctuate";
"eChar" -> "sel";
"eChar" -> "sep";
"eChar" -> "splitAbs";
"eChar" -> "splitProofAbs";
"eChar" -> "splitTAbs";
"eChar" -> "splitWhile";
"eChar" -> "tNum";
"eChar" -> "tWord";
"eChar" -> "text";
"eChar" -> "vcat";
"eChar" -> "x";
"eError" -> "ePrim";
"eError" -> "eString";
"eError" -> "prelPrim";
"eError" -> "tNum";
"eFromTo" -> "eFromToType";
"eFromTo" -> "errorMessage";
"eFromToType" -> "exprToNumT";
"ePrim" -> "lookupPrimDecl";
"eString" -> "eChar";
"eString" -> "tChar";
"ecFractionV" -> "evalPanic";
"ecFractionV" -> "fpLit";
"ecFractionV" -> "p";
"ecFractionV" -> "ratio";
"ecFractionV" -> "x";
"ecNumberV" -> "evalPanic";
"ecNumberV" -> "mkLit";
"ecSplitV" -> "evalPanic";
"ecSplitV" -> "extractWordVal";
"ecSplitV" -> "fromSeq";
"ecSplitV" -> "isTBit";
"ecSplitV" -> "lookupSeqMap";
"ecSplitV" -> "p";
"ecSplitV" -> "sDelay";
"ec_add" -> "ec_add_nonzero";
"ec_add" -> "p";
"ec_add_nonzero" -> "ec_double";
"ec_add_nonzero" -> "mod_half";
"ec_add_nonzero" -> "mod_mul";
"ec_add_nonzero" -> "mod_square";
"ec_add_nonzero" -> "mod_sub";
"ec_add_nonzero" -> "mul2";
"ec_add_nonzero" -> "p";
"ec_add_nonzero" -> "zro";
"ec_double" -> "mod_add";
"ec_double" -> "mod_mul";
"ec_double" -> "mod_square";
"ec_double" -> "mod_sub";
"ec_double" -> "mul2";
"ec_double" -> "mul3";
"ec_double" -> "mul4";
"ec_double" -> "mul8";
"ec_double" -> "p";
"ec_double" -> "zro";
"ec_mult" -> "ec_add";
"ec_mult" -> "ec_double";
"ec_mult" -> "ec_normalize";
"ec_mult" -> "ec_sub";
"ec_mult" -> "integerToBigNat";
"ec_mult" -> "p";
"ec_mult" -> "panic";
"ec_mult" -> "widthInteger";
"ec_mult" -> "zro";
"ec_negate" -> "p";
"ec_normalize" -> "p";
"ec_normalize" -> "x";
"ec_sub" -> "ec_add";
"ec_sub" -> "p";
"ec_twin_mult" -> "cHead";
"ec_twin_mult" -> "cStateToH";
"ec_twin_mult" -> "cStateUpdate";
"ec_twin_mult" -> "ec_add";
"ec_twin_mult" -> "ec_double";
"ec_twin_mult" -> "ec_sub";
"ec_twin_mult" -> "f";
"ec_twin_mult" -> "integerToBigNat";
"ec_twin_mult" -> "normalizeForTwinMult";
"ec_twin_mult" -> "p";
"ec_twin_mult" -> "panic";
"ec_twin_mult" -> "u0";
"ec_twin_mult" -> "u1";
"ec_twin_mult" -> "widthInteger";
"ec_twin_mult" -> "x";
"ec_twin_mult" -> "zro";
"editCmd" -> "f";
"editCmd" -> "getEditPath";
"editCmd" -> "getLoadedMod";
"editCmd" -> "p";
"editCmd" -> "rPutStrLn";
"editCmd" -> "reloadCmd";
"editCmd" -> "replEdit";
"editCmd" -> "setEditPath";
"editCmd" -> "setLoadedMod";
"editCmd" -> "withROTempFile";
"elseTry" -> "elseTry";
"elseTry" -> "x";
"emit" -> "moves";
"emit" -> "p";
"emitFancy" -> "f";
"emitFancy" -> "p";
"emitS" -> "emit";
"emitS" -> "p";
"empty" -> "liftPJ";
"emptyMGU" -> "emptySubst";
"emptyRO" -> "f";
"emptyRO" -> "raise";
"emptyRO" -> "x";
"emptyRange" -> "start";
"endChar" -> "moves";
"endChar" -> "panic";
"endComment" -> "f";
"endComment" -> "moves";
"endComment" -> "p";
"endComment" -> "panic";
"endString" -> "moves";
"endString" -> "panic";
"enumerateIntBits" -> "enumerateIntBits\'";
"enumerateIntBits\'" -> "widthInteger";
"enumerateSeqMap" -> "lookupSeqMap";
"enumerateWordValue" -> "enumerateSeqMap";
"enumerateWordValue" -> "fromVBit";
"enumerateWordValueRev" -> "enumerateSeqMap";
"enumerateWordValueRev" -> "fromVBit";
"enumerateWordValueRev" -> "reverseSeqMap";
"eqV" -> "valEq";
"errorImportance" -> "addTVarsDescsAfter";
"errorImportance" -> "addTVarsDescsBefore";
"errorImportance" -> "comma";
"errorImportance" -> "commaSep";
"errorImportance" -> "cppKind";
"errorImportance" -> "displayOrder";
"errorImportance" -> "empty";
"errorImportance" -> "explainUnsolvable";
"errorImportance" -> "fsep";
"errorImportance" -> "int";
"errorImportance" -> "isFreeTV";
"errorImportance" -> "nest";
"errorImportance" -> "pp";
"errorImportance" -> "ppWithNames";
"errorImportance" -> "ppWithNamesPrec";
"errorImportance" -> "punctuate";
"errorImportance" -> "quotes";
"errorImportance" -> "sep";
"errorImportance" -> "t1";
"errorImportance" -> "t2";
"errorImportance" -> "tHasErrors";
"errorImportance" -> "text";
"errorImportance" -> "vcat";
"errorImportance" -> "warn";
"errorImportance" -> "x";
"errorInFile" -> "pp";
"errorInFile" -> "raise";
"errorInFile" -> "vcat";
"errorMessage" -> "x";
"errorV" -> "cryUserError";
"errorV" -> "isTBit";
"errorV" -> "lam";
"etaDelay" -> "bindType";
"etaDelay" -> "etaWord";
"etaDelay" -> "evalPanic";
"etaDelay" -> "evalValType";
"etaDelay" -> "f";
"etaDelay" -> "fromSeq";
"etaDelay" -> "fromVFun";
"etaDelay" -> "fromVNumPoly";
"etaDelay" -> "fromVPoly";
"etaDelay" -> "fromVRecord";
"etaDelay" -> "fromVTuple";
"etaDelay" -> "fromWordVal";
"etaDelay" -> "lam";
"etaDelay" -> "lookupField";
"etaDelay" -> "lookupSeqMap";
"etaDelay" -> "mapWithFieldName";
"etaDelay" -> "nlam";
"etaDelay" -> "panic";
"etaDelay" -> "sDelay";
"etaDelay" -> "t2";
"etaDelay" -> "tlam";
"etaDelay" -> "tp";
"etaDelay" -> "tpVar";
"etaDelay" -> "x";
"etaDelay" -> "zipRecords";
"etaWord" -> "fromWordVal";
"etaWord" -> "indexWordValue";
"etaWord" -> "memoMap";
"etaWord" -> "sDelay";
"evalBind" -> "evalBind";
"evalBind" -> "f";
"evalBind" -> "io";
"evalBind" -> "runEval";
"evalBind" -> "unDelay";
"evalBind" -> "x";
"evalCmd" -> "getPPValOpts";
"evalCmd" -> "rEvalRethrow";
"evalCmd" -> "rPutStrLn";
"evalCmd" -> "replEvalDecl";
"evalCmd" -> "replEvalExpr";
"evalCmd" -> "replParseInput";
"evalComp" -> "branchEnvs";
"evalComp" -> "evalExpr";
"evalComp" -> "evalListEnv";
"evalComp" -> "memoMap";
"evalComp" -> "mkSeq";
"evalComp" -> "toListEnv";
"evalDecl" -> "asPrim";
"evalDecl" -> "bindVar";
"evalDecl" -> "bindVarDirect";
"evalDecl" -> "cryNoPrimError";
"evalDecl" -> "evalExpr";
"evalDecl" -> "evalPrim";
"evalDecl" -> "nameLoc";
"evalDecl" -> "p";
"evalDeclGroup" -> "declHole";
"evalDeclGroup" -> "emptyEnv";
"evalDeclGroup" -> "evalDecl";
"evalDeclGroup" -> "fillHole";
"evalDeclGroup" -> "nameUnique";
"evalDecls" -> "evalDeclGroup";
"evalDecls" -> "evalPrim";
"evalDecls" -> "getCallStacks";
"evalDecls" -> "getDynEnv";
"evalDecls" -> "getEvalEnv";
"evalDecls" -> "getEvalOpts";
"evalDecls" -> "interactive";
"evalDecls" -> "io";
"evalDecls" -> "runModuleM";
"evalDecls" -> "setDynEnv";
"evalDecls" -> "x";
"evalError" -> "getCallStack";
"evalExpr" -> "bindType";
"evalExpr" -> "bindVar";
"evalExpr" -> "cacheCallStack";
"evalExpr" -> "defaultPPOpts";
"evalExpr" -> "emptyRange";
"evalExpr" -> "evalComp";
"evalExpr" -> "evalDecls";
"evalExpr" -> "evalExpr";
"evalExpr" -> "evalNumType";
"evalExpr" -> "evalPrim";
"evalExpr" -> "evalSel";
"evalExpr" -> "evalSetSel";
"evalExpr" -> "evalValType";
"evalExpr" -> "f";
"evalExpr" -> "finiteSeqMap";
"evalExpr" -> "fromVBit";
"evalExpr" -> "fromVFun";
"evalExpr" -> "fromVNumPoly";
"evalExpr" -> "fromVPoly";
"evalExpr" -> "getCallStacks";
"evalExpr" -> "getDynEnv";
"evalExpr" -> "getEvalEnv";
"evalExpr" -> "getEvalOpts";
"evalExpr" -> "interactive";
"evalExpr" -> "io";
"evalExpr" -> "isTBit";
"evalExpr" -> "iteValue";
"evalExpr" -> "lam";
"evalExpr" -> "lookupVar";
"evalExpr" -> "nameInfo";
"evalExpr" -> "nameUnique";
"evalExpr" -> "nlam";
"evalExpr" -> "p";
"evalExpr" -> "panic";
"evalExpr" -> "pp";
"evalExpr" -> "ppEnv";
"evalExpr" -> "ppValue";
"evalExpr" -> "runModuleM";
"evalExpr" -> "sDelay";
"evalExpr" -> "sel";
"evalExpr" -> "tlam";
"evalExpr" -> "tpVar";
"evalExpr" -> "tryFromBits";
"evalMatch" -> "bindVarList";
"evalMatch" -> "evalExpr";
"evalMatch" -> "evalListEnv";
"evalMatch" -> "evalNumType";
"evalMatch" -> "evalPanic";
"evalMatch" -> "f";
"evalMatch" -> "indexWordValue";
"evalMatch" -> "lookupSeqMap";
"evalMatch" -> "memoMap";
"evalMatch" -> "primTable";
"evalMatch" -> "toExpr";
"evalNewtype" -> "bindVarDirect";
"evalNewtypes" -> "evalNewtype";
"evalNumType" -> "evalPanic";
"evalNumType" -> "evalType";
"evalPanic" -> "backticks";
"evalPanic" -> "integer";
"evalPanic" -> "panic";
"evalPanic" -> "pp";
"evalPanic" -> "text";
"evalPanic" -> "vcat";
"evalPanic" -> "x";
"evalPrim" -> "evalPrim";
"evalPrim" -> "f";
"evalPrim" -> "flam";
"evalPrim" -> "fromVWord";
"evalPrim" -> "lam";
"evalPrim" -> "nlam";
"evalPrim" -> "p";
"evalPrim" -> "panic";
"evalPrim" -> "primTable";
"evalPrim" -> "tlam";
"evalPrim" -> "x";
"evalSel" -> "defaultPPOpts";
"evalSel" -> "evalPanic";
"evalSel" -> "indexWordValue";
"evalSel" -> "lookupRecord";
"evalSel" -> "lookupSeqMap";
"evalSel" -> "ppValue";
"evalSel" -> "sel";
"evalSetSel" -> "adjustField";
"evalSetSel" -> "defaultPPOpts";
"evalSetSel" -> "evalPanic";
"evalSetSel" -> "ppSelector";
"evalSetSel" -> "ppValue";
"evalSetSel" -> "sel";
"evalSetSel" -> "updateSeqMap";
"evalSetSel" -> "updateWordValue";
"evalSpark" -> "sparkThunk";
"evalSpark" -> "x";
"evalTF" -> "asBitsMap";
"evalTF" -> "asIndex";
"evalTF" -> "asWordVal";
"evalTF" -> "asciiMode";
"evalTF" -> "combineCallStacks";
"evalTF" -> "concatSeqMap";
"evalTF" -> "defaultPPOpts";
"evalTF" -> "dropSeqMap";
"evalTF" -> "enumerateSeqMap";
"evalTF" -> "enumerateWordValue";
"evalTF" -> "enumerateWordValueRev";
"evalTF" -> "evalPanic";
"evalTF" -> "f";
"evalTF" -> "finiteSeqMap";
"evalTF" -> "flam";
"evalTF" -> "forceValue";
"evalTF" -> "forceWordValue";
"evalTF" -> "fromSeq";
"evalTF" -> "fromVBit";
"evalTF" -> "fromVFloat";
"evalTF" -> "fromVFun";
"evalTF" -> "fromVInteger";
"evalTF" -> "fromVNumPoly";
"evalTF" -> "fromVPoly";
"evalTF" -> "fromVRational";
"evalTF" -> "fromVRecord";
"evalTF" -> "fromVSeq";
"evalTF" -> "fromVTuple";
"evalTF" -> "fromVWord";
"evalTF" -> "fromWordVal";
"evalTF" -> "ilam";
"evalTF" -> "indexWordValue";
"evalTF" -> "infiniteSeqMap";
"evalTF" -> "lam";
"evalTF" -> "largeBitSize";
"evalTF" -> "lookupRecord";
"evalTF" -> "lookupSeqMap";
"evalTF" -> "mapSeqMap";
"evalTF" -> "memoMap";
"evalTF" -> "mkSeq";
"evalTF" -> "nAdd";
"evalTF" -> "nCeilDiv";
"evalTF" -> "nCeilMod";
"evalTF" -> "nDiv";
"evalTF" -> "nExp";
"evalTF" -> "nLenFromThenTo";
"evalTF" -> "nMax";
"evalTF" -> "nMin";
"evalTF" -> "nMod";
"evalTF" -> "nMul";
"evalTF" -> "nSub";
"evalTF" -> "nWidth";
"evalTF" -> "nlam";
"evalTF" -> "pp";
"evalTF" -> "ppValue";
"evalTF" -> "reverseSeqMap";
"evalTF" -> "splitSeqMap";
"evalTF" -> "streamSeqMap";
"evalTF" -> "tNat\'";
"evalTF" -> "tlam";
"evalTF" -> "toFinSeq";
"evalTF" -> "toSeq";
"evalTF" -> "toStream";
"evalTF" -> "tryFromBits";
"evalTF" -> "updateSeqMap";
"evalTF" -> "updateWordValue";
"evalTF" -> "vWordLen";
"evalTF" -> "word";
"evalTF" -> "wordTooWide";
"evalTF" -> "wordValueSize";
"evalTF" -> "x";
"evalTF" -> "zipSeqMap";
"evalTest" -> "defaultPPOpts";
"evalTest" -> "f";
"evalTest" -> "fromVFun";
"evalTest" -> "panic";
"evalTest" -> "ppValue";
"evalTest" -> "runEval";
"evalType" -> "evalNumType";
"evalType" -> "evalPanic";
"evalType" -> "evalTF";
"evalType" -> "evalType";
"evalType" -> "evalValType";
"evalType" -> "f";
"evalType" -> "p";
"evalType" -> "pp";
"evalType" -> "tvSeq";
"evalType" -> "tvUnique";
"evalType" -> "x";
"evalValType" -> "evalPanic";
"evalValType" -> "evalType";
"exhaustiveTests" -> "evalTest";
"existVar" -> "newType";
"existVar" -> "recordError";
"existVar" -> "x";
"expV" -> "computeExponent";
"expV" -> "enumerateIntBits\'";
"expV" -> "enumerateWordValue";
"expV" -> "evalPanic";
"expV" -> "fromVInteger";
"expV" -> "fromWordVal";
"expV" -> "intV";
"expV" -> "isTBit";
"expectFin" -> "expectFin";
"expectFin" -> "newGoals";
"expectFin" -> "tNum";
"expectFin" -> "unify";
"expectFun" -> "newGoals";
"expectFun" -> "newType";
"expectFun" -> "recordError";
"expectFun" -> "tFun";
"expectFun" -> "unify";
"expectRec" -> "expectRec";
"expectRec" -> "newGoals";
"expectRec" -> "newType";
"expectRec" -> "recordError";
"expectRec" -> "traverseRecordMap";
"expectRec" -> "unify";
"expectRec" -> "zipRecords";
"expectSeq" -> "expectSeq";
"expectSeq" -> "newGoals";
"expectSeq" -> "newType";
"expectSeq" -> "recordError";
"expectSeq" -> "tSeq";
"expectSeq" -> "unify";
"expectTuple" -> "expectTuple";
"expectTuple" -> "newGoals";
"expectTuple" -> "newType";
"expectTuple" -> "recordError";
"expectTuple" -> "tTuple";
"expectTuple" -> "unify";
"expected" -> "x";
"expectedCoverage" -> "cmdProveSat";
"explainUnsolvable" -> "addTVarsDescsAfter";
"explainUnsolvable" -> "backticks";
"explainUnsolvable" -> "f";
"explainUnsolvable" -> "int";
"explainUnsolvable" -> "nest";
"explainUnsolvable" -> "p";
"explainUnsolvable" -> "pp";
"explainUnsolvable" -> "ppWithNames";
"explainUnsolvable" -> "ppWithNamesPrec";
"explainUnsolvable" -> "sel";
"explainUnsolvable" -> "tNoUser";
"explainUnsolvable" -> "text";
"explainUnsolvable" -> "vcat";
"exprLinter" -> "emptyRange";
"exprModName" -> "mkIdent";
"exprModName" -> "packModName";
"exprSchema" -> "__";
"exprSchema" -> "checkArm";
"exprSchema" -> "checkDeclGroup";
"exprSchema" -> "checkHas";
"exprSchema" -> "checkType";
"exprSchema" -> "checkTypeIs";
"exprSchema" -> "convertible";
"exprSchema" -> "exprSchema";
"exprSchema" -> "exprType";
"exprSchema" -> "lookupVar";
"exprSchema" -> "p";
"exprSchema" -> "proofObligation";
"exprSchema" -> "reportError";
"exprSchema" -> "sel";
"exprSchema" -> "singleTParamSubst";
"exprSchema" -> "t1";
"exprSchema" -> "t2";
"exprSchema" -> "tBit";
"exprSchema" -> "tFun";
"exprSchema" -> "tMin";
"exprSchema" -> "tMono";
"exprSchema" -> "tNoUser";
"exprSchema" -> "tNum";
"exprSchema" -> "tSeq";
"exprSchema" -> "tTuple";
"exprSchema" -> "tf";
"exprSchema" -> "tpVar";
"exprSchema" -> "withAsmp";
"exprSchema" -> "withRange";
"exprSchema" -> "withTVar";
"exprSchema" -> "withVar";
"exprSchema" -> "withVars";
"exprSchema" -> "x";
"exprToFieldPath" -> "errorMessage";
"exprToFieldPath" -> "panic";
"exprToNumT" -> "errorMessage";
"exprToNumT" -> "translateExprToNumT";
"exprType" -> "exprSchema";
"exprType" -> "isMono";
"exprType" -> "reportError";
"extendSubst" -> "brackets";
"extendSubst" -> "commaSep";
"extendSubst" -> "freeParams";
"extendSubst" -> "panic";
"extendSubst" -> "pp";
"extendSubst" -> "substToList";
"extendSubst" -> "text";
"extractWordVal" -> "dropSeqMap";
"extractWordVal" -> "start";
"failedToParameterizeModDefs" -> "raise";
"failedToParameterizeModDefs" -> "x";
"fastSchemaOf" -> "fastSchemaOf";
"fastSchemaOf" -> "fastTypeOf";
"fastSchemaOf" -> "p";
"fastSchemaOf" -> "panic";
"fastSchemaOf" -> "plainSubst";
"fastSchemaOf" -> "singleTParamSubst";
"fastSchemaOf" -> "x";
"fastTypeOf" -> "fastSchemaOf";
"fastTypeOf" -> "fastTypeOf";
"fastTypeOf" -> "panic";
"fastTypeOf" -> "sel";
"fastTypeOf" -> "tFun";
"fastTypeOf" -> "tIsFun";
"fastTypeOf" -> "tNum";
"fastTypeOf" -> "tRec";
"fastTypeOf" -> "tSeq";
"fastTypeOf" -> "tTuple";
"fastTypeOf" -> "typeSelect";
"fastTypeOf" -> "x";
"fieldDivideV" -> "evalPanic";
"fieldDivideV" -> "fpDiv";
"fieldDivideV" -> "fpRndMode";
"fieldDivideV" -> "fromVFloat";
"fieldDivideV" -> "fromVInteger";
"fieldDivideV" -> "fromVRational";
"fieldDivideV" -> "rationalDivide";
"fieldDivideV" -> "x";
"fillHole" -> "etaDelay";
"fillHole" -> "evalPanic";
"fillHole" -> "isValueType";
"fillHole" -> "lookupVar";
"fillHole" -> "ppLocName";
"filterNames" -> "p";
"finNat\'" -> "panic";
"finNat\'" -> "x";
"finType" -> "finType";
"finType" -> "numType";
"finType" -> "p";
"finally" -> "m2";
"findCommand" -> "commands";
"findCommand" -> "lookupTrie";
"findCommandExact" -> "commands";
"findCommandExact" -> "lookupTrieExact";
"findFile" -> "cantFindFile";
"findFile" -> "getSearchPath";
"findFile" -> "io";
"findModule" -> "arrayContents";
"findModule" -> "arrayName";
"findModule" -> "floatContents";
"findModule" -> "floatName";
"findModule" -> "getSearchPath";
"findModule" -> "io";
"findModule" -> "moduleFile";
"findModule" -> "moduleNotFound";
"findModule" -> "preludeContents";
"findModule" -> "preludeName";
"findModule" -> "preludeReferenceContents";
"findModule" -> "preludeReferenceName";
"findModule" -> "primeECContents";
"findModule" -> "primeECName";
"findModule" -> "runModuleM";
"findModule" -> "suiteBContents";
"findModule" -> "suiteBName";
"findNbCommand" -> "lookupTrie";
"findNbCommand" -> "lookupTrieExact";
"findNbCommand" -> "nbCommands";
"fingerprint" -> "hash";
"fingerprintFile" -> "fingerprint";
"fingerprintFile" -> "instantiateModule";
"finiteSeqMap" -> "panic";
"fixMap" -> "fixUp";
"fixMap" -> "toParamInstName";
"fixMap" -> "x";
"fixNameDisp" -> "f";
"fixNameDisp" -> "liftPJ";
"fixNameDisp" -> "liftPJ2";
"flam" -> "f";
"flam" -> "fromVFloat";
"flatGoal" -> "p";
"flatGoal" -> "pSplitAnd";
"flitDefaultCandidates" -> "p";
"flitDefaultCandidates" -> "pIntegral";
"flitDefaultCandidates" -> "pIsFLiteral";
"flitDefaultCandidates" -> "pLogic";
"flitDefaultCandidates" -> "tIsVar";
"flitDefaultCandidates" -> "tRational";
"flitDefaultCandidates" -> "tvInfo";
"flitDefaultCandidates" -> "x";
"floatFromBits" -> "floatFromBits\'";
"floatFromBits" -> "p";
"floatFromBits\'" -> "p";
"floatFromBits\'" -> "panic";
"floatFromRational" -> "fpCheckStatus";
"floatFromRational" -> "fpOpts";
"floatFromRational" -> "p";
"floatName" -> "packModName";
"floatPrim" -> "floatName";
"floatPrims" -> "bvVal";
"floatPrims" -> "floatFromBits";
"floatPrims" -> "floatFromRational";
"floatPrims" -> "floatPrim";
"floatPrims" -> "floatToBits";
"floatPrims" -> "floatToRational";
"floatPrims" -> "fpBinArithV";
"floatPrims" -> "fpConst";
"floatPrims" -> "fpCvtFromRational";
"floatPrims" -> "fpCvtToRational";
"floatPrims" -> "fpDiv";
"floatPrims" -> "fpRoundMode";
"floatPrims" -> "fromVRational";
"floatPrims" -> "p";
"floatPrims" -> "word";
"floatPrims" -> "x";
"floatToBits" -> "asciiMode";
"floatToBits" -> "blackhole";
"floatToBits" -> "combineCallStacks";
"floatToBits" -> "defaultPPOpts";
"floatToBits" -> "delayFill";
"floatToBits" -> "displayCallStack";
"floatToBits" -> "evalPanic";
"floatToBits" -> "evalSpark";
"floatToBits" -> "getCallStack";
"floatToBits" -> "io";
"floatToBits" -> "maybeReady";
"floatToBits" -> "modifyCallStack";
"floatToBits" -> "p";
"floatToBits" -> "pushCallFrame";
"floatToBits" -> "ready";
"floatToBits" -> "runEval";
"floatToBits" -> "withCallStack";
"floatToBits" -> "wordTooWide";
"floatToExpr" -> "defaultProver";
"floatToExpr" -> "ePrim";
"floatToExpr" -> "f";
"floatToExpr" -> "floatPrim";
"floatToExpr" -> "p";
"floatToExpr" -> "prelPrim";
"floatToExpr" -> "proverNames";
"floatToExpr" -> "satProve";
"floatToExpr" -> "satProveOffline";
"floatToExpr" -> "setupProver";
"floatToExpr" -> "tFloat";
"floatToExpr" -> "tNum";
"floatToInteger" -> "floatToRational";
"floatToInteger" -> "panic";
"floorV" -> "fpRndRTN";
"floorV" -> "rationalFloor";
"floorV" -> "roundOp";
"floorV" -> "x";
"fmap\'" -> "f";
"fmap\'" -> "x";
"fmtModName" -> "modNameToText";
"fnumTokens" -> "f";
"fnumTokens" -> "fromDigit";
"fnumTokens" -> "moves";
"fnumTokens" -> "readDecimal";
"fnumTokens" -> "selectorToken";
"focusModule" -> "isLoaded";
"focusedEnv" -> "deIfaceDecls";
"focusedEnv" -> "lookupModule";
"focusedEnv" -> "noIfaceParams";
"focusedEnv" -> "p";
"focusedEnv" -> "panic";
"focusedEnv" -> "parens";
"focusedEnv" -> "pp";
"focusedEnv" -> "text";
"focusedEnv" -> "x";
"foldlV" -> "enumerateSeqMap";
"foldlV" -> "enumerateWordValue";
"foldlV" -> "f";
"foldlV" -> "fromVFun";
"foldlV" -> "panic";
"foldl\'V" -> "enumerateSeqMap";
"foldl\'V" -> "enumerateWordValue";
"foldl\'V" -> "f";
"foldl\'V" -> "forceValue";
"foldl\'V" -> "fromVFun";
"foldl\'V" -> "panic";
"foldl\'V" -> "sDelay";
"forceValue" -> "displayOrder";
"forceValue" -> "enumerateSeqMap";
"forceValue" -> "f";
"forceValue" -> "forceValue";
"forceValue" -> "forceWordValue";
"forceWordValue" -> "enumerateSeqMap";
"forceWordValue" -> "x";
"fpAdd" -> "fpBinArith";
"fpBinArith" -> "fpReprOf";
"fpBinArith" -> "fpRoundMode";
"fpBinArith" -> "fpRoundingMode";
"fpBinArith" -> "fpTypeError";
"fpBinArith" -> "t1";
"fpBinArith" -> "t2";
"fpBinArith" -> "x";
"fpBinArithV" -> "fpRndRNE";
"fpBinArithV" -> "x";
"fpCheckStatus" -> "panic";
"fpConst" -> "mk";
"fpConst" -> "p";
"fpCvtFromRational" -> "fpRoundingMode";
"fpCvtFromRational" -> "p";
"fpCvtToInteger" -> "fpRoundMode";
"fpCvtToInteger" -> "fpRoundingMode";
"fpCvtToInteger" -> "x";
"fpCvtToRational" -> "addDefEqn";
"fpCvtToRational" -> "ratio";
"fpCvtToRational" -> "x";
"fpDiv" -> "fpBinArith";
"fpEq" -> "fpRel";
"fpEqIEEE" -> "fpRel";
"fpFresh" -> "fpRepr";
"fpFresh" -> "p";
"fpFresh" -> "unsupported";
"fpFromBinary" -> "exprType";
"fpFromBinary" -> "fpRepr";
"fpFromBinary" -> "fpTypeMismatch";
"fpFromBinary" -> "p";
"fpFromBinary" -> "panic";
"fpFromBinary" -> "unsupported";
"fpFromInteger" -> "fpFromReal";
"fpFromInteger" -> "p";
"fpFromInteger" -> "x";
"fpFromRational" -> "fpFromReal";
"fpFromRational" -> "p";
"fpFromRational" -> "x";
"fpFromRationalLit" -> "fpRepr";
"fpFromRationalLit" -> "p";
"fpFromRationalLit" -> "unsupported";
"fpFromReal" -> "fpRepr";
"fpFromReal" -> "p";
"fpFromReal" -> "unsupported";
"fpFromReal" -> "x";
"fpGtIEEE" -> "fpRel";
"fpIsInf" -> "x";
"fpIsNaN" -> "defaultPPOpts";
"fpIsNaN" -> "emptyEnv";
"fpIsNaN" -> "evalDecls";
"fpIsNaN" -> "evalExpr";
"fpIsNaN" -> "evalPrim";
"fpIsNaN" -> "evalSel";
"fpIsNaN" -> "evalSetSel";
"fpIsNaN" -> "forceValue";
"fpIsNaN" -> "moduleEnv";
"fpIsNaN" -> "runEval";
"fpIsNaN" -> "x";
"fpLit" -> "floatFromRational";
"fpLit" -> "p";
"fpLtIEEE" -> "fpRel";
"fpMul" -> "fpBinArith";
"fpNaN" -> "fpRepr";
"fpNaN" -> "p";
"fpNaN" -> "unsupported";
"fpOpts" -> "f";
"fpOpts" -> "p";
"fpOpts" -> "panic";
"fpOpts" -> "x";
"fpPP" -> "f";
"fpPP" -> "text";
"fpPosInf" -> "fpRepr";
"fpPosInf" -> "p";
"fpPosInf" -> "unsupported";
"fpRel" -> "fpReprOf";
"fpRel" -> "fpTypeError";
"fpRel" -> "t1";
"fpRel" -> "t2";
"fpRel" -> "x";
"fpRepr" -> "p";
"fpReprOf" -> "exprType";
"fpRound" -> "x";
"fpRoundMode" -> "bvVal";
"fpRoundingMode" -> "x";
"fpSize" -> "exprType";
"fpSize" -> "f";
"fpSize" -> "p";
"fpSub" -> "fpBinArith";
"fpToBinary" -> "f";
"fpToBinary" -> "fpReprOf";
"fpToBinary" -> "p";
"fpToBinary" -> "panic";
"fpToRational" -> "fpToReal";
"fpToRational" -> "x";
"fpToReal" -> "x";
"fpTypeError" -> "fpTypeMismatch";
"fpTypeError" -> "t1";
"fpTypeError" -> "t2";
"fpTypeMismatch" -> "t1";
"fpTypeMismatch" -> "t2";
"fracLit" -> "panic";
"fracLit" -> "x";
"freeParams" -> "p";
"freeParams" -> "ppWithNames";
"freeParams" -> "ppWithNamesPrec";
"freeParams" -> "recordElements";
"freeParams" -> "tp";
"freeParams" -> "tpVar";
"freeParams" -> "x";
"freshBV_" -> "svMkSymVar_";
"freshBoundedInt" -> "addDefEqn";
"freshBoundedInt" -> "freshSInteger_";
"freshBoundedInt" -> "x";
"freshName" -> "emptyRange";
"freshName" -> "mkDeclared";
"freshName" -> "mkParameter";
"freshName" -> "nameFixity";
"freshName" -> "nameIdent";
"freshName" -> "nameInfo";
"freshName" -> "nameLoc";
"freshParamName" -> "mkDeclared";
"freshParamName" -> "modParamIdent";
"freshParamName" -> "nameFixity";
"freshParamName" -> "nameIdent";
"freshParamName" -> "nameLoc";
"freshParamName" -> "newName";
"freshParamName" -> "x";
"freshSBool_" -> "svMkSymVar_";
"freshSInteger_" -> "f";
"freshSInteger_" -> "p";
"freshSInteger_" -> "svMkSymVar_";
"freshSInteger_" -> "x";
"freshVar" -> "freshVar";
"freshVar" -> "p";
"freshVar" -> "panic";
"freshVar" -> "tp";
"freshenName" -> "mkDeclared";
"freshenName" -> "nameFixity";
"freshenName" -> "nameIdent";
"freshenName" -> "nameInfo";
"freshenName" -> "nameLoc";
"freshenName" -> "x";
"fromBigEndianSBS" -> "x";
"fromBitsLE" -> "f";
"fromBitsLE" -> "literalSWord";
"fromDigit" -> "x";
"fromGoals" -> "litGoalToGoal";
"fromIncPath" -> "f";
"fromIncPath" -> "x";
"fromIntegerV" -> "fromVInteger";
"fromIntegerV" -> "intV";
"fromProjectivePoint" -> "f";
"fromProjectivePoint" -> "p";
"fromProjectivePoint" -> "packIdent";
"fromProjectivePoint" -> "recordFromFields";
"fromProjectivePoint" -> "x";
"fromSeq" -> "evalPanic";
"fromStrLit" -> "errorMessage";
"fromThenToV" -> "evalPanic";
"fromThenToV" -> "f";
"fromThenToV" -> "mkLit";
"fromToV" -> "evalPanic";
"fromToV" -> "f";
"fromToV" -> "mkLit";
"fromVBit" -> "evalPanic";
"fromVFloat" -> "evalPanic";
"fromVFloat" -> "x";
"fromVFun" -> "combineCallStacks";
"fromVFun" -> "evalPanic";
"fromVFun" -> "f";
"fromVFun" -> "x";
"fromVInteger" -> "evalPanic";
"fromVNumPoly" -> "combineCallStacks";
"fromVNumPoly" -> "evalPanic";
"fromVNumPoly" -> "f";
"fromVNumPoly" -> "x";
"fromVPoly" -> "combineCallStacks";
"fromVPoly" -> "evalPanic";
"fromVPoly" -> "f";
"fromVPoly" -> "x";
"fromVRational" -> "evalPanic";
"fromVRecord" -> "evalPanic";
"fromVSeq" -> "evalPanic";
"fromVTuple" -> "evalPanic";
"fromVWord" -> "asWordVal";
"fromVWord" -> "evalPanic";
"fromWordVal" -> "evalPanic";
"fromZV" -> "fromVInteger";
"fsep" -> "liftSep";
"genIface" -> "groupDecls";
"genIface" -> "isExportedBind";
"genIface" -> "isExportedType";
"genInferInput" -> "getCallStacks";
"genInferInput" -> "getMonoBinds";
"genInferInput" -> "getNameSeeds";
"genInferInput" -> "getSearchPath";
"genInferInput" -> "getSolverConfig";
"genInferInput" -> "getSupply";
"genLog" -> "x";
"genRoot" -> "cryIsEqual";
"genRoot" -> "cryIsGeq";
"genRoot" -> "cryIsNotEqual";
"genRoot" -> "cryIsPrime";
"genRoot" -> "primeTable";
"genRoot" -> "x";
"generalize" -> "addGoals";
"generalize" -> "applySubst";
"generalize" -> "applySubstGoals";
"generalize" -> "defaultAndSimplify";
"generalize" -> "extendSubst";
"generalize" -> "getSubst";
"generalize" -> "isFreeTV";
"generalize" -> "listSubst";
"generalize" -> "pSplitAnd";
"generalize" -> "recordError";
"generalize" -> "recordWarning";
"generalize" -> "tpVar";
"generalize" -> "varsWithAsmps";
"generalize" -> "x";
"genericPrimTable" -> "addV";
"genericPrimTable" -> "andV";
"genericPrimTable" -> "binary";
"genericPrimTable" -> "ccatV";
"genericPrimTable" -> "ceilingV";
"genericPrimTable" -> "complementV";
"genericPrimTable" -> "distinctV";
"genericPrimTable" -> "divV";
"genericPrimTable" -> "ecFractionV";
"genericPrimTable" -> "ecNumberV";
"genericPrimTable" -> "ecSplitV";
"genericPrimTable" -> "eqV";
"genericPrimTable" -> "errorV";
"genericPrimTable" -> "expV";
"genericPrimTable" -> "fieldDivideV";
"genericPrimTable" -> "floorV";
"genericPrimTable" -> "foldlV";
"genericPrimTable" -> "foldl\'V";
"genericPrimTable" -> "forceValue";
"genericPrimTable" -> "fromIntegerV";
"genericPrimTable" -> "fromThenToV";
"genericPrimTable" -> "fromToV";
"genericPrimTable" -> "fromZV";
"genericPrimTable" -> "greaterThanEqV";
"genericPrimTable" -> "greaterThanV";
"genericPrimTable" -> "infFromThenV";
"genericPrimTable" -> "infFromV";
"genericPrimTable" -> "joinV";
"genericPrimTable" -> "lessThanEqV";
"genericPrimTable" -> "lessThanV";
"genericPrimTable" -> "lg2V";
"genericPrimTable" -> "modV";
"genericPrimTable" -> "mulV";
"genericPrimTable" -> "negateV";
"genericPrimTable" -> "orV";
"genericPrimTable" -> "parmapV";
"genericPrimTable" -> "prelPrim";
"genericPrimTable" -> "randomV";
"genericPrimTable" -> "ratioV";
"genericPrimTable" -> "recipV";
"genericPrimTable" -> "reverseV";
"genericPrimTable" -> "roundAwayV";
"genericPrimTable" -> "roundToEvenV";
"genericPrimTable" -> "sdivV";
"genericPrimTable" -> "signedLessThanV";
"genericPrimTable" -> "smodV";
"genericPrimTable" -> "splitAtV";
"genericPrimTable" -> "subV";
"genericPrimTable" -> "toIntegerV";
"genericPrimTable" -> "transposeV";
"genericPrimTable" -> "truncV";
"genericPrimTable" -> "unary";
"genericPrimTable" -> "valueToString";
"genericPrimTable" -> "x";
"genericPrimTable" -> "xorV";
"genericPrimTable" -> "zeroV";
"generic_pad" -> "generic_pad_chunks";
"generic_pad_chunks" -> "calc_k";
"generic_pad_chunks" -> "toBigEndianSBS";
"geqByInterval" -> "typeInterval";
"geqByInterval" -> "x";
"getBoundInScope" -> "mtpParam";
"getCallStacks" -> "getRW";
"getChr" -> "panic";
"getChr" -> "x";
"getDynEnv" -> "getRW";
"getEditPath" -> "getRW";
"getEvalOpts" -> "getLogger";
"getEvalOpts" -> "getPPValOpts";
"getExprNames" -> "getFocusedEnv";
"getExprNames" -> "pp";
"getFocusedEnv" -> "focusedEnv";
"getFocusedEnv" -> "getModuleEnv";
"getGoals" -> "applySubst";
"getGoals" -> "emptyGoals";
"getGoals" -> "fromGoals";
"getHasGoals" -> "applySubst";
"getIdent" -> "p";
"getIdent" -> "packIdent";
"getIface" -> "lookupModule";
"getIface" -> "panic";
"getIface" -> "pp";
"getImportSource" -> "noModuleName";
"getKnownUser" -> "badIsEnv";
"getKnownUser" -> "getUser";
"getKnownUser" -> "x";
"getLoaded" -> "lookupModule";
"getLoaded" -> "panic";
"getLoaded" -> "pp";
"getLoadedMaybe" -> "lookupModule";
"getLoadedMod" -> "getRW";
"getLoadedModules" -> "x";
"getLogger" -> "getRW";
"getModNames" -> "getModuleEnv";
"getModuleEnv" -> "getRW";
"getName" -> "mkIdent";
"getName" -> "mkUnqual";
"getName" -> "panic";
"getName" -> "x";
"getNameFormat" -> "f";
"getNum" -> "panic";
"getNum" -> "x";
"getPPValOpts" -> "f";
"getPPValOpts" -> "getKnownUser";
"getPPValOpts" -> "panic";
"getPPValOpts" -> "parsePPFloatFormat";
"getParams" -> "asParamName";
"getParams" -> "isMono";
"getParams" -> "mtpParam";
"getParams" -> "paramModRecParam";
"getParams" -> "paramRecTy";
"getParams" -> "splitProofAbs";
"getParams" -> "splitTAbs";
"getParams" -> "splitWhile";
"getParams" -> "tFun";
"getParams" -> "toParamInstName";
"getParams" -> "tp";
"getParams" -> "tsName";
"getParams" -> "x";
"getPrimMap" -> "floatName";
"getPrimMap" -> "getModuleEnv";
"getPrimMap" -> "ifacePrimMap";
"getPrimMap" -> "liftModuleCmd";
"getPrimMap" -> "lookupModule";
"getPrimMap" -> "panic";
"getPrimMap" -> "preludeName";
"getPrimMap" -> "runModuleM";
"getPrompt" -> "getRW";
"getPrompt" -> "mkPrompt";
"getPropertyNames" -> "getFocusedEnv";
"getPropertyNames" -> "x";
"getProverConfig" -> "getRW";
"getPutStr" -> "getRW";
"getPutStr" -> "logPutStr";
"getSHA256Sched" -> "lsig256_0";
"getSHA256Sched" -> "lsig256_1";
"getSHA512Sched" -> "lsig512_0";
"getSHA512Sched" -> "lsig512_1";
"getStr" -> "panic";
"getStr" -> "x";
"getTVars" -> "tpName";
"getTypeNames" -> "getFocusedEnv";
"getTypeNames" -> "pp";
"getUninterpFn" -> "panic";
"getUser" -> "panic";
"getUser" -> "tryGetUser";
"getUserProverValidate" -> "getKnownUser";
"getUserSatNum" -> "getKnownUser";
"getUserSatNum" -> "panic";
"getUserShowProverStats" -> "getKnownUser";
"goalToLitGoal" -> "aLiteral";
"goalToLitGoal" -> "aTVar";
"goalToLitGoal" -> "matchMaybe";
"goalsFromList" -> "emptyGoals";
"goalsFromList" -> "insertGoal";
"greaterThanEqV" -> "valGt";
"greaterThanV" -> "valGt";
"guarded" -> "nest";
"guarded" -> "pp";
"guarded" -> "text";
"guarded" -> "vcat";
"guarded" -> "x";
"guessType" -> "checkMonoB";
"guessType" -> "checkSchema";
"guessType" -> "checkSigB";
"guessType" -> "newType";
"guessType" -> "tcPanic";
"handleCtrlC" -> "rPutStrLn";
"hang" -> "p";
"happyError" -> "emptyRange";
"hcat" -> "liftSep";
"helpCmd" -> "backticks";
"helpCmd" -> "colon";
"helpCmd" -> "comma";
"helpCmd" -> "commandList";
"helpCmd" -> "empty";
"helpCmd" -> "emptyNameMap";
"helpCmd" -> "f";
"helpCmd" -> "findCommandExact";
"helpCmd" -> "genHelp";
"helpCmd" -> "getFocusedEnv";
"helpCmd" -> "hsep";
"helpCmd" -> "lookupTrieExact";
"helpCmd" -> "nest";
"helpCmd" -> "p";
"helpCmd" -> "parens";
"helpCmd" -> "pp";
"helpCmd" -> "ppWithNames";
"helpCmd" -> "punctuate";
"helpCmd" -> "rPrint";
"helpCmd" -> "rPutStrLn";
"helpCmd" -> "runCommand";
"helpCmd" -> "runDoc";
"helpCmd" -> "showEnvVal";
"helpCmd" -> "text";
"helpCmd" -> "tryGetUser";
"helpCmd" -> "userOptions";
"helpCmd" -> "vcat";
"helpCmd" -> "x";
"hsep" -> "liftSep";
"iAdd" -> "nAdd";
"iAdd" -> "x";
"iCeilDiv" -> "nCeilDiv";
"iCeilDiv" -> "nMax";
"iCeilDiv" -> "x";
"iCeilMod" -> "iMod";
"iConst" -> "x";
"iDiv" -> "nDiv";
"iDiv" -> "nMax";
"iDiv" -> "x";
"iExp" -> "nExp";
"iExp" -> "x";
"iIntersect" -> "nMax";
"iIntersect" -> "nMin";
"iIsPosFin" -> "iIsFin";
"iLenFromThenTo" -> "checkUnsolvable";
"iLenFromThenTo" -> "debugBlock";
"iLenFromThenTo" -> "iAnyFin";
"iLenFromThenTo" -> "iConst";
"iLenFromThenTo" -> "iIsExact";
"iLenFromThenTo" -> "isNumeric";
"iLenFromThenTo" -> "nLenFromThenTo";
"iLenFromThenTo" -> "proveImp";
"iLenFromThenTo" -> "shrinkModel";
"iLenFromThenTo" -> "tryGetModel";
"iLenFromThenTo" -> "withSolver";
"iLenFromThenTo" -> "x";
"iMax" -> "nMax";
"iMax" -> "x";
"iMin" -> "nMin";
"iMin" -> "x";
"iMul" -> "nMul";
"iMul" -> "x";
"iSub" -> "nSub";
"iSub" -> "x";
"iWidth" -> "nWidth";
"ifTySynName" -> "tsName";
"ifaceDeclsPrimMap" -> "asPrim";
"ifaceDeclsPrimMap" -> "importedModule";
"ifaceDeclsPrimMap" -> "panic";
"ifaceDeclsPrimMap" -> "pp";
"ifaceDeclsPrimMap" -> "text";
"ifacePrimMap" -> "f";
"ifacePrimMap" -> "ifaceDeclsPrimMap";
"ifacePrimMap" -> "merge";
"ilam" -> "f";
"ilam" -> "nlam";
"ilam" -> "panic";
"importIface" -> "getIface";
"importIfaces" -> "importIface";
"importParamModule" -> "raise";
"importParamModule" -> "x";
"importedModule" -> "char";
"importedModule" -> "colon";
"importedModule" -> "comma";
"importedModule" -> "expected";
"importedModule" -> "hang";
"importedModule" -> "hsep";
"importedModule" -> "p";
"importedModule" -> "pp";
"importedModule" -> "punctuate";
"importedModule" -> "text";
"importedModule" -> "vcat";
"importedModule" -> "x";
"improveByDefaultingWithPure" -> "defs";
"improveByDefaultingWithPure" -> "isBoundTV";
"improveByDefaultingWithPure" -> "listSubst";
"improveByDefaultingWithPure" -> "panic";
"improveByDefaultingWithPure" -> "substBinds";
"improveByDefaultingWithPure" -> "tIsNum";
"improveByDefaultingWithPure" -> "tMax";
"improveByDefaultingWithPure" -> "tNoUser";
"improveByDefaultingWithPure" -> "tNum";
"improveByDefaultingWithPure" -> "uncheckedSingleSubst";
"improveByDefaultingWithPure" -> "x";
"improveEq" -> "__";
"improveEq" -> "aTVar";
"improveEq" -> "anAdd";
"improveEq" -> "iIsFin";
"improveEq" -> "isFreeTV";
"improveEq" -> "singleSubst";
"improveEq" -> "typeInterval";
"improveEq" -> "x";
"improveLit" -> "aLiteral";
"improveLit" -> "aSeq";
"improveLit" -> "aTVar";
"improveLit" -> "isFreeTV";
"improveLit" -> "tBit";
"improveLit" -> "uncheckedSingleSubst";
"improveProp" -> "improveEq";
"improveProp" -> "improveLit";
"improveProps" -> "emptySubst";
"improveProps" -> "improveProp";
"improveProps" -> "isEmptySubst";
"improveProps" -> "matchMaybe";
"improveProps" -> "p";
"improveSelector" -> "applySubst";
"improveSelector" -> "f";
"improveSelector" -> "listType";
"improveSelector" -> "newGoals";
"improveSelector" -> "recordType";
"improveSelector" -> "sel";
"improveSelector" -> "selSrc";
"improveSelector" -> "tupleType";
"improveSelector" -> "unify";
"inNewScope" -> "f";
"inNewScope" -> "x";
"inRangeMb" -> "inRange";
"includeFailed" -> "raise";
"indexBack" -> "bvVal";
"indexBack" -> "evalPanic";
"indexBack" -> "indexBack_int";
"indexBack" -> "indexFront";
"indexBack" -> "reverseSeqMap";
"indexBack_bits" -> "evalPanic";
"indexBack_bits" -> "indexBack";
"indexBack_bits" -> "indexFront_bits";
"indexBack_bits" -> "reverseSeqMap";
"indexBack_int" -> "evalPanic";
"indexBack_int" -> "indexFront_int";
"indexBack_int" -> "lookupSeqMap";
"indexBack_int" -> "reverseSeqMap";
"indexBack_word" -> "evalPanic";
"indexBack_word" -> "indexFront_word";
"indexBack_word" -> "reverseSeqMap";
"indexFront" -> "asWordList";
"indexFront" -> "bvVal";
"indexFront" -> "enumerateSeqMap";
"indexFront" -> "f";
"indexFront" -> "fromWordVal";
"indexFront" -> "iteValue";
"indexFront" -> "lookupSeqMap";
"indexFront" -> "zeroV";
"indexFront_bits" -> "indexFront";
"indexFront_bits" -> "iteValue";
"indexFront_bits" -> "lookupSeqMap";
"indexFront_int" -> "f";
"indexFront_int" -> "iteValue";
"indexFront_int" -> "lookupSeqMap";
"indexFront_int" -> "p";
"indexFront_word" -> "f";
"indexFront_word" -> "iteValue";
"indexFront_word" -> "lookupSeqMap";
"indexFront_word" -> "p";
"indexPrim" -> "asIndex";
"indexPrim" -> "assertIndexInBounds";
"indexPrim" -> "enumerateSeqMap";
"indexPrim" -> "evalPanic";
"indexPrim" -> "fromVBit";
"indexPrim" -> "indexWordValue";
"indexWordValue" -> "fromVBit";
"indexWordValue" -> "invalidIndex";
"indexWordValue" -> "lookupSeqMap";
"infFromThenV" -> "addV";
"infFromThenV" -> "intV";
"infFromThenV" -> "mulV";
"infFromThenV" -> "sDelay";
"infFromThenV" -> "subV";
"infFromThenV" -> "x";
"infFromV" -> "addV";
"infFromV" -> "intV";
"infFromV" -> "sDelay";
"infFromV" -> "x";
"inferBinds" -> "collectGoals";
"inferBinds" -> "generalize";
"inferBinds" -> "getMonoBinds";
"inferBinds" -> "guessType";
"inferBinds" -> "simplifyAllConstraints";
"inferBinds" -> "tpVar";
"inferBinds" -> "withVarTypes";
"inferBinds" -> "x";
"inferCArm" -> "inferCArm";
"inferCArm" -> "inferMatch";
"inferCArm" -> "newGoals";
"inferCArm" -> "pFin";
"inferCArm" -> "panic";
"inferCArm" -> "tMul";
"inferCArm" -> "withMonoType";
"inferCArm" -> "x";
"inferDs" -> "checkNewtype";
"inferDs" -> "checkParameterConstraints";
"inferDs" -> "checkParameterType";
"inferDs" -> "checkPrimType";
"inferDs" -> "checkPropSyn";
"inferDs" -> "checkSchema";
"inferDs" -> "checkTySyn";
"inferDs" -> "inferBinds";
"inferDs" -> "isEmptySubst";
"inferDs" -> "orderBinds";
"inferDs" -> "orderTyDecls";
"inferDs" -> "p";
"inferDs" -> "panic";
"inferDs" -> "proveImplication";
"inferDs" -> "t1";
"inferDs" -> "withNewtype";
"inferDs" -> "withParamFuns";
"inferDs" -> "withParamType";
"inferDs" -> "withParameterConstraints";
"inferDs" -> "withPrimType";
"inferDs" -> "withTySyn";
"inferDs" -> "withVar";
"inferDs" -> "x";
"inferMatch" -> "checkE";
"inferMatch" -> "checkMonoB";
"inferMatch" -> "inRange";
"inferMatch" -> "inferP";
"inferMatch" -> "newType";
"inferMatch" -> "p";
"inferMatch" -> "tNum";
"inferMatch" -> "tSeq";
"inferMatch" -> "tcPanic";
"inferMatch" -> "x";
"inferModule" -> "getAbstractTypes";
"inferModule" -> "getNewtypes";
"inferModule" -> "getParamConstraints";
"inferModule" -> "getParamFuns";
"inferModule" -> "getParamTypes";
"inferModule" -> "getTSyns";
"inferModule" -> "inferDs";
"inferModule" -> "proveModuleTopLevel";
"inferModule" -> "x";
"inferP" -> "checkP";
"inferP" -> "checkTypeOfKind";
"inferP" -> "inRange";
"inferP" -> "newType";
"inferP" -> "p";
"inferP" -> "tcPanic";
"infiniteSeqMap" -> "memoMap";
"infix" -> "tFun";
"infixPrimTy" -> "f";
"infixPrimTy" -> "mk";
"infixPrimTy" -> "packIdent";
"infixPrimTy" -> "tc";
"infixPrimTy" -> "x";
"infixl" -> "f";
"infixl" -> "liftPJ2";
"infixl" -> "x";
"infixr" -> "char";
"infixr" -> "comma";
"infixr" -> "hcat";
"infixr" -> "integer";
"infixr" -> "optParens";
"infixr" -> "p";
"infixr" -> "parens";
"infixr" -> "pp";
"infixr" -> "ppSelector";
"infixr" -> "sel";
"infixr" -> "sep";
"infixr" -> "tc";
"infixr" -> "tcon";
"infixr" -> "text";
"infixr" -> "tf";
"infixr" -> "x";
"initialModuleEnv" -> "emptySupply";
"insertGoal" -> "goalToLitGoal";
"insertGoal" -> "p";
"insertGoal" -> "pFin";
"insertGoal" -> "superclassSet";
"insertGoal" -> "tMax";
"insertGoal" -> "x";
"insertTrie" -> "emptyTrie";
"insertTrie" -> "panic";
"insertWithTM" -> "f";
"instTyName" -> "genIface";
"instTyName" -> "ifTySynName";
"instTyName" -> "ifacePrimMap";
"instTyName" -> "mkIfaceDecl";
"instTyName" -> "noIfaceParams";
"instTyName" -> "x";
"instTyParams" -> "tpVar";
"instantiateExpr" -> "instantiateExpr";
"instantiateExpr" -> "singleTParamSubst";
"instantiateModule" -> "computeEnv";
"instantiateModule" -> "f";
"instantiateModule" -> "freshParamName";
"instantiateModule" -> "listParamSubst";
"instantiateModule" -> "newName";
"instantiateModule" -> "tsName";
"instantiateModule" -> "x";
"instantiateSchema" -> "listParamSubst";
"instantiateWith" -> "instantiateWithNames";
"instantiateWith" -> "instantiateWithPos";
"instantiateWith" -> "recordError";
"instantiateWithNames" -> "checkTyParam";
"instantiateWithNames" -> "doInst";
"instantiateWithNames" -> "nameIdent";
"instantiateWithNames" -> "newType";
"instantiateWithNames" -> "recordError";
"instantiateWithNames" -> "tpName";
"instantiateWithNames" -> "x";
"instantiateWithPos" -> "checkTyParam";
"instantiateWithPos" -> "doInst";
"instantiateWithPos" -> "nameIdent";
"instantiateWithPos" -> "newType";
"instantiateWithPos" -> "p";
"instantiateWithPos" -> "panic";
"instantiateWithPos" -> "recordError";
"instantiateWithPos" -> "tpName";
"int" -> "liftPJ";
"intShifter" -> "barrelShifter";
"intShifter" -> "enumerateIntBits";
"intShifter" -> "evalPanic";
"intShifter" -> "lookupSeqMap";
"intShifter" -> "memoMap";
"intShifter" -> "x";
"intShifter" -> "zeroV";
"intToRational" -> "x";
"intV" -> "fpFromInteger";
"intV" -> "fpRndMode";
"intV" -> "intToRational";
"intV" -> "p";
"intV" -> "ringNullary";
"intVal" -> "errorMessage";
"intVal" -> "x";
"integer" -> "liftPJ";
"integralBinary" -> "evalPanic";
"integralBinary" -> "fromVInteger";
"integralBinary" -> "fromVWord";
"integralBinary" -> "isTBit";
"interactive" -> "interactiveName";
"interactive" -> "loadingModule";
"interactiveConfig" -> "defaultConfig";
"interactiveName" -> "packModName";
"interpImport" -> "filterNames";
"interpImport" -> "getIdent";
"interpImport" -> "qualify";
"interpImport" -> "unqualifiedEnv";
"invMixColumns" -> "f";
"invMixColumns" -> "fromBytes";
"invMixColumns" -> "m9";
"invMixColumns" -> "mB";
"invMixColumns" -> "mD";
"invMixColumns" -> "mE";
"invMixColumns" -> "toBytes";
"isEApp" -> "isEApp";
"isExportedType" -> "fingerprint";
"isExportedType" -> "fingerprintFile";
"isGeneratedName" -> "empty";
"isGeneratedName" -> "getIdent";
"isGeneratedName" -> "getModName";
"isGeneratedName" -> "isInfixIdent";
"isGeneratedName" -> "optParens";
"isGeneratedName" -> "panic";
"isGeneratedName" -> "pp";
"isGeneratedName" -> "text";
"isGeneratedName" -> "x";
"isLoaded" -> "getLoadedMaybe";
"isLoaded" -> "getLoadedModules";
"isNumeric" -> "aFin";
"isNumeric" -> "f";
"isNumeric" -> "matchDefault";
"isParamInstModName" -> "modInstPref";
"isParamInstModName" -> "x";
"isTParam" -> "f";
"isTParam" -> "insertTM";
"isTParam" -> "instTyParams";
"isTParam" -> "isTParam";
"isTParam" -> "isVParam";
"isTParam" -> "mapWithKeyTM";
"isTParam" -> "nameIdent";
"isTParam" -> "nameInst";
"isTParam" -> "needsInst";
"isTParam" -> "p";
"isTParam" -> "paramModRecParam";
"isTParam" -> "splitExprInst";
"isTParam" -> "t1";
"isTParam" -> "t2";
"isTParam" -> "tc";
"isTParam" -> "tp";
"isTParam" -> "tpName";
"isTParam" -> "x";
"isVParam" -> "x";
"isValueType" -> "evalValType";
"isValueType" -> "t0";
"isValueType" -> "x";
"iteRational" -> "p";
"iteValue" -> "mergeValue\'";
"iteValue" -> "x";
"joinSeq" -> "fromSeq";
"joinSeq" -> "fromWordVal";
"joinSeq" -> "indexWordValue";
"joinSeq" -> "joinWords";
"joinSeq" -> "largeBitSize";
"joinSeq" -> "lookupSeqMap";
"joinSeq" -> "nMul";
"joinSeq" -> "zeroV";
"joinV" -> "fromSeq";
"joinV" -> "joinSeq";
"joinWordVal" -> "asBitsMap";
"joinWordVal" -> "concatSeqMap";
"joinWordVal" -> "largeBitSize";
"joinWordVal" -> "wordValueSize";
"joinWords" -> "enumerateSeqMap";
"joinWords" -> "evalPanic";
"joinWords" -> "joinWordVal";
"joinWords" -> "sDelay";
"kExistTVar" -> "existVar";
"kExistTVar" -> "kInInferM";
"kExistTVar" -> "x";
"kIO" -> "io";
"kInInferM" -> "dump";
"kInInferM" -> "emptyNameMap";
"kInInferM" -> "nameList";
"kInInferM" -> "ppWithNames";
"kInInferM" -> "ppWithNamesPrec";
"kInRange" -> "inRange";
"kInstantiateT" -> "listParamSubst";
"kLookupAbstractType" -> "kInInferM";
"kLookupAbstractType" -> "lookupAbstractType";
"kLookupAbstractType" -> "x";
"kLookupNewtype" -> "kInInferM";
"kLookupNewtype" -> "lookupNewtype";
"kLookupNewtype" -> "x";
"kLookupParamType" -> "kInInferM";
"kLookupParamType" -> "lookupParamType";
"kLookupParamType" -> "x";
"kLookupTSyn" -> "kInInferM";
"kLookupTSyn" -> "lookupTSyn";
"kLookupTSyn" -> "x";
"kLookupTyVar" -> "lookupTParam";
"kLookupTyVar" -> "x";
"kNewType" -> "kInInferM";
"kNewType" -> "newTVar\'";
"kRecordError" -> "kInInferM";
"kRecordError" -> "recordError";
"kRecordWarning" -> "kInInferM";
"kRecordWarning" -> "recordWarning";
"keyExpansionWords" -> "fromBytes";
"keyExpansionWords" -> "roundConstants";
"keyExpansionWords" -> "sbox";
"keyExpansionWords" -> "toBytes";
"kindResult" -> "kindResult";
"kindResult" -> "x";
"knownSupportedFloat" -> "p";
"knownSupportedFloat" -> "tIsNum";
"lam" -> "f";
"latex" -> "mk";
"latex" -> "translateExprToNumT";
"latex" -> "widthIdent";
"layout" -> "isExplicit";
"layout" -> "panic";
"layout" -> "startsLayout";
"layout" -> "virt";
"lazyIte" -> "f";
"lazyIte" -> "p";
"lazyIte" -> "x";
"leaves" -> "calc_k";
"leaves" -> "fromBigEndianSBS";
"leaves" -> "initialSHA224State";
"leaves" -> "initialSHA256State";
"leaves" -> "initialSHA384State";
"leaves" -> "initialSHA512State";
"leaves" -> "leaves";
"leaves" -> "padSHA1";
"leaves" -> "padSHA1Chunks";
"leaves" -> "padSHA512";
"leaves" -> "padSHA512Chunks";
"leaves" -> "processSHA256Block";
"leaves" -> "processSHA512Block";
"leaves" -> "toBigEndianSBS";
"lessThanEqV" -> "valLt";
"lessThanV" -> "valLt";
"lexerP" -> "p";
"lg2" -> "genLog";
"lg2V" -> "x";
"liftBinIntMod" -> "evalPanic";
"liftBinIntMod" -> "x";
"liftModuleCmd" -> "getCallStacks";
"liftModuleCmd" -> "getEvalOpts";
"liftModuleCmd" -> "getModuleEnv";
"liftModuleCmd" -> "io";
"liftModuleCmd" -> "moduleCmdResult";
"liftPJ1" -> "f";
"liftPJ2" -> "f";
"liftSep" -> "f";
"list" -> "list";
"list" -> "p";
"list" -> "x";
"listParamSubst" -> "emptySubst";
"listParamSubst" -> "tp";
"listRenamerWarnings" -> "f";
"listRenamerWarnings" -> "mk";
"listRenamerWarnings" -> "x";
"listSubst" -> "emptySubst";
"listSubst" -> "tp";
"listSubst" -> "x";
"listType" -> "newType";
"listType" -> "tNum";
"listType" -> "tSeq";
"lit" -> "checkThat";
"lit" -> "x";
"litGoalToGoal" -> "pLiteral";
"loadCmd" -> "loadHelper";
"loadCmd" -> "setEditPath";
"loadCmd" -> "setLoadedMod";
"loadDeps" -> "f";
"loadDeps" -> "importParamModule";
"loadDeps" -> "loadModuleFrom";
"loadFile" -> "loadString";
"loadHelper" -> "clearEditPath";
"loadHelper" -> "clearLoadedMod";
"loadHelper" -> "dump";
"loadHelper" -> "f";
"loadHelper" -> "liftModuleCmd";
"loadHelper" -> "rPutStrLn";
"loadHelper" -> "setDynEnv";
"loadHelper" -> "setEditPath";
"loadHelper" -> "setLoadedMod";
"loadHelper" -> "whenDebug";
"loadModuleByName" -> "resetModuleEnv";
"loadModuleByName" -> "runModuleM";
"loadModuleByName" -> "setFocusedModule";
"loadModuleByName" -> "unloadModule";
"loadModuleByPath" -> "doLoadModule";
"loadModuleByPath" -> "duplicateModuleName";
"loadModuleByPath" -> "findFile";
"loadModuleByPath" -> "getModuleEnv";
"loadModuleByPath" -> "io";
"loadModuleByPath" -> "lookupModule";
"loadModuleByPath" -> "parseModule";
"loadModuleByPath" -> "resetModuleEnv";
"loadModuleByPath" -> "runModuleM";
"loadModuleByPath" -> "setFocusedModule";
"loadModuleByPath" -> "unloadModule";
"loadModuleByPath" -> "withPrependedSearchPath";
"loadModuleFrom" -> "doLoadModule";
"loadModuleFrom" -> "errorInFile";
"loadModuleFrom" -> "findModule";
"loadModuleFrom" -> "getLoadedMaybe";
"loadModuleFrom" -> "importedModule";
"loadModuleFrom" -> "parseModule";
"loadPrelude" -> "moduleCmd";
"loadPrelude" -> "pp";
"loadString" -> "panic";
"loadTcPrelude" -> "cryptolTcContents";
"loadTcPrelude" -> "loadFile";
"loadTcPrelude" -> "loadString";
"loadTcPrelude" -> "loadTcPrelude";
"loadTcPrelude" -> "p";
"loadedModule" -> "addLoadedModule";
"loadedModule" -> "io";
"loadedModule" -> "p";
"loadedModules" -> "getLoadedModules";
"loading" -> "raise";
"loadingImport" -> "loading";
"loadingModInstance" -> "loading";
"loadingModule" -> "loading";
"located" -> "curLoc";
"logPrint" -> "logPutStrLn";
"logPutStr" -> "f";
"logPutStrLn" -> "logPutStr";
"logicBinary" -> "evalPanic";
"logicBinary" -> "f";
"logicBinary" -> "fromSeq";
"logicBinary" -> "fromVBit";
"logicBinary" -> "fromVFun";
"logicBinary" -> "fromVTuple";
"logicBinary" -> "fromWordVal";
"logicBinary" -> "isTBit";
"logicBinary" -> "lam";
"logicBinary" -> "lookupRecord";
"logicBinary" -> "sDelay";
"logicBinary" -> "traverseRecordMap";
"logicBinary" -> "wordValLogicOp";
"logicBinary" -> "zipSeqMap";
"logicShift" -> "asIndex";
"logicShift" -> "asWordVal";
"logicShift" -> "bvVal";
"logicShift" -> "evalPanic";
"logicShift" -> "fromSeq";
"logicShift" -> "intShifter";
"logicShift" -> "iteValue";
"logicShift" -> "mkSeq";
"logicShift" -> "wordShifter";
"logicShift" -> "x";
"logicUnary" -> "evalPanic";
"logicUnary" -> "f";
"logicUnary" -> "fromSeq";
"logicUnary" -> "fromVBit";
"logicUnary" -> "fromVFun";
"logicUnary" -> "fromVTuple";
"logicUnary" -> "fromWordVal";
"logicUnary" -> "isTBit";
"logicUnary" -> "lam";
"logicUnary" -> "lookupRecord";
"logicUnary" -> "mapSeqMap";
"logicUnary" -> "sDelay";
"logicUnary" -> "traverseRecordMap";
"logicUnary" -> "wordValUnaryOp";
"lookupAbstractType" -> "getAbstractTypes";
"lookupAbstractType" -> "x";
"lookupField" -> "x";
"lookupFixity" -> "defaultFixity";
"lookupFixity" -> "nameFixity";
"lookupFixity" -> "rename";
"lookupNewtype" -> "getNewtypes";
"lookupNewtype" -> "x";
"lookupParamFun" -> "getParamFuns";
"lookupParamFun" -> "x";
"lookupParamType" -> "getParamTypes";
"lookupParamType" -> "x";
"lookupPrimDecl" -> "panic";
"lookupPrimType" -> "panic";
"lookupRecord" -> "evalPanic";
"lookupRecord" -> "f";
"lookupRecord" -> "floatPrims";
"lookupRecord" -> "fromVRecord";
"lookupRecord" -> "lookupField";
"lookupRecord" -> "primTable";
"lookupRecord" -> "x";
"lookupSeqMap" -> "f";
"lookupSeqMap" -> "x";
"lookupSubst" -> "tp";
"lookupSubst" -> "x";
"lookupTParam" -> "tp";
"lookupTParam" -> "tpName";
"lookupTParam" -> "x";
"lookupTSyn" -> "getTSyns";
"lookupTSyn" -> "x";
"lookupTVar" -> "reportError";
"lookupTVar" -> "tp";
"lookupTVar" -> "x";
"lookupTrie" -> "leaves";
"lookupTrie" -> "lookupTrie";
"lookupTrieExact" -> "leaves";
"lookupTrieExact" -> "lookupTrieExact";
"lookupTrieExact" -> "x";
"lookupType" -> "p";
"lookupType" -> "tvUnique";
"lookupTypeNames" -> "merge";
"lookupVar" -> "lookupNewtype";
"lookupVar" -> "lookupParamFun";
"lookupVar" -> "nameUnique";
"lookupVar" -> "newtypeConType";
"lookupVar" -> "panic";
"lookupVar" -> "reportError";
"lookupVar" -> "x";
"lshr" -> "x";
"lsig256_0" -> "x";
"lsig256_1" -> "x";
"lsig512_0" -> "x";
"lsig512_1" -> "x";
"m2" -> "m2Table";
"m3" -> "m3Table";
"m9" -> "m9Table";
"mB" -> "mBTable";
"mD" -> "mDTable";
"mE" -> "mETable";
"maj" -> "x";
"makeValParamDef" -> "checkSigB";
"makeValParamDef" -> "nameLoc";
"makeValParamDef" -> "withVar";
"makeValParamDef" -> "x";
"mapMaybeTM" -> "canonicalFields";
"mapMaybeTM" -> "f";
"mapMaybeTM" -> "m2";
"mapMaybeTM" -> "mapWithKeyTM";
"mapMaybeTM" -> "recordFromFields";
"mapMaybeTM" -> "tcon";
"mapMaybeTM" -> "updSub";
"mapMaybeTM" -> "x";
"mapSeqMap" -> "f";
"mapSeqMap" -> "lookupSeqMap";
"mapSeqMap" -> "memoMap";
"mapSeqMap" -> "x";
"mapTM" -> "f";
"mapWithFieldName" -> "canonicalFields";
"mapWithFieldName" -> "f";
"mapWithFieldName" -> "mapWithFieldName";
"mapWithFieldName" -> "traverseRecordMap";
"mapWithKeyTM" -> "f";
"markdown" -> "mk";
"mask" -> "blackhole";
"mask" -> "delayFill";
"mask" -> "evalPanic";
"mask" -> "evalSpark";
"mask" -> "f";
"mask" -> "fpBinArith";
"mask" -> "fpCvtToInteger";
"mask" -> "fpDiv";
"mask" -> "fpEq";
"mask" -> "fpFromInteger";
"mask" -> "fpLit";
"mask" -> "fpNeg";
"mask" -> "fpRoundMode";
"mask" -> "getCallStack";
"mask" -> "integer";
"mask" -> "integerToChar";
"mask" -> "io";
"mask" -> "lg2";
"mask" -> "liftBinIntMod";
"mask" -> "mkBv";
"mask" -> "modifyCallStack";
"mask" -> "p";
"mask" -> "panic";
"mask" -> "ppBV";
"mask" -> "signedValue";
"mask" -> "text";
"mask" -> "wordTooWide";
"mask" -> "x";
"match" -> "matchDefault";
"matchLinear" -> "aMul";
"matchLinear" -> "aNat";
"matchLinear" -> "anAdd";
"matchLinear" -> "x";
"matchLinearUnifier" -> "aFreeTVar";
"matchLinearUnifier" -> "anAdd";
"matchLinearUnifier" -> "noFreeVariables";
"matchLinearUnifier" -> "x";
"matchThen" -> "f";
"maxBigIntWidth" -> "binBV";
"maxBigIntWidth" -> "bvVal";
"maxBigIntWidth" -> "fpBinArith";
"maxBigIntWidth" -> "fpRoundMode";
"maxBigIntWidth" -> "integerToChar";
"maxBigIntWidth" -> "lg2";
"maxBigIntWidth" -> "liftBinIntMod";
"maxBigIntWidth" -> "mask";
"maxBigIntWidth" -> "mkBv";
"maxBigIntWidth" -> "ppBV";
"maxBigIntWidth" -> "signedBV";
"maxBigIntWidth" -> "signedValue";
"maxBigIntWidth" -> "unaryBV";
"maybeNameDoc" -> "comma";
"maybeNameDoc" -> "empty";
"maybeNameDoc" -> "nameIdent";
"maybeNameDoc" -> "nameUnique";
"maybeNameDoc" -> "parens";
"maybeNameDoc" -> "tcDecls";
"maybeNameDoc" -> "tcExpr";
"maybeNameDoc" -> "tcModule";
"maybeNameDoc" -> "text";
"memoMap" -> "doEval";
"memoMap" -> "lookupSeqMap";
"memoMap" -> "x";
"mergeSeqMap" -> "iteValue";
"mergeSeqMap" -> "lookupSeqMap";
"mergeSeqMap" -> "x";
"mergeValue" -> "f";
"mergeValue" -> "fromVFun";
"mergeValue" -> "fromVPoly";
"mergeValue" -> "iteRational";
"mergeValue" -> "lam";
"mergeValue" -> "memoMap";
"mergeValue" -> "mergeSeqMap";
"mergeValue" -> "mergeValue\'";
"mergeValue" -> "mergeWord\'";
"mergeValue" -> "panic";
"mergeValue" -> "tlam";
"mergeValue" -> "x";
"mergeValue" -> "zipRecords";
"mergeValue\'" -> "mergeValue";
"mergeWord" -> "asBitsMap";
"mergeWord" -> "memoMap";
"mergeWord" -> "mergeSeqMap";
"mergeWord" -> "wordValueSize";
"mergeWord\'" -> "mergeWord";
"mgu" -> "bindVar";
"mgu" -> "emptyMGU";
"mgu" -> "emptySubst";
"mgu" -> "fieldSet";
"mgu" -> "mgu";
"mgu" -> "mguMany";
"mgu" -> "recordElements";
"mgu" -> "t1";
"mgu" -> "t2";
"mgu" -> "uniError";
"mgu" -> "x";
"mguMany" -> "emptyMGU";
"mguMany" -> "mgu";
"mguMany" -> "mguMany";
"mguMany" -> "t1";
"mguMany" -> "t2";
"mguMany" -> "uniError";
"mkAnonymousModule" -> "emptyRange";
"mkAnonymousModule" -> "mkModName";
"mkAnonymousModule" -> "mkModule";
"mkBv" -> "mask";
"mkDeclared" -> "nextUnique";
"mkDoc" -> "x";
"mkEApp" -> "at";
"mkEApp" -> "f";
"mkEApp" -> "mkTypeInst";
"mkEApp" -> "p";
"mkEApp" -> "panic";
"mkEInfix" -> "compareFixity";
"mkEInfix" -> "f";
"mkEInfix" -> "mkEInfix";
"mkEInfix" -> "record";
"mkEInfix" -> "x";
"mkFakeName" -> "getIdent";
"mkFakeName" -> "mkParameter";
"mkFakeName" -> "rename";
"mkFakeName" -> "renameSchema";
"mkFixity" -> "errorMessage";
"mkFixity" -> "intVal";
"mkIdent" -> "moves";
"mkIdent" -> "p";
"mkIndexedDecl" -> "at";
"mkIndexedDecl" -> "emptyRange";
"mkIndexedDecl" -> "f";
"mkIndexedDecl" -> "mkGenerate";
"mkIndexedExpr" -> "mkGenerate";
"mkInteractiveRange" -> "p";
"mkLit" -> "evalPanic";
"mkLit" -> "fpLit";
"mkLit" -> "intToRational";
"mkLit" -> "p";
"mkLit" -> "word";
"mkModName" -> "packModName";
"mkOptionMap" -> "emptyTrie";
"mkOptionMap" -> "insertTrie";
"mkParameter" -> "nextUnique";
"mkPoly" -> "errorMessage";
"mkPoly" -> "mk";
"mkPrim" -> "mkPrim\'";
"mkPrimDecl" -> "at";
"mkPrimDecl" -> "emptyRange";
"mkPrimDecl" -> "exportDecl";
"mkPrimDecl" -> "getIdent";
"mkPrimDecl" -> "isInfixIdent";
"mkPrimTypeDecl" -> "errorMessage";
"mkPrimTypeDecl" -> "panic";
"mkPrimTypeDecl" -> "pp";
"mkPrimTypeDecl" -> "t1";
"mkPrimTypeDecl" -> "t2";
"mkPrimTypeDecl" -> "tp";
"mkPrimTypeDecl" -> "tpName";
"mkPrimTypeDecl" -> "x";
"mkPrim\'" -> "getPrimMap";
"mkPrim\'" -> "lookupPrimDecl";
"mkPrim\'" -> "prelPrim";
"mkPrompt" -> "f";
"mkPrompt" -> "pp";
"mkPrompt" -> "pretty";
"mkProp" -> "errorMessage";
"mkProp" -> "panic";
"mkPropSyn" -> "errorMessage";
"mkPropSyn" -> "getIdent";
"mkPropSyn" -> "mkProp";
"mkPropSyn" -> "widthIdent";
"mkProperty" -> "at";
"mkProperty" -> "emptyRange";
"mkProperty" -> "f";
"mkQualIdent" -> "moves";
"mkQualIdent" -> "p";
"mkQualIdent" -> "splitQual";
"mkQualOp" -> "moves";
"mkQualOp" -> "p";
"mkQualOp" -> "splitQual";
"mkRecord" -> "at";
"mkRecord" -> "errorMessage";
"mkRecord" -> "f";
"mkRecord" -> "pp";
"mkRecord" -> "recordFromFieldsErr";
"mkRecord" -> "x";
"mkSHA256InitialState" -> "lit";
"mkSHA256InitialState" -> "s2";
"mkSHA512InitialState" -> "lit";
"mkSHA512InitialState" -> "s2";
"mkScc" -> "defs";
"mkSelSln" -> "mkSelSln";
"mkSelSln" -> "newParamName";
"mkSelSln" -> "packIdent";
"mkSelSln" -> "panic";
"mkSelSln" -> "t1";
"mkSelSln" -> "t2";
"mkSelSln" -> "tNoUser";
"mkSelector" -> "mkIdent";
"mkSelector" -> "panic";
"mkSeq" -> "isTBit";
"mkSolverResult" -> "getPrimMap";
"mkSolverResult" -> "rIdent";
"mkSolverResult" -> "recordFromFields";
"mkTInfix" -> "checkLabels";
"mkTInfix" -> "compareFixity";
"mkTInfix" -> "f";
"mkTInfix" -> "getNS";
"mkTInfix" -> "mkEInfix";
"mkTInfix" -> "mkTInfix";
"mkTInfix" -> "p";
"mkTInfix" -> "panic";
"mkTInfix" -> "record";
"mkTInfix" -> "rename";
"mkTInfix" -> "renameArm";
"mkTInfix" -> "renameOp";
"mkTInfix" -> "renamePats";
"mkTInfix" -> "renameSchema";
"mkTInfix" -> "renameVar";
"mkTInfix" -> "rnLocated";
"mkTInfix" -> "selName";
"mkTInfix" -> "shadowNames";
"mkTInfix" -> "shadowNames\'";
"mkTInfix" -> "withLoc";
"mkTInfix" -> "x";
"mkTParam" -> "errorMessage";
"mkTParam" -> "mkUnqual";
"mkTParam" -> "widthIdent";
"mkTySyn" -> "errorMessage";
"mkTySyn" -> "getIdent";
"mkTySyn" -> "widthIdent";
"mkTypeInst" -> "nullIdent";
"mkTypeInst" -> "x";
"mkUserEnv" -> "leaves";
"modExports" -> "exportBind";
"modExports" -> "exportType";
"modExports" -> "namesD";
"modExports" -> "tnamesD";
"modExports" -> "tnamesNT";
"modNameChunks" -> "modNameToText";
"modNameChunks" -> "modSep";
"modNameChunks" -> "notParamInstModName";
"modNameToText" -> "x";
"modParamIdent" -> "x";
"modParamsNamingEnv" -> "backticks";
"modParamsNamingEnv" -> "char";
"modParamsNamingEnv" -> "checkNamingEnv";
"modParamsNamingEnv" -> "empty";
"modParamsNamingEnv" -> "emptyRange";
"modParamsNamingEnv" -> "f";
"modParamsNamingEnv" -> "fixNameDisp";
"modParamsNamingEnv" -> "fsep";
"modParamsNamingEnv" -> "hang";
"modParamsNamingEnv" -> "interpImport";
"modParamsNamingEnv" -> "mkUnqual";
"modParamsNamingEnv" -> "nameIdent";
"modParamsNamingEnv" -> "nameLoc";
"modParamsNamingEnv" -> "namingEnv\'";
"modParamsNamingEnv" -> "nest";
"modParamsNamingEnv" -> "newLocal";
"modParamsNamingEnv" -> "newTop";
"modParamsNamingEnv" -> "panic";
"modParamsNamingEnv" -> "parens";
"modParamsNamingEnv" -> "pp";
"modParamsNamingEnv" -> "ppLocName";
"modParamsNamingEnv" -> "ppNestedSels";
"modParamsNamingEnv" -> "psFixity";
"modParamsNamingEnv" -> "psName";
"modParamsNamingEnv" -> "quotes";
"modParamsNamingEnv" -> "renameModule";
"modParamsNamingEnv" -> "renameType";
"modParamsNamingEnv" -> "renameVar";
"modParamsNamingEnv" -> "runRenamer";
"modParamsNamingEnv" -> "shadowNames";
"modParamsNamingEnv" -> "shadowing";
"modParamsNamingEnv" -> "singletonE";
"modParamsNamingEnv" -> "singletonT";
"modParamsNamingEnv" -> "text";
"modParamsNamingEnv" -> "tp";
"modParamsNamingEnv" -> "tpName";
"modParamsNamingEnv" -> "tsFixity";
"modParamsNamingEnv" -> "tsName";
"modParamsNamingEnv" -> "vcat";
"modParamsNamingEnv" -> "x";
"modRange" -> "rCombs";
"modRange" -> "start";
"modV" -> "integralBinary";
"modV" -> "x";
"mod_add" -> "p";
"mod_add" -> "x";
"mod_half" -> "p";
"mod_half" -> "x";
"mod_mul" -> "p";
"mod_mul" -> "x";
"mod_square" -> "p";
"mod_square" -> "x";
"mod_sub" -> "mod_add";
"mod_sub" -> "p";
"mod_sub" -> "x";
"modelPred" -> "varModelPred";
"modify" -> "f";
"modifyCallStack" -> "f";
"modifyCallStack" -> "runEval";
"modifyEvalEnv" -> "f";
"modifyModuleEnv" -> "f";
"modifyRW" -> "f";
"modifyRW_" -> "f";
"modifySpecCache" -> "modify";
"moduleCmd" -> "loadHelper";
"moduleCmd" -> "rPutStrLn";
"moduleCmdResult" -> "getFocusedEnv";
"moduleCmdResult" -> "getKnownUser";
"moduleCmdResult" -> "pp";
"moduleCmdResult" -> "rPrint";
"moduleCmdResult" -> "raise";
"moduleCmdResult" -> "runDoc";
"moduleCmdResult" -> "setEditPath";
"moduleCmdResult" -> "setModuleEnv";
"moduleDeps" -> "checkDecls";
"moduleDeps" -> "checkExpr";
"moduleDeps" -> "defs";
"moduleDeps" -> "evalDecls";
"moduleDeps" -> "evalExpr";
"moduleDeps" -> "findModule";
"moduleDeps" -> "focusedEnv";
"moduleDeps" -> "genIface";
"moduleDeps" -> "getPrimMap";
"moduleDeps" -> "initialModuleEnv";
"moduleDeps" -> "loadModuleByName";
"moduleDeps" -> "loadModuleByPath";
"moduleDeps" -> "noPat";
"moduleDeps" -> "p";
"moduleDeps" -> "recordElements";
"moduleDeps" -> "renameType";
"moduleDeps" -> "renameVar";
"moduleDeps" -> "rmTParam";
"moduleDeps" -> "rmVal";
"moduleDeps" -> "rmVals";
"moduleDeps" -> "t1";
"moduleDeps" -> "t2";
"moduleDeps" -> "tc";
"moduleDeps" -> "transDeps";
"moduleDeps" -> "x";
"moduleEnv" -> "evalDecls";
"moduleEnv" -> "evalNewtypes";
"moduleFile" -> "modNameChunks";
"moduleNameMismatch" -> "expected";
"moduleNameMismatch" -> "raise";
"moduleNotFound" -> "raise";
"moduleParseError" -> "raise";
"modulePathLabel" -> "p";
"move" -> "p";
"moves" -> "move";
"moves" -> "p";
"mtpParam" -> "nameLoc";
"mtpParam" -> "nameUnique";
"mul2" -> "p";
"mul2" -> "x";
"mul3" -> "mod_add";
"mul3" -> "mul2";
"mul3" -> "p";
"mul3" -> "x";
"mul4" -> "mul2";
"mul4" -> "p";
"mul4" -> "x";
"mul8" -> "mul2";
"mul8" -> "mul4";
"mul8" -> "p";
"mul8" -> "x";
"mulV" -> "fpRndMode";
"mulV" -> "rationalMul";
"mulV" -> "ringBinary";
"mulV" -> "x";
"multiSATQuery" -> "computeBlockingPred";
"multiSATQuery" -> "computeModel";
"multiSATQuery" -> "decSatNum";
"multiSATQuery" -> "singleQuery";
"multiSATQuery" -> "unFinType";
"multiSATQuery" -> "varShapeToConcrete";
"nAdd" -> "x";
"nCeilDiv" -> "x";
"nCeilMod" -> "x";
"nDiv" -> "x";
"nExp" -> "x";
"nLenFromThenTo" -> "x";
"nLg2" -> "genLog";
"nLg2" -> "panic";
"nLg2" -> "x";
"nMax" -> "x";
"nMin" -> "x";
"nMod" -> "x";
"nMul" -> "x";
"nSub" -> "x";
"nWidth" -> "widthInteger";
"nameInst" -> "paramModRecParam";
"nameInst" -> "toParamInstName";
"nameInst" -> "tpVar";
"nameInst" -> "x";
"nameList" -> "brackets";
"nameList" -> "canonicalFields";
"nameList" -> "comma";
"nameList" -> "f";
"nameList" -> "int";
"nameList" -> "maybeNameDoc";
"nameList" -> "nameVariants";
"nameList" -> "parens";
"nameList" -> "text";
"nameList" -> "tp";
"nameList" -> "tpName";
"nameList" -> "unpackIdent";
"nameList" -> "vcat";
"nameList" -> "x";
"nameVariant" -> "x";
"nameVariants" -> "nameVariant";
"nameVariants" -> "x";
"namesArm" -> "boundLNames";
"namesArm" -> "combine";
"namesArm" -> "namesM";
"namesB" -> "boundLNames";
"namesB" -> "namesDef";
"namesB" -> "namesPs";
"namesD" -> "namesB";
"namesD" -> "namesD";
"namesD" -> "namesE";
"namesD" -> "namesP";
"namesD" -> "p";
"namesDef" -> "namesE";
"namesDs" -> "boundLNames";
"namesDs" -> "defs";
"namesDs" -> "namesD";
"namesE" -> "boundLNames";
"namesE" -> "namesArm";
"namesE" -> "namesDs";
"namesE" -> "namesE";
"namesE" -> "namesPs";
"namesE" -> "namesUF";
"namesE" -> "recordElements";
"namesE" -> "x";
"namesM" -> "namesB";
"namesM" -> "namesE";
"namesM" -> "namesP";
"namesM" -> "p";
"namesP" -> "namesP";
"namesP" -> "namesPs";
"namesP" -> "p";
"namesP" -> "recordElements";
"namesP" -> "x";
"namesPs" -> "namesP";
"namesUF" -> "namesE";
"namingEnv\'" -> "runSupplyT";
"nbCommandList" -> "allTerms";
"nbCommandList" -> "astOfCmd";
"nbCommandList" -> "browseCmd";
"nbCommandList" -> "helpCmd";
"nbCommandList" -> "proveCmd";
"nbCommandList" -> "qcCmd";
"nbCommandList" -> "refEvalCmd";
"nbCommandList" -> "safeCmd";
"nbCommandList" -> "satCmd";
"nbCommandList" -> "setOptionCmd";
"nbCommandList" -> "specializeCmd";
"nbCommandList" -> "typeOfCmd";
"nbCommandList" -> "versionCmd";
"nbCommands" -> "emptyTrie";
"nbCommands" -> "insertTrie";
"nbCommands" -> "nbCommandList";
"needsInst" -> "x";
"negateV" -> "fpNeg";
"negateV" -> "rationalNegate";
"negateV" -> "ringUnary";
"negateV" -> "x";
"nest" -> "liftPJ1";
"newGoal" -> "curRange";
"newGoalName" -> "newName";
"newGoalName" -> "x";
"newGoals" -> "addGoals";
"newGoals" -> "newGoal";
"newHasGoal" -> "f";
"newHasGoal" -> "newGoal";
"newHasGoal" -> "newGoalName";
"newHasGoal" -> "pHas";
"newHasGoal" -> "panic";
"newLocal" -> "getIdent";
"newLocal" -> "mkParameter";
"newLocal" -> "x";
"newName" -> "emptyRange";
"newName" -> "mkDeclared";
"newName" -> "x";
"newParamName" -> "curRange";
"newParamName" -> "mkParameter";
"newParamName" -> "x";
"newTParam" -> "emptyRange";
"newTParam" -> "newName";
"newTParam" -> "x";
"newTVar" -> "newTVar\'";
"newTVar\'" -> "curRange";
"newTVar\'" -> "getBoundInScope";
"newTVar\'" -> "newName";
"newTVar\'" -> "x";
"newTop" -> "getIdent";
"newTop" -> "isGeneratedName";
"newTop" -> "mkDeclared";
"newTopOrLocalName" -> "newName";
"newType" -> "newTVar";
"newtypeConType" -> "newtypeTyCon";
"newtypeConType" -> "recordFromFields";
"newtypeConType" -> "tFun";
"newtypeConType" -> "tpVar";
"newtypeParam" -> "x";
"nextUniqueM" -> "nextUnique";
"nlam" -> "f";
"noFreeVariables" -> "isFreeTV";
"noIncTopDecl" -> "resolveInclude";
"noIncludeErrors" -> "getImportSource";
"noIncludeErrors" -> "raise";
"noIncludeModule" -> "collectErrors";
"noIncludeModule" -> "noIncTopDecl";
"noIncludeProgram" -> "collectErrors";
"noIncludeProgram" -> "noIncTopDecl";
"noMatchB" -> "noPatFun";
"noMatchB" -> "panic";
"noMatchD" -> "at";
"noMatchD" -> "emptyRange";
"noMatchD" -> "inRange";
"noMatchD" -> "noMatchB";
"noMatchD" -> "noMatchD";
"noMatchD" -> "noPat";
"noMatchD" -> "noPatE";
"noMatchD" -> "p";
"noMatchD" -> "splitSimpleP";
"noMatchD" -> "x";
"noModuleName" -> "packModName";
"noPat" -> "canonicalFields";
"noPat" -> "getRange";
"noPat" -> "inRange";
"noPat" -> "interactive";
"noPat" -> "newName";
"noPat" -> "noPat";
"noPat" -> "noPatErrors";
"noPat" -> "p";
"noPat" -> "runModuleM";
"noPat" -> "sel";
"noPat" -> "simpleBind";
"noPat" -> "x";
"noPatArm" -> "noPatM";
"noPatDs" -> "annotDs";
"noPatDs" -> "checkSigs";
"noPatDs" -> "f";
"noPatDs" -> "noMatchD";
"noPatDs" -> "p";
"noPatDs" -> "recordError";
"noPatDs" -> "toFixity";
"noPatDs" -> "toPragma";
"noPatDs" -> "toSig";
"noPatE" -> "f";
"noPatE" -> "inRange";
"noPatE" -> "noPatArm";
"noPatE" -> "noPatDs";
"noPatE" -> "noPatE";
"noPatE" -> "noPatFun";
"noPatE" -> "noPatUF";
"noPatE" -> "x";
"noPatErrors" -> "getImportSource";
"noPatErrors" -> "raise";
"noPatFun" -> "noPat";
"noPatFun" -> "noPatE";
"noPatM" -> "noMatchB";
"noPatM" -> "noPat";
"noPatM" -> "noPatE";
"noPatM" -> "p";
"noPatM" -> "x";
"noPatModule" -> "noPatTopDs";
"noPatProg" -> "noPatTopDs";
"noPatTopDs" -> "annotTopDs";
"noPatTopDs" -> "checkSigs";
"noPatTopDs" -> "f";
"noPatTopDs" -> "noMatchD";
"noPatTopDs" -> "p";
"noPatTopDs" -> "recordError";
"noPatTopDs" -> "toDocs";
"noPatTopDs" -> "toFixity";
"noPatTopDs" -> "toPragma";
"noPatTopDs" -> "toSig";
"noPatTopDs" -> "x";
"noPatUF" -> "noPatE";
"normalizeForTwinMult" -> "ec_add";
"normalizeForTwinMult" -> "ec_double";
"normalizeForTwinMult" -> "ec_negate";
"normalizeForTwinMult" -> "ec_normalize";
"normalizeForTwinMult" -> "ec_sub";
"normalizeForTwinMult" -> "mod_mul";
"normalizeForTwinMult" -> "mod_square";
"normalizeForTwinMult" -> "p";
"normalizeForTwinMult" -> "zro";
"normalizeSign" -> "p";
"notAParameterizedModule" -> "raise";
"notAParameterizedModule" -> "x";
"notFun" -> "notFun";
"notParamInstModName" -> "modInstPref";
"notParamInstModName" -> "x";
"numLit" -> "panic";
"numLit" -> "x";
"numToken" -> "fromDigit";
"numToken" -> "x";
"offlineProveSat" -> "f";
"offlineProveSat" -> "getDynEnv";
"offlineProveSat" -> "getKnownUser";
"offlineProveSat" -> "getProverConfig";
"offlineProveSat" -> "getPutStr";
"offlineProveSat" -> "getUser";
"offlineProveSat" -> "getUserProverValidate";
"offlineProveSat" -> "io";
"offlineProveSat" -> "liftModuleCmd";
"offlineProveSat" -> "rPutStr";
"offlineProveSat" -> "rPutStrLn";
"offlineProveSat" -> "replCheckExpr";
"offlineProveSat" -> "withRWTempFile";
"offlineProveSat" -> "x";
"onlineProveSat" -> "getDynEnv";
"onlineProveSat" -> "getKnownUser";
"onlineProveSat" -> "getProverConfig";
"onlineProveSat" -> "getUser";
"onlineProveSat" -> "getUserProverValidate";
"onlineProveSat" -> "io";
"onlineProveSat" -> "liftModuleCmd";
"onlineProveSat" -> "replCheckExpr";
"onlineProveSat" -> "validEvalContext";
"op1" -> "f";
"op1" -> "x";
"op2" -> "f";
"op2" -> "x";
"op3" -> "f";
"op3" -> "x";
"optParens" -> "parens";
"orV" -> "logicBinary";
"orderBinds" -> "defs";
"orderBinds" -> "mkScc";
"orderBinds" -> "namesB";
"orderBinds" -> "p";
"orderBinds" -> "setDocString";
"orderBinds" -> "x";
"orderTyDecls" -> "boundNames";
"orderTyDecls" -> "boundNamesSet";
"orderTyDecls" -> "combine";
"orderTyDecls" -> "getTVars";
"orderTyDecls" -> "mkScc";
"orderTyDecls" -> "p";
"orderTyDecls" -> "recordError";
"orderTyDecls" -> "tnamesC";
"orderTyDecls" -> "tnamesT";
"orderTyDecls" -> "x";
"ordinal" -> "ordSuffix";
"ordinal" -> "text";
"ordinal" -> "x";
"otherIOError" -> "raise";
"p" -> "adjustField";
"p" -> "canonicalFields";
"p" -> "displayFields";
"p" -> "displayOrder";
"p" -> "f";
"p" -> "fieldSet";
"p" -> "lookupField";
"p" -> "mapWithFieldName";
"p" -> "p";
"p" -> "recordElements";
"p" -> "recordFromFields";
"p" -> "recordFromFieldsErr";
"p" -> "recordFromFieldsWithDisplay";
"p" -> "recordMapAccum";
"p" -> "traverseRecordMap";
"p" -> "x";
"p" -> "zipRecords";
"p" -> "zipRecordsM";
"pAnd" -> "pAnd";
"pAnd" -> "pIsTrue";
"pAnd" -> "pTrue";
"pAnd" -> "tIsError";
"pAnd" -> "x";
"pBin" -> "aNat\'";
"pBin" -> "p";
"pBin" -> "t1";
"pBin" -> "t2";
"pBin" -> "tIsError";
"pBin" -> "x";
"pFin" -> "pTrue";
"pFin" -> "tError";
"pFin" -> "tNoUser";
"pIsCmp" -> "t1";
"pIsCmp" -> "tNoUser";
"pIsEq" -> "t1";
"pIsEq" -> "tNoUser";
"pIsEqual" -> "tNoUser";
"pIsFLiteral" -> "tNoUser";
"pIsField" -> "t1";
"pIsField" -> "tNoUser";
"pIsFin" -> "t1";
"pIsFin" -> "tNoUser";
"pIsGeq" -> "tNoUser";
"pIsIntegral" -> "t1";
"pIsIntegral" -> "tNoUser";
"pIsLiteral" -> "t1";
"pIsLiteral" -> "t2";
"pIsLiteral" -> "tNoUser";
"pIsLogic" -> "t1";
"pIsLogic" -> "tNoUser";
"pIsPrime" -> "t1";
"pIsPrime" -> "tNoUser";
"pIsRing" -> "t1";
"pIsRing" -> "tNoUser";
"pIsRound" -> "t1";
"pIsRound" -> "tNoUser";
"pIsSignedCmp" -> "t1";
"pIsSignedCmp" -> "tNoUser";
"pIsTrue" -> "tNoUser";
"pIsValidFloat" -> "tNoUser";
"pIsWidth" -> "t1";
"pIsWidth" -> "tNoUser";
"pIsZero" -> "t1";
"pIsZero" -> "tNoUser";
"pLiteral" -> "x";
"pPrime" -> "tError";
"pPrime" -> "tNoUser";
"pSplitAnd" -> "tNoUser";
"pValidFloat" -> "p";
"packIdent" -> "mkIdent";
"packInfix" -> "mkInfix";
"packModName" -> "modSep";
"packModName" -> "textToModName";
"packModName" -> "trim";
"packSBV" -> "fromBitsLE";
"padSHA1" -> "generic_pad";
"padSHA1Chunks" -> "generic_pad_chunks";
"padSHA512" -> "generic_pad";
"padSHA512Chunks" -> "generic_pad_chunks";
"panic" -> "empty";
"panic" -> "f";
"panic" -> "p";
"paramInstModName" -> "modInstPref";
"paramInstModName" -> "x";
"paramModRecParam" -> "emptyRange";
"paramModRecParam" -> "packIdent";
"paramModRecParam" -> "x";
"paramRecTy" -> "nameIdent";
"paramRecTy" -> "recordFromFields";
"paramRecTy" -> "tRec";
"paramRecTy" -> "x";
"parens" -> "liftPJ1";
"parmapV" -> "asBitsMap";
"parmapV" -> "f";
"parmapV" -> "fromVFun";
"parmapV" -> "panic";
"parmapV" -> "sparkParMap";
"parse" -> "p";
"parseCommand" -> "asBatch";
"parseCommand" -> "catch";
"parseCommand" -> "clearEditPath";
"parseCommand" -> "clearLoadedMod";
"parseCommand" -> "evalCmd";
"parseCommand" -> "finally";
"parseCommand" -> "freshName";
"parseCommand" -> "getCallStacks";
"parseCommand" -> "getDynEnv";
"parseCommand" -> "getEditPath";
"parseCommand" -> "getExprNames";
"parseCommand" -> "getFocusedEnv";
"parseCommand" -> "getKnownUser";
"parseCommand" -> "getLoadedMod";
"parseCommand" -> "getLogger";
"parseCommand" -> "getModNames";
"parseCommand" -> "getModuleEnv";
"parseCommand" -> "getPrompt";
"parseCommand" -> "getPropertyNames";
"parseCommand" -> "getProverConfig";
"parseCommand" -> "getPutStr";
"parseCommand" -> "getTypeNames";
"parseCommand" -> "getUser";
"parseCommand" -> "getUserProverValidate";
"parseCommand" -> "getUserSatNum";
"parseCommand" -> "getUserShowProverStats";
"parseCommand" -> "io";
"parseCommand" -> "parsePPFloatFormat";
"parseCommand" -> "prependSearchPath";
"parseCommand" -> "rPrint";
"parseCommand" -> "rPutStr";
"parseCommand" -> "rPutStrLn";
"parseCommand" -> "raise";
"parseCommand" -> "rethrowEvalError";
"parseCommand" -> "runREPL";
"parseCommand" -> "sanitizeEnd";
"parseCommand" -> "setDynEnv";
"parseCommand" -> "setEditPath";
"parseCommand" -> "setLoadedMod";
"parseCommand" -> "setModuleEnv";
"parseCommand" -> "setPutStr";
"parseCommand" -> "setSearchPath";
"parseCommand" -> "setUpdateREPLTitle";
"parseCommand" -> "setUser";
"parseCommand" -> "shouldContinue";
"parseCommand" -> "smokeTest";
"parseCommand" -> "splitCommand";
"parseCommand" -> "stop";
"parseCommand" -> "tryGetUser";
"parseCommand" -> "uncons";
"parseCommand" -> "uniqify";
"parseCommand" -> "unlessBatch";
"parseCommand" -> "updateREPLTitle";
"parseCommand" -> "userOptions";
"parseCommand" -> "validEvalContext";
"parseCommand" -> "whenDebug";
"parseModule" -> "badUtf8";
"parseModule" -> "cantFindFile";
"parseModule" -> "fingerprint";
"parseModule" -> "getByteReader";
"parseModule" -> "io";
"parseModule" -> "moduleParseError";
"parseModule" -> "modulePathLabel";
"parseModule" -> "otherIOError";
"parseModule" -> "p";
"parseModule" -> "panic";
"parseString" -> "p";
"parseString" -> "parse";
"parseValue" -> "canonicalFields";
"parseValue" -> "displayOrder";
"parseValue" -> "p";
"parseValue" -> "panic";
"parseValue" -> "parseValue";
"parseValue" -> "parseValues";
"parseValue" -> "recordFromFieldsWithDisplay";
"parseValue" -> "x";
"parseValues" -> "parseValue";
"parseValues" -> "parseValues";
"patternEnv" -> "curLoc";
"patternEnv" -> "f";
"patternEnv" -> "getIdent";
"patternEnv" -> "mkParameter";
"patternEnv" -> "p";
"patternEnv" -> "record";
"patternEnv" -> "recordElements";
"patternEnv" -> "rename";
"patternEnv" -> "renameType";
"patternEnv" -> "rnLocated";
"patternEnv" -> "shadowNames";
"patternEnv" -> "shadowNamesNS";
"patternEnv" -> "singletonE";
"patternEnv" -> "singletonT";
"patternEnv" -> "typeExists";
"patternEnv" -> "withLoc";
"pdiv" -> "widthInteger";
"pdiv" -> "x";
"pickTVarName" -> "empty";
"pickTVarName" -> "emptyRange";
"pickTVarName" -> "exprModName";
"pickTVarName" -> "f";
"pickTVarName" -> "insertTM";
"pickTVarName" -> "insertWithTM";
"pickTVarName" -> "mapMaybeTM";
"pickTVarName" -> "mapTM";
"pickTVarName" -> "mapWithKeyTM";
"pickTVarName" -> "membersTM";
"pickTVarName" -> "mk";
"pickTVarName" -> "nameInfo";
"pickTVarName" -> "ordinal";
"pickTVarName" -> "pp";
"pickTVarName" -> "ppWithNamesPrec";
"pickTVarName" -> "quotes";
"pickTVarName" -> "text";
"pickTVarName" -> "x";
"plainSubst" -> "f";
"plainSubst" -> "plainSubst";
"plainSubst" -> "tc";
"plainSubst" -> "x";
"pmod" -> "mask";
"pmod" -> "moduleDeps";
"pmod" -> "p";
"pmod" -> "transDeps";
"pmod" -> "widthInteger";
"pmod" -> "x";
"pmult" -> "x";
"polyTerm" -> "errorMessage";
"polyTerm" -> "p";
"ppBV" -> "asciiMode";
"ppBV" -> "char";
"ppBV" -> "empty";
"ppBV" -> "int";
"ppBV" -> "integer";
"ppBV" -> "text";
"ppBlock" -> "nest";
"ppBlock" -> "rPrint";
"ppBlock" -> "rPutStrLn";
"ppBlock" -> "runDoc";
"ppBlock" -> "vcat";
"ppEnv" -> "brackets";
"ppEnv" -> "fsep";
"ppEnv" -> "int";
"ppEnv" -> "ppValue";
"ppEnv" -> "text";
"ppError" -> "char";
"ppError" -> "colon";
"ppError" -> "comma";
"ppError" -> "nest";
"ppError" -> "p";
"ppError" -> "panic";
"ppError" -> "pp";
"ppError" -> "s2";
"ppError" -> "text";
"ppError" -> "x";
"ppFixity" -> "braces";
"ppFixity" -> "char";
"ppFixity" -> "commaSep";
"ppFixity" -> "empty";
"ppFixity" -> "hsep";
"ppFixity" -> "int";
"ppFixity" -> "parens";
"ppFixity" -> "pp";
"ppFixity" -> "ppL";
"ppFixity" -> "ppNamed";
"ppFixity" -> "sep";
"ppFixity" -> "text";
"ppFixity" -> "x";
"ppFracLit" -> "braces";
"ppFracLit" -> "commaSep";
"ppFracLit" -> "integer";
"ppFracLit" -> "text";
"ppFracLit" -> "x";
"ppIncludeError" -> "char";
"ppIncludeError" -> "nest";
"ppIncludeError" -> "pp";
"ppIncludeError" -> "ppError";
"ppIncludeError" -> "text";
"ppIncludeError" -> "vcat";
"ppInfix" -> "compareFixity";
"ppInfix" -> "f";
"ppInfix" -> "optParens";
"ppInfix" -> "pp";
"ppInfix" -> "ppInfix";
"ppInfix" -> "sep";
"ppInterval" -> "brackets";
"ppInterval" -> "hsep";
"ppInterval" -> "integer";
"ppInterval" -> "text";
"ppInterval" -> "x";
"ppIntervals" -> "char";
"ppIntervals" -> "pp";
"ppIntervals" -> "ppInterval";
"ppIntervals" -> "vcat";
"ppL" -> "pp";
"ppLam" -> "addTNames";
"ppLam" -> "braces";
"ppLam" -> "comma";
"ppLam" -> "empty";
"ppLam" -> "optParens";
"ppLam" -> "parens";
"ppLam" -> "pp";
"ppLam" -> "ppWithNames";
"ppLam" -> "ppWithNamesPrec";
"ppLam" -> "punctuate";
"ppLam" -> "sep";
"ppLam" -> "text";
"ppLam" -> "x";
"ppLocName" -> "nameLoc";
"ppLocName" -> "pp";
"ppName" -> "empty";
"ppName" -> "exprModName";
"ppName" -> "getNameFormat";
"ppName" -> "isInfixIdent";
"ppName" -> "nameFixity";
"ppName" -> "optParens";
"ppName" -> "panic";
"ppName" -> "pp";
"ppName" -> "ppName";
"ppName" -> "text";
"ppName" -> "withNameDisp";
"ppNamed" -> "pp";
"ppNamed" -> "ppL";
"ppNamed" -> "text";
"ppNamed" -> "x";
"ppNamedError" -> "colon";
"ppNamedError" -> "isExportedBind";
"ppNamedError" -> "isExportedType";
"ppNamedError" -> "nest";
"ppNamedError" -> "pp";
"ppNamedError" -> "text";
"ppNamedWarning" -> "colon";
"ppNamedWarning" -> "nest";
"ppNamedWarning" -> "pp";
"ppNamedWarning" -> "text";
"ppNamed\'" -> "comma";
"ppNamed\'" -> "commaSep";
"ppNamed\'" -> "f";
"ppNamed\'" -> "hsep";
"ppNamed\'" -> "p";
"ppNamed\'" -> "parens";
"ppNamed\'" -> "pp";
"ppNamed\'" -> "ppFixity";
"ppNamed\'" -> "ppL";
"ppNamed\'" -> "ppPragma";
"ppNamed\'" -> "punctuate";
"ppNamed\'" -> "text";
"ppNamed\'" -> "vcat";
"ppNamed\'" -> "x";
"ppNestedSels" -> "brackets";
"ppNestedSels" -> "guessPreProc";
"ppNestedSels" -> "hcat";
"ppNestedSels" -> "int";
"ppNestedSels" -> "knownExts";
"ppNestedSels" -> "text";
"ppNestedSels" -> "unLit";
"ppNestedSels" -> "unpackIdent";
"ppNewtypeShort" -> "addTNames";
"ppNewtypeShort" -> "braces";
"ppNewtypeShort" -> "brackets";
"ppNewtypeShort" -> "char";
"ppNewtypeShort" -> "comma";
"ppNewtypeShort" -> "commaSep";
"ppNewtypeShort" -> "defaultFixity";
"ppNewtypeShort" -> "displayFields";
"ppNewtypeShort" -> "empty";
"ppNewtypeShort" -> "emptyNameMap";
"ppNewtypeShort" -> "f";
"ppNewtypeShort" -> "fsep";
"ppNewtypeShort" -> "getNameFormat";
"ppNewtypeShort" -> "hang";
"ppNewtypeShort" -> "hsep";
"ppNewtypeShort" -> "infixPrimTy";
"ppNewtypeShort" -> "int";
"ppNewtypeShort" -> "integer";
"ppNewtypeShort" -> "isInfixIdent";
"ppNewtypeShort" -> "kindResult";
"ppNewtypeShort" -> "nameFixity";
"ppNewtypeShort" -> "nameIdent";
"ppNewtypeShort" -> "nameInfo";
"ppNewtypeShort" -> "optParens";
"ppNewtypeShort" -> "p";
"ppNewtypeShort" -> "pSplitAnd";
"ppNewtypeShort" -> "parens";
"ppNewtypeShort" -> "pickTVarName";
"ppNewtypeShort" -> "pp";
"ppNewtypeShort" -> "ppInfix";
"ppNewtypeShort" -> "ppNewtypeShort";
"ppNewtypeShort" -> "ppSelector";
"ppNewtypeShort" -> "ppWithNames";
"ppNewtypeShort" -> "ppWithNamesPrec";
"ppNewtypeShort" -> "punctuate";
"ppNewtypeShort" -> "sep";
"ppNewtypeShort" -> "t1";
"ppNewtypeShort" -> "t2";
"ppNewtypeShort" -> "tc";
"ppNewtypeShort" -> "text";
"ppNewtypeShort" -> "tsName";
"ppNewtypeShort" -> "tvUnique";
"ppNewtypeShort" -> "withNameDisp";
"ppNewtypeShort" -> "x";
"ppNumLit" -> "fsep";
"ppNumLit" -> "int";
"ppNumLit" -> "integer";
"ppNumLit" -> "p";
"ppNumLit" -> "polyTerm";
"ppNumLit" -> "text";
"ppPragma" -> "commaSep";
"ppPragma" -> "empty";
"ppPragma" -> "f";
"ppPragma" -> "fsep";
"ppPragma" -> "hang";
"ppPragma" -> "lit";
"ppPragma" -> "p";
"ppPragma" -> "parens";
"ppPragma" -> "pp";
"ppPragma" -> "ppFracLit";
"ppPragma" -> "ppL";
"ppPragma" -> "ppNumLit";
"ppPragma" -> "ppPragma";
"ppPragma" -> "text";
"ppPragma" -> "vcat";
"ppPragma" -> "x";
"ppRational" -> "fpDiv";
"ppRational" -> "fpEq";
"ppRational" -> "fpFromInteger";
"ppRational" -> "fpLit";
"ppRational" -> "fpNeg";
"ppRational" -> "integer";
"ppRational" -> "pushCallFrame";
"ppRational" -> "text";
"ppSection" -> "nest";
"ppSection" -> "p";
"ppSection" -> "panic";
"ppSection" -> "pp";
"ppSection" -> "rPutStrLn";
"ppSection" -> "runDoc";
"ppSection" -> "vcat";
"ppSection" -> "x";
"ppSelector" -> "ordinal";
"ppSelector" -> "pp";
"ppSelector" -> "sel";
"ppSelector" -> "text";
"ppSelector" -> "x";
"ppTrace" -> "compareFixity";
"ppTrace" -> "defaultFixity";
"ppTrace" -> "trace";
"ppUse" -> "addTNames";
"ppUse" -> "asPrim";
"ppUse" -> "comma";
"ppUse" -> "empty";
"ppUse" -> "fsep";
"ppUse" -> "instantiateWith";
"ppUse" -> "nameLoc";
"ppUse" -> "nest";
"ppUse" -> "p";
"ppUse" -> "pp";
"ppUse" -> "ppWithNames";
"ppUse" -> "preludeName";
"ppUse" -> "punctuate";
"ppUse" -> "quotes";
"ppUse" -> "text";
"ppUse" -> "uncheckedTypeArg";
"ppUse" -> "vcat";
"ppUse" -> "x";
"ppValue" -> "asWordVal";
"ppValue" -> "asciiMode";
"ppValue" -> "braces";
"ppValue" -> "brackets";
"ppValue" -> "char";
"ppValue" -> "comma";
"ppValue" -> "displayFields";
"ppValue" -> "enumerateSeqMap";
"ppValue" -> "f";
"ppValue" -> "fromVWord";
"ppValue" -> "fsep";
"ppValue" -> "parens";
"ppValue" -> "pp";
"ppValue" -> "ppRational";
"ppValue" -> "punctuate";
"ppValue" -> "sep";
"ppValue" -> "text";
"ppValue" -> "vWordLen";
"ppValue" -> "x";
"ppVarShape" -> "braces";
"ppVarShape" -> "brackets";
"ppVarShape" -> "char";
"ppVarShape" -> "comma";
"ppVarShape" -> "defaultPPOpts";
"ppVarShape" -> "displayFields";
"ppVarShape" -> "f";
"ppVarShape" -> "fsep";
"ppVarShape" -> "parens";
"ppVarShape" -> "pp";
"ppVarShape" -> "ppVarShape";
"ppVarShape" -> "punctuate";
"ppVarShape" -> "sep";
"ppVarShape" -> "text";
"ppWarning" -> "colon";
"ppWarning" -> "nest";
"ppWarning" -> "pp";
"ppWarning" -> "text";
"ppWithNames" -> "ppWithNamesPrec";
"preProc" -> "latex";
"preProc" -> "markdown";
"preProc" -> "p";
"predArgTypes" -> "evalType";
"predArgTypes" -> "finType";
"predArgTypes" -> "pp";
"prelPrim" -> "preludeName";
"preludeName" -> "packModName";
"preludeReferenceName" -> "packModName";
"prepareQuery" -> "defs";
"prepareQuery" -> "doSBVEval";
"prepareQuery" -> "doW4Eval";
"prepareQuery" -> "emptyRange";
"prepareQuery" -> "evalPrim";
"prepareQuery" -> "freshVar";
"prepareQuery" -> "identText";
"prepareQuery" -> "logPutStrLn";
"prepareQuery" -> "predArgTypes";
"prepareQuery" -> "prelPrim";
"prepareQuery" -> "preludeReferenceName";
"prepareQuery" -> "primTable";
"prepareQuery" -> "sbvFreshFns";
"prepareQuery" -> "varShapeToValue";
"prepareQuery" -> "what4FreshFns";
"prepareQuery" -> "x";
"prependSearchPath" -> "getModuleEnv";
"prependSearchPath" -> "setModuleEnv";
"pretty" -> "pp";
"primTable" -> "floatPrims";
"primTable" -> "genericPrimTable";
"primTable" -> "indexBack";
"primTable" -> "indexBack_bits";
"primTable" -> "indexBack_int";
"primTable" -> "indexBack_word";
"primTable" -> "indexFront";
"primTable" -> "indexFront_bits";
"primTable" -> "indexFront_int";
"primTable" -> "indexFront_word";
"primTable" -> "indexPrim";
"primTable" -> "io";
"primTable" -> "logPrint";
"primTable" -> "logicShift";
"primTable" -> "lshr";
"primTable" -> "mkBv";
"primTable" -> "ppValue";
"primTable" -> "prelPrim";
"primTable" -> "primeECPrims";
"primTable" -> "rotateLS";
"primTable" -> "rotateLW";
"primTable" -> "rotateLeftReindex";
"primTable" -> "rotateRS";
"primTable" -> "rotateRW";
"primTable" -> "rotateRightReindex";
"primTable" -> "rotateShrink";
"primTable" -> "shiftLS";
"primTable" -> "shiftLW";
"primTable" -> "shiftLeftReindex";
"primTable" -> "shiftRS";
"primTable" -> "shiftRW";
"primTable" -> "shiftRightReindex";
"primTable" -> "shiftShrink";
"primTable" -> "shl";
"primTable" -> "sshrV";
"primTable" -> "suiteBPrims";
"primTable" -> "text";
"primTable" -> "u1";
"primTable" -> "updateBack";
"primTable" -> "updateBackSym";
"primTable" -> "updateBackSym_word";
"primTable" -> "updateBack_word";
"primTable" -> "updateFront";
"primTable" -> "updateFrontSym";
"primTable" -> "updateFrontSym_word";
"primTable" -> "updateFront_word";
"primTable" -> "updatePrim";
"primTable" -> "valueToString";
"primTable" -> "w4bvLshr";
"primTable" -> "w4bvRol";
"primTable" -> "w4bvRor";
"primTable" -> "w4bvShl";
"primTable" -> "x";
"primeECName" -> "packModName";
"primeECPrim" -> "primeECName";
"primeECPrims" -> "addUninterpWarning";
"primeECPrims" -> "fromProjectivePoint";
"primeECPrims" -> "fromVInteger";
"primeECPrims" -> "getUninterpFn";
"primeECPrims" -> "p";
"primeECPrims" -> "primeECPrim";
"primeECPrims" -> "projectivePointRepr";
"primeECPrims" -> "toProjectivePoint";
"primeModulus" -> "integerToBigNat";
"printCounterexample" -> "getPPValOpts";
"printCounterexample" -> "hang";
"printCounterexample" -> "rEval";
"printCounterexample" -> "rPrint";
"printCounterexample" -> "sep";
"printCounterexample" -> "text";
"printSafetyViolation" -> "catch";
"printSafetyViolation" -> "f";
"printSafetyViolation" -> "pp";
"printSafetyViolation" -> "rEval";
"printSafetyViolation" -> "rPutStrLn";
"printSafetyViolation" -> "raise";
"printSafetyViolation" -> "replEvalExpr";
"printSatisfyingModel" -> "getPPValOpts";
"printSatisfyingModel" -> "hang";
"printSatisfyingModel" -> "rEval";
"printSatisfyingModel" -> "rPrint";
"printSatisfyingModel" -> "sep";
"printSatisfyingModel" -> "text";
"printUninterpWarn" -> "logPutStr";
"printUninterpWarn" -> "logPutStrLn";
"printUninterpWarn" -> "x";
"processResults" -> "computeModel";
"processResults" -> "parseValues";
"processResults" -> "unFinType";
"processSHA256Block" -> "fromVSeq";
"processSHA256Block" -> "getSHA256Sched";
"processSHA256Block" -> "getUninterpFn";
"processSHA256Block" -> "step256";
"processSHA256Block" -> "toWord32";
"processSHA512Block" -> "fromVSeq";
"processSHA512Block" -> "getSHA512Sched";
"processSHA512Block" -> "getUninterpFn";
"processSHA512Block" -> "step512";
"processSHA512Block" -> "toWord64";
"proofObligation" -> "p";
"propInterval" -> "iAnyFin";
"propInterval" -> "iIsExact";
"propInterval" -> "int";
"propInterval" -> "p";
"propInterval" -> "pIsEqual";
"propInterval" -> "pIsFin";
"propInterval" -> "pIsGeq";
"propInterval" -> "pIsValidFloat";
"propInterval" -> "pIsWidth";
"propInterval" -> "tIsVar";
"propInterval" -> "typeInterval";
"propInterval" -> "x";
"propSynParam" -> "x";
"protectStack" -> "rethrowW4Exception";
"prove" -> "debugBlock";
"prove" -> "pop";
"prove" -> "push";
"prove" -> "toSMT";
"proveImp" -> "assume";
"proveImp" -> "debugBlock";
"proveImp" -> "declareVar";
"proveImp" -> "flatGoal";
"proveImp" -> "isNumeric";
"proveImp" -> "pSplitAnd";
"proveImp" -> "prove";
"proveImplication" -> "getParamConstraints";
"proveImplication" -> "getParamTypes";
"proveImplication" -> "getSolver";
"proveImplication" -> "io";
"proveImplication" -> "mtpParam";
"proveImplication" -> "proveImplicationIO";
"proveImplication" -> "recordError";
"proveImplication" -> "recordWarning";
"proveImplication" -> "varsWithAsmps";
"proveImplicationIO" -> "buildSolverCtxt";
"proveImplicationIO" -> "cleanupError";
"proveImplicationIO" -> "defaultAndSimplify";
"proveImplicationIO" -> "emptySubst";
"proveImplicationIO" -> "f";
"proveImplicationIO" -> "improveProps";
"proveImplicationIO" -> "isEmptySubst";
"proveImplicationIO" -> "isFreeTV";
"proveImplicationIO" -> "matchMaybe";
"proveImplicationIO" -> "p";
"proveImplicationIO" -> "pSplitAnd";
"proveImplicationIO" -> "proveImp";
"proveImplicationIO" -> "proveImplicationIO";
"proveImplicationIO" -> "quickSolverIO";
"proveImplicationIO" -> "substToList";
"proveImplicationIO" -> "x";
"proveModuleTopLevel" -> "addGoals";
"proveModuleTopLevel" -> "defaultAndSimplify";
"proveModuleTopLevel" -> "extendSubst";
"proveModuleTopLevel" -> "getGoals";
"proveModuleTopLevel" -> "getParamConstraints";
"proveModuleTopLevel" -> "isFreeTV";
"proveModuleTopLevel" -> "proveImplication";
"proveModuleTopLevel" -> "recordError";
"proveModuleTopLevel" -> "recordWarning";
"proveModuleTopLevel" -> "simplifyAllConstraints";
"proverConfigs" -> "allSolvers";
"proverConfigs" -> "f";
"proverListString" -> "allProvers";
"proverNames" -> "proverConfigs";
"psFixity" -> "f";
"psFixity" -> "p";
"psFixity" -> "rComb";
"psFixity" -> "rCombs";
"psFixity" -> "x";
"punctuate" -> "p";
"pushPath" -> "raise";
"qcCmd" -> "bindItVariableVal";
"qcCmd" -> "exhaustiveTests";
"qcCmd" -> "expectedCoverage";
"qcCmd" -> "fixNameDisp";
"qcCmd" -> "getDynEnv";
"qcCmd" -> "getKnownUser";
"qcCmd" -> "getPPValOpts";
"qcCmd" -> "getPropertyNames";
"qcCmd" -> "io";
"qcCmd" -> "isPass";
"qcCmd" -> "lg2";
"qcCmd" -> "p";
"qcCmd" -> "panic";
"qcCmd" -> "pp";
"qcCmd" -> "printCounterexample";
"qcCmd" -> "qcCmd";
"qcCmd" -> "rEval";
"qcCmd" -> "rPrint";
"qcCmd" -> "rPutStr";
"qcCmd" -> "rPutStrLn";
"qcCmd" -> "raise";
"qcCmd" -> "randomTests";
"qcCmd" -> "recordFromFields";
"qcCmd" -> "replEvalExpr";
"qcCmd" -> "replParseExpr";
"qcCmd" -> "testableType";
"qcCmd" -> "unlessBatch";
"qcCmd" -> "x";
"quickApply" -> "panic";
"quickApply" -> "quickApply";
"quickSolver" -> "addIncompatible";
"quickSolver" -> "emptySubst";
"quickSolver" -> "improveProp";
"quickSolver" -> "matchMaybe";
"quickSolver" -> "noIncompatible";
"quickSolver" -> "p";
"quickSolver" -> "x";
"quickSolverIO" -> "emptySubst";
"quickSolverIO" -> "pp";
"quickSolverIO" -> "quickSolver";
"quickSolverIO" -> "vcat";
"quitCmd" -> "stop";
"quotes" -> "liftPJ1";
"rCombs" -> "char";
"rCombs" -> "colon";
"rCombs" -> "comma";
"rCombs" -> "f";
"rCombs" -> "int";
"rCombs" -> "p";
"rCombs" -> "parens";
"rCombs" -> "pp";
"rCombs" -> "rComb";
"rCombs" -> "text";
"rCombs" -> "x";
"rEval" -> "io";
"rEvalRethrow" -> "io";
"rEvalRethrow" -> "rethrowEvalError";
"rPrint" -> "rPutStrLn";
"rPrint" -> "x";
"rPutStr" -> "f";
"rPutStr" -> "getPutStr";
"rPutStr" -> "io";
"rPutStrLn" -> "rPutStr";
"raise" -> "io";
"randomFloat" -> "fpLit";
"randomFloat" -> "p";
"randomFloat" -> "randomSize";
"randomInteger" -> "randomSize";
"randomRational" -> "randomSize";
"randomRecord" -> "mk";
"randomRecord" -> "recordMapAccum";
"randomSequence" -> "f";
"randomSequence" -> "x";
"randomSize" -> "p";
"randomSize" -> "randomSize";
"randomTests" -> "paramModRecParam";
"randomTests" -> "runOneTest";
"randomV" -> "randomValue";
"randomV" -> "zeroV";
"randomValue" -> "mk";
"randomValue" -> "p";
"randomValue" -> "randomBit";
"randomValue" -> "randomFloat";
"randomValue" -> "randomIntMod";
"randomValue" -> "randomInteger";
"randomValue" -> "randomRational";
"randomValue" -> "randomRecord";
"randomValue" -> "randomSequence";
"randomValue" -> "randomStream";
"randomValue" -> "randomTuple";
"randomValue" -> "randomValue";
"randomValue" -> "randomWord";
"ratioV" -> "fromVInteger";
"ratioV" -> "ratio";
"ratioV" -> "x";
"rationalCeiling" -> "rationalFloor";
"rationalCeiling" -> "rationalNegate";
"rationalDivide" -> "rationalMul";
"rationalDivide" -> "rationalRecip";
"rationalDivide" -> "x";
"rationalGreaterThan" -> "rationalLessThan";
"rationalLessThan" -> "normalizeSign";
"rationalLessThan" -> "x";
"rationalRecip" -> "ratio";
"rationalRoundAway" -> "intToRational";
"rationalRoundAway" -> "p";
"rationalRoundAway" -> "rationalAdd";
"rationalRoundAway" -> "rationalCeiling";
"rationalRoundAway" -> "rationalFloor";
"rationalRoundAway" -> "rationalLessThan";
"rationalRoundAway" -> "rationalSub";
"rationalRoundToEven" -> "intToRational";
"rationalRoundToEven" -> "rationalFloor";
"rationalRoundToEven" -> "rationalGreaterThan";
"rationalRoundToEven" -> "rationalLessThan";
"rationalRoundToEven" -> "rationalSub";
"rationalRoundToEven" -> "x";
"rationalTrunc" -> "intToRational";
"rationalTrunc" -> "p";
"rationalTrunc" -> "rationalCeiling";
"rationalTrunc" -> "rationalFloor";
"rationalTrunc" -> "rationalLessThan";
"readBytes" -> "getByteReader";
"readFileCmd" -> "bindItVariable";
"readFileCmd" -> "byteStringToInteger";
"readFileCmd" -> "f";
"readFileCmd" -> "getPrimMap";
"readFileCmd" -> "rPutStrLn";
"readFileCmd" -> "replReadFile";
"readFileCmd" -> "x";
"readInclude" -> "failsWith";
"readInclude" -> "fromIncPath";
"readInclude" -> "includeFailed";
"readInclude" -> "noPatDs";
"readInclude" -> "noPatE";
"readInclude" -> "noPatModule";
"readInclude" -> "noPatProg";
"readInclude" -> "p";
"readInclude" -> "raise";
"readInclude" -> "readBytes";
"readInclude" -> "runNoPatM";
"recipV" -> "evalPanic";
"recipV" -> "fpDiv";
"recipV" -> "fpLit";
"recipV" -> "fpRndMode";
"recipV" -> "fromVFloat";
"recipV" -> "fromVInteger";
"recipV" -> "fromVRational";
"recipV" -> "p";
"recipV" -> "rationalRecip";
"recipV" -> "x";
"record" -> "f";
"recordElements" -> "canonicalFields";
"recordError" -> "curRange";
"recordFromFields" -> "panic";
"recordFromFields" -> "recordFromFieldsErr";
"recordFromFields" -> "x";
"recordFromFieldsErr" -> "x";
"recordFromFieldsWithDisplay" -> "recordFromFields";
"recordMapAccum" -> "f";
"recordType" -> "newType";
"recordType" -> "recordFromFields";
"recordUse" -> "x";
"recordWarning" -> "curRange";
"recordWarning" -> "nameInfo";
"recordWarning" -> "tvSourceName";
"recursiveModules" -> "raise";
"refEvalCmd" -> "getPPValOpts";
"refEvalCmd" -> "liftModuleCmd";
"refEvalCmd" -> "rPrint";
"refEvalCmd" -> "replCheckExpr";
"refEvalCmd" -> "replParseExpr";
"refEvalCmd" -> "rethrowEvalError";
"refEvalCmd" -> "validEvalContext";
"reloadCmd" -> "f";
"reloadCmd" -> "getLoadedMod";
"reloadCmd" -> "loadCmd";
"reloadCmd" -> "loadHelper";
"removeIncludesModule" -> "noIncludeModule";
"removeIncludesModule" -> "runNoIncM";
"rename" -> "renamerErrors";
"rename" -> "renamerWarnings";
"renameArm" -> "renameArm";
"renameArm" -> "renameMatch";
"renameArm" -> "shadowNames\'";
"renameArm" -> "shadowing";
"renameLocated" -> "rename";
"renameLocated" -> "renameQual";
"renameLocated" -> "renameSchema";
"renameLocated" -> "renameType";
"renameLocated" -> "renameVar";
"renameLocated" -> "rnLocated";
"renameLocated" -> "x";
"renameMatch" -> "getNS";
"renameMatch" -> "namingEnv\'";
"renameMatch" -> "p";
"renameMatch" -> "rename";
"renameMatch" -> "renamePat";
"renameMatch" -> "shadowNames";
"renameModule" -> "f";
"renameModule" -> "importIfaces";
"renameModule" -> "modExports";
"renameModule" -> "namingEnv\'";
"renameModule" -> "recordUse";
"renameModule" -> "rename";
"renameModule" -> "renameLocated";
"renameModule" -> "shadowNames\'";
"renameOp" -> "lookupFixity";
"renameOp" -> "renameVar";
"renameOp" -> "withLoc";
"renamePat" -> "p";
"renamePat" -> "patternEnv";
"renamePat" -> "rename";
"renamePat" -> "shadowNames";
"renamePats" -> "p";
"renamePats" -> "patternEnv";
"renamePats" -> "rename";
"renamePats" -> "shadowNames";
"renameQual" -> "mkTInfix";
"renameQual" -> "namingEnv\'";
"renameQual" -> "rename";
"renameQual" -> "renameType";
"renameQual" -> "renameTypeOp";
"renameQual" -> "shadowNames";
"renameQual" -> "tpName";
"renameQual" -> "withLoc";
"renameSchema" -> "p";
"renameSchema" -> "rename";
"renameSchema" -> "renameQual";
"renameType" -> "interactive";
"renameType" -> "interactiveName";
"renameType" -> "isParamInstModName";
"renameType" -> "mkFakeName";
"renameType" -> "modNameChunks";
"renameType" -> "modulePathLabel";
"renameType" -> "notParamInstModName";
"renameType" -> "preludeReferenceContents";
"renameType" -> "preludeReferenceName";
"renameType" -> "primeECContents";
"renameType" -> "record";
"renameType" -> "runModuleM";
"renameType" -> "suiteBContents";
"renameType" -> "typeExists";
"renameTypeOp" -> "lookupFixity";
"renameTypeOp" -> "renameType";
"renameTypeOp" -> "withLoc";
"renameVar" -> "interactive";
"renameVar" -> "located";
"renameVar" -> "mkFakeName";
"renameVar" -> "panic";
"renameVar" -> "record";
"renameVar" -> "runModuleM";
"renamerErrors" -> "getImportSource";
"renamerErrors" -> "raise";
"renamerWarnings" -> "warn";
"render" -> "runDoc";
"renderOneLine" -> "runDoc";
"replCheckDecls" -> "getDynEnv";
"replCheckDecls" -> "liftModuleCmd";
"replCheckDecls" -> "setDynEnv";
"replCheckExpr" -> "liftModuleCmd";
"replEdit" -> "io";
"replEvalDecl" -> "dump";
"replEvalDecl" -> "liftModuleCmd";
"replEvalDecl" -> "rPutStrLn";
"replEvalDecl" -> "replCheckDecls";
"replEvalDecl" -> "validEvalContext";
"replEvalDecl" -> "whenDebug";
"replEvalExpr" -> "bindItVariable";
"replEvalExpr" -> "defaultReplExpr";
"replEvalExpr" -> "dump";
"replEvalExpr" -> "getModuleEnv";
"replEvalExpr" -> "io";
"replEvalExpr" -> "liftModuleCmd";
"replEvalExpr" -> "nest";
"replEvalExpr" -> "pp";
"replEvalExpr" -> "quotes";
"replEvalExpr" -> "rPrint";
"replEvalExpr" -> "rPutStrLn";
"replEvalExpr" -> "raise";
"replEvalExpr" -> "replCheckExpr";
"replEvalExpr" -> "rethrowEvalError";
"replEvalExpr" -> "validEvalContext";
"replEvalExpr" -> "whenDebug";
"replEvalExpr" -> "x";
"replParse" -> "parse";
"replParse" -> "raise";
"replParseExpr" -> "defaultConfig";
"replParseExpr" -> "f";
"replParseExpr" -> "interactiveConfig";
"replParseExpr" -> "replParse";
"replParseInput" -> "defaultConfig";
"replParseInput" -> "f";
"replParseInput" -> "interactiveConfig";
"replParseInput" -> "replParse";
"replReadFile" -> "io";
"replReadFile" -> "x";
"replSpecExpr" -> "liftModuleCmd";
"replWriteFile" -> "io";
"replWriteFile" -> "x";
"reportError" -> "raise";
"resolveInclude" -> "defaultConfig";
"resolveInclude" -> "guessPreProc";
"resolveInclude" -> "noIncludeProgram";
"resolveInclude" -> "pushPath";
"resolveInclude" -> "raise";
"resolveInclude" -> "readInclude";
"resolveInclude" -> "withIncPath";
"rethrowW4Exception" -> "f";
"returnOneTest" -> "f";
"returnOneTest" -> "fromVFun";
"returnOneTest" -> "panic";
"returnOneTest" -> "runEval";
"returnTests" -> "returnOneTest";
"reverseSeqMap" -> "lookupSeqMap";
"reverseV" -> "asBitsMap";
"reverseV" -> "evalPanic";
"reverseV" -> "reverseSeqMap";
"reverseV" -> "wordValueSize";
"reverseV" -> "x";
"rewD" -> "rewDef";
"rewDeclGroup" -> "f";
"rewDeclGroup" -> "insertTM";
"rewDeclGroup" -> "newName";
"rewDeclGroup" -> "newTopOrLocalName";
"rewDeclGroup" -> "notFun";
"rewDeclGroup" -> "rewD";
"rewDeclGroup" -> "rewE";
"rewDeclGroup" -> "splitTParams";
"rewDeclGroup" -> "tpVar";
"rewDeclGroup" -> "x";
"rewDef" -> "rewE";
"rewE" -> "inLocal";
"rewE" -> "rewDeclGroup";
"rewE" -> "rewM";
"rewE" -> "splitTApp";
"rewE" -> "x";
"rewM" -> "rewD";
"rewM" -> "rewE";
"rewM" -> "x";
"rewModule" -> "rewDeclGroup";
"ringBinary" -> "evalPanic";
"ringBinary" -> "f";
"ringBinary" -> "fromSeq";
"ringBinary" -> "fromVFloat";
"ringBinary" -> "fromVFun";
"ringBinary" -> "fromVInteger";
"ringBinary" -> "fromVRational";
"ringBinary" -> "fromVTuple";
"ringBinary" -> "fromVWord";
"ringBinary" -> "isTBit";
"ringBinary" -> "lam";
"ringBinary" -> "lookupRecord";
"ringBinary" -> "sDelay";
"ringBinary" -> "traverseRecordMap";
"ringBinary" -> "x";
"ringBinary" -> "zipSeqMap";
"ringNullary" -> "evalPanic";
"ringNullary" -> "isTBit";
"ringNullary" -> "lam";
"ringNullary" -> "p";
"ringNullary" -> "sDelay";
"ringUnary" -> "evalPanic";
"ringUnary" -> "f";
"ringUnary" -> "fromSeq";
"ringUnary" -> "fromVFloat";
"ringUnary" -> "fromVFun";
"ringUnary" -> "fromVInteger";
"ringUnary" -> "fromVRational";
"ringUnary" -> "fromVTuple";
"ringUnary" -> "fromVWord";
"ringUnary" -> "isTBit";
"ringUnary" -> "lam";
"ringUnary" -> "lookupRecord";
"ringUnary" -> "mapSeqMap";
"ringUnary" -> "sDelay";
"ringUnary" -> "traverseRecordMap";
"rmTParam" -> "p";
"rmTParam" -> "x";
"rmVal" -> "p";
"rmVal" -> "x";
"rmVals" -> "p";
"rmVals" -> "x";
"rnLocated" -> "f";
"rnLocated" -> "p";
"rnLocated" -> "panic";
"rnLocated" -> "rename";
"rnLocated" -> "renamePat";
"rnLocated" -> "renameType";
"rnLocated" -> "renameVar";
"rnLocated" -> "rnLocated";
"rnLocated" -> "rnNamed";
"rnLocated" -> "shadowNames";
"rnLocated" -> "withLoc";
"rnNamed" -> "compareFixity";
"rnNamed" -> "cppKind";
"rnNamed" -> "defaultFixity";
"rnNamed" -> "getIdent";
"rnNamed" -> "getModName";
"rnNamed" -> "identText";
"rnNamed" -> "isInfixIdent";
"rnNamed" -> "mkIdent";
"rnNamed" -> "mkInfix";
"rnNamed" -> "mkQual";
"rnNamed" -> "mkUnqual";
"rnNamed" -> "modRange";
"rnNamed" -> "nullIdent";
"rnNamed" -> "ppSelector";
"rnNamed" -> "psFixity";
"rnNamed" -> "psName";
"rnNamed" -> "tsFixity";
"rnNamed" -> "tsName";
"rootExact" -> "genRoot";
"rootExact" -> "x";
"rotateLS" -> "lookupSeqMap";
"rotateLS" -> "panic";
"rotateLW" -> "mask";
"rotateLeftReindex" -> "evalPanic";
"rotateRS" -> "lookupSeqMap";
"rotateRS" -> "panic";
"rotateRW" -> "mask";
"rotateRightReindex" -> "evalPanic";
"rotateShrink" -> "panic";
"rotateShrink" -> "x";
"roundAwayV" -> "fpRndRNA";
"roundAwayV" -> "rationalRoundAway";
"roundAwayV" -> "roundOp";
"roundAwayV" -> "x";
"roundOp" -> "evalPanic";
"roundOp" -> "fromVFloat";
"roundOp" -> "fromVRational";
"roundToEvenV" -> "fpRndRNE";
"roundToEvenV" -> "rationalRoundToEven";
"roundToEvenV" -> "roundOp";
"roundToEvenV" -> "x";
"runCommand" -> "pp";
"runCommand" -> "rPrint";
"runCommand" -> "rPutStrLn";
"runDoc" -> "f";
"runDoc" -> "runDoc";
"runDoc" -> "text";
"runEval" -> "unDelay";
"runEval" -> "x";
"runInferM" -> "cleanupErrors";
"runInferM" -> "computeFreeVarNames";
"runInferM" -> "defaultingSubst";
"runInferM" -> "emptyGoals";
"runInferM" -> "emptySubst";
"runInferM" -> "f";
"runInferM" -> "fmap\'";
"runInferM" -> "fromGoals";
"runInferM" -> "nullGoals";
"runInferM" -> "x";
"runModuleM" -> "runModuleT";
"runModuleT" -> "emptyRO";
"runMultiProvers" -> "isFailedResult";
"runMultiProvers" -> "p";
"runMultiProvers" -> "runSingleProver";
"runNoIncM" -> "getIncPath";
"runNoPatM" -> "colon";
"runNoPatM" -> "nest";
"runNoPatM" -> "pp";
"runNoPatM" -> "quotes";
"runNoPatM" -> "start";
"runNoPatM" -> "text";
"runNoPatM" -> "vcat";
"runNoPatM" -> "x";
"runOneTest" -> "evalTest";
"runOneTest" -> "runEval";
"runProver" -> "allSatSMTResults";
"runProver" -> "p";
"runProver" -> "runMultiProvers";
"runProver" -> "runSingleProver";
"runProver" -> "satSMTResults";
"runProver" -> "thmSMTResults";
"runProver" -> "x";
"runREPL" -> "catch";
"runREPL" -> "defaultRW";
"runREPL" -> "f";
"runREPL" -> "fixNameDisp";
"runREPL" -> "io";
"runREPL" -> "mask";
"runREPL" -> "modifyRW";
"runREPL" -> "nest";
"runREPL" -> "pp";
"runREPL" -> "ppError";
"runREPL" -> "ppIncludeError";
"runREPL" -> "sep";
"runREPL" -> "text";
"runREPL" -> "vcat";
"runREPL" -> "x";
"runRenamer" -> "addRenamerWarning";
"runRenamer" -> "emptyRange";
"runRenamer" -> "listRenamerWarnings";
"runRenamer" -> "neverQualifyMod";
"runRenamer" -> "noRenamerWarnings";
"runRenamer" -> "toNameDisp";
"runRenamer" -> "warnUnused";
"runShellCmd" -> "io";
"runSupplyT" -> "f";
"runSupplyT" -> "x";
"runTcM" -> "emptyRange";
"runTcM" -> "mtpParam";
"runTcM" -> "tp";
"runTcM" -> "x";
"s2" -> "isEmptySubst";
"s2" -> "s2";
"sLg2" -> "lazyIte";
"sLg2" -> "lit";
"sLg2" -> "literalSWord";
"sLg2" -> "p";
"sLg2" -> "x";
"sModAdd" -> "evalPanic";
"sModAdd" -> "x";
"sModMult" -> "evalPanic";
"sModMult" -> "x";
"sModNegate" -> "evalPanic";
"sModNegate" -> "x";
"sModRecip" -> "addDefEqn";
"sModRecip" -> "fpAdd";
"sModRecip" -> "fpDiv";
"sModRecip" -> "fpEq";
"sModRecip" -> "fpEqIEEE";
"sModRecip" -> "fpFresh";
"sModRecip" -> "fpFromBinary";
"sModRecip" -> "fpFromInteger";
"sModRecip" -> "fpFromRational";
"sModRecip" -> "fpFromRationalLit";
"sModRecip" -> "fpFromReal";
"sModRecip" -> "fpGtIEEE";
"sModRecip" -> "fpIsInf";
"sModRecip" -> "fpIsNaN";
"sModRecip" -> "fpLtIEEE";
"sModRecip" -> "fpMul";
"sModRecip" -> "fpNaN";
"sModRecip" -> "fpNeg";
"sModRecip" -> "fpPosInf";
"sModRecip" -> "fpRepr";
"sModRecip" -> "fpReprOf";
"sModRecip" -> "fpRound";
"sModRecip" -> "fpSize";
"sModRecip" -> "fpSub";
"sModRecip" -> "fpToBinary";
"sModRecip" -> "fpToRational";
"sModRecip" -> "fpToReal";
"sModRecip" -> "freshSInteger_";
"sModRecip" -> "panic";
"sModRecip" -> "svDivisible";
"sModRecip" -> "x";
"sModSub" -> "evalPanic";
"sModSub" -> "x";
"safeCmd" -> "bindItVariable";
"safeCmd" -> "getKnownUser";
"safeCmd" -> "getUser";
"safeCmd" -> "getUserShowProverStats";
"safeCmd" -> "mkInteractiveRange";
"safeCmd" -> "mkSolverResult";
"safeCmd" -> "offlineProveSat";
"safeCmd" -> "onlineProveSat";
"safeCmd" -> "panic";
"safeCmd" -> "printCounterexample";
"safeCmd" -> "printSafetyViolation";
"safeCmd" -> "rPutStrLn";
"safeCmd" -> "replParseExpr";
"safeCmd" -> "rethrowErrorCall";
"safeCmd" -> "showProverStats";
"sanitizeEnd" -> "sanitize";
"satCmd" -> "cmdProveSat";
"satProve" -> "logPutStrLn";
"satProve" -> "multiSATQuery";
"satProve" -> "prepareQuery";
"satProve" -> "printUninterpWarn";
"satProve" -> "processResults";
"satProve" -> "protectStack";
"satProve" -> "proverError";
"satProve" -> "runProver";
"satProve" -> "setupAdapterOptions";
"satProve" -> "singleQuery";
"satProve" -> "start";
"satProveOffline" -> "p";
"satProveOffline" -> "prepareQuery";
"satProveOffline" -> "printUninterpWarn";
"satProveOffline" -> "protectStack";
"satProveOffline" -> "satProveOffline";
"sbox" -> "sboxTable";
"sbvFreshFns" -> "defaultProver";
"sbvFreshFns" -> "f";
"sbvFreshFns" -> "freshBV_";
"sbvFreshFns" -> "freshBoundedInt";
"sbvFreshFns" -> "freshSBool_";
"sbvFreshFns" -> "proverNames";
"sbvFreshFns" -> "satProve";
"sbvFreshFns" -> "satProveOffline";
"sbvFreshFns" -> "setupProver";
"schemaParam" -> "x";
"sdivV" -> "x";
"sel" -> "p";
"sel" -> "simpleBind";
"sel" -> "splitSimpleP";
"sel" -> "x";
"selName" -> "packIdent";
"selSrc" -> "anyJust";
"selSrc" -> "apSubstMaybe";
"selSrc" -> "applySubstToVar";
"selSrc" -> "fromGoals";
"selSrc" -> "goalsFromList";
"selSrc" -> "mk";
"selSrc" -> "p";
"selSrc" -> "pSplitAnd";
"selSrc" -> "panic";
"selSrc" -> "tpVar";
"selectorToken" -> "readDecimal";
"selectorToken" -> "x";
"sep" -> "liftSep";
"setDocString" -> "x";
"setDynEnv" -> "getModuleEnv";
"setDynEnv" -> "setModuleEnv";
"setEditPath" -> "modifyRW_";
"setEditPath" -> "p";
"setLoadedMod" -> "modifyRW_";
"setLoadedMod" -> "updateREPLTitle";
"setModuleEnv" -> "modifyRW_";
"setOptionCmd" -> "leaves";
"setOptionCmd" -> "rPutStrLn";
"setOptionCmd" -> "setUser";
"setOptionCmd" -> "showEnvVal";
"setOptionCmd" -> "trim";
"setOptionCmd" -> "tryGetUser";
"setOptionCmd" -> "userOptions";
"setPutStr" -> "funLogger";
"setPutStr" -> "modifyRW_";
"setSearchPath" -> "getModuleEnv";
"setSearchPath" -> "setModuleEnv";
"setUpdateREPLTitle" -> "modifyRW_";
"setUser" -> "lookupTrieExact";
"setUser" -> "modifyRW_";
"setUser" -> "rPutStrLn";
"setUser" -> "splitOptArgs";
"setUser" -> "userOptions";
"setUser" -> "x";
"setupAdapterOptions" -> "p";
"setupProver" -> "p";
"setupProver" -> "proverConfigs";
"setupProver" -> "rethrowW4Exception";
"shadowNames" -> "shadowNames\'";
"shadowNamesNS" -> "getNS";
"shadowNamesNS" -> "shadowNames";
"shadowNames\'" -> "checkEnv";
"shadowNames\'" -> "namingEnv\'";
"shadowNames\'" -> "shadowing";
"shadowing" -> "f";
"shiftLS" -> "evalPanic";
"shiftLS" -> "lookupSeqMap";
"shiftLS" -> "shiftRS";
"shiftLS" -> "zeroV";
"shiftLW" -> "mask";
"shiftLW" -> "panic";
"shiftLW" -> "shiftRW";
"shiftRS" -> "evalPanic";
"shiftRS" -> "lookupSeqMap";
"shiftRS" -> "shiftLS";
"shiftRS" -> "zeroV";
"shiftRW" -> "panic";
"shiftRW" -> "shiftLW";
"shiftShrink" -> "p";
"shiftShrink" -> "x";
"shl" -> "blackhole";
"shl" -> "delayFill";
"shl" -> "evalSpark";
"shl" -> "getCallStack";
"shl" -> "modifyCallStack";
"shl" -> "x";
"shouldContinue" -> "getRW";
"showEnvVal" -> "p";
"showProverStats" -> "p";
"showProverStats" -> "rPutStrLn";
"shrinkModel" -> "panic";
"shrinkModel" -> "tNum";
"shrinkModel" -> "tryGetModel";
"shrinkModel" -> "x";
"signedBV" -> "signedValue";
"signedBV" -> "x";
"signedLessThanV" -> "cmpValue";
"signedLessThanV" -> "lexCombine";
"signedLessThanV" -> "panic";
"signedLessThanV" -> "x";
"signedQuot" -> "x";
"signedRem" -> "x";
"signedShiftRW" -> "panic";
"signedShiftRW" -> "shiftLW";
"signedShiftRW" -> "signedValue";
"signedValue" -> "x";
"simpGoal" -> "p";
"simpGoal" -> "pSplitAnd";
"simpGoal" -> "recordError";
"simpGoal" -> "tIsError";
"simpGoals" -> "simpGoal";
"simpHasGoals" -> "addHasGoal";
"simpHasGoals" -> "ch";
"simpHasGoals" -> "getHasGoals";
"simpHasGoals" -> "tryHasGoal";
"simpleBind" -> "at";
"simpleBind" -> "emptyRange";
"simpleBind" -> "x";
"simplify" -> "comma";
"simplify" -> "p";
"simplify" -> "pAnd";
"simplify" -> "pp";
"simplify" -> "ppTrace";
"simplify" -> "punctuate";
"simplify" -> "simplify";
"simplify" -> "simplifyStep";
"simplify" -> "tError";
"simplify" -> "tIsError";
"simplify" -> "text";
"simplify" -> "vcat";
"simplify" -> "x";
"simplifyAllConstraints" -> "addGoals";
"simplifyAllConstraints" -> "extendSubst";
"simplifyAllConstraints" -> "getGoals";
"simplifyAllConstraints" -> "quickSolver";
"simplifyAllConstraints" -> "recordError";
"simplifyAllConstraints" -> "simpHasGoals";
"simplifyStep" -> "cryIsEqual";
"simplifyStep" -> "cryIsFinType";
"simplifyStep" -> "cryIsGeq";
"simplifyStep" -> "cryIsNotEqual";
"simplifyStep" -> "cryIsPrime";
"simplifyStep" -> "defaultAndSimplify";
"simplifyStep" -> "defaultReplExpr";
"simplifyStep" -> "isEmptySubst";
"simplifyStep" -> "listParamSubst";
"simplifyStep" -> "proveImplication";
"simplifyStep" -> "proveModuleTopLevel";
"simplifyStep" -> "simplifyAllConstraints";
"simplifyStep" -> "solveCmpInst";
"simplifyStep" -> "solveEqInst";
"simplifyStep" -> "solveFLiteralInst";
"simplifyStep" -> "solveFieldInst";
"simplifyStep" -> "solveIntegralInst";
"simplifyStep" -> "solveLiteralInst";
"simplifyStep" -> "solveLogicInst";
"simplifyStep" -> "solveRingInst";
"simplifyStep" -> "solveRoundInst";
"simplifyStep" -> "solveSignedCmpInst";
"simplifyStep" -> "solveValidFloat";
"simplifyStep" -> "solveZeroInst";
"simplifyStep" -> "substToList";
"simplifyStep" -> "t1";
"simplifyStep" -> "t2";
"simplifyStep" -> "t3";
"simplifyStep" -> "tNoUser";
"singleQuery" -> "computeModel";
"singleQuery" -> "p";
"singleQuery" -> "singleQuery";
"singleQuery" -> "unFinType";
"singleQuery" -> "varShapeToConcrete";
"singleSubst" -> "freeParams";
"singleSubst" -> "uncheckedSingleSubst";
"singleSubst" -> "x";
"singleTParamSubst" -> "tp";
"singleTParamSubst" -> "uncheckedSingleSubst";
"smallest" -> "newGoals";
"smallest" -> "newType";
"smallest" -> "tMin";
"smodV" -> "x";
"smokeTest" -> "text";
"smokeTest" -> "z3exists";
"solveCmpInst" -> "__";
"solveCmpInst" -> "p";
"solveCmpInst" -> "pCmp";
"solveCmpInst" -> "pFin";
"solveCmpInst" -> "pValidFloat";
"solveCmpInst" -> "recordElements";
"solveCmpInst" -> "tNoUser";
"solveEqInst" -> "__";
"solveEqInst" -> "p";
"solveEqInst" -> "pEq";
"solveEqInst" -> "pFin";
"solveEqInst" -> "pValidFloat";
"solveEqInst" -> "recordElements";
"solveEqInst" -> "tNoUser";
"solveEqInst" -> "tOne";
"solveFLiteralInst" -> "knownSupportedFloat";
"solveFLiteralInst" -> "p";
"solveFLiteralInst" -> "pFin";
"solveFLiteralInst" -> "pValidFloat";
"solveFLiteralInst" -> "tIsInf";
"solveFLiteralInst" -> "tIsNum";
"solveFLiteralInst" -> "tNoUser";
"solveFLiteralInst" -> "tOne";
"solveFieldInst" -> "p";
"solveFieldInst" -> "pPrime";
"solveFieldInst" -> "pValidFloat";
"solveFieldInst" -> "tNoUser";
"solveIntegralInst" -> "pFin";
"solveIntegralInst" -> "tNoUser";
"solveLiteralInst" -> "knownSupportedFloat";
"solveLiteralInst" -> "p";
"solveLiteralInst" -> "pFin";
"solveLiteralInst" -> "tAdd";
"solveLiteralInst" -> "tIsNum";
"solveLiteralInst" -> "tNoUser";
"solveLiteralInst" -> "tOne";
"solveLiteralInst" -> "tWidth";
"solveLogicInst" -> "pLogic";
"solveLogicInst" -> "recordElements";
"solveLogicInst" -> "tNoUser";
"solveOpts" -> "elseTry";
"solveOpts" -> "solveOpts";
"solveOpts" -> "x";
"solveRingInst" -> "p";
"solveRingInst" -> "pFin";
"solveRingInst" -> "pRing";
"solveRingInst" -> "pValidFloat";
"solveRingInst" -> "recordElements";
"solveRingInst" -> "solveRingSeq";
"solveRingInst" -> "tNoUser";
"solveRingInst" -> "tOne";
"solveRingSeq" -> "pFin";
"solveRingSeq" -> "pRing";
"solveRingSeq" -> "tNoUser";
"solveRoundInst" -> "p";
"solveRoundInst" -> "pValidFloat";
"solveRoundInst" -> "tNoUser";
"solveSelector" -> "listParamSubst";
"solveSelector" -> "lookupField";
"solveSelector" -> "lookupNewtype";
"solveSelector" -> "newGoals";
"solveSelector" -> "sel";
"solveSelector" -> "solveSelector";
"solveSelector" -> "t1";
"solveSelector" -> "t2";
"solveSelector" -> "tNoUser";
"solveSelector" -> "tNum";
"solveSelector" -> "x";
"solveSignedCmpInst" -> "__";
"solveSignedCmpInst" -> "pSignedCmp";
"solveSignedCmpInst" -> "recordElements";
"solveSignedCmpInst" -> "solveSignedCmpSeq";
"solveSignedCmpInst" -> "tNoUser";
"solveSignedCmpSeq" -> "pFin";
"solveSignedCmpSeq" -> "pSignedCmp";
"solveSignedCmpSeq" -> "tNoUser";
"solveSignedCmpSeq" -> "tNum";
"solveValidFloat" -> "knownSupportedFloat";
"solveValidFloat" -> "p";
"solveZeroInst" -> "p";
"solveZeroInst" -> "pFin";
"solveZeroInst" -> "pValidFloat";
"solveZeroInst" -> "pZero";
"solveZeroInst" -> "recordElements";
"solveZeroInst" -> "tNoUser";
"solveZeroInst" -> "tOne";
"sparkParMap" -> "enumerateSeqMap";
"sparkParMap" -> "f";
"sparkParMap" -> "finiteSeqMap";
"sparkParMap" -> "forceValue";
"sparkParMap" -> "sDelay";
"sparkParMap" -> "x";
"specialize" -> "allDeclGroups";
"specialize" -> "destETAbs";
"specialize" -> "runSpecT";
"specialize" -> "specializeEWhere";
"specializeCmd" -> "dump";
"specializeCmd" -> "pp";
"specializeCmd" -> "rPrint";
"specializeCmd" -> "rPutStrLn";
"specializeCmd" -> "replCheckExpr";
"specializeCmd" -> "replParseExpr";
"specializeCmd" -> "replSpecExpr";
"specializeConst" -> "destEProofApps";
"specializeConst" -> "destETApps";
"specializeConst" -> "freshName";
"specializeConst" -> "getSpecCache";
"specializeConst" -> "insertTM";
"specializeConst" -> "instantiateExpr";
"specializeConst" -> "instantiateSchema";
"specializeConst" -> "modifySpecCache";
"specializeConst" -> "specializeExpr";
"specializeDeclGroups" -> "groupDecls";
"specializeDeclGroups" -> "specializeExpr";
"specializeDeclGroups" -> "withDeclGroups";
"specializeEWhere" -> "specializeExpr";
"specializeEWhere" -> "withDeclGroups";
"specializeExpr" -> "getSpecCache";
"specializeExpr" -> "p";
"specializeExpr" -> "setSpecCache";
"specializeExpr" -> "specializeConst";
"specializeExpr" -> "specializeEWhere";
"specializeExpr" -> "specializeExpr";
"specializeExpr" -> "specializeMatch";
"specializeMatch" -> "specializeExpr";
"splitAbs" -> "x";
"splitAtV" -> "aBit";
"splitAtV" -> "evalPanic";
"splitAtV" -> "fromSeq";
"splitAtV" -> "fromWordVal";
"splitAtV" -> "isTBit";
"splitAtV" -> "mkSeq";
"splitAtV" -> "sDelay";
"splitAtV" -> "splitSeqMap";
"splitAtV" -> "splitWordVal";
"splitCommand" -> "x";
"splitConstFactor" -> "apSubstMaybe";
"splitConstFactor" -> "apSubstTypeMapKeys";
"splitConstFactor" -> "applySubstToVar";
"splitConstFactor" -> "defaultingSubst";
"splitConstFactor" -> "emptySubst";
"splitConstFactor" -> "fmap\'";
"splitConstFactor" -> "isEmptySubst";
"splitConstFactor" -> "listParamSubst";
"splitConstFactor" -> "listSubst";
"splitConstFactor" -> "singleSubst";
"splitConstFactor" -> "singleTParamSubst";
"splitConstFactor" -> "splitConstFactor";
"splitConstFactor" -> "substBinds";
"splitConstFactor" -> "substToList";
"splitConstFactor" -> "t1";
"splitConstFactor" -> "t2";
"splitConstFactor" -> "tMul";
"splitConstFactor" -> "tNum";
"splitConstFactor" -> "uncheckedSingleSubst";
"splitConstSummand" -> "splitConstSummand";
"splitConstSummand" -> "t1";
"splitConstSummand" -> "t2";
"splitConstSummand" -> "tAdd";
"splitConstSummand" -> "tNum";
"splitExprInst" -> "addTNames";
"splitExprInst" -> "empty";
"splitExprInst" -> "mtpParam";
"splitExprInst" -> "pp";
"splitExprInst" -> "ppWithNames";
"splitExprInst" -> "ppWithNamesPrec";
"splitExprInst" -> "sep";
"splitExprInst" -> "splitProofApp";
"splitExprInst" -> "splitTApp";
"splitExprInst" -> "splitWhile";
"splitExprInst" -> "text";
"splitExprInst" -> "vcat";
"splitExprInst" -> "x";
"splitOptArgs" -> "parse";
"splitProofAbs" -> "p";
"splitQual" -> "panic";
"splitSeqMap" -> "lookupSeqMap";
"splitSimpleP" -> "p";
"splitSimpleP" -> "panic";
"splitSimpleP" -> "splitSimpleP";
"splitSimpleP" -> "x";
"splitTApp" -> "splitTApp";
"splitTParams" -> "splitProofAbs";
"splitTParams" -> "splitTAbs";
"splitTParams" -> "splitWhile";
"splitVarSummand" -> "splitVarSummands";
"splitVarSummand" -> "x";
"splitVarSummands" -> "t1";
"splitVarSummands" -> "t2";
"splitVarSummands" -> "tAdd";
"splitVarSummands" -> "tNum";
"splitVarSummands" -> "x";
"splitWhile" -> "f";
"splitWhile" -> "splitWhile";
"splitWordVal" -> "splitSeqMap";
"sshrV" -> "asIndex";
"sshrV" -> "asWordVal";
"sshrV" -> "ashr";
"sshrV" -> "bvVal";
"sshrV" -> "mkBv";
"sshrV" -> "shiftShrink";
"sshrV" -> "shl";
"sshrV" -> "signedShiftRW";
"sshrV" -> "svFromInteger";
"sshrV" -> "w4bvAshr";
"sshrV" -> "w4bvShl";
"sshrV" -> "x";
"startChar" -> "p";
"startComment" -> "p";
"startComment" -> "panic";
"startEndComment" -> "moves";
"startEndComment" -> "p";
"startEndComment" -> "panic";
"startString" -> "p";
"stderrLogger" -> "handleLogger";
"stdoutLogger" -> "handleLogger";
"step256" -> "bsig256_0";
"step256" -> "bsig256_1";
"step256" -> "ch";
"step256" -> "f";
"step256" -> "maj";
"step256" -> "t1";
"step256" -> "t2";
"step512" -> "bsig512_0";
"step512" -> "bsig512_1";
"step512" -> "ch";
"step512" -> "computeModel";
"step512" -> "f";
"step512" -> "finType";
"step512" -> "freshVar";
"step512" -> "maj";
"step512" -> "modelPred";
"step512" -> "predArgTypes";
"step512" -> "t1";
"step512" -> "t2";
"step512" -> "unFinType";
"step512" -> "varModelPred";
"step512" -> "varShapeToValue";
"step512" -> "varToExpr";
"stop" -> "modifyRW_";
"streamSeqMap" -> "lookupSeqMap";
"subV" -> "fpRndMode";
"subV" -> "rationalSub";
"subV" -> "ringBinary";
"subV" -> "x";
"substBinds" -> "assocsSubst";
"substToList" -> "assocsSubst";
"substToList" -> "panic";
"subsumes" -> "x";
"suiteBName" -> "packModName";
"suiteBPrim" -> "suiteBName";
"suiteBPrims" -> "addUninterpWarning";
"suiteBPrims" -> "applyAESStateFunc";
"suiteBPrims" -> "bvVal";
"suiteBPrims" -> "enumerateSeqMap";
"suiteBPrims" -> "evalPanic";
"suiteBPrims" -> "f";
"suiteBPrims" -> "finiteSeqMap";
"suiteBPrims" -> "fromVSeq";
"suiteBPrims" -> "fromVWord";
"suiteBPrims" -> "fromWord32";
"suiteBPrims" -> "fromWord64";
"suiteBPrims" -> "getUninterpFn";
"suiteBPrims" -> "lookupSeqMap";
"suiteBPrims" -> "mkSHA256InitialState";
"suiteBPrims" -> "mkSHA512InitialState";
"suiteBPrims" -> "processSHA256Block";
"suiteBPrims" -> "processSHA512Block";
"suiteBPrims" -> "suiteBPrim";
"suiteBPrims" -> "toSHA256Block";
"suiteBPrims" -> "toSHA512Block";
"suiteBPrims" -> "toWord32";
"superclassSet" -> "p";
"superclassSet" -> "pFin";
"superclassSet" -> "tTwo";
"svDivisible" -> "x";
"svFromInteger" -> "literalSWord";
"svFromInteger" -> "x";
"svToInteger" -> "x";
"t0" -> "t0Table";
"t0Func" -> "m2";
"t0Func" -> "m3";
"t0Func" -> "sbox";
"t0Table" -> "fromBytes";
"t0Table" -> "t0Func";
"t1" -> "t1Table";
"t1Table" -> "fromBytes";
"t1Table" -> "rotR";
"t1Table" -> "t0Func";
"t2" -> "t2Table";
"t2Table" -> "fromBytes";
"t2Table" -> "rotR";
"t2Table" -> "t0Func";
"t3" -> "t3Table";
"t3Table" -> "fromBytes";
"t3Table" -> "rotR";
"t3Table" -> "t0Func";
"tAdd" -> "aMin";
"tAdd" -> "aMul";
"tAdd" -> "aNat";
"tAdd" -> "aTVar";
"tAdd" -> "matchMaybe";
"tAdd" -> "nAdd";
"tAdd" -> "op2";
"tAdd" -> "tAdd";
"tAdd" -> "tInf";
"tAdd" -> "tIsInf";
"tAdd" -> "tIsNum";
"tAdd" -> "tMin";
"tAdd" -> "tMul";
"tAdd" -> "tNoUser";
"tAdd" -> "tNum";
"tAdd" -> "tOp";
"tAdd" -> "tSub";
"tAdd" -> "tf2";
"tAdd" -> "total";
"tAdd" -> "x";
"tCeilDiv" -> "nCeilDiv";
"tCeilDiv" -> "op2";
"tCeilDiv" -> "tError";
"tCeilDiv" -> "tIsInf";
"tCeilDiv" -> "tIsNum";
"tCeilDiv" -> "tOp";
"tCeilDiv" -> "tf2";
"tCeilDiv" -> "x";
"tCeilMod" -> "nCeilMod";
"tCeilMod" -> "op2";
"tCeilMod" -> "tError";
"tCeilMod" -> "tIsInf";
"tCeilMod" -> "tIsNum";
"tCeilMod" -> "tOp";
"tCeilMod" -> "tf2";
"tCeilMod" -> "x";
"tChar" -> "tNum";
"tChar" -> "tWord";
"tCon" -> "f";
"tCon" -> "tAdd";
"tCon" -> "tCeilDiv";
"tCon" -> "tCeilMod";
"tCon" -> "tDiv";
"tCon" -> "tExp";
"tCon" -> "tLenFromThenTo";
"tCon" -> "tMax";
"tCon" -> "tMin";
"tCon" -> "tMod";
"tCon" -> "tMul";
"tCon" -> "tSub";
"tCon" -> "tWidth";
"tCon" -> "tc";
"tCon" -> "x";
"tDiv" -> "nDiv";
"tDiv" -> "op2";
"tDiv" -> "tError";
"tDiv" -> "tIsInf";
"tDiv" -> "tIsNum";
"tDiv" -> "tOp";
"tDiv" -> "tf2";
"tDiv" -> "x";
"tExp" -> "nExp";
"tExp" -> "op2";
"tExp" -> "tExp";
"tExp" -> "tIsNum";
"tExp" -> "tMul";
"tExp" -> "tNoUser";
"tExp" -> "tNum";
"tExp" -> "tOp";
"tExp" -> "tf2";
"tExp" -> "total";
"tExp" -> "x";
"tFloat" -> "p";
"tHasErrors" -> "tHasErrors";
"tHasErrors" -> "tNoUser";
"tIsBinFun" -> "f";
"tIsBinFun" -> "tNoUser";
"tIsBit" -> "tNoUser";
"tIsError" -> "panic";
"tIsError" -> "tNoUser";
"tIsFloat" -> "p";
"tIsFloat" -> "tNoUser";
"tIsFun" -> "tNoUser";
"tIsInf" -> "tIsNat\'";
"tIsIntMod" -> "tNoUser";
"tIsInteger" -> "tNoUser";
"tIsNat\'" -> "tNoUser";
"tIsNat\'" -> "x";
"tIsNum" -> "tIsNat\'";
"tIsNum" -> "x";
"tIsRational" -> "tNoUser";
"tIsRec" -> "tNoUser";
"tIsSeq" -> "tNoUser";
"tIsTuple" -> "tNoUser";
"tIsVar" -> "tNoUser";
"tIsVar" -> "x";
"tLenFromThenTo" -> "nLenFromThenTo";
"tLenFromThenTo" -> "op3";
"tLenFromThenTo" -> "tOp";
"tLenFromThenTo" -> "tf3";
"tLenFromThenTo" -> "x";
"tMax" -> "nMax";
"tMax" -> "op2";
"tMax" -> "tAdd";
"tMax" -> "tInf";
"tMax" -> "tIsNat\'";
"tMax" -> "tIsNum";
"tMax" -> "tMax";
"tMax" -> "tMin";
"tMax" -> "tNoUser";
"tMax" -> "tNum";
"tMax" -> "tOp";
"tMax" -> "tSub";
"tMax" -> "tf2";
"tMax" -> "total";
"tMax" -> "x";
"tMin" -> "aMin";
"tMin" -> "aNat";
"tMin" -> "aNat\'";
"tMin" -> "anAdd";
"tMin" -> "matchMaybe";
"tMin" -> "nMin";
"tMin" -> "op2";
"tMin" -> "tAdd";
"tMin" -> "tIsNat\'";
"tMin" -> "tIsNum";
"tMin" -> "tMin";
"tMin" -> "tNoUser";
"tMin" -> "tNum";
"tMin" -> "tOp";
"tMin" -> "tf2";
"tMin" -> "total";
"tMin" -> "x";
"tMod" -> "nMod";
"tMod" -> "op2";
"tMod" -> "tError";
"tMod" -> "tIsInf";
"tMod" -> "tIsNum";
"tMod" -> "tOp";
"tMod" -> "tf2";
"tMod" -> "x";
"tMul" -> "aTVar";
"tMul" -> "matchMaybe";
"tMul" -> "nMul";
"tMul" -> "op2";
"tMul" -> "tIsNat\'";
"tMul" -> "tIsNum";
"tMul" -> "tMod";
"tMul" -> "tNoUser";
"tMul" -> "tNum";
"tMul" -> "tOp";
"tMul" -> "tSub";
"tMul" -> "tf2";
"tMul" -> "total";
"tMul" -> "x";
"tNat\'" -> "tInf";
"tNat\'" -> "tNum";
"tNoUser" -> "tNoUser";
"tOne" -> "tNum";
"tOp" -> "f";
"tOp" -> "solveCmpInst";
"tOp" -> "solveEqInst";
"tOp" -> "solveFLiteralInst";
"tOp" -> "solveFieldInst";
"tOp" -> "solveIntegralInst";
"tOp" -> "solveLiteralInst";
"tOp" -> "solveLogicInst";
"tOp" -> "solveRingInst";
"tOp" -> "solveRoundInst";
"tOp" -> "solveSignedCmpInst";
"tOp" -> "solveValidFloat";
"tOp" -> "solveZeroInst";
"tOp" -> "tDiv";
"tOp" -> "tError";
"tOp" -> "tExp";
"tOp" -> "tIsError";
"tOp" -> "tIsNat\'";
"tOp" -> "tLenFromThenTo";
"tOp" -> "tMin";
"tOp" -> "tMod";
"tOp" -> "tMul";
"tOp" -> "tNat\'";
"tOp" -> "tSub";
"tOp" -> "tf";
"tRebuild" -> "tRebuild\'";
"tRebuild\'" -> "tCon";
"tRebuild\'" -> "tc";
"tRebuild\'" -> "x";
"tSplitFun" -> "f";
"tSplitFun" -> "t0";
"tSplitFun" -> "tIsBinFun";
"tString" -> "tChar";
"tString" -> "tNum";
"tString" -> "tSeq";
"tSub" -> "anAdd";
"tSub" -> "matchMaybe";
"tSub" -> "nSub";
"tSub" -> "op2";
"tSub" -> "tAdd";
"tSub" -> "tError";
"tSub" -> "tIsInf";
"tSub" -> "tIsNum";
"tSub" -> "tNoUser";
"tSub" -> "tNum";
"tSub" -> "tOp";
"tSub" -> "tSub";
"tSub" -> "tf2";
"tSub" -> "x";
"tTwo" -> "tNum";
"tValTy" -> "p";
"tValTy" -> "t1";
"tValTy" -> "t2";
"tValTy" -> "tAbstract";
"tValTy" -> "tArray";
"tValTy" -> "tBit";
"tValTy" -> "tFloat";
"tValTy" -> "tFun";
"tValTy" -> "tInf";
"tValTy" -> "tIntMod";
"tValTy" -> "tInteger";
"tValTy" -> "tNum";
"tValTy" -> "tRational";
"tValTy" -> "tRec";
"tValTy" -> "tSeq";
"tValTy" -> "tTuple";
"tValTy" -> "tValTy";
"tValTy" -> "x";
"tWidth" -> "nWidth";
"tWidth" -> "op1";
"tWidth" -> "tOp";
"tWidth" -> "tf1";
"tWidth" -> "total";
"tWidth" -> "x";
"tWord" -> "tBit";
"tWord" -> "tSeq";
"tZero" -> "tNum";
"tc" -> "f";
"tc" -> "tcon";
"tcDecls" -> "checkDecls";
"tcDecls" -> "inferDs";
"tcDecls" -> "proveModuleTopLevel";
"tcDecls" -> "runInferM";
"tcDecls" -> "runTcM";
"tcExpr" -> "emptyRange";
"tcExpr" -> "exprModName";
"tcExpr" -> "exprSchema";
"tcExpr" -> "inferBinds";
"tcExpr" -> "lookupVar";
"tcExpr" -> "mkDeclared";
"tcExpr" -> "packIdent";
"tcExpr" -> "panic";
"tcExpr" -> "proveModuleTopLevel";
"tcExpr" -> "runInferM";
"tcExpr" -> "runTcM";
"tcExpr" -> "x";
"tcModule" -> "checkDecls";
"tcModule" -> "inferModule";
"tcModule" -> "mtpParam";
"tcModule" -> "runInferM";
"tcModule" -> "runTcM";
"tcModule" -> "withAsmp";
"tcModule" -> "withTVar";
"tcModule" -> "withVars";
"tcModuleInst" -> "checkModuleInstance";
"tcModuleInst" -> "inferModule";
"tcModuleInst" -> "proveModuleTopLevel";
"tcModuleInst" -> "runInferM";
"tcModuleInst" -> "withParamType";
"tcModuleInst" -> "withParameterConstraints";
"tcModuleInst" -> "x";
"tcPanic" -> "panic";
"tcon" -> "appTy";
"tcon" -> "checkKind";
"tcon" -> "f";
"tcon" -> "p";
"tcon" -> "tNoUser";
"tcon" -> "tc";
"testableType" -> "randomValue";
"testableType" -> "t1";
"testableType" -> "t2";
"testableType" -> "testableType";
"testableType" -> "typeSize";
"testableType" -> "typeValues";
"text" -> "liftPJ";
"tf" -> "f";
"tf" -> "tcon";
"tf1" -> "f";
"tf1" -> "x";
"tf2" -> "f";
"tf2" -> "x";
"tf3" -> "f";
"tf3" -> "x";
"tlam" -> "f";
"tnamesB" -> "tnamesDef";
"tnamesB" -> "tnamesP";
"tnamesB" -> "tnamesS";
"tnamesC" -> "tnamesT";
"tnamesD" -> "tnamesB";
"tnamesD" -> "tnamesC";
"tnamesD" -> "tnamesD";
"tnamesD" -> "tnamesE";
"tnamesD" -> "tnamesS";
"tnamesD" -> "tnamesT";
"tnamesD" -> "tpName";
"tnamesDef" -> "tnamesE";
"tnamesDs" -> "boundLNames";
"tnamesDs" -> "defs";
"tnamesDs" -> "tnamesD";
"tnamesE" -> "boundLNames";
"tnamesE" -> "recordElements";
"tnamesE" -> "tnamesDs";
"tnamesE" -> "tnamesE";
"tnamesE" -> "tnamesM";
"tnamesE" -> "tnamesP";
"tnamesE" -> "tnamesT";
"tnamesE" -> "tnamesTI";
"tnamesE" -> "tnamesUF";
"tnamesM" -> "p";
"tnamesM" -> "tnamesB";
"tnamesM" -> "tnamesE";
"tnamesM" -> "tnamesP";
"tnamesNT" -> "x";
"tnamesP" -> "p";
"tnamesP" -> "recordElements";
"tnamesP" -> "tnamesP";
"tnamesP" -> "tnamesT";
"tnamesS" -> "tnamesC";
"tnamesS" -> "tnamesT";
"tnamesS" -> "tpName";
"tnamesT" -> "__";
"tnamesT" -> "ppIncludeError";
"tnamesT" -> "recordElements";
"tnamesT" -> "removeIncludesModule";
"tnamesT" -> "t1";
"tnamesT" -> "t2";
"tnamesT" -> "tnamesT";
"tnamesT" -> "x";
"tnamesTI" -> "f";
"tnamesTI" -> "tnamesT";
"tnamesUF" -> "tnamesE";
"toBigEndianSBS" -> "x";
"toCryptol" -> "panic";
"toCryptol" -> "x";
"toDocs" -> "namesP";
"toDocs" -> "p";
"toDocs" -> "x";
"toExpr" -> "asWordVal";
"toExpr" -> "defaultPPOpts";
"toExpr" -> "ePrim";
"toExpr" -> "enumerateSeqMap";
"toExpr" -> "floatToExpr";
"toExpr" -> "panic";
"toExpr" -> "ppValue";
"toExpr" -> "prelPrim";
"toExpr" -> "pretty";
"toExpr" -> "render";
"toExpr" -> "t0";
"toExpr" -> "tInteger";
"toExpr" -> "tIsFloat";
"toExpr" -> "tIsRec";
"toExpr" -> "tIsSeq";
"toExpr" -> "tIsTuple";
"toExpr" -> "tNum";
"toExpr" -> "zipRecordsM";
"toFinSeq" -> "finiteSeqMap";
"toFinSeq" -> "fromVBit";
"toFinSeq" -> "isTBit";
"toFixity" -> "f";
"toIntegerV" -> "evalPanic";
"toIntegerV" -> "fromVWord";
"toIntegerV" -> "isTBit";
"toNameDisp" -> "getModName";
"toNameDisp" -> "nameIdent";
"toNameDisp" -> "nameInfo";
"toParamInstName" -> "paramInstModName";
"toPragma" -> "toPragma";
"toPragma" -> "x";
"toPrimMap" -> "asPrim";
"toPrimMap" -> "p";
"toPrimMap" -> "panic";
"toProjectivePoint" -> "f";
"toProjectivePoint" -> "fromVInteger";
"toProjectivePoint" -> "lookupRecord";
"toProjectivePoint" -> "x";
"toSHA256Block" -> "bvVal";
"toSHA256Block" -> "fromVSeq";
"toSHA256Block" -> "fromVWord";
"toSHA256Block" -> "lookupSeqMap";
"toSHA512Block" -> "bvVal";
"toSHA512Block" -> "fromVSeq";
"toSHA512Block" -> "fromVWord";
"toSHA512Block" -> "lookupSeqMap";
"toSMT" -> "aAnd";
"toSMT" -> "aCeilDiv";
"toSMT" -> "aCeilMod";
"toSMT" -> "aFin";
"toSMT" -> "aInf";
"toSMT" -> "aLenFromThenTo";
"toSMT" -> "aMax";
"toSMT" -> "aMin";
"toSMT" -> "aMul";
"toSMT" -> "aNat";
"toSMT" -> "aTVar";
"toSMT" -> "aTrue";
"toSMT" -> "aWidth";
"toSMT" -> "anAdd";
"toSMT" -> "anError";
"toSMT" -> "applySubst";
"toSMT" -> "f";
"toSMT" -> "matchDefault";
"toSMT" -> "mk";
"toSMT" -> "newParamName";
"toSMT" -> "newType";
"toSMT" -> "panic";
"toSMT" -> "solveHasGoal";
"toSMT" -> "toSMT";
"toSMT" -> "x";
"toSeq" -> "toFinSeq";
"toSeq" -> "toStream";
"toSig" -> "toSig";
"toSig" -> "x";
"toStream" -> "infiniteSeqMap";
"toWord32" -> "fromVWord";
"toWord32" -> "lookupSeqMap";
"toWord32" -> "panic";
"toWord32" -> "x";
"toWord64" -> "fromVWord";
"toWord64" -> "lookupSeqMap";
"toWord64" -> "panic";
"toWord64" -> "x";
"total" -> "doEval";
"total" -> "f";
"total" -> "getSym";
"tp" -> "f";
"tp" -> "tcon";
"tpName" -> "tpfName";
"tpVar" -> "p";
"tpfName" -> "f";
"tpfName" -> "x";
"transDeps" -> "x";
"translateExprToNumT" -> "arrayContents";
"translateExprToNumT" -> "cryptolTcContents";
"translateExprToNumT" -> "f";
"translateExprToNumT" -> "floatContents";
"translateExprToNumT" -> "getIdent";
"translateExprToNumT" -> "preludeContents";
"translateExprToNumT" -> "preludeReferenceContents";
"translateExprToNumT" -> "primeECContents";
"translateExprToNumT" -> "suiteBContents";
"translateExprToNumT" -> "t1";
"translateExprToNumT" -> "t2";
"translateExprToNumT" -> "translateExprToNumT";
"translateExprToNumT" -> "underIdent";
"translateExprToNumT" -> "widthIdent";
"translateExprToNumT" -> "x";
"transposeV" -> "evalPanic";
"transposeV" -> "fromSeq";
"transposeV" -> "indexWordValue";
"transposeV" -> "isTBit";
"transposeV" -> "lookupSeqMap";
"travNamingEnv" -> "f";
"traverseRecordMap" -> "displayOrder";
"traverseRecordMap" -> "f";
"traverseSnd" -> "f";
"traverseSnd" -> "lookupVar";
"traverseSnd" -> "nameSeeds";
"traverseSnd" -> "ppError";
"traverseSnd" -> "ppNamedError";
"traverseSnd" -> "ppNamedWarning";
"traverseSnd" -> "ppWarning";
"traverseSnd" -> "runInferM";
"traverseSnd" -> "tcDecls";
"traverseSnd" -> "tcExpr";
"traverseSnd" -> "tcModule";
"traverseSnd" -> "tcModuleInst";
"traverseSnd" -> "x";
"trim" -> "sanitize";
"trim" -> "sanitizeEnd";
"truncV" -> "fpRndRTZ";
"truncV" -> "rationalTrunc";
"truncV" -> "roundOp";
"truncV" -> "x";
"tryAddConst" -> "aNat";
"tryAddConst" -> "anAdd";
"tryAddConst" -> "tAdd";
"tryAddConst" -> "tNum";
"tryCancelVar" -> "aMul";
"tryCancelVar" -> "aTVar";
"tryCancelVar" -> "iIsPosFin";
"tryCancelVar" -> "matchMaybe";
"tryCancelVar" -> "p";
"tryCancelVar" -> "t1";
"tryCancelVar" -> "t2";
"tryCancelVar" -> "tMul";
"tryCancelVar" -> "tNum";
"tryCancelVar" -> "tvarInterval";
"tryCancelVar" -> "x";
"tryEqAddInf" -> "aInf";
"tryEqAddInf" -> "anAdd";
"tryEqAddInf" -> "iIsFin";
"tryEqAddInf" -> "typeInterval";
"tryEqAddInf" -> "x";
"tryEqK" -> "__";
"tryEqK" -> "aMul";
"tryEqK" -> "aNat";
"tryEqK" -> "aNat\'";
"tryEqK" -> "aTrue";
"tryEqK" -> "anAdd";
"tryEqK" -> "genLog";
"tryEqK" -> "iIsFin";
"tryEqK" -> "nAdd";
"tryEqK" -> "nSub";
"tryEqK" -> "tInf";
"tryEqK" -> "tNat\'";
"tryEqK" -> "tNum";
"tryEqK" -> "tOne";
"tryEqK" -> "tZero";
"tryEqK" -> "typeInterval";
"tryEqK" -> "x";
"tryEqMin" -> "aMin";
"tryEqMin" -> "m2";
"tryEqMin" -> "x";
"tryEqMins" -> "aMin";
"tryEqMins" -> "aNat";
"tryEqMins" -> "anAdd";
"tryEqMins" -> "matchMaybe";
"tryEqMins" -> "t1";
"tryEqMins" -> "t2";
"tryEqMins" -> "tInf";
"tryEqMins" -> "x";
"tryEqMulConst" -> "matchLinear";
"tryEqMulConst" -> "tAdd";
"tryEqMulConst" -> "tMul";
"tryEqMulConst" -> "tNum";
"tryEqMulConst" -> "x";
"tryEqVar" -> "aMin";
"tryEqVar" -> "aNat";
"tryEqVar" -> "aNat\'";
"tryEqVar" -> "aTVar";
"tryEqVar" -> "anAdd";
"tryEqVar" -> "tAdd";
"tryEqVar" -> "tInf";
"tryEqVar" -> "tNum";
"tryEqVar" -> "x";
"tryFromBits" -> "f";
"tryFromBits" -> "fromVBit";
"tryGeqKThan" -> "aMul";
"tryGeqKThan" -> "aNat\'";
"tryGeqKThan" -> "tNum";
"tryGeqKThan" -> "tZero";
"tryGeqThanK" -> "aNat";
"tryGeqThanK" -> "anAdd";
"tryGeqThanK" -> "tInf";
"tryGeqThanK" -> "tNum";
"tryGeqThanSub" -> "x";
"tryGeqThanVar" -> "aTVar";
"tryGeqThanVar" -> "anAdd";
"tryGeqThanVar" -> "x";
"tryGetModel" -> "assume";
"tryGetModel" -> "debugBlock";
"tryGetModel" -> "declareVar";
"tryGetModel" -> "parse";
"tryGetModel" -> "pop";
"tryGetModel" -> "push";
"tryGetModel" -> "x";
"tryGetUser" -> "getRW";
"tryHasGoal" -> "applySubst";
"tryHasGoal" -> "improveSelector";
"tryHasGoal" -> "mkSelSln";
"tryHasGoal" -> "newGoals";
"tryHasGoal" -> "panic";
"tryHasGoal" -> "sel";
"tryHasGoal" -> "selSrc";
"tryHasGoal" -> "solveHasGoal";
"tryHasGoal" -> "solveSelector";
"tryHasGoal" -> "tNoUser";
"tryHasGoal" -> "unify";
"tryLinearSolution" -> "matchLinearUnifier";
"tryLinearSolution" -> "noFreeVariables";
"tryLinearSolution" -> "s2";
"tryMinIsGeq" -> "aMin";
"tryMinIsGeq" -> "aNat";
"tryMinIsGeq" -> "t1";
"tryMinIsGeq" -> "t2";
"tsFixity" -> "f";
"tupleType" -> "newType";
"tupleType" -> "tTuple";
"tupleType" -> "x";
"tvInfo" -> "tp";
"tvSourceName" -> "p";
"tvSourceName" -> "quickApply";
"tvSourceName" -> "tp";
"tvSourceName" -> "x";
"tvarInterval" -> "iAny";
"tvarInterval" -> "x";
"tySynParam" -> "x";
"typeCheckWarnings" -> "warn";
"typeCheckingFailed" -> "getImportSource";
"typeCheckingFailed" -> "raise";
"typeExists" -> "located";
"typeExists" -> "panic";
"typeExists" -> "record";
"typeExists" -> "recordUse";
"typeInterval" -> "iAdd";
"typeInterval" -> "iAny";
"typeInterval" -> "iCeilDiv";
"typeInterval" -> "iCeilMod";
"typeInterval" -> "iConst";
"typeInterval" -> "iDiv";
"typeInterval" -> "iExp";
"typeInterval" -> "iLenFromThenTo";
"typeInterval" -> "iMax";
"typeInterval" -> "iMin";
"typeInterval" -> "iMod";
"typeInterval" -> "iMul";
"typeInterval" -> "iSub";
"typeInterval" -> "iWidth";
"typeInterval" -> "tc";
"typeInterval" -> "tvarInterval";
"typeInterval" -> "x";
"typeOfCmd" -> "dump";
"typeOfCmd" -> "getFocusedEnv";
"typeOfCmd" -> "pp";
"typeOfCmd" -> "rPrint";
"typeOfCmd" -> "rPutStrLn";
"typeOfCmd" -> "replCheckExpr";
"typeOfCmd" -> "replParseExpr";
"typeOfCmd" -> "runDoc";
"typeOfCmd" -> "text";
"typeOfCmd" -> "whenDebug";
"typeSelect" -> "aAnd";
"typeSelect" -> "aBit";
"typeSelect" -> "aCeilDiv";
"typeSelect" -> "aCeilMod";
"typeSelect" -> "aChar";
"typeSelect" -> "aFin";
"typeSelect" -> "aFreeTVar";
"typeSelect" -> "aInf";
"typeSelect" -> "aLenFromThenTo";
"typeSelect" -> "aLiteral";
"typeSelect" -> "aLogic";
"typeSelect" -> "aMax";
"typeSelect" -> "aMin";
"typeSelect" -> "aMul";
"typeSelect" -> "aNat";
"typeSelect" -> "aNat\'";
"typeSelect" -> "aRec";
"typeSelect" -> "aSeq";
"typeSelect" -> "aTVar";
"typeSelect" -> "aTrue";
"typeSelect" -> "aTuple";
"typeSelect" -> "aWidth";
"typeSelect" -> "aWord";
"typeSelect" -> "anAdd";
"typeSelect" -> "anError";
"typeSelect" -> "lookupField";
"typeSelect" -> "panic";
"typeSelect" -> "pp";
"typeSelect" -> "render";
"typeSelect" -> "sel";
"typeSelect" -> "tIsSeq";
"typeSelect" -> "tIsTuple";
"typeSelect" -> "tSeq";
"typeSelect" -> "typeSelect";
"typeSize" -> "typeSize";
"typeValues" -> "finiteSeqMap";
"typeValues" -> "typeValues";
"typeValues" -> "x";
"typecheck" -> "emptyRange";
"typecheck" -> "genInferInput";
"typecheck" -> "getModuleEnv";
"typecheck" -> "io";
"typecheck" -> "logPrint";
"typecheck" -> "panic";
"typecheck" -> "setNameSeeds";
"typecheck" -> "setSupply";
"typecheck" -> "typeCheckWarnings";
"typecheck" -> "typeCheckingFailed";
"typecheck" -> "withLogger";
"u0" -> "u0Table";
"u0Func" -> "m9";
"u0Func" -> "mB";
"u0Func" -> "mD";
"u0Func" -> "mE";
"u0Func" -> "unSBox";
"u0Table" -> "fromBytes";
"u0Table" -> "u0Func";
"u1" -> "u1Table";
"u1Table" -> "fromBytes";
"u1Table" -> "rotR";
"u1Table" -> "u0Func";
"u2" -> "u2Table";
"u2Table" -> "fromBytes";
"u2Table" -> "rotR";
"u2Table" -> "u0Func";
"u3" -> "u3Table";
"u3Table" -> "fromBytes";
"u3Table" -> "rotR";
"u3Table" -> "u0Func";
"ufToNamed" -> "errorMessage";
"unDelay" -> "evalPanic";
"unDelay" -> "x";
"unFinType" -> "p";
"unFinType" -> "tBit";
"unFinType" -> "tFloat";
"unFinType" -> "tIntMod";
"unFinType" -> "tInteger";
"unFinType" -> "tNum";
"unFinType" -> "tRational";
"unFinType" -> "tRec";
"unFinType" -> "tSeq";
"unFinType" -> "tTuple";
"unFinType" -> "unFinType";
"unLit" -> "preProc";
"unLit" -> "toCryptol";
"unOp" -> "at";
"unOp" -> "f";
"unOp" -> "x";
"unSBox" -> "unSBoxTable";
"unary" -> "f";
"unaryBV" -> "f";
"unaryBV" -> "mkBv";
"unaryBV" -> "x";
"uncheckedSingleSubst" -> "tp";
"uncheckedTypeArg" -> "x";
"underIdent" -> "mkIdent";
"uniError" -> "emptyMGU";
"unify" -> "applySubst";
"unify" -> "extendSubst";
"unify" -> "mgu";
"unify" -> "recordError";
"unify" -> "runResult";
"unify" -> "s2";
"unify" -> "t1";
"unify" -> "t2";
"unify" -> "x";
"uniqify" -> "panic";
"uniqify" -> "pretty";
"unlessBatch" -> "getRW";
"unloadModule" -> "removeLoadedModule";
"unpackIdent" -> "identText";
"unpackSBV" -> "x";
"unqualifiedEnv" -> "mkUnqual";
"unqualifiedEnv" -> "nameIdent";
"unqualifiedEnv" -> "singletonE";
"unqualifiedEnv" -> "singletonT";
"unsolvable" -> "assume";
"unsolvable" -> "debugBlock";
"unsupported" -> "p";
"unsupported" -> "t1";
"unsupported" -> "t2";
"unsupported" -> "x";
"updSub" -> "f";
"updSub" -> "fastSchemaOf";
"updSub" -> "fastTypeOf";
"updSub" -> "p";
"updateBack" -> "asWordVal";
"updateBack" -> "bvVal";
"updateBack" -> "evalPanic";
"updateBack" -> "updateSeqMap";
"updateBackSym" -> "evalPanic";
"updateBackSym" -> "iteValue";
"updateBackSym" -> "lookupSeqMap";
"updateBackSym" -> "memoMap";
"updateBackSym" -> "updateSeqMap";
"updateBackSym" -> "wordValueEqualsInteger";
"updateBackSym_word" -> "asBitsMap";
"updateBackSym_word" -> "evalPanic";
"updateBackSym_word" -> "fromVBit";
"updateBackSym_word" -> "literalSWord";
"updateBackSym_word" -> "updateBackSym";
"updateBackSym_word" -> "updateBackSym_word";
"updateBackSym_word" -> "updateWordValue";
"updateBackSym_word" -> "w4bvShl";
"updateBackSym_word" -> "wordValueSize";
"updateBack_word" -> "asWordVal";
"updateBack_word" -> "bvVal";
"updateBack_word" -> "evalPanic";
"updateBack_word" -> "fromVBit";
"updateBack_word" -> "updateWordValue";
"updateFront" -> "asWordVal";
"updateFront" -> "bvVal";
"updateFront" -> "updateSeqMap";
"updateFrontSym" -> "iteValue";
"updateFrontSym" -> "lookupSeqMap";
"updateFrontSym" -> "memoMap";
"updateFrontSym" -> "updateSeqMap";
"updateFrontSym" -> "wordValueEqualsInteger";
"updateFrontSym_word" -> "asBitsMap";
"updateFrontSym_word" -> "evalPanic";
"updateFrontSym_word" -> "fromVBit";
"updateFrontSym_word" -> "literalSWord";
"updateFrontSym_word" -> "updateFrontSym";
"updateFrontSym_word" -> "updateFrontSym_word";
"updateFrontSym_word" -> "updateWordValue";
"updateFrontSym_word" -> "w4bvLshr";
"updateFrontSym_word" -> "wordValueSize";
"updateFront_word" -> "asWordVal";
"updateFront_word" -> "bvVal";
"updateFront_word" -> "fromVBit";
"updateFront_word" -> "updateWordValue";
"updateInterval" -> "iIntersect";
"updateInterval" -> "int";
"updateInterval" -> "x";
"updatePrim" -> "asIndex";
"updatePrim" -> "assertIndexInBounds";
"updatePrim" -> "evalPanic";
"updatePrim" -> "sDelay";
"updateREPLTitle" -> "getRW";
"updateREPLTitle" -> "unlessBatch";
"updateSeqMap" -> "f";
"updateSeqMap" -> "x";
"updateWordValue" -> "asBitsMap";
"updateWordValue" -> "invalidIndex";
"updateWordValue" -> "updateSeqMap";
"updateWordValue" -> "wordValueSize";
"userOptions" -> "checkBase";
"userOptions" -> "checkInfLength";
"userOptions" -> "checkPPFloatFormat";
"userOptions" -> "checkProver";
"userOptions" -> "checkSatNum";
"userOptions" -> "getModuleEnv";
"userOptions" -> "mkOptionMap";
"userOptions" -> "noCheck";
"userOptions" -> "proverListString";
"userOptions" -> "setModuleEnv";
"userOptions" -> "simpleOpt";
"userOptions" -> "x";
"valEq" -> "cmpValue";
"valEq" -> "eqCombine";
"valEq" -> "fpEq";
"valEq" -> "rationalEq";
"valEq" -> "x";
"valGt" -> "bitGreaterThan";
"valGt" -> "cmpValue";
"valGt" -> "fpEq";
"valGt" -> "lexCombine";
"valGt" -> "panic";
"valGt" -> "rationalEq";
"valGt" -> "rationalGreaterThan";
"valGt" -> "x";
"valLt" -> "bitLessThan";
"valLt" -> "cmpValue";
"valLt" -> "fpEq";
"valLt" -> "lexCombine";
"valLt" -> "panic";
"valLt" -> "rationalEq";
"valLt" -> "rationalLessThan";
"valLt" -> "x";
"validDemotedType" -> "at";
"validDemotedType" -> "errorMessage";
"validDemotedType" -> "validDemotedType";
"validDemotedType" -> "x";
"validEvalContext" -> "getRW";
"validEvalContext" -> "raise";
"valueToChar" -> "asWordVal";
"valueToChar" -> "evalPanic";
"valueToString" -> "enumerateSeqMap";
"valueToString" -> "evalPanic";
"valueToString" -> "valueToChar";
"varModelPred" -> "f";
"varModelPred" -> "modelPred";
"varModelPred" -> "panic";
"varModelPred" -> "rationalEq";
"varModelPred" -> "recordElements";
"varShapeToConcrete" -> "defaultPPOpts";
"varShapeToConcrete" -> "dumpableType";
"varShapeToConcrete" -> "exhaustiveTests";
"varShapeToConcrete" -> "f";
"varShapeToConcrete" -> "finiteSeqMap";
"varShapeToConcrete" -> "fromVFun";
"varShapeToConcrete" -> "isPass";
"varShapeToConcrete" -> "p";
"varShapeToConcrete" -> "ppValue";
"varShapeToConcrete" -> "randomTests";
"varShapeToConcrete" -> "randomValue";
"varShapeToConcrete" -> "returnTests";
"varShapeToConcrete" -> "testableType";
"varShapeToConcrete" -> "varShapeToConcrete";
"varShapeToConcrete" -> "x";
"varShapeToValue" -> "f";
"varShapeToValue" -> "finiteSeqMap";
"varShapeToValue" -> "varShapeToValue";
"varToExpr" -> "ePrim";
"varToExpr" -> "f";
"varToExpr" -> "floatToExpr";
"varToExpr" -> "p";
"varToExpr" -> "panic";
"varToExpr" -> "pp";
"varToExpr" -> "ppVarShape";
"varToExpr" -> "prelPrim";
"varToExpr" -> "tInteger";
"varToExpr" -> "tNum";
"varToExpr" -> "unFinType";
"varToExpr" -> "zipRecords";
"varsWithAsmps" -> "applySubst";
"varsWithAsmps" -> "x";
"vcat" -> "liftSep";
"versionCmd" -> "displayVersion";
"versionCmd" -> "rPutStrLn";
"virt" -> "text";
"virt" -> "x";
"w4And" -> "getSym";
"w4And" -> "p";
"w4ITE" -> "f";
"w4ITE" -> "getSym";
"w4ITE" -> "total";
"w4ITE" -> "w4And";
"w4Not" -> "getSym";
"w4Not" -> "p";
"w4bvAshr" -> "x";
"w4bvLshr" -> "x";
"w4bvRol" -> "x";
"w4bvRor" -> "x";
"w4bvShl" -> "x";
"warnUnused" -> "f";
"warnUnused" -> "nameInfo";
"warnUnused" -> "rename";
"warnUnused" -> "visibleNames";
"warnUnused" -> "warn";
"warnUnused" -> "x";
"whenDebug" -> "getKnownUser";
"widthIdent" -> "mkIdent";
"widthInteger" -> "x";
"withAsmp" -> "p";
"withCallStack" -> "runEval";
"withDeclGroups" -> "getSpecCache";
"withDeclGroups" -> "groupDecls";
"withDeclGroups" -> "modifySpecCache";
"withDeclGroups" -> "setSpecCache";
"withDecls" -> "withTySyn";
"withDecls" -> "withVar";
"withDecls" -> "x";
"withIncPath" -> "getIncPath";
"withLogger" -> "asParamName";
"withLogger" -> "asPrim";
"withLogger" -> "cmpNameDisplay";
"withLogger" -> "cmpNameLexical";
"withLogger" -> "emptySupply";
"withLogger" -> "f";
"withLogger" -> "getEvalOpts";
"withLogger" -> "io";
"withLogger" -> "lookupPrimDecl";
"withLogger" -> "lookupPrimType";
"withLogger" -> "mkDeclared";
"withLogger" -> "mkParameter";
"withLogger" -> "nameFixity";
"withLogger" -> "nameIdent";
"withLogger" -> "nameInfo";
"withLogger" -> "nameLoc";
"withLogger" -> "nameUnique";
"withLogger" -> "nextUnique";
"withLogger" -> "nextUniqueM";
"withLogger" -> "paramModRecParam";
"withLogger" -> "ppLocName";
"withLogger" -> "runSupplyT";
"withLogger" -> "toParamInstName";
"withMonoType" -> "withVar";
"withMonoType" -> "x";
"withMonoTypes" -> "withMonoType";
"withNameDisp" -> "runDoc";
"withParamFuns" -> "x";
"withPrependedSearchPath" -> "x";
"withROTempFile" -> "finally";
"withSolver" -> "loadTcPrelude";
"withSolver" -> "quietLogger";
"withTParam" -> "checkTShadowing";
"withTParam" -> "p";
"withTParam" -> "tpName";
"withTParam" -> "x";
"withTParams" -> "cvtK";
"withTParams" -> "duplicates";
"withTParams" -> "newGoals";
"withTParams" -> "newTParam";
"withTParams" -> "panic";
"withTParams" -> "recordWarning";
"withTParams" -> "runKindM";
"withTParams" -> "tp";
"withTParams" -> "withTParam";
"withTySyn" -> "checkTShadowing";
"withTySyn" -> "tsName";
"withTySyn" -> "x";
"withVar" -> "withVarType";
"withVar" -> "withVars";
"withVar" -> "x";
"withVarType" -> "x";
"withVarTypes" -> "withVarType";
"word" -> "wordTooWide";
"wordShifter" -> "asWordVal";
"wordShifter" -> "barrelShifter";
"wordShifter" -> "enumerateWordValue";
"wordShifter" -> "evalPanic";
"wordShifter" -> "lookupSeqMap";
"wordShifter" -> "memoMap";
"wordShifter" -> "x";
"wordShifter" -> "zeroV";
"wordTooWide" -> "addDefEqn";
"wordTooWide" -> "ashr";
"wordTooWide" -> "blackhole";
"wordTooWide" -> "delayFill";
"wordTooWide" -> "evalPanic";
"wordTooWide" -> "evalSpark";
"wordTooWide" -> "freshBV_";
"wordTooWide" -> "freshSBool_";
"wordTooWide" -> "freshSInteger_";
"wordTooWide" -> "getCallStack";
"wordTooWide" -> "integer";
"wordTooWide" -> "literalSWord";
"wordTooWide" -> "lshr";
"wordTooWide" -> "modifyCallStack";
"wordTooWide" -> "pp";
"wordTooWide" -> "shl";
"wordTooWide" -> "svFromInteger";
"wordTooWide" -> "svToInteger";
"wordTooWide" -> "text";
"wordValLogicOp" -> "asBitsMap";
"wordValLogicOp" -> "fromVBit";
"wordValLogicOp" -> "lookupSeqMap";
"wordValLogicOp" -> "memoMap";
"wordValLogicOp" -> "wordValueSize";
"wordValLogicOp" -> "x";
"wordValUnaryOp" -> "f";
"wordValUnaryOp" -> "fromVBit";
"wordValUnaryOp" -> "mapSeqMap";
"wordValUnaryOp" -> "x";
"wordValueEqualsInteger" -> "enumerateWordValueRev";
"wordValueEqualsInteger" -> "literalSWord";
"wordValueEqualsInteger" -> "widthInteger";
"wordValueEqualsInteger" -> "wordValueSize";
"wordValueEqualsInteger" -> "x";
"wrap" -> "parens";
"writeFileCmd" -> "panic";
"writeFileCmd" -> "pp";
"writeFileCmd" -> "rEval";
"writeFileCmd" -> "rPrint";
"writeFileCmd" -> "rPutStrLn";
"writeFileCmd" -> "replEvalExpr";
"writeFileCmd" -> "replParseExpr";
"writeFileCmd" -> "replWriteFile";
"writeFileCmd" -> "x";
"xorV" -> "logicBinary";
"z3exists" -> "io";
"zeroV" -> "evalPanic";
"zeroV" -> "fpLit";
"zeroV" -> "intToRational";
"zeroV" -> "isTBit";
"zeroV" -> "lam";
"zeroV" -> "p";
"zeroV" -> "sDelay";
"zeroV" -> "word";
"zeroV" -> "zeroV";
"zipRecords" -> "commitBranch";
"zipRecords" -> "commitDirty";
"zipRecords" -> "commitHash";
"zipRecords" -> "commitShortHash";
"zipRecords" -> "displayVersion";
"zipRecords" -> "f";
"zipRecords" -> "zipRecordsM";
"zipRecordsM" -> "displayOrder";
"zipRecordsM" -> "f";
"zipSeqMap" -> "f";
"zipSeqMap" -> "lookupSeqMap";
"zipSeqMap" -> "memoMap";
"zipSeqMap" -> "x";
}
