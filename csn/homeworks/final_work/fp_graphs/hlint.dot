strict digraph deps {
"add" [style=solid];
"addBracket" [style=solid];
"addBracketTy" [style=solid];
"addDerives" [style=solid];
"addVal" [style=solid];
"allowFields" [style=solid];
"asDo" [style=solid];
"asGuards" [style=solid];
"asNote" [style=solid];
"asPattern" [style=solid];
"asScope\'" [style=solid];
"avogadro" [style=solid];
"bad" [style=solid];
"badFuncs" [style=solid];
"bar" [style=solid];
"bracket" [style=solid];
"bracketError" [style=solid];
"bracketHint" [style=solid];
"bracketWarning" [style=solid];
"builtin" [style=solid];
"builtinHints" [style=solid];
"checkCommentedYaml" [style=solid];
"checkDefine" [style=solid];
"checkFunctions" [style=solid];
"checkImports" [style=solid];
"checkInputOutput" [style=solid];
"checkPragmas" [style=solid];
"checkSide" [style=solid];
"checks" [style=solid];
"combine" [style=solid];
"commentHint" [style=solid];
"computeSettings" [style=solid];
"countFunctionArgs" [style=solid];
"declSpans" [style=solid];
"decodeEither\'" [style=solid];
"decodeFileEither" [style=solid];
"defaultHintName" [style=solid];
"defaultParseFlags" [style=solid];
"delCons" [style=solid];
"deriveCategory" [style=solid];
"deriveGenerics" [style=solid];
"deriveHaskell" [style=solid];
"deriveStock" [style=solid];
"derives" [style=solid];
"directives" [style=solid];
"displayException" [style=solid];
"doAsAvoidingIndentation" [style=solid];
"doAsBrackets" [style=solid];
"dollar" [style=solid];
"dotVersion" [style=solid];
"dropBangs" [style=solid];
"dropConsBang" [style=solid];
"dupes" [style=solid];
"duplicateHint" [style=solid];
"duplicateOrdered" [style=solid];
"eliminateArgs" [style=solid];
"emptyOrNoContext" [style=solid];
"encode" [style=solid];
"entries" [style=solid];
"errorOn" [style=solid];
"errorOnComment" [style=solid];
"etaReduce" [style=solid];
"expHint" [style=solid];
"exportHint" [style=solid];
"extensionsHint" [style=solid];
"f" [style=solid];
"failed" [style=solid];
"fieldDecl" [style=solid];
"fileToModule" [style=solid];
"find" [style=solid];
"findBind" [style=solid];
"findBranch" [style=solid];
"findCase" [style=solid];
"findDecls" [style=solid];
"findExp" [style=solid];
"findFunction" [style=solid];
"findIdeas" [style=solid];
"findPat" [style=solid];
"findSetting" [style=solid];
"fixitiesHint" [style=solid];
"foldM_" [style=solid];
"folder" [style=solid];
"foo" [style=solid];
"fromApplies" [style=solid];
"fromLambda" [style=solid];
"fromRet" [style=solid];
"getConstructorNames" [style=solid];
"getNames" [style=solid];
"getRestrictType" [style=solid];
"getSeverity" [style=solid];
"getSmellType" [style=solid];
"getVal" [style=solid];
"guessName" [style=solid];
"hasAllStrategies" [style=solid];
"hasDerive" [style=solid];
"hasS" [style=solid];
"hasStrategyClause" [style=solid];
"hasT" [style=solid];
"hasT2\'" [style=solid];
"hintRules" [style=solid];
"hints" [style=solid];
"ideaMessage" [style=solid];
"ideaNoTo" [style=solid];
"importHint" [style=solid];
"importListToIdents" [style=solid];
"infixBracket" [style=solid];
"isAppend" [style=solid];
"isData" [style=solid];
"isHashy" [style=solid];
"isPartialAtom" [style=solid];
"isSym" [style=solid];
"isUnboxedTuple" [style=solid];
"isUnifyVar" [style=solid];
"issue1039" [style=solid];
"issue1150" [style=solid];
"issue978" [style=solid];
"lambdaDecl" [style=solid];
"lambdaExp" [style=solid];
"lambdaHint" [style=solid];
"languageDupes" [style=solid];
"lessThanPi" [style=solid];
"listComp" [style=solid];
"listCompCheckGuards" [style=solid];
"listCompCheckMap" [style=solid];
"listDecl" [style=solid];
"listExp" [style=solid];
"listHint" [style=solid];
"listPat" [style=solid];
"listRecHint" [style=solid];
"loadCradleOnlyonce" [style=solid];
"main" [style=solid];
"matchIdea" [style=solid];
"matchListRec" [style=solid];
"matchStar" [style=solid];
"matchStarStar" [style=solid];
"maybeParse" [style=solid];
"mkOrigPats" [style=solid];
"mkVar" [style=solid];
"monadExp" [style=solid];
"monadHint" [style=solid];
"monadLet" [style=solid];
"monadNoResult" [style=solid];
"monadStep" [style=solid];
"monadSteps" [style=solid];
"moveGuardsForward" [style=solid];
"naming" [style=solid];
"namingHint" [style=solid];
"needParenAsChild" [style=solid];
"newTypeDerivingStrategiesHintDecl" [style=solid];
"newVal" [style=solid];
"newtypeHint" [style=solid];
"newtypeHintDecl" [style=solid];
"no" [style=solid];
"noDeriveNewtype" [style=solid];
"noteMayBreak" [style=solid];
"oneMillion" [style=solid];
"optToLanguage" [style=solid];
"optToPragma" [style=solid];
"otherwise" [style=solid];
"parseArray" [style=solid];
"parseArrayString" [style=solid];
"parseBool" [style=solid];
"parseConfigYaml" [style=solid];
"parseFail" [style=solid];
"parseField" [style=solid];
"parseFieldOpt" [style=solid];
"parseFixity" [style=solid];
"parseFlagsAddFixities" [style=solid];
"parseFlagsSetLanguage" [style=solid];
"parseGHC" [style=solid];
"parseGroup" [style=solid];
"parseInputOutputs" [style=solid];
"parseInt" [style=solid];
"parseObject" [style=solid];
"parseObject1" [style=solid];
"parsePackage" [style=solid];
"parseRestrict" [style=solid];
"parseRule" [style=solid];
"parseSeverityKey" [style=solid];
"parseSmell" [style=solid];
"parseString" [style=solid];
"parseTest" [style=solid];
"parseTestFile" [style=solid];
"parseWithin" [style=solid];
"passed" [style=solid];
"patHint" [style=solid];
"pattern" [style=solid];
"patternHint" [style=solid];
"pchecks" [style=solid];
"performSpecial" [style=solid];
"pragmaHint" [style=solid];
"pragmaIdea" [style=solid];
"prettyExpr" [style=solid];
"progress" [style=solid];
"readComment" [style=solid];
"readFileConfigYaml" [style=solid];
"readFilesConfig" [style=solid];
"readMatch" [style=solid];
"readPat" [style=solid];
"readPragma" [style=solid];
"readRule" [style=solid];
"record" [style=solid];
"recursive" [style=solid];
"recursiveStr" [style=solid];
"reduceImports" [style=solid];
"redundantInfixBracket" [style=solid];
"remParens\'" [style=solid];
"renderSetting" [style=solid];
"replaceNames" [style=solid];
"resolveHints" [style=solid];
"restrictHint" [style=solid];
"restrictions" [style=solid];
"returnsUnit" [style=solid];
"rhsSpans" [style=solid];
"ruleToGroup" [style=solid];
"runCpp" [style=solid];
"settingsFromConfigYaml" [style=solid];
"shorten" [style=solid];
"shortenLGRHS" [style=solid];
"shortenMatch" [style=solid];
"shouldSuggestStrategies" [style=solid];
"showNotes" [style=solid];
"showSrcSpan" [style=solid];
"simpleCons" [style=solid];
"simpleHsDataDefn" [style=solid];
"simplify" [style=solid];
"simplifyHead" [style=solid];
"singleSimpleField" [style=solid];
"smellHint" [style=solid];
"smellLongFunctions" [style=solid];
"smellLongTypeLists" [style=solid];
"smellManyArgFunctions" [style=solid];
"smellModuleHint" [style=solid];
"smells" [style=solid];
"sort" [style=solid];
"spanLength" [style=solid];
"special" [style=solid];
"splitInfix" [style=solid];
"static" [style=solid];
"strToLanguage" [style=solid];
"stringType" [style=solid];
"stripRedundantAlias" [style=solid];
"suggestExpr" [style=solid];
"suggestName" [style=solid];
"test" [style=solid];
"testAnnotations" [style=solid];
"testInputOutput" [style=solid];
"testNames" [style=solid];
"testRefactor" [style=solid];
"tmp" [style=solid];
"toOldeLoc" [style=solid];
"toOldeSpan" [style=solid];
"typeListChar" [style=solid];
"typeString" [style=solid];
"un" [style=solid];
"unitFuncs" [style=solid];
"unqualify" [style=solid];
"unsafeHint" [style=solid];
"useCons" [style=solid];
"useList" [style=solid];
"usePList" [style=solid];
"usePString" [style=solid];
"useString" [style=solid];
"used" [style=solid];
"usedExt" [style=solid];
"varBody" [style=solid];
"warnBang" [style=solid];
"whereSpans" [style=solid];
"withTests" [style=solid];
"within" [style=solid];
"x" [style=solid];
"yes" [style=solid];
"add" -> "add";
"add" -> "f";
"addBracket" -> "x";
"addBracketTy" -> "f";
"addBracketTy" -> "foo";
"addBracketTy" -> "no";
"addBracketTy" -> "x";
"addDerives" -> "deriveStock";
"addDerives" -> "noDeriveNewtype";
"allowFields" -> "bad";
"allowFields" -> "parseFail";
"allowFields" -> "parseObject";
"asDo" -> "x";
"asGuards" -> "asGuards";
"asGuards" -> "x";
"asNote" -> "x";
"asPattern" -> "x";
"asScope\'" -> "defaultParseFlags";
"asScope\'" -> "f";
"asScope\'" -> "otherwise";
"asScope\'" -> "parseFlagsAddFixities";
"asScope\'" -> "parseFlagsSetLanguage";
"asScope\'" -> "x";
"bad" -> "foo";
"bracket" -> "bracketError";
"bracket" -> "bracketWarning";
"bracket" -> "f";
"bracket" -> "isPartialAtom";
"bracket" -> "x";
"bracketError" -> "x";
"bracketHint" -> "bracket";
"bracketHint" -> "dollar";
"bracketHint" -> "fieldDecl";
"bracketHint" -> "isPartialAtom";
"bracketHint" -> "prettyExpr";
"bracketHint" -> "x";
"bracketWarning" -> "x";
"builtin" -> "bracketHint";
"builtin" -> "commentHint";
"builtin" -> "duplicateHint";
"builtin" -> "exportHint";
"builtin" -> "extensionsHint";
"builtin" -> "f";
"builtin" -> "importHint";
"builtin" -> "issue1150";
"builtin" -> "lambdaHint";
"builtin" -> "listHint";
"builtin" -> "listRecHint";
"builtin" -> "monadHint";
"builtin" -> "namingHint";
"builtin" -> "newtypeHint";
"builtin" -> "patternHint";
"builtin" -> "pragmaHint";
"builtin" -> "unsafeHint";
"builtin" -> "x";
"builtinHints" -> "builtin";
"checkCommentedYaml" -> "readFilesConfig";
"checkCommentedYaml" -> "x";
"checkFunctions" -> "findFunction";
"checkFunctions" -> "ideaMessage";
"checkFunctions" -> "ideaNoTo";
"checkFunctions" -> "within";
"checkFunctions" -> "x";
"checkImports" -> "ideaMessage";
"checkImports" -> "ideaNoTo";
"checkImports" -> "importListToIdents";
"checkImports" -> "otherwise";
"checkImports" -> "within";
"checkImports" -> "x";
"checkInputOutput" -> "bracket";
"checkInputOutput" -> "failed";
"checkInputOutput" -> "main";
"checkInputOutput" -> "matchStar";
"checkInputOutput" -> "matchStarStar";
"checkInputOutput" -> "passed";
"checkPragmas" -> "bad";
"checkPragmas" -> "f";
"checkPragmas" -> "ideaNoTo";
"checkPragmas" -> "noteMayBreak";
"checkPragmas" -> "within";
"checkPragmas" -> "x";
"checkSide" -> "f";
"checkSide" -> "x";
"checks" -> "useCons";
"checks" -> "useList";
"checks" -> "useString";
"combine" -> "otherwise";
"combine" -> "x";
"commentHint" -> "directives";
"commentHint" -> "f";
"commentHint" -> "main";
"commentHint" -> "x";
"computeSettings" -> "findSetting";
"computeSettings" -> "renderSetting";
"computeSettings" -> "showSrcSpan";
"computeSettings" -> "x";
"countFunctionArgs" -> "countFunctionArgs";
"declSpans" -> "f";
"declSpans" -> "rhsSpans";
"declSpans" -> "whereSpans";
"delCons" -> "recursive";
"delCons" -> "x";
"deriveStock" -> "deriveCategory";
"deriveStock" -> "deriveGenerics";
"deriveStock" -> "deriveHaskell";
"derives" -> "addDerives";
"doAsBrackets" -> "x";
"dollar" -> "f";
"dollar" -> "isPartialAtom";
"dollar" -> "splitInfix";
"dollar" -> "x";
"dotVersion" -> "dotVersion";
"dotVersion" -> "isUnifyVar";
"dotVersion" -> "x";
"dropBangs" -> "dropConsBang";
"dropConsBang" -> "x";
"dupes" -> "duplicateOrdered";
"dupes" -> "f";
"dupes" -> "showSrcSpan";
"dupes" -> "x";
"duplicateHint" -> "dupes";
"duplicateHint" -> "x";
"duplicateOrdered" -> "add";
"duplicateOrdered" -> "f";
"duplicateOrdered" -> "find";
"duplicateOrdered" -> "x";
"eliminateArgs" -> "f";
"eliminateArgs" -> "recursive";
"eliminateArgs" -> "x";
"entries" -> "bar";
"entries" -> "f";
"entries" -> "foo";
"entries" -> "x";
"errorOn" -> "showSrcSpan";
"errorOnComment" -> "showSrcSpan";
"etaReduce" -> "etaReduce";
"etaReduce" -> "x";
"expHint" -> "x";
"exportHint" -> "no";
"exportHint" -> "x";
"extensionsHint" -> "otherwise";
"extensionsHint" -> "used";
"extensionsHint" -> "usedExt";
"extensionsHint" -> "x";
"f" -> "f";
"f" -> "foo";
"f" -> "x";
"fieldDecl" -> "x";
"find" -> "find";
"findBind" -> "findExp";
"findBranch" -> "findPat";
"findBranch" -> "x";
"findCase" -> "delCons";
"findCase" -> "eliminateArgs";
"findCase" -> "findBranch";
"findCase" -> "x";
"findDecls" -> "x";
"findExp" -> "defaultHintName";
"findExp" -> "f";
"findExp" -> "findExp";
"findExp" -> "mkVar";
"findExp" -> "x";
"findFunction" -> "smellHint";
"findFunction" -> "smellModuleHint";
"findFunction" -> "x";
"findIdeas" -> "findDecls";
"findIdeas" -> "matchIdea";
"findIdeas" -> "x";
"findPat" -> "readPat";
"findSetting" -> "findBind";
"findSetting" -> "x";
"fixitiesHint" -> "infixBracket";
"fixitiesHint" -> "x";
"foldM_" -> "f";
"folder" -> "f";
"foo" -> "bar";
"foo" -> "f";
"foo" -> "foo";
"foo" -> "otherwise";
"foo" -> "x";
"fromApplies" -> "f";
"fromApplies" -> "fromApplies";
"fromApplies" -> "x";
"fromLambda" -> "bad";
"fromLambda" -> "f";
"fromLambda" -> "fromLambda";
"fromLambda" -> "x";
"fromRet" -> "fromRet";
"fromRet" -> "x";
"getNames" -> "getConstructorNames";
"getSmellType" -> "readFileConfigYaml";
"getSmellType" -> "settingsFromConfigYaml";
"getVal" -> "x";
"guessName" -> "defaultHintName";
"guessName" -> "f";
"guessName" -> "isUnifyVar";
"guessName" -> "otherwise";
"guessName" -> "x";
"hasAllStrategies" -> "hasStrategyClause";
"hasDerive" -> "derives";
"hasS" -> "test";
"hasT" -> "hasT";
"hasT2\'" -> "x";
"hintRules" -> "resolveHints";
"hints" -> "asGuards";
"hints" -> "f";
"hints" -> "test";
"importHint" -> "reduceImports";
"importHint" -> "stripRedundantAlias";
"infixBracket" -> "f";
"infixBracket" -> "redundantInfixBracket";
"infixBracket" -> "x";
"isHashy" -> "x";
"isPartialAtom" -> "x";
"isSym" -> "x";
"isUnboxedTuple" -> "foo";
"isUnboxedTuple" -> "x";
"isUnifyVar" -> "x";
"issue978" -> "main";
"lambdaDecl" -> "etaReduce";
"lambdaDecl" -> "fromLambda";
"lambdaDecl" -> "mkOrigPats";
"lambdaDecl" -> "varBody";
"lambdaExp" -> "f";
"lambdaExp" -> "fromLambda";
"lambdaExp" -> "mkOrigPats";
"lambdaExp" -> "otherwise";
"lambdaExp" -> "varBody";
"lambdaExp" -> "x";
"lambdaHint" -> "lambdaDecl";
"lambdaHint" -> "lambdaExp";
"lambdaHint" -> "x";
"languageDupes" -> "languageDupes";
"languageDupes" -> "pragmaIdea";
"listComp" -> "f";
"listComp" -> "listCompCheckGuards";
"listComp" -> "listCompCheckMap";
"listCompCheckGuards" -> "moveGuardsForward";
"listCompCheckGuards" -> "otherwise";
"listCompCheckGuards" -> "suggestExpr";
"listCompCheckGuards" -> "x";
"listCompCheckMap" -> "f";
"listCompCheckMap" -> "suggestExpr";
"listDecl" -> "listComp";
"listDecl" -> "listExp";
"listDecl" -> "listPat";
"listDecl" -> "stringType";
"listDecl" -> "x";
"listExp" -> "checks";
"listExp" -> "f";
"listExp" -> "isAppend";
"listExp" -> "listExp";
"listExp" -> "x";
"listHint" -> "listDecl";
"listPat" -> "f";
"listPat" -> "listPat";
"listPat" -> "pchecks";
"listPat" -> "x";
"listRecHint" -> "f";
"listRecHint" -> "findCase";
"listRecHint" -> "matchListRec";
"listRecHint" -> "recursiveStr";
"listRecHint" -> "x";
"loadCradleOnlyonce" -> "f";
"loadCradleOnlyonce" -> "x";
"main" -> "bar";
"main" -> "f";
"main" -> "foo";
"main" -> "main";
"main" -> "x";
"matchIdea" -> "addBracket";
"matchIdea" -> "addBracketTy";
"matchIdea" -> "checkDefine";
"matchIdea" -> "checkSide";
"matchIdea" -> "isUnifyVar";
"matchIdea" -> "otherwise";
"matchIdea" -> "performSpecial";
"matchIdea" -> "unqualify";
"matchIdea" -> "x";
"matchListRec" -> "asDo";
"matchListRec" -> "otherwise";
"matchListRec" -> "recursive";
"matchListRec" -> "x";
"matchStar" -> "matchStar";
"matchStar" -> "x";
"matchStarStar" -> "failed";
"matchStarStar" -> "passed";
"matchStarStar" -> "progress";
"matchStarStar" -> "withTests";
"mkOrigPats" -> "f";
"mkOrigPats" -> "otherwise";
"mkOrigPats" -> "used";
"mkOrigPats" -> "x";
"mkVar" -> "readComment";
"mkVar" -> "readPragma";
"monadExp" -> "doAsAvoidingIndentation";
"monadExp" -> "doAsBrackets";
"monadExp" -> "f";
"monadExp" -> "monadLet";
"monadExp" -> "monadNoResult";
"monadExp" -> "monadSteps";
"monadExp" -> "returnsUnit";
"monadExp" -> "x";
"monadHint" -> "f";
"monadHint" -> "monadExp";
"monadHint" -> "x";
"monadLet" -> "fromRet";
"monadLet" -> "x";
"monadNoResult" -> "badFuncs";
"monadNoResult" -> "monadNoResult";
"monadNoResult" -> "x";
"monadStep" -> "f";
"monadStep" -> "fromApplies";
"monadStep" -> "fromRet";
"monadStep" -> "returnsUnit";
"monadStep" -> "x";
"monadSteps" -> "monadStep";
"monadSteps" -> "monadSteps";
"monadSteps" -> "x";
"moveGuardsForward" -> "f";
"moveGuardsForward" -> "x";
"naming" -> "getNames";
"naming" -> "replaceNames";
"naming" -> "shorten";
"naming" -> "suggestName";
"namingHint" -> "getNames";
"namingHint" -> "naming";
"newTypeDerivingStrategiesHintDecl" -> "shouldSuggestStrategies";
"newVal" -> "x";
"newtypeHint" -> "newTypeDerivingStrategiesHintDecl";
"newtypeHint" -> "newtypeHintDecl";
"newtypeHint" -> "x";
"newtypeHintDecl" -> "singleSimpleField";
"newtypeHintDecl" -> "warnBang";
"no" -> "bar";
"no" -> "foo";
"no" -> "x";
"noDeriveNewtype" -> "deriveGenerics";
"noDeriveNewtype" -> "deriveHaskell";
"optToLanguage" -> "f";
"optToLanguage" -> "strToLanguage";
"optToPragma" -> "optToLanguage";
"optToPragma" -> "pragmaIdea";
"parseArray" -> "addVal";
"parseArray" -> "parseArray";
"parseArray" -> "x";
"parseArrayString" -> "parseArray";
"parseArrayString" -> "parseString";
"parseBool" -> "getVal";
"parseBool" -> "parseFail";
"parseConfigYaml" -> "getRestrictType";
"parseConfigYaml" -> "getSeverity";
"parseConfigYaml" -> "parseArray";
"parseConfigYaml" -> "parseArrayString";
"parseConfigYaml" -> "parseFail";
"parseConfigYaml" -> "parseFixity";
"parseConfigYaml" -> "parseGroup";
"parseConfigYaml" -> "parseObject1";
"parseConfigYaml" -> "parsePackage";
"parseConfigYaml" -> "parseRestrict";
"parseConfigYaml" -> "parseRule";
"parseConfigYaml" -> "parseSmell";
"parseConfigYaml" -> "ruleToGroup";
"parseFail" -> "encode";
"parseFail" -> "x";
"parseField" -> "parseFail";
"parseField" -> "parseFieldOpt";
"parseField" -> "x";
"parseFieldOpt" -> "addVal";
"parseFieldOpt" -> "parseObject";
"parseFieldOpt" -> "x";
"parseFixity" -> "f";
"parseFixity" -> "parseArray";
"parseFixity" -> "parseFail";
"parseFixity" -> "parseGHC";
"parseFixity" -> "x";
"parseFlagsAddFixities" -> "x";
"parseFlagsSetLanguage" -> "x";
"parseGHC" -> "newVal";
"parseGHC" -> "parseConfigYaml";
"parseGHC" -> "parseFail";
"parseGHC" -> "parseString";
"parseGHC" -> "x";
"parseGroup" -> "allowFields";
"parseGroup" -> "parseArray";
"parseGroup" -> "parseBool";
"parseGroup" -> "parseField";
"parseGroup" -> "parseFieldOpt";
"parseGroup" -> "parseGHC";
"parseGroup" -> "parseRule";
"parseGroup" -> "parseString";
"parseGroup" -> "x";
"parseInputOutputs" -> "f";
"parseInputOutputs" -> "x";
"parseInt" -> "getVal";
"parseInt" -> "parseFail";
"parseObject" -> "getVal";
"parseObject" -> "parseFail";
"parseObject" -> "x";
"parseObject1" -> "parseFail";
"parseObject1" -> "parseField";
"parseObject1" -> "parseObject";
"parsePackage" -> "allowFields";
"parsePackage" -> "parseArray";
"parsePackage" -> "parseField";
"parsePackage" -> "parseGHC";
"parsePackage" -> "parseString";
"parseRestrict" -> "allowFields";
"parseRestrict" -> "maybeParse";
"parseRestrict" -> "parseArray";
"parseRestrict" -> "parseArrayString";
"parseRestrict" -> "parseBool";
"parseRestrict" -> "parseFieldOpt";
"parseRestrict" -> "parseString";
"parseRestrict" -> "parseWithin";
"parseRule" -> "allowFields";
"parseRule" -> "asNote";
"parseRule" -> "guessName";
"parseRule" -> "parseArray";
"parseRule" -> "parseArrayString";
"parseRule" -> "parseField";
"parseRule" -> "parseFieldOpt";
"parseRule" -> "parseGHC";
"parseRule" -> "parseSeverityKey";
"parseRule" -> "parseString";
"parseRule" -> "parseWithin";
"parseRule" -> "within";
"parseSeverityKey" -> "getSeverity";
"parseSeverityKey" -> "parseFail";
"parseSeverityKey" -> "parseObject1";
"parseSmell" -> "getSmellType";
"parseSmell" -> "parseFail";
"parseSmell" -> "parseField";
"parseSmell" -> "parseInt";
"parseSmell" -> "parseString";
"parseString" -> "getVal";
"parseString" -> "parseFail";
"parseString" -> "x";
"parseTest" -> "f";
"parseTest" -> "x";
"parseTestFile" -> "decodeEither\'";
"parseTestFile" -> "f";
"parseTestFile" -> "otherwise";
"parseTestFile" -> "parseTest";
"parseTestFile" -> "settingsFromConfigYaml";
"parseTestFile" -> "x";
"parseWithin" -> "f";
"parseWithin" -> "parseFail";
"parseWithin" -> "parseGHC";
"parseWithin" -> "parseString";
"parseWithin" -> "x";
"patHint" -> "f";
"patHint" -> "x";
"pattern" -> "toOldeLoc";
"pattern" -> "toOldeSpan";
"patternHint" -> "asPattern";
"patternHint" -> "expHint";
"patternHint" -> "hints";
"patternHint" -> "patHint";
"patternHint" -> "x";
"pchecks" -> "usePList";
"pchecks" -> "usePString";
"performSpecial" -> "x";
"pragmaHint" -> "languageDupes";
"pragmaHint" -> "optToPragma";
"pragmaIdea" -> "f";
"prettyExpr" -> "x";
"readComment" -> "errorOnComment";
"readComment" -> "f";
"readComment" -> "getSeverity";
"readComment" -> "x";
"readFileConfigYaml" -> "decodeEither\'";
"readFileConfigYaml" -> "decodeFileEither";
"readFileConfigYaml" -> "displayException";
"readFilesConfig" -> "defaultHintName";
"readFilesConfig" -> "getRestrictType";
"readFilesConfig" -> "getSeverity";
"readFilesConfig" -> "getSmellType";
"readFilesConfig" -> "isUnifyVar";
"readFilesConfig" -> "readFileConfigYaml";
"readFilesConfig" -> "settingsFromConfigYaml";
"readFilesConfig" -> "showNotes";
"readFilesConfig" -> "x";
"readMatch" -> "findIdeas";
"readMatch" -> "readRule";
"readPat" -> "x";
"readPragma" -> "errorOn";
"readPragma" -> "f";
"readPragma" -> "getSeverity";
"readPragma" -> "x";
"readRule" -> "dotVersion";
"recursiveStr" -> "recursiveStr";
"reduceImports" -> "f";
"reduceImports" -> "simplify";
"reduceImports" -> "x";
"redundantInfixBracket" -> "needParenAsChild";
"redundantInfixBracket" -> "otherwise";
"renderSetting" -> "x";
"replaceNames" -> "x";
"resolveHints" -> "builtin";
"resolveHints" -> "readMatch";
"restrictHint" -> "checkFunctions";
"restrictHint" -> "checkImports";
"restrictHint" -> "checkPragmas";
"restrictHint" -> "restrictions";
"restrictions" -> "f";
"restrictions" -> "x";
"returnsUnit" -> "badFuncs";
"returnsUnit" -> "returnsUnit";
"returnsUnit" -> "unitFuncs";
"returnsUnit" -> "x";
"runCpp" -> "fileToModule";
"runCpp" -> "pattern";
"runCpp" -> "showSrcSpan";
"runCpp" -> "x";
"settingsFromConfigYaml" -> "asScope\'";
"settingsFromConfigYaml" -> "f";
"settingsFromConfigYaml" -> "otherwise";
"settingsFromConfigYaml" -> "x";
"shorten" -> "shortenLGRHS";
"shorten" -> "shortenMatch";
"shorten" -> "x";
"shortenLGRHS" -> "x";
"shortenMatch" -> "shortenLGRHS";
"shortenMatch" -> "x";
"shouldSuggestStrategies" -> "hasAllStrategies";
"shouldSuggestStrategies" -> "isData";
"showSrcSpan" -> "builtinHints";
"showSrcSpan" -> "hintRules";
"showSrcSpan" -> "resolveHints";
"simpleCons" -> "emptyOrNoContext";
"simpleCons" -> "isHashy";
"simpleCons" -> "isUnboxedTuple";
"simpleHsDataDefn" -> "simpleCons";
"simplify" -> "simplify";
"simplify" -> "simplifyHead";
"simplify" -> "x";
"simplifyHead" -> "combine";
"simplifyHead" -> "simplifyHead";
"simplifyHead" -> "x";
"singleSimpleField" -> "dropBangs";
"singleSimpleField" -> "simpleHsDataDefn";
"smellHint" -> "f";
"smellHint" -> "smellLongFunctions";
"smellHint" -> "smellLongTypeLists";
"smellHint" -> "smellManyArgFunctions";
"smellHint" -> "smells";
"smellLongFunctions" -> "declSpans";
"smellLongFunctions" -> "spanLength";
"smellLongTypeLists" -> "x";
"smellManyArgFunctions" -> "countFunctionArgs";
"smellModuleHint" -> "f";
"smellModuleHint" -> "smells";
"smells" -> "entries";
"sort" -> "f";
"sort" -> "x";
"special" -> "foo";
"static" -> "x";
"strToLanguage" -> "x";
"stringType" -> "f";
"stringType" -> "typeListChar";
"stringType" -> "typeString";
"stringType" -> "x";
"stripRedundantAlias" -> "x";
"suggestName" -> "f";
"suggestName" -> "isSym";
"suggestName" -> "otherwise";
"suggestName" -> "x";
"test" -> "builtinHints";
"test" -> "checkCommentedYaml";
"test" -> "hints";
"test" -> "main";
"test" -> "progress";
"test" -> "readFilesConfig";
"test" -> "testAnnotations";
"test" -> "testInputOutput";
"test" -> "testNames";
"test" -> "withTests";
"test" -> "x";
"testAnnotations" -> "bad";
"testAnnotations" -> "defaultParseFlags";
"testAnnotations" -> "f";
"testAnnotations" -> "failed";
"testAnnotations" -> "parseTestFile";
"testAnnotations" -> "passed";
"testAnnotations" -> "testRefactor";
"testAnnotations" -> "x";
"testInputOutput" -> "checkInputOutput";
"testInputOutput" -> "main";
"testInputOutput" -> "parseInputOutputs";
"testInputOutput" -> "progress";
"testNames" -> "defaultHintName";
"testNames" -> "failed";
"testNames" -> "hints";
"testRefactor" -> "x";
"tmp" -> "f";
"un" -> "x";
"unqualify" -> "f";
"unqualify" -> "isUnifyVar";
"unqualify" -> "x";
"unsafeHint" -> "x";
"useCons" -> "f";
"useCons" -> "isAppend";
"useCons" -> "otherwise";
"useCons" -> "x";
"useList" -> "f";
"useList" -> "x";
"usePList" -> "f";
"usePList" -> "x";
"used" -> "derives";
"used" -> "f";
"used" -> "hasDerive";
"used" -> "hasS";
"used" -> "hasT";
"used" -> "hasT2\'";
"used" -> "isUnboxedTuple";
"used" -> "un";
"usedExt" -> "derives";
"usedExt" -> "hasDerive";
"usedExt" -> "hasS";
"usedExt" -> "used";
"usedExt" -> "x";
"whereSpans" -> "declSpans";
"x" -> "otherwise";
"yes" -> "f";
"yes" -> "foo";
"yes" -> "x";
}
