strict digraph deps {
"activeCheckboxField" [style=solid];
"appNew" [style=solid];
"appVeyorP" [style=solid];
"artFooter" [style=solid];
"artHeader" [style=solid];
"baseVer" [style=solid];
"baseVerPvp" [style=solid];
"benchmarkP" [style=solid];
"bl" [style=solid];
"boldDefault" [style=solid];
"borderLabel" [style=solid];
"borderName" [style=solid];
"br" [style=solid];
"cabalBaseVersions" [style=solid];
"cabalFile" [style=solid];
"cabalP" [style=solid];
"checkUniqueName" [style=solid];
"checkboxField" [style=solid];
"choose" [style=solid];
"chooseYesNo" [style=solid];
"chooseYesNoBool" [style=solid];
"cliParser" [style=solid];
"configCodec" [style=solid];
"configFileP" [style=solid];
"configP" [style=solid];
"configToSummonKit" [style=solid];
"connectModeP" [style=solid];
"createProjectDirectory" [style=solid];
"createProjectTemplate" [style=solid];
"ctrlD" [style=solid];
"currentYear" [style=solid];
"customPreludeT" [style=solid];
"customizeLicense" [style=solid];
"decisionToBool" [style=solid];
"decisionsToBools" [style=solid];
"defaultCabal" [style=solid];
"defaultConfig" [style=solid];
"defaultConfigFile" [style=solid];
"defaultConfigFileContent" [style=solid];
"defaultDescription" [style=solid];
"defaultEmail" [style=solid];
"defaultFullName" [style=solid];
"defaultGHC" [style=solid];
"defaultLicenseName" [style=solid];
"defaultOwner" [style=solid];
"defaultStack" [style=solid];
"defaultTomlFile" [style=solid];
"disabledAttr" [style=solid];
"doGithubCommands" [style=solid];
"docFiles" [style=solid];
"doesExistProjectName" [style=solid];
"drawNew" [style=solid];
"errorToInvalidFields" [style=solid];
"execP" [style=solid];
"falseMessage" [style=solid];
"fetchLicense" [style=solid];
"fetchLicenseCustom" [style=solid];
"fetchSource" [style=solid];
"fetchSources" [style=solid];
"finalSettings" [style=solid];
"finalise" [style=solid];
"formErrorMessages" [style=solid];
"formatGhcMeta" [style=solid];
"generateProject" [style=solid];
"generateProjectInteractive" [style=solid];
"generateProjectNonInteractive" [style=solid];
"getCurrentFocus" [style=solid];
"getCustomLicenseText" [style=solid];
"getFinalConfig" [style=solid];
"ghActionsP" [style=solid];
"ghcTable" [style=solid];
"ghcVerP" [style=solid];
"gitHubFiles" [style=solid];
"githubLicenseQueryNames" [style=solid];
"githubP" [style=solid];
"groupAllBorders" [style=solid];
"groupBorder" [style=solid];
"groupBorderBottom" [style=solid];
"groupBorderMid" [style=solid];
"groupBorderTop" [style=solid];
"guessConfigFromGit" [style=solid];
"hArrange" [style=solid];
"handleAutofill" [style=solid];
"haskellFiles" [style=solid];
"headToUpper" [style=solid];
"ignoreFileP" [style=solid];
"infix" [style=solid];
"infixl" [style=solid];
"initializeProject" [style=solid];
"insertTree" [style=solid];
"interactivityP" [style=solid];
"intercalateMap" [style=solid];
"isActive" [style=solid];
"isNonInteractive" [style=solid];
"isOffline" [style=solid];
"label" [style=solid];
"latestLts" [style=solid];
"libraryP" [style=solid];
"licenseShortDesc" [style=solid];
"licenseText" [style=solid];
"listInBorder" [style=solid];
"loadFileConfig" [style=solid];
"makeFields" [style=solid];
"matchLocal" [style=solid];
"matchRaw" [style=solid];
"matchUrl" [style=solid];
"maybeLicense" [style=solid];
"mkDefaultYesNoPrompt" [style=solid];
"mkForm" [style=solid];
"mkSimpleApp" [style=solid];
"modifyFooter" [style=solid];
"modifyHeader" [style=solid];
"moduleNameValid" [style=solid];
"newP" [style=solid];
"noUploadP" [style=solid];
"oldGhcs" [style=solid];
"packageNameValid" [style=solid];
"packageToModule" [style=solid];
"parseGhcVer" [style=solid];
"parseLicenseName" [style=solid];
"parseTool" [style=solid];
"pathToTree" [style=solid];
"preludeModP" [style=solid];
"preludePackP" [style=solid];
"printQuestion" [style=solid];
"privateP" [style=solid];
"projectDescNewLine" [style=solid];
"projectName" [style=solid];
"prompt" [style=solid];
"promptDecisionToBool" [style=solid];
"putStrFlush" [style=solid];
"query" [style=solid];
"queryDef" [style=solid];
"queryManyRepeatOnFail" [style=solid];
"queryNotNull" [style=solid];
"queryWithPredicate" [style=solid];
"quote" [style=solid];
"radioField" [style=solid];
"readFileConfig" [style=solid];
"recreateForm" [style=solid];
"renderCheckbox" [style=solid];
"renderWidgetTree" [style=solid];
"runApp" [style=solid];
"runCliCommand" [style=solid];
"runConfig" [style=solid];
"runNew" [style=solid];
"runScript" [style=solid];
"runShow" [style=solid];
"runSimpleApp" [style=solid];
"runTuiCommand" [style=solid];
"runTuiNew" [style=solid];
"runTuiShowAllLicenses" [style=solid];
"runTuiShowGhcVersions" [style=solid];
"runTuiShowLicense" [style=solid];
"scriptFile" [style=solid];
"scriptP" [style=solid];
"showBoldTree" [style=solid];
"showFormError" [style=solid];
"showGhcVer" [style=solid];
"showLicenseWithDesc" [style=solid];
"showP" [style=solid];
"showSource" [style=solid];
"showTool" [style=solid];
"showTree" [style=solid];
"sourceCodec" [style=solid];
"stackFiles" [style=solid];
"stackP" [style=solid];
"strField" [style=solid];
"summon" [style=solid];
"summonCli" [style=solid];
"summonFormValidation" [style=solid];
"summonKitToSettings" [style=solid];
"summonTui" [style=solid];
"summonTuiNew" [style=solid];
"summonTuiShow" [style=solid];
"summonerP" [style=solid];
"summonerVersion" [style=solid];
"targetMessage" [style=solid];
"targetMessageWithText" [style=solid];
"targetsP" [style=solid];
"tconcatMap" [style=solid];
"testP" [style=solid];
"theMap" [style=solid];
"tl" [style=solid];
"toGhcMeta" [style=solid];
"toolArgP" [style=solid];
"tr" [style=solid];
"traverseTree" [style=solid];
"travisP" [style=solid];
"treeFp" [style=solid];
"trueMessage" [style=solid];
"validateKit" [style=solid];
"versionP" [style=solid];
"withP" [style=solid];
"withoutP" [style=solid];
"yesOrNo" [style=solid];
"" -> "projectName";
"activeCheckboxField" -> "isActive";
"activeCheckboxField" -> "label";
"activeCheckboxField" -> "renderCheckbox";
"appNew" -> "ctrlD";
"appNew" -> "drawNew";
"appNew" -> "getCurrentFocus";
"appNew" -> "handleAutofill";
"appNew" -> "isActive";
"appNew" -> "mkForm";
"appNew" -> "projectDescNewLine";
"appNew" -> "recreateForm";
"appNew" -> "summonFormValidation";
"appNew" -> "theMap";
"artFooter" -> "configCodec";
"artFooter" -> "defaultConfig";
"artFooter" -> "finalise";
"artFooter" -> "guessConfigFromGit";
"artFooter" -> "loadFileConfig";
"baseVer" -> "baseVerPvp";
"boldDefault" -> "parseTool";
"boldDefault" -> "showTool";
"borderLabel" -> "borderName";
"br" -> "configToSummonKit";
"br" -> "finalSettings";
"br" -> "maybeLicense";
"br" -> "renderWidgetTree";
"cabalBaseVersions" -> "baseVer";
"cabalBaseVersions" -> "baseVerPvp";
"cabalFile" -> "cabalBaseVersions";
"cabalFile" -> "defaultCabal";
"cabalFile" -> "docFiles";
"cabalFile" -> "intercalateMap";
"cabalFile" -> "packageToModule";
"cabalFile" -> "showGhcVer";
"checkUniqueName" -> "checkUniqueName";
"checkUniqueName" -> "doesExistProjectName";
"checkUniqueName" -> "queryNotNull";
"choose" -> "choose";
"choose" -> "printQuestion";
"choose" -> "prompt";
"chooseYesNo" -> "chooseYesNo";
"chooseYesNo" -> "falseMessage";
"chooseYesNo" -> "printQuestion";
"chooseYesNo" -> "prompt";
"chooseYesNo" -> "trueMessage";
"chooseYesNo" -> "yesOrNo";
"chooseYesNoBool" -> "chooseYesNo";
"cliParser" -> "modifyFooter";
"cliParser" -> "modifyHeader";
"cliParser" -> "summonerP";
"cliParser" -> "versionP";
"configCodec" -> "customPreludeT";
"configCodec" -> "parseGhcVer";
"configCodec" -> "parseLicenseName";
"configCodec" -> "showGhcVer";
"configCodec" -> "sourceCodec";
"configP" -> "configFileP";
"configToSummonKit" -> "decisionToBool";
"configToSummonKit" -> "decisionsToBools";
"configToSummonKit" -> "defaultDescription";
"configToSummonKit" -> "defaultGHC";
"configToSummonKit" -> "isOffline";
"createProjectDirectory" -> "createProjectTemplate";
"createProjectDirectory" -> "showBoldTree";
"createProjectDirectory" -> "traverseTree";
"createProjectTemplate" -> "cabalFile";
"createProjectTemplate" -> "docFiles";
"createProjectTemplate" -> "gitHubFiles";
"createProjectTemplate" -> "haskellFiles";
"createProjectTemplate" -> "insertTree";
"createProjectTemplate" -> "stackFiles";
"ctrlD" -> "getCurrentFocus";
"ctrlD" -> "mkForm";
"customPreludeT" -> "decisionToBool";
"customPreludeT" -> "decisionsToBools";
"customPreludeT" -> "moduleNameValid";
"customPreludeT" -> "packageNameValid";
"customPreludeT" -> "promptDecisionToBool";
"customizeLicense" -> "licenseText";
"decisionsToBools" -> "currentYear";
"decisionsToBools" -> "decisionToBool";
"decisionsToBools" -> "defaultCabal";
"decisionsToBools" -> "defaultConfigFile";
"decisionsToBools" -> "defaultConfigFileContent";
"decisionsToBools" -> "defaultDescription";
"decisionsToBools" -> "defaultEmail";
"decisionsToBools" -> "defaultFullName";
"decisionsToBools" -> "defaultGHC";
"decisionsToBools" -> "defaultLicenseName";
"decisionsToBools" -> "defaultOwner";
"decisionsToBools" -> "defaultStack";
"decisionsToBools" -> "defaultTomlFile";
"defaultConfig" -> "defaultEmail";
"defaultConfig" -> "defaultFullName";
"defaultConfig" -> "defaultLicenseName";
"defaultConfig" -> "defaultOwner";
"defaultConfigFile" -> "defaultTomlFile";
"defaultConfigFileContent" -> "baseVer";
"defaultConfigFileContent" -> "cabalBaseVersions";
"defaultConfigFileContent" -> "defaultEmail";
"defaultConfigFileContent" -> "defaultFullName";
"defaultConfigFileContent" -> "defaultGHC";
"defaultConfigFileContent" -> "defaultLicenseName";
"defaultConfigFileContent" -> "defaultOwner";
"defaultConfigFileContent" -> "ghcTable";
"defaultConfigFileContent" -> "latestLts";
"defaultConfigFileContent" -> "oldGhcs";
"defaultConfigFileContent" -> "parseGhcVer";
"defaultConfigFileContent" -> "quote";
"defaultConfigFileContent" -> "showGhcVer";
"disabledAttr" -> "getCurrentFocus";
"disabledAttr" -> "isActive";
"disabledAttr" -> "mkForm";
"disabledAttr" -> "recreateForm";
"doGithubCommands" -> "checkUniqueName";
"doGithubCommands" -> "choose";
"doGithubCommands" -> "chooseYesNo";
"doGithubCommands" -> "chooseYesNoBool";
"doGithubCommands" -> "doesExistProjectName";
"doGithubCommands" -> "falseMessage";
"doGithubCommands" -> "mkDefaultYesNoPrompt";
"doGithubCommands" -> "query";
"doGithubCommands" -> "queryDef";
"doGithubCommands" -> "queryManyRepeatOnFail";
"doGithubCommands" -> "queryNotNull";
"doGithubCommands" -> "queryWithPredicate";
"doGithubCommands" -> "targetMessage";
"doGithubCommands" -> "targetMessageWithText";
"doGithubCommands" -> "trueMessage";
"docFiles" -> "gitHubFiles";
"doesExistProjectName" -> "projectName";
"drawNew" -> "borderLabel";
"drawNew" -> "formErrorMessages";
"drawNew" -> "getCurrentFocus";
"drawNew" -> "renderWidgetTree";
"fetchLicense" -> "githubLicenseQueryNames";
"fetchLicense" -> "licenseShortDesc";
"fetchLicenseCustom" -> "customizeLicense";
"fetchLicenseCustom" -> "fetchLicense";
"fetchLicenseCustom" -> "licenseText";
"fetchSource" -> "createProjectTemplate";
"fetchSource" -> "isOffline";
"fetchSources" -> "fetchSource";
"fetchSources" -> "pathToTree";
"finalSettings" -> "currentYear";
"finalSettings" -> "fetchLicenseCustom";
"finalSettings" -> "licenseText";
"finalSettings" -> "summonKitToSettings";
"formErrorMessages" -> "borderLabel";
"formErrorMessages" -> "borderName";
"formErrorMessages" -> "hArrange";
"formErrorMessages" -> "label";
"formErrorMessages" -> "listInBorder";
"formErrorMessages" -> "showFormError";
"formErrorMessages" -> "validateKit";
"formatGhcMeta" -> "customizeLicense";
"formatGhcMeta" -> "fetchLicense";
"formatGhcMeta" -> "fetchLicenseCustom";
"formatGhcMeta" -> "githubLicenseQueryNames";
"formatGhcMeta" -> "licenseShortDesc";
"formatGhcMeta" -> "parseLicenseName";
"formatGhcMeta" -> "showLicenseWithDesc";
"generateProject" -> "generateProjectInteractive";
"generateProject" -> "generateProjectNonInteractive";
"generateProjectInteractive" -> "checkUniqueName";
"generateProjectInteractive" -> "choose";
"generateProjectInteractive" -> "currentYear";
"generateProjectInteractive" -> "defaultDescription";
"generateProjectInteractive" -> "defaultGHC";
"generateProjectInteractive" -> "falseMessage";
"generateProjectInteractive" -> "fetchLicenseCustom";
"generateProjectInteractive" -> "fetchSources";
"generateProjectInteractive" -> "initializeProject";
"generateProjectInteractive" -> "intercalateMap";
"generateProjectInteractive" -> "isOffline";
"generateProjectInteractive" -> "licenseShortDesc";
"generateProjectInteractive" -> "licenseText";
"generateProjectInteractive" -> "mkDefaultYesNoPrompt";
"generateProjectInteractive" -> "moduleNameValid";
"generateProjectInteractive" -> "packageNameValid";
"generateProjectInteractive" -> "packageToModule";
"generateProjectInteractive" -> "parseGhcVer";
"generateProjectInteractive" -> "parseLicenseName";
"generateProjectInteractive" -> "projectName";
"generateProjectInteractive" -> "promptDecisionToBool";
"generateProjectInteractive" -> "query";
"generateProjectInteractive" -> "queryDef";
"generateProjectInteractive" -> "queryManyRepeatOnFail";
"generateProjectInteractive" -> "queryWithPredicate";
"generateProjectInteractive" -> "showGhcVer";
"generateProjectInteractive" -> "targetMessageWithText";
"generateProjectInteractive" -> "trueMessage";
"generateProjectNonInteractive" -> "currentYear";
"generateProjectNonInteractive" -> "decisionToBool";
"generateProjectNonInteractive" -> "decisionsToBools";
"generateProjectNonInteractive" -> "defaultDescription";
"generateProjectNonInteractive" -> "defaultGHC";
"generateProjectNonInteractive" -> "doesExistProjectName";
"generateProjectNonInteractive" -> "fetchLicenseCustom";
"generateProjectNonInteractive" -> "fetchSources";
"generateProjectNonInteractive" -> "initializeProject";
"generateProjectNonInteractive" -> "isOffline";
"generateProjectNonInteractive" -> "projectName";
"getCustomLicenseText" -> "currentYear";
"getCustomLicenseText" -> "fetchLicenseCustom";
"getCustomLicenseText" -> "guessConfigFromGit";
"getFinalConfig" -> "defaultConfig";
"getFinalConfig" -> "finalise";
"getFinalConfig" -> "guessConfigFromGit";
"getFinalConfig" -> "readFileConfig";
"ghcTable" -> "formatGhcMeta";
"ghcTable" -> "toGhcMeta";
"ghcVerP" -> "defaultGHC";
"ghcVerP" -> "parseGhcVer";
"gitHubFiles" -> "defaultCabal";
"gitHubFiles" -> "defaultGHC";
"gitHubFiles" -> "defaultStack";
"gitHubFiles" -> "haskellFiles";
"gitHubFiles" -> "oldGhcs";
"gitHubFiles" -> "quote";
"gitHubFiles" -> "showGhcVer";
"groupAllBorders" -> "borderLabel";
"groupBorder" -> "groupAllBorders";
"groupBorder" -> "groupBorderBottom";
"groupBorder" -> "groupBorderMid";
"groupBorder" -> "groupBorderTop";
"groupBorderBottom" -> "bl";
"groupBorderBottom" -> "br";
"groupBorderTop" -> "borderName";
"groupBorderTop" -> "tl";
"groupBorderTop" -> "tr";
"guessConfigFromGit" -> "defaultConfig";
"handleAutofill" -> "getCurrentFocus";
"handleAutofill" -> "mkForm";
"handleAutofill" -> "packageToModule";
"haskellFiles" -> "packageToModule";
"haskellFiles" -> "quote";
"haskellFiles" -> "scriptFile";
"initializeProject" -> "createProjectDirectory";
"initializeProject" -> "doGithubCommands";
"insertTree" -> "insertTree";
"isOffline" -> "falseMessage";
"isOffline" -> "generateProject";
"isOffline" -> "generateProjectInteractive";
"isOffline" -> "generateProjectNonInteractive";
"isOffline" -> "initializeProject";
"isOffline" -> "mkDefaultYesNoPrompt";
"isOffline" -> "query";
"isOffline" -> "queryDef";
"isOffline" -> "queryManyRepeatOnFail";
"isOffline" -> "queryWithPredicate";
"isOffline" -> "targetMessageWithText";
"isOffline" -> "trueMessage";
"listInBorder" -> "borderLabel";
"loadFileConfig" -> "configCodec";
"loadFileConfig" -> "customPreludeT";
"matchLocal" -> "showSource";
"matchRaw" -> "showSource";
"matchUrl" -> "showSource";
"mkForm" -> "activeCheckboxField";
"mkForm" -> "borderLabel";
"mkForm" -> "checkboxField";
"mkForm" -> "defaultGHC";
"mkForm" -> "groupBorder";
"mkForm" -> "hArrange";
"mkForm" -> "intercalateMap";
"mkForm" -> "isActive";
"mkForm" -> "label";
"mkForm" -> "maybeLicense";
"mkForm" -> "parseGhcVer";
"mkForm" -> "radioField";
"mkForm" -> "showGhcVer";
"mkForm" -> "strField";
"mkSimpleApp" -> "theMap";
"modifyFooter" -> "artFooter";
"modifyHeader" -> "artHeader";
"newP" -> "cabalP";
"newP" -> "configFileP";
"newP" -> "connectModeP";
"newP" -> "ignoreFileP";
"newP" -> "interactivityP";
"newP" -> "isOffline";
"newP" -> "noUploadP";
"newP" -> "preludeModP";
"newP" -> "preludePackP";
"newP" -> "stackP";
"newP" -> "withP";
"newP" -> "withoutP";
"packageToModule" -> "headToUpper";
"packageToModule" -> "tconcatMap";
"parseGhcVer" -> "showGhcVer";
"parseTool" -> "fetchSource";
"parseTool" -> "fetchSources";
"parseTool" -> "showTool";
"parseTool" -> "sourceCodec";
"printQuestion" -> "boldDefault";
"printQuestion" -> "putStrFlush";
"projectDescNewLine" -> "getCurrentFocus";
"projectDescNewLine" -> "mkForm";
"projectName" -> "getCustomLicenseText";
"projectName" -> "getFinalConfig";
"projectName" -> "guessConfigFromGit";
"projectName" -> "loadFileConfig";
"projectName" -> "projectName";
"projectName" -> "runConfig";
"projectName" -> "runScript";
"projectName" -> "showLicenseWithDesc";
"projectName" -> "summon";
"projectName" -> "summonCli";
"prompt" -> "putStrFlush";
"promptDecisionToBool" -> "chooseYesNoBool";
"promptDecisionToBool" -> "falseMessage";
"promptDecisionToBool" -> "trueMessage";
"query" -> "prompt";
"queryDef" -> "boldDefault";
"queryDef" -> "prompt";
"queryManyRepeatOnFail" -> "intercalateMap";
"queryManyRepeatOnFail" -> "prompt";
"queryManyRepeatOnFail" -> "quote";
"queryNotNull" -> "prompt";
"queryNotNull" -> "queryNotNull";
"queryWithPredicate" -> "printQuestion";
"queryWithPredicate" -> "prompt";
"quote" -> "insertTree";
"quote" -> "pathToTree";
"quote" -> "showBoldTree";
"quote" -> "showTree";
"quote" -> "traverseTree";
"readFileConfig" -> "defaultConfigFile";
"readFileConfig" -> "loadFileConfig";
"recreateForm" -> "getCurrentFocus";
"recreateForm" -> "groupBorder";
"recreateForm" -> "mkForm";
"renderCheckbox" -> "disabledAttr";
"renderCheckbox" -> "label";
"renderWidgetTree" -> "createProjectTemplate";
"renderWidgetTree" -> "ctrlD";
"renderWidgetTree" -> "formErrorMessages";
"renderWidgetTree" -> "handleAutofill";
"renderWidgetTree" -> "projectDescNewLine";
"renderWidgetTree" -> "showTree";
"renderWidgetTree" -> "summonFormValidation";
"renderWidgetTree" -> "summonKitToSettings";
"runCliCommand" -> "runConfig";
"runCliCommand" -> "runNew";
"runCliCommand" -> "runScript";
"runCliCommand" -> "runShow";
"runConfig" -> "defaultConfigFile";
"runConfig" -> "defaultConfigFileContent";
"runNew" -> "generateProject";
"runNew" -> "getFinalConfig";
"runScript" -> "scriptFile";
"runShow" -> "getCustomLicenseText";
"runShow" -> "ghcTable";
"runShow" -> "parseLicenseName";
"runShow" -> "showLicenseWithDesc";
"runSimpleApp" -> "mkSimpleApp";
"runSimpleApp" -> "runApp";
"runTuiCommand" -> "runConfig";
"runTuiCommand" -> "runScript";
"runTuiCommand" -> "summonTuiNew";
"runTuiCommand" -> "summonTuiShow";
"runTuiNew" -> "appNew";
"runTuiNew" -> "mkForm";
"runTuiNew" -> "runApp";
"runTuiNew" -> "summonFormValidation";
"runTuiShowAllLicenses" -> "listInBorder";
"runTuiShowAllLicenses" -> "runSimpleApp";
"runTuiShowAllLicenses" -> "showLicenseWithDesc";
"runTuiShowGhcVersions" -> "ghcTable";
"runTuiShowGhcVersions" -> "listInBorder";
"runTuiShowGhcVersions" -> "runSimpleApp";
"runTuiShowLicense" -> "borderLabel";
"runTuiShowLicense" -> "getCustomLicenseText";
"runTuiShowLicense" -> "parseLicenseName";
"runTuiShowLicense" -> "runApp";
"runTuiShowLicense" -> "theMap";
"scriptFile" -> "baseVer";
"scriptFile" -> "latestLts";
"scriptFile" -> "quote";
"scriptFile" -> "stackFiles";
"scriptP" -> "ghcVerP";
"scriptP" -> "toolArgP";
"showBoldTree" -> "showTree";
"showLicenseWithDesc" -> "isNonInteractive";
"showLicenseWithDesc" -> "isOffline";
"showLicenseWithDesc" -> "licenseShortDesc";
"showP" -> "licenseText";
"showTree" -> "treeFp";
"sourceCodec" -> "matchLocal";
"sourceCodec" -> "matchRaw";
"sourceCodec" -> "matchUrl";
"stackFiles" -> "defaultGHC";
"stackFiles" -> "headToUpper";
"stackFiles" -> "intercalateMap";
"stackFiles" -> "latestLts";
"stackFiles" -> "moduleNameValid";
"stackFiles" -> "packageNameValid";
"stackFiles" -> "packageToModule";
"stackFiles" -> "quote";
"stackFiles" -> "showGhcVer";
"summon" -> "cliParser";
"summonCli" -> "runCliCommand";
"summonCli" -> "summon";
"summonFormValidation" -> "errorToInvalidFields";
"summonFormValidation" -> "validateKit";
"summonKitToSettings" -> "defaultGHC";
"summonTui" -> "runTuiCommand";
"summonTui" -> "summon";
"summonTuiNew" -> "configToSummonKit";
"summonTuiNew" -> "defaultConfigFile";
"summonTuiNew" -> "fetchSources";
"summonTuiNew" -> "finalSettings";
"summonTuiNew" -> "generateProjectNonInteractive";
"summonTuiNew" -> "getFinalConfig";
"summonTuiNew" -> "initializeProject";
"summonTuiNew" -> "isNonInteractive";
"summonTuiNew" -> "runTuiNew";
"summonTuiShow" -> "runTuiShowAllLicenses";
"summonTuiShow" -> "runTuiShowGhcVersions";
"summonTuiShow" -> "runTuiShowLicense";
"summonerP" -> "configP";
"summonerP" -> "newP";
"summonerP" -> "scriptP";
"summonerP" -> "showP";
"targetMessage" -> "targetMessage";
"targetMessage" -> "targetMessageWithText";
"targetMessageWithText" -> "headToUpper";
"targetsP" -> "appVeyorP";
"targetsP" -> "benchmarkP";
"targetsP" -> "execP";
"targetsP" -> "ghActionsP";
"targetsP" -> "githubP";
"targetsP" -> "libraryP";
"targetsP" -> "privateP";
"targetsP" -> "testP";
"targetsP" -> "travisP";
"theMap" -> "activeCheckboxField";
"theMap" -> "checkboxField";
"theMap" -> "disabledAttr";
"theMap" -> "radioField";
"theMap" -> "strField";
"toGhcMeta" -> "baseVer";
"toGhcMeta" -> "latestLts";
"toGhcMeta" -> "showGhcVer";
"toolArgP" -> "parseTool";
"traverseTree" -> "traverseTree";
"treeFp" -> "getFinalConfig";
"treeFp" -> "runConfig";
"treeFp" -> "runScript";
"treeFp" -> "summon";
"treeFp" -> "summonFormValidation";
"treeFp" -> "summonTui";
"trueMessage" -> "targetMessage";
"validateKit" -> "moduleNameValid";
"validateKit" -> "packageNameValid";
"versionP" -> "summonerVersion";
"withP" -> "targetsP";
"withoutP" -> "targetsP";
}
